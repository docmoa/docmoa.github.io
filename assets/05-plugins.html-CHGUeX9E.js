import{_ as e}from"./1564450122219-xixIqXDz.js";import{_ as i}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as n,c as a,h as o}from"./app-DVMlqOhY.js";const t={},r=o('<h1 id="_5-plugins" tabindex="-1"><a class="header-anchor" href="#_5-plugins"><span>5. Plugins</span></a></h1><p>Jenkins가 유용한 툴인 이유중 하나는 방대한 양의 플러그인 입니다. Jenkins의 기능을 확장시키고, 관리, 빌드 정책 등을 확장 시켜주고, 타 서비스와의 연계를 쉽게 가능하도록 합니다.</p><p><a href="https://plugins.jenkins.io/" target="_blank" rel="noopener noreferrer">Plugin Index</a></p><figure><img src="'+e+`" alt="1564450122219" tabindex="0" loading="lazy"><figcaption>1564450122219</figcaption></figure><h2 id="_5-1-adding-plugins-via-plugin-manager" tabindex="-1"><a class="header-anchor" href="#_5-1-adding-plugins-via-plugin-manager"><span>5.1 Adding plugins via plugin manager</span></a></h2><p>Jenkins는 온라인에 연결된 plugin을 검색, 설치할 수 있는 <code>플러그인 관리</code>기능을 갖고 있습니다. 좌측 메뉴에서 <code>Jenkins 관리</code>를 클릭하면 <code>플러그인 관리</code> 링크를 통하여 해당 기능에 접근할 수 있습니다.</p><ul><li>업데이트된 플러그인 목록 : 설치된 플러그인 중 업데이트가 있는 플러그인 목록이 나타납니다.</li><li>설치 가능 : 아직 해당 Jenkins에 설치되어있지 않은 플러그인 목록이 나타납니다.</li><li>설치된 플러그인 목록 : 해당 Jenkins에 설치되어있는 플러그인이 나타납니다. 필수적이지 않은 플러그인인 경우 삭제도 해당 탭에서 가능합니다.</li><li>고급 : 플러그인 서버에 접속할 수 있도록 별도의 프록시를 설정하거나, <code>.hpi</code>확장자를 갖는 플러그인을 설치하거나 업데이트 사이트를 지정할 수 있습니다.</li></ul><p>각 플러그인 이름을 클릭하면 플러그인 정보를 확인할 수 있는 <code>plugins.jenkins.io</code> 사이트로 이동하여 정보를 보여줍니다. 사용방법은 우측에 <code>wiki</code>링크를 클릭합니다. 대략적인 UI나 사용방법은 <code>wiki.jenkins.io</code>에서 제공합니다.</p><h2 id="_5-2-using-shared-libraries" tabindex="-1"><a class="header-anchor" href="#_5-2-using-shared-libraries"><span>5.2 Using shared libraries</span></a></h2><p>Jenkins Pipeline의 Shared libraries에 대한 상세 내용은 다음 링크를 참고합니다. <a href="https://jenkins.io/doc/book/pipeline/shared-libraries/" target="_blank" rel="noopener noreferrer">https://jenkins.io/doc/book/pipeline/shared-libraries/</a></p><p>이번 실습을 진행하기전에 GitHub에서 <a href="https://github.com/Great-Stone/evenOdd" target="_blank" rel="noopener noreferrer">https://github.com/Great-Stone/evenOdd</a> repository를 본인 계정의 GitHub에 Fork 하여 진행합니다.</p><p>소스의 <code>var</code> 디렉토리에는 Pipeline에서 사용하는 Shared Library들이 들어있습니다. groovy 스크립트로 되어있으며 Pipeline을 구성한 <code>jenkinsfile</code>에서 이를 사용합니다.</p><p><code>vars/evenOdd.groovy</code>를 호출하고 값을 받아오는 형태를 갖고, evenOdd.groovy에서 사용하는 <code>log.info</code>와 <code>log.warning</code>은 <code>vars/log.groovy</code>에 구현되어있습니다.</p><p>다음과 같이 Jenkins에 설정을 수행합니다.</p><ol><li><code>Jenkins 관리</code>클릭 후 <code>시스템 설정</code>을 선택합니다.</li><li><code>Global Pipeline Libraries</code> 의 추가 버튼을 클릭하여 새로운 구성을 추가합니다. <ul><li>Name : evenOdd (어플리케이션 이름과 동일하게 하는 것을 추천합니다.)</li><li>Default version : master</li><li>Retrieval method &gt; Modern SCM : 활성화 하면 아래 <code>Source Code Management</code> 항목이 추가됩니다.</li><li>SCM의 <code>GitHub</code>를 클릭하여 내용을 채웁니다. <ul><li>Credentials : 이전 실습 내용에서 생성한 Credential을 선택합니다.</li><li>Owner : GitHub Owner를 입력합니다. <code>https://github.com/Great-Stone/evenOdd</code>인 경우 <code>Great-Stone</code>이 Owner가 됩니다.</li><li>Repository : 위정보가 맞는 경우 자동으로 목록이 나타납니다. evenOdd를 선택합니다.</li></ul></li><li>Load implicitly : SCM 정보를 기입하고 다시 위쪽 <code>Library</code>에 있는 <code>Load implicitly</code>를 활성화 합니다.</li></ul></li></ol><p>Shared Libraries가 준비가 되면 <code>Pipeline</code> 타입의 Item을 생성하고 (e.g. 05-02.UsingSharedLibraries) Pipeline 설정을 추가합니다.</p><ul><li>Definition : Pipeline script from SCM</li><li>SCM : Git</li><li>Repositories <ul><li>Repository URL : <a href="https://github.com/Great-Stone/evenOdd.git" target="_blank" rel="noopener noreferrer">https://github.com/Great-Stone/evenOdd.git</a></li></ul></li></ul><p>저장 후 <code>Build Now</code>를 클릭하여 빌드를 수행합니다. 빌드의 결과로는 2 단계로 수행되는데 1단계는 <code>Declarative: Checkout SCM</code>으로 SCM으로부터 소스를 받아 준비하는 단계이고, 2단계는 <code>jenkinsfile</code>을 수행하는 단계입니다. <code>vars/evenOdd.goovy</code> 스크립트에는 stage가 두개 있으나 해당 Pipeline 을 호출하는 값에 따라 하나의 stage만을 수행하도록 되어있어서 하나의 stage가 수행되었습니다.</p><div class="language-groovy" data-highlighter="prismjs" data-ext="groovy" data-title="groovy"><pre class="language-groovy"><code><span class="line"><span class="token comment">// Jenkinsfile</span></span>
<span class="line"><span class="token comment">//@Library(&#39;evenOdd&#39;) _</span></span>
<span class="line"></span>
<span class="line"><span class="token function">evenOdd</span><span class="token punctuation">(</span>currentBuild<span class="token punctuation">.</span><span class="token function">getNumber</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre></div><p><code>currentBuild.getNumber()</code>는 현재 생성된 Pipeline Item의 빌드 숫자에 따라 값을 <code>evenOdd(빌드 숫자)</code>형태로 호출하게 됩니다.</p><p>Jenkins shared libraries를 사용하는 가장 좋은 예는 재사용성 있는 Groovy 함수를 타 작업자와 공유하는 것 입니다. 빌드의 상태는 다른 파이프 라인 단계로 계속할 것인지 결정하는 데 사용할 수도 있습니다.</p><div class="hint-container warning"><p class="hint-container-title">경고</p><p>해당 설정은 모든 빌드에 영향을 주기 때문에 타 작업을 위해 추가된 <strong>Global Pipeline Libraries</strong>의 <strong>Library</strong>를 삭제하여 진행합니다.</p></div>`,22),s=[r];function l(p,d){return n(),a("div",null,s)}const h=i(t,[["render",l],["__file","05-plugins.html.vue"]]),m=JSON.parse('{"path":"/05-Software/Jenkins/pipeline101/05-plugins.html","title":"5. Plugins","lang":"ko-KR","frontmatter":{"description":"jenkins 101","tag":["cicd","jenkins"],"head":[["meta",{"property":"og:url","content":"https://docmoa.github.io/05-Software/Jenkins/pipeline101/05-plugins.html"}],["meta",{"property":"og:site_name","content":"docmoa"}],["meta",{"property":"og:title","content":"5. Plugins"}],["meta",{"property":"og:description","content":"jenkins 101"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"ko-KR"}],["meta",{"property":"og:updated_time","content":"2023-09-18T13:12:54.000Z"}],["meta",{"property":"article:tag","content":"cicd"}],["meta",{"property":"article:tag","content":"jenkins"}],["meta",{"property":"article:modified_time","content":"2023-09-18T13:12:54.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"5. Plugins\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2023-09-18T13:12:54.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"5.1 Adding plugins via plugin manager","slug":"_5-1-adding-plugins-via-plugin-manager","link":"#_5-1-adding-plugins-via-plugin-manager","children":[]},{"level":2,"title":"5.2 Using shared libraries","slug":"_5-2-using-shared-libraries","link":"#_5-2-using-shared-libraries","children":[]}],"git":{"createdTime":1640327880000,"updatedTime":1695042774000,"contributors":[{"name":"Administrator","email":"admin@example.com","commits":1},{"name":"Great-Stone","email":"hahohh@gmail.com","commits":1}]},"readingTime":{"minutes":3.27,"words":196},"filePathRelative":"05-Software/Jenkins/pipeline101/05-plugins.md","localizedDate":"2021년 12월 24일","excerpt":"\\n<p>Jenkins가 유용한 툴인 이유중 하나는 방대한 양의 플러그인 입니다. Jenkins의 기능을 확장시키고, 관리, 빌드 정책 등을 확장 시켜주고, 타 서비스와의 연계를 쉽게 가능하도록 합니다.</p>\\n<p><a href=\\"https://plugins.jenkins.io/\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">Plugin Index</a></p>\\n<figure><figcaption>1564450122219</figcaption></figure>\\n<h2>5.1 Adding plugins via plugin manager</h2>"}');export{h as comp,m as data};
