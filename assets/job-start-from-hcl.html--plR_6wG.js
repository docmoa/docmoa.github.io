import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as e,o as p,c as t,b as l,h as s}from"./app-DVMlqOhY.js";const o="/assets/run-job-ui-DYE2TSWA.png",c={},i=s(`<h1 id="pass-hcl-to-api" tabindex="-1"><a class="header-anchor" href="#pass-hcl-to-api"><span>Pass HCL to API</span></a></h1><p>HCL로 작성된 Job의 경우 Nomad CLI 또는 UI 접속이 가능하다면 바로 적용 가능하다.</p><details class="hint-container details"><summary>HCL Job Sample (2048.hcl)</summary><div class="language-hcl line-numbers-mode" data-highlighter="prismjs" data-ext="hcl" data-title="hcl"><pre class="language-hcl"><code><span class="line">job <span class="token string">&quot;2048-game&quot;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token property">datacenters</span> <span class="token punctuation">=</span> <span class="token punctuation">[</span><span class="token string">&quot;dc1&quot;</span><span class="token punctuation">]</span></span>
<span class="line">  <span class="token property">type</span>        <span class="token punctuation">=</span> <span class="token string">&quot;service&quot;</span></span>
<span class="line">  group <span class="token string">&quot;game&quot;</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token property">count</span> <span class="token punctuation">=</span> <span class="token number">1</span> <span class="token comment"># number of instances</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">network</span> <span class="token punctuation">{</span></span>
<span class="line">      port <span class="token string">&quot;http&quot;</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token property">static</span> <span class="token punctuation">=</span> <span class="token number">80</span></span>
<span class="line">      <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    task <span class="token string">&quot;2048&quot;</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token property">driver</span> <span class="token punctuation">=</span> <span class="token string">&quot;docker&quot;</span></span>
<span class="line"></span>
<span class="line">      <span class="token keyword">config</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token property">image</span> <span class="token punctuation">=</span> <span class="token string">&quot;alexwhen/docker-2048&quot;</span></span>
<span class="line"></span>
<span class="line">        <span class="token property">ports</span> <span class="token punctuation">=</span> <span class="token punctuation">[</span></span>
<span class="line">          <span class="token string">&quot;http&quot;</span></span>
<span class="line">        <span class="token punctuation">]</span></span>
<span class="line"></span>
<span class="line">      <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">      <span class="token keyword">resources</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token property">cpu</span>    <span class="token punctuation">=</span> <span class="token number">500</span> <span class="token comment"># 500 MHz</span></span>
<span class="line">        <span class="token property">memory</span> <span class="token punctuation">=</span> <span class="token number">256</span> <span class="token comment"># 256MB</span></span>
<span class="line">      <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><div class="language-bash" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="line">nomad job run <span class="token number">2048</span>.hcl</span>
<span class="line"></span></code></pre></div><figure><img src="`+o+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>하지만 CLI/UI를 사용할 수 없는 환경에서 API를 사용하여 Job을 실행해야하는 경우, 특히 CICD Pipeline구성에서 API를 사용하여 Job을 실행해야하는 경우 HCL을 Json 형식으로 변경해야하는 경우가 있다.</p><h2 id="hcl-parse-to-json" tabindex="-1"><a class="header-anchor" href="#hcl-parse-to-json"><span>HCL parse to Json</span></a></h2><p>HCL을 Json으로 변경하는 방식의 첫번째는 CLI를 사용하는 방식이다.</p><div class="language-bash" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="line">nomad job run <span class="token parameter variable">-output</span> <span class="token number">2048</span>.hcl <span class="token operator">&gt;</span> payload.json</span>
<span class="line"></span></code></pre></div><p>하지만 이 경우 <code>-output</code>을 입력하지 않는 경우 Job이 실행되는 실수의 여지가 있고, CLI가 없다면 사용 불가하다.</p><p>다음은 API를 사용하는 방식이다.</p><blockquote><p>Parsh Job : <a href="https://developer.hashicorp.com/nomad/api-docs/jobs#parse-job" target="_blank" rel="noopener noreferrer">https://developer.hashicorp.com/nomad/api-docs/jobs#parse-job</a></p></blockquote><p>문서의 내용처럼 HCL을 한줄로 변경하여 API로 요청하면 Json으로 형태를 출력해준다.</p><h3 id="sample-payload" tabindex="-1"><a class="header-anchor" href="#sample-payload"><span>Sample Payload</span></a></h3><div class="language-json" data-highlighter="prismjs" data-ext="json" data-title="json"><pre class="language-json"><code><span class="line"><span class="token punctuation">{</span></span>
<span class="line">  <span class="token property">&quot;JobHCL&quot;</span><span class="token operator">:</span> <span class="token string">&quot;job \\&quot;example\\&quot; {\\n  type = \\&quot;service\\&quot;\\n  group \\&quot;cache\\&quot; {}\\n}&quot;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token property">&quot;Canonicalize&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre></div><p>HCL을 한줄로 변경하기 까다롭거나 별도의 도구가 없다면 <code>jq</code>를 활용한 방식도 가이드하고 있다.</p><div class="language-bash" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="line">jq <span class="token parameter variable">-Rsc</span> <span class="token string">&#39;{ JobHCL: ., Canonicalize: true }&#39;</span> example.nomad.hcl <span class="token operator">&gt;</span> payload.json</span>
<span class="line"></span></code></pre></div><h3 id="sample-request" tabindex="-1"><a class="header-anchor" href="#sample-request"><span>Sample Request</span></a></h3><p><code>/v1/jobs/parse</code> 엔드포인트로 <code>payload.json</code> 데이터를 담아 요청한다.</p><div class="language-bash" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="line"><span class="token function">curl</span> <span class="token punctuation">\\</span></span>
<span class="line">    <span class="token parameter variable">--request</span> POST <span class="token punctuation">\\</span></span>
<span class="line">    <span class="token parameter variable">--data</span> @payload.json <span class="token punctuation">\\</span></span>
<span class="line">    https://localhost:4646/v1/jobs/parse</span>
<span class="line"></span></code></pre></div><h3 id="sample-response" tabindex="-1"><a class="header-anchor" href="#sample-response"><span>Sample Response</span></a></h3><p>Json으로 변경된 값을 반환한다.</p><div class="language-json" data-highlighter="prismjs" data-ext="json" data-title="json"><pre class="language-json"><code><span class="line"><span class="token punctuation">{</span></span>
<span class="line">  <span class="token property">&quot;AllAtOnce&quot;</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token property">&quot;Constraints&quot;</span><span class="token operator">:</span> <span class="token null keyword">null</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token property">&quot;Affinities&quot;</span><span class="token operator">:</span> <span class="token null keyword">null</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token property">&quot;CreateIndex&quot;</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token property">&quot;Datacenters&quot;</span><span class="token operator">:</span> <span class="token null keyword">null</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token property">&quot;ID&quot;</span><span class="token operator">:</span> <span class="token string">&quot;my-job&quot;</span><span class="token punctuation">,</span></span>
<span class="line"></span></code></pre></div><h2 id="hcl로-작성된-job을-api로-실행하기" tabindex="-1"><a class="header-anchor" href="#hcl로-작성된-job을-api로-실행하기"><span>HCL로 작성된 Job을 API로 실행하기</span></a></h2><p>API가 제공하는 Json Parse를 사용, 다음과 같은 순서로 Job을 실행할 수 있다.</p>`,25),r=s(`<h3 id="_1-json으로-생성할-hcl을-hcl-json으로-생성" tabindex="-1"><a class="header-anchor" href="#_1-json으로-생성할-hcl을-hcl-json으로-생성"><span>1. Json으로 생성할 HCL을 <code>hcl.json</code>으로 생성</span></a></h3><div class="language-bash" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="line">jq <span class="token parameter variable">-Rsc</span> <span class="token string">&#39;{ JobHCL: ., Canonicalize: true }&#39;</span> <span class="token number">2048</span>.hcl <span class="token operator">&gt;</span> hcl.json</span>
<span class="line"></span></code></pre></div><h3 id="_2-v1-jobs-parse-엔드포인트로-요청하여-json형태로-파싱" tabindex="-1"><a class="header-anchor" href="#_2-v1-jobs-parse-엔드포인트로-요청하여-json형태로-파싱"><span>2. <code>/v1/jobs/parse</code> 엔드포인트로 요청하여 Json형태로 파싱</span></a></h3><div class="language-bash" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="line"><span class="token function">curl</span> <span class="token parameter variable">--request</span> POST <span class="token parameter variable">--data</span> @hcl.json http://127.0.0.1:4646/v1/jobs/parse</span>
<span class="line"></span></code></pre></div><p>한가지 문제는, Job의 Json 정의에는 <code>Job</code> 이라는 키값이 최상위에 존재해야하는데, 반환되는 결과에는 <code>Job</code> 하위부터 출력된다. 따라서 <code>jq</code>를 사용하여 다음과 같이 출력을 수정하여 저장한다.</p><div class="language-bash" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="line"><span class="token function">curl</span> <span class="token parameter variable">--request</span> POST <span class="token parameter variable">--data</span> @hcl.json http://127.0.0.1:4646/v1/jobs/parse <span class="token operator">|</span> jq <span class="token parameter variable">-s</span> <span class="token string">&#39;{ Job: .[] }&#39;</span> <span class="token operator">&gt;</span> <span class="token number">2048</span>.json</span>
<span class="line"></span></code></pre></div><h3 id="_3-생성된-json으로-job-실행" tabindex="-1"><a class="header-anchor" href="#_3-생성된-json으로-job-실행"><span>3. 생성된 json으로 Job 실행</span></a></h3><div class="language-bash" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="line"><span class="token function">curl</span> <span class="token parameter variable">--request</span> POST <span class="token parameter variable">--data</span> @2048.json http://127.0.0.1:4646/v1/jobs</span>
<span class="line"></span></code></pre></div><hr><p>위 과정을 다음과 같이 한줄로 정의할 수 있다.</p><div class="language-bash" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="line">jq <span class="token parameter variable">-Rsc</span> <span class="token string">&#39;{ JobHCL: ., Canonicalize: true }&#39;</span> <span class="token number">2048</span>.hcl <span class="token operator">|</span> <span class="token punctuation">\\</span></span>
<span class="line"><span class="token function">curl</span> <span class="token parameter variable">--request</span> POST <span class="token parameter variable">--data</span> @- http://127.0.0.1:4646/v1/jobs/parse <span class="token operator">|</span> <span class="token punctuation">\\</span></span>
<span class="line">jq <span class="token parameter variable">-s</span> <span class="token string">&#39;{ Job: .[] }&#39;</span> - <span class="token operator">|</span> <span class="token punctuation">\\</span></span>
<span class="line"><span class="token function">curl</span> <span class="token parameter variable">--request</span> POST <span class="token parameter variable">--data</span> @- http://127.0.0.1:4646/v1/jobs</span>
<span class="line"></span></code></pre></div>`,11);function u(d,k){const a=e("Mermaid");return p(),t("div",null,[i,l(a,{id:"mermaid-65",code:"eJwrTi0sTc1LTnXJTEwvSszlUgACn/zkxBxdOzu//NzEFAXHAE8rBQ9nH4WAxKLiVLACuIQuUBVYtZWCV3F+HpJuTaiwY0qKQkh+gYJPallqjkK1gld+kkItLltcK1KTS0tSwYrKM0sywIYqpGXmpHIBANakM1A="}),r])}const b=n(c,[["render",u],["__file","job-start-from-hcl.html.vue"]]),g=JSON.parse('{"path":"/04-HashiCorp/07-Nomad/04-UseCase/job-start-from-hcl.html","title":"Pass HCL to API","lang":"ko-KR","frontmatter":{"description":"Passing Jobs defined in HCL to API (Execute Job written in HCL in Nomad Job Run API)","tag":["Nomad","API","HCL"],"head":[["meta",{"property":"og:url","content":"https://docmoa.github.io/04-HashiCorp/07-Nomad/04-UseCase/job-start-from-hcl.html"}],["meta",{"property":"og:site_name","content":"docmoa"}],["meta",{"property":"og:title","content":"Pass HCL to API"}],["meta",{"property":"og:description","content":"Passing Jobs defined in HCL to API (Execute Job written in HCL in Nomad Job Run API)"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"ko-KR"}],["meta",{"property":"og:updated_time","content":"2023-09-18T13:12:54.000Z"}],["meta",{"property":"article:tag","content":"Nomad"}],["meta",{"property":"article:tag","content":"API"}],["meta",{"property":"article:tag","content":"HCL"}],["meta",{"property":"article:modified_time","content":"2023-09-18T13:12:54.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Pass HCL to API\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2023-09-18T13:12:54.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"HCL parse to Json","slug":"hcl-parse-to-json","link":"#hcl-parse-to-json","children":[{"level":3,"title":"Sample Payload","slug":"sample-payload","link":"#sample-payload","children":[]},{"level":3,"title":"Sample Request","slug":"sample-request","link":"#sample-request","children":[]},{"level":3,"title":"Sample Response","slug":"sample-response","link":"#sample-response","children":[]}]},{"level":2,"title":"HCL로 작성된 Job을 API로 실행하기","slug":"hcl로-작성된-job을-api로-실행하기","link":"#hcl로-작성된-job을-api로-실행하기","children":[{"level":3,"title":"1. Json으로 생성할 HCL을 hcl.json으로 생성","slug":"_1-json으로-생성할-hcl을-hcl-json으로-생성","link":"#_1-json으로-생성할-hcl을-hcl-json으로-생성","children":[]},{"level":3,"title":"2. /v1/jobs/parse 엔드포인트로 요청하여 Json형태로 파싱","slug":"_2-v1-jobs-parse-엔드포인트로-요청하여-json형태로-파싱","link":"#_2-v1-jobs-parse-엔드포인트로-요청하여-json형태로-파싱","children":[]},{"level":3,"title":"3. 생성된 json으로 Job 실행","slug":"_3-생성된-json으로-job-실행","link":"#_3-생성된-json으로-job-실행","children":[]}]}],"git":{"createdTime":1677219870000,"updatedTime":1695042774000,"contributors":[{"name":"Great-Stone","email":"hahohh@gmail.com","commits":4}]},"readingTime":{"minutes":5.07,"words":304},"filePathRelative":"04-HashiCorp/07-Nomad/04-UseCase/job-start-from-hcl.md","localizedDate":"2023년 2월 24일","excerpt":"\\n<p>HCL로 작성된 Job의 경우 Nomad CLI 또는 UI 접속이 가능하다면 바로 적용 가능하다.</p>\\n<details class=\\"hint-container details\\"><summary>HCL Job Sample (2048.hcl)</summary>\\n<div class=\\"language-hcl\\" data-highlighter=\\"prismjs\\" data-ext=\\"hcl\\" data-title=\\"hcl\\"><pre class=\\"language-hcl\\"><code><span class=\\"line\\">job <span class=\\"token string\\">\\"2048-game\\"</span> <span class=\\"token punctuation\\">{</span></span>\\n<span class=\\"line\\">  <span class=\\"token property\\">datacenters</span> <span class=\\"token punctuation\\">=</span> <span class=\\"token punctuation\\">[</span><span class=\\"token string\\">\\"dc1\\"</span><span class=\\"token punctuation\\">]</span></span>\\n<span class=\\"line\\">  <span class=\\"token property\\">type</span>        <span class=\\"token punctuation\\">=</span> <span class=\\"token string\\">\\"service\\"</span></span>\\n<span class=\\"line\\">  group <span class=\\"token string\\">\\"game\\"</span> <span class=\\"token punctuation\\">{</span></span>\\n<span class=\\"line\\">    <span class=\\"token property\\">count</span> <span class=\\"token punctuation\\">=</span> <span class=\\"token number\\">1</span> <span class=\\"token comment\\"># number of instances</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\">    <span class=\\"token keyword\\">network</span> <span class=\\"token punctuation\\">{</span></span>\\n<span class=\\"line\\">      port <span class=\\"token string\\">\\"http\\"</span> <span class=\\"token punctuation\\">{</span></span>\\n<span class=\\"line\\">        <span class=\\"token property\\">static</span> <span class=\\"token punctuation\\">=</span> <span class=\\"token number\\">80</span></span>\\n<span class=\\"line\\">      <span class=\\"token punctuation\\">}</span></span>\\n<span class=\\"line\\">    <span class=\\"token punctuation\\">}</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\">    task <span class=\\"token string\\">\\"2048\\"</span> <span class=\\"token punctuation\\">{</span></span>\\n<span class=\\"line\\">      <span class=\\"token property\\">driver</span> <span class=\\"token punctuation\\">=</span> <span class=\\"token string\\">\\"docker\\"</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\">      <span class=\\"token keyword\\">config</span> <span class=\\"token punctuation\\">{</span></span>\\n<span class=\\"line\\">        <span class=\\"token property\\">image</span> <span class=\\"token punctuation\\">=</span> <span class=\\"token string\\">\\"alexwhen/docker-2048\\"</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\">        <span class=\\"token property\\">ports</span> <span class=\\"token punctuation\\">=</span> <span class=\\"token punctuation\\">[</span></span>\\n<span class=\\"line\\">          <span class=\\"token string\\">\\"http\\"</span></span>\\n<span class=\\"line\\">        <span class=\\"token punctuation\\">]</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\">      <span class=\\"token punctuation\\">}</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\">      <span class=\\"token keyword\\">resources</span> <span class=\\"token punctuation\\">{</span></span>\\n<span class=\\"line\\">        <span class=\\"token property\\">cpu</span>    <span class=\\"token punctuation\\">=</span> <span class=\\"token number\\">500</span> <span class=\\"token comment\\"># 500 MHz</span></span>\\n<span class=\\"line\\">        <span class=\\"token property\\">memory</span> <span class=\\"token punctuation\\">=</span> <span class=\\"token number\\">256</span> <span class=\\"token comment\\"># 256MB</span></span>\\n<span class=\\"line\\">      <span class=\\"token punctuation\\">}</span></span>\\n<span class=\\"line\\">    <span class=\\"token punctuation\\">}</span></span>\\n<span class=\\"line\\">  <span class=\\"token punctuation\\">}</span></span>\\n<span class=\\"line\\"><span class=\\"token punctuation\\">}</span></span>\\n<span class=\\"line\\"></span></code></pre></div></details>"}');export{b as comp,g as data};
