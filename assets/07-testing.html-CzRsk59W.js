import{_ as n,a as s}from"./1564471729123-DnEyDLm_.js";import{_ as a}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as e,c as p,h as i}from"./app-DVMlqOhY.js";const t={},l=i(`<h1 id="_7-testing" tabindex="-1"><a class="header-anchor" href="#_7-testing"><span>7. Testing</span></a></h1><h2 id="_7-1-code-coverage-tests-and-reports" tabindex="-1"><a class="header-anchor" href="#_7-1-code-coverage-tests-and-reports"><span>7.1 Code coverage tests and reports</span></a></h2><p>테스트 Pipeline 구성시 테스트 과정을 지정할 수 있습니다. Testing을 위한 <code>Pipeline</code> 타입의 Item을 추가로 생성합니다. (e.g. 07-01.CodeCoverageTestsAndReports)</p><p>설정은 다음과 같이 수행합니다.</p><ol><li><p><code>Pipeline</code> 스크립트에 다음과 같이 입력 합니다. 테스트와 빌드, 검증 후 결과를 보관하는 단계까지 이루어 집니다.</p><div class="language-groovy line-numbers-mode" data-highlighter="prismjs" data-ext="groovy" data-title="groovy"><pre class="language-groovy"><code><span class="line">pipeline <span class="token punctuation">{</span></span>
<span class="line">    agent any</span>
<span class="line">    stages <span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">stage</span><span class="token punctuation">(</span><span class="token string">&#39;Build&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            steps <span class="token punctuation">{</span></span>
<span class="line">                sh <span class="token string">&#39;&#39;&#39;</span>
<span class="line">                  echo This &gt; app.sh</span>
<span class="line">                  echo That &gt;&gt; app.sh</span>
<span class="line">                &#39;&#39;&#39;</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">        <span class="token function">stage</span><span class="token punctuation">(</span><span class="token string">&#39;Test&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            steps <span class="token punctuation">{</span></span>
<span class="line">                sh <span class="token string">&#39;&#39;&#39;</span>
<span class="line">                  grep This app.sh &gt;&gt; \${BUILD_ID}.cov</span>
<span class="line">                  grep That app.sh &gt;&gt; \${BUILD_ID}.cov</span>
<span class="line">                &#39;&#39;&#39;</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">        <span class="token function">stage</span><span class="token punctuation">(</span><span class="token string">&#39;Coverage&#39;</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">            steps <span class="token punctuation">{</span></span>
<span class="line">                sh <span class="token string">&#39;&#39;&#39;</span>
<span class="line">                  app_lines=\`cat app.sh | wc -l\`</span>
<span class="line">                  cov_lines=\`cat \${BUILD_ID}.cov | wc -l\`</span>
<span class="line">                  echo The app has \`expr $app_lines - $cov_lines\` lines uncovered &gt; \${BUILD_ID}.rpt</span>
<span class="line">                  cat \${BUILD_ID}.rpt</span>
<span class="line">                &#39;&#39;&#39;</span></span>
<span class="line">                archiveArtifacts <span class="token interpolation-string"><span class="token string">&quot;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token expression">env<span class="token punctuation">.</span>BUILD_ID</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">.rpt&quot;</span></span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>빌드가 완료되면 해당 Job화면을 리로드 합니다. Pipeline에 <code>archiveArtifacts</code>가 추가되었으므로 해당 Job에서 이를 관리합니다.<br><img src="`+n+`" alt="1564470826126" loading="lazy"></p></li><li><p>해당 아카이브에는 코드 검증 후의 결과가 저장 됩니다.</p></li></ol><h2 id="_7-2-using-test-results-to-stop-the-build" tabindex="-1"><a class="header-anchor" href="#_7-2-using-test-results-to-stop-the-build"><span>7.2 Using test results to stop the build</span></a></h2><p>테스트 결과에 따라 빌드를 중지시키는 Pipeline 스크립트를 확인합니다. Testing을 위한 <code>Pipeline</code> 타입의 Item을 추가로 생성합니다. (e.g. 07-02.UsingTestResultsToStopTheBuild)</p><p>설정은 다음과 같이 수행합니다.</p><ol><li><p><code>Pipeline</code> 스크립트에 다음과 같이 입력 합니다. 테스트와 빌드, 검증 후 결과를 보관하는 단계까지 이루어 집니다.</p><div class="language-groovy line-numbers-mode" data-highlighter="prismjs" data-ext="groovy" data-title="groovy"><pre class="language-groovy"><code><span class="line">pipeline <span class="token punctuation">{</span></span>
<span class="line">    agent any</span>
<span class="line">    stages <span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">stage</span><span class="token punctuation">(</span><span class="token string">&#39;Build&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            steps <span class="token punctuation">{</span></span>
<span class="line">                sh <span class="token string">&#39;&#39;&#39;</span>
<span class="line">                  echo This &gt; app.sh</span>
<span class="line">                  echo That &gt;&gt; app.sh</span>
<span class="line">                  echo The Other &gt;&gt; app.sh</span>
<span class="line">                &#39;&#39;&#39;</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">        <span class="token function">stage</span><span class="token punctuation">(</span><span class="token string">&#39;Test&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            steps <span class="token punctuation">{</span></span>
<span class="line">                sh <span class="token string">&#39;&#39;&#39;</span>
<span class="line">                  for n in This That Those</span>
<span class="line">                   do if grep $n app.sh &gt;&gt; \${BUILD_ID}.cov</span>
<span class="line">                    then exit 1</span>
<span class="line">                   fi</span>
<span class="line">                  done</span>
<span class="line">                &#39;&#39;&#39;</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">        <span class="token function">stage</span><span class="token punctuation">(</span><span class="token string">&#39;Coverage&#39;</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">            steps <span class="token punctuation">{</span></span>
<span class="line">                sh <span class="token string">&#39;&#39;&#39;</span>
<span class="line">                  app_lines=\`cat app.sh | wc -l\`</span>
<span class="line">                  cov_lines=\`cat \${BUILD_ID}.cov | wc -l\`</span>
<span class="line">                  echo The app has \`expr $app_lines - $cov_lines\` lines uncovered &gt; \${BUILD_ID}.rpt</span>
<span class="line">                  cat \${BUILD_ID}.rpt</span>
<span class="line">                &#39;&#39;&#39;</span></span>
<span class="line">                archiveArtifacts <span class="token interpolation-string"><span class="token string">&quot;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token expression">env<span class="token punctuation">.</span>BUILD_ID</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">.rpt&quot;</span></span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>저장을 하고 빌드를 수행하면, Pipeline 스크립트 상 <code>Test</code> Stage에서 조건 만족 시 <code>exit 1</code>를 수행하므로 빌드는 중간에 멈추게 됩니다.</p><figure><img src="`+s+'" alt="1564471729123" tabindex="0" loading="lazy"><figcaption>1564471729123</figcaption></figure></li></ol>',9),c=[l];function o(u,r){return e(),p("div",null,c)}const m=a(t,[["render",o],["__file","07-testing.html.vue"]]),k=JSON.parse(`{"path":"/05-Software/Jenkins/pipeline101/07-testing.html","title":"7. Testing","lang":"ko-KR","frontmatter":{"description":"jenkins 101","tag":["cicd","jenkins"],"head":[["meta",{"property":"og:url","content":"https://docmoa.github.io/05-Software/Jenkins/pipeline101/07-testing.html"}],["meta",{"property":"og:site_name","content":"docmoa"}],["meta",{"property":"og:title","content":"7. Testing"}],["meta",{"property":"og:description","content":"jenkins 101"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"ko-KR"}],["meta",{"property":"og:updated_time","content":"2023-09-18T13:12:54.000Z"}],["meta",{"property":"article:tag","content":"cicd"}],["meta",{"property":"article:tag","content":"jenkins"}],["meta",{"property":"article:modified_time","content":"2023-09-18T13:12:54.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"7. Testing\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2023-09-18T13:12:54.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"7.1 Code coverage tests and reports","slug":"_7-1-code-coverage-tests-and-reports","link":"#_7-1-code-coverage-tests-and-reports","children":[]},{"level":2,"title":"7.2 Using test results to stop the build","slug":"_7-2-using-test-results-to-stop-the-build","link":"#_7-2-using-test-results-to-stop-the-build","children":[]}],"git":{"createdTime":1640327880000,"updatedTime":1695042774000,"contributors":[{"name":"Administrator","email":"admin@example.com","commits":1},{"name":"Great-Stone","email":"hahohh@gmail.com","commits":1}]},"readingTime":{"minutes":3.4,"words":204},"filePathRelative":"05-Software/Jenkins/pipeline101/07-testing.md","localizedDate":"2021년 12월 24일","excerpt":"\\n<h2>7.1 Code coverage tests and reports</h2>\\n<p>테스트 Pipeline 구성시 테스트 과정을 지정할 수 있습니다.  Testing을 위한 <code>Pipeline</code> 타입의 Item을 추가로 생성합니다. (e.g. 07-01.CodeCoverageTestsAndReports)</p>\\n<p>설정은 다음과 같이 수행합니다.</p>\\n<ol>\\n<li>\\n<p><code>Pipeline</code> 스크립트에 다음과 같이 입력 합니다. 테스트와 빌드, 검증 후 결과를 보관하는 단계까지 이루어 집니다.</p>\\n<div class=\\"language-groovy\\" data-highlighter=\\"prismjs\\" data-ext=\\"groovy\\" data-title=\\"groovy\\"><pre class=\\"language-groovy\\"><code><span class=\\"line\\">pipeline <span class=\\"token punctuation\\">{</span></span>\\n<span class=\\"line\\">    agent any</span>\\n<span class=\\"line\\">    stages <span class=\\"token punctuation\\">{</span></span>\\n<span class=\\"line\\">        <span class=\\"token function\\">stage</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">'Build'</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span></span>\\n<span class=\\"line\\">            steps <span class=\\"token punctuation\\">{</span></span>\\n<span class=\\"line\\">                sh <span class=\\"token string\\">'''</span>\\n<span class=\\"line\\">                  echo This &gt; app.sh</span>\\n<span class=\\"line\\">                  echo That &gt;&gt; app.sh</span>\\n<span class=\\"line\\">                '''</span></span>\\n<span class=\\"line\\">            <span class=\\"token punctuation\\">}</span></span>\\n<span class=\\"line\\">        <span class=\\"token punctuation\\">}</span></span>\\n<span class=\\"line\\">        <span class=\\"token function\\">stage</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">'Test'</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span></span>\\n<span class=\\"line\\">            steps <span class=\\"token punctuation\\">{</span></span>\\n<span class=\\"line\\">                sh <span class=\\"token string\\">'''</span>\\n<span class=\\"line\\">                  grep This app.sh &gt;&gt; \${BUILD_ID}.cov</span>\\n<span class=\\"line\\">                  grep That app.sh &gt;&gt; \${BUILD_ID}.cov</span>\\n<span class=\\"line\\">                '''</span></span>\\n<span class=\\"line\\">            <span class=\\"token punctuation\\">}</span></span>\\n<span class=\\"line\\">        <span class=\\"token punctuation\\">}</span></span>\\n<span class=\\"line\\">        <span class=\\"token function\\">stage</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">'Coverage'</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">{</span></span>\\n<span class=\\"line\\">            steps <span class=\\"token punctuation\\">{</span></span>\\n<span class=\\"line\\">                sh <span class=\\"token string\\">'''</span>\\n<span class=\\"line\\">                  app_lines=\`cat app.sh | wc -l\`</span>\\n<span class=\\"line\\">                  cov_lines=\`cat \${BUILD_ID}.cov | wc -l\`</span>\\n<span class=\\"line\\">                  echo The app has \`expr $app_lines - $cov_lines\` lines uncovered &gt; \${BUILD_ID}.rpt</span>\\n<span class=\\"line\\">                  cat \${BUILD_ID}.rpt</span>\\n<span class=\\"line\\">                '''</span></span>\\n<span class=\\"line\\">                archiveArtifacts <span class=\\"token interpolation-string\\"><span class=\\"token string\\">\\"</span><span class=\\"token interpolation\\"><span class=\\"token interpolation-punctuation punctuation\\">\${</span><span class=\\"token expression\\">env<span class=\\"token punctuation\\">.</span>BUILD_ID</span><span class=\\"token interpolation-punctuation punctuation\\">}</span></span><span class=\\"token string\\">.rpt\\"</span></span></span>\\n<span class=\\"line\\">            <span class=\\"token punctuation\\">}</span></span>\\n<span class=\\"line\\">        <span class=\\"token punctuation\\">}</span></span>\\n<span class=\\"line\\">    <span class=\\"token punctuation\\">}</span></span>\\n<span class=\\"line\\"><span class=\\"token punctuation\\">}</span></span>\\n<span class=\\"line\\"></span></code></pre></div></li>\\n<li>\\n<p>빌드가 완료되면 해당 Job화면을 리로드 합니다. Pipeline에 <code>archiveArtifacts</code>가 추가되었으므로 해당 Job에서 이를 관리합니다.<br>\\n</p>\\n</li>\\n<li>\\n<p>해당 아카이브에는 코드 검증 후의 결과가 저장 됩니다.</p>\\n</li>\\n</ol>"}`);export{m as comp,k as data};
