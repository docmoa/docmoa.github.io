import{_ as t}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as a,c as e,h as n}from"./app-DVMlqOhY.js";const o={},s=n(`<h1 id="nosql-데이터베이스-mongodb" tabindex="-1"><a class="header-anchor" href="#nosql-데이터베이스-mongodb"><span>NoSQL 데이터베이스 - MongoDB</span></a></h1><blockquote><p>원문 : <a href="https://www.mongodb.com/resources/basics/databases/nosql-explained" target="_blank" rel="noopener noreferrer">https://www.mongodb.com/resources/basics/databases/nosql-explained</a><br> NoSQL 데이터베이스인 MongoDB를 통해 NoSQL의 다양한 유형과 활용에 대해 설명하는 내용입니다. 문서 지향형, 키-값, 와이드-칼럼, 그래프 등 다양한 NoSQL 데이터베이스의 특징과 역사를 다루고 있습니다. 또한 MongoDB를 활용한 NoSQL 쿼리 튜토리얼을 제공하며 Multi-record Transactions에 대한 내용도 다룹니다.</p></blockquote><h2 id="_1-️-nosql-데이터베이스" tabindex="-1"><a class="header-anchor" href="#_1-️-nosql-데이터베이스"><span>1.️ NoSQL 데이터베이스</span></a></h2><ul><li>NoSQL 데이터베이스는 일반적으로 비 관계형 데이터베이스를 나타냅니다.</li><li>NoSQL 데이터베이스는 자료를 <code>자연스럽고 유연하게</code> 저장한다는 특징을 갖습니다.</li><li>SQL은 <code>쿼리 언어</code>이고, <code>NoSQL</code>은 데이터베이스 관리 방법을 의미합니다.</li></ul><h2 id="_2-nosql-데이터베이스-유형" tabindex="-1"><a class="header-anchor" href="#_2-nosql-데이터베이스-유형"><span>2. NoSQL 데이터베이스 유형</span></a></h2><ul><li>시간이 흐름에 따라 네 가지 주요 NoSQL 데이터베이스 유형이 나타났습니다. <ul><li>Document databases : MongoDB, Couchbase</li><li>Key-Value stores : Redis, Amazon DynamoDB</li><li>Wide-Column stores : HBase, Cassandra, Scylla, Excel, Google Sheet</li><li>Graph databases : Neo4J, Amazon Neptune, AllegroGraph</li><li>Multi-model databases : CosmosDB, ArangoDB</li></ul></li></ul><h3 id="_2-1-문서-document-지향형-데이터베이스" tabindex="-1"><a class="header-anchor" href="#_2-1-문서-document-지향형-데이터베이스"><span>2.1 문서(Document) 지향형 데이터베이스</span></a></h3><ul><li>문서 지향형 데이터베이스는 JSON (JavaScript Object Notation) 객체와 유사한 형태의 문서에 데이터를 저장합니다. <ul><li>각 문서는 필드와 값의 쌍을 포함</li><li>값은 문자열, 숫자, 부울린, 배열 또는 다른 객체와 같이 다양한 유형</li><li>데이터 모델이 반구조화되거나 비구조화된 데이터 세트에 적합</li><li>중첩 구조를 지원하여 복잡한 관계나 계층적 데이터를 표현에 유리</li></ul></li></ul><div class="language-json" data-highlighter="prismjs" data-ext="json" data-title="json"><pre class="language-json"><code><span class="line"><span class="token punctuation">{</span></span>
<span class="line">  <span class="token property">&quot;_id&quot;</span><span class="token operator">:</span> <span class="token string">&quot;12345&quot;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token property">&quot;name&quot;</span><span class="token operator">:</span> <span class="token string">&quot;foo bar&quot;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token property">&quot;email&quot;</span><span class="token operator">:</span> <span class="token string">&quot;foo@bar.com&quot;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token property">&quot;address&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token property">&quot;street&quot;</span><span class="token operator">:</span> <span class="token string">&quot;123 foo street&quot;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token property">&quot;city&quot;</span><span class="token operator">:</span> <span class="token string">&quot;some city&quot;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token property">&quot;state&quot;</span><span class="token operator">:</span> <span class="token string">&quot;some state&quot;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token property">&quot;zip&quot;</span><span class="token operator">:</span> <span class="token number">123456</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token property">&quot;hobbies&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;music&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;guitar&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;reading&quot;</span><span class="token punctuation">]</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre></div><h3 id="_2-2-key-value-k-v-저장소" tabindex="-1"><a class="header-anchor" href="#_2-2-key-value-k-v-저장소"><span>2.2 Key-Value(K/V) 저장소</span></a></h3><ul><li>K/V 저장소는 단순하게 각 항목을 <em>키</em>와 <em>값</em>으로 표현합니다.</li><li>캐싱 및 세션 관리에 사용되며 인메모리에 데이터를 저장하여 <em>높은 성능</em>의 읽기와 쓰기를 제공합니다.</li></ul><div class="language-ini" data-highlighter="prismjs" data-ext="ini" data-title="ini"><pre class="language-ini"><code><span class="line"><span class="token key attr-name">user-12345</span> <span class="token punctuation">=</span> <span class="token value attr-value">{&quot;name&quot;: &quot;foo bar&quot;, &quot;email&quot;: &quot;foo@bar.com&quot;, &quot;designation&quot;: &quot;software developer&quot;}</span></span>
<span class="line"></span></code></pre></div><h3 id="_2-3-wide-column-저장소" tabindex="-1"><a class="header-anchor" href="#_2-3-wide-column-저장소"><span>2.3 wide-column 저장소</span></a></h3><ul><li>wide-column 저장소는 테이블, 행, 컬럼에 데이터를 저장합니다.</li><li>전통적인 SQL 데이터베이스와 달리, wide-column 저장소는 유연하여 다른 행이 다른 컬럼 집합을 갖을 수 있습니다.</li><li>컬럼 압축 기술을 사용하여 저장 공간을 줄이고 성능을 향상시킬 수 있습니다.</li><li>희소하고 넓은 데이터를 효율적으로 검색할 수 있습니다.</li></ul><table><thead><tr><th>name</th><th>id</th><th>email</th><th>dob</th><th>city</th></tr></thead><tbody><tr><td>Foo bar</td><td>12345</td><td><a href="mailto:foo@bar.com" target="_blank" rel="noopener noreferrer">foo@bar.com</a></td><td></td><td>Some city</td></tr><tr><td>Carn Yale</td><td>34521</td><td><a href="mailto:bar@foo.com" target="_blank" rel="noopener noreferrer">bar@foo.com</a></td><td>12-05-1972</td><td></td></tr></tbody></table><h3 id="_2-4-graph-데이터베이스" tabindex="-1"><a class="header-anchor" href="#_2-4-graph-데이터베이스"><span>2.4 Graph 데이터베이스</span></a></h3><ul><li>노드와 엣지 형태로로 데이터 저장합니다.</li><li>노드는 일반적으로 사람, 장소, 물건(명사)과 같은 정보를 저장하며, 엣지는 노드 간 관계에 대한 정보를 저장합니다.</li><li>관계나 패턴이 처음에는 명확하지 않은 경우에 사용됩니다. (Social networks, Network diagrams 등에 사용)</li><li>MongoDB는 집계 파이프라인의 $graphLookup 단계를 사용하여 그래프 데이터를 다루기도 합니다.</li></ul><figure><img src="https://raw.githubusercontent.com/Great-Stone/images/master/picgo/image-20240706165500563.png" alt="Graph 데이터베이스 노드와 엣지" tabindex="0" loading="lazy"><figcaption>Graph 데이터베이스 노드와 엣지</figcaption></figure><h3 id="_2-5-multi-model-다중-모델-데이터베이스" tabindex="-1"><a class="header-anchor" href="#_2-5-multi-model-다중-모델-데이터베이스"><span>2.5 Multi-model(다중 모델) 데이터베이스</span></a></h3><ul><li>둘 이상의 유형의 NoSQL 데이터 모델을 지원하는 데이터베이스를 지칭합니다.</li></ul><h2 id="_3-nosql-유형의-비교" tabindex="-1"><a class="header-anchor" href="#_3-nosql-유형의-비교"><span>3. NoSQL 유형의 비교</span></a></h2><table><thead><tr><th>Feature</th><th>Key-Value Store</th><th>Document Database</th><th>Wide-Column Store</th><th>Graph Database</th></tr></thead><tbody><tr><td>Data Visualization Support</td><td>Basic support for data visualization</td><td>Basic support for data visualization</td><td>Basic support for data visualization</td><td>Basic support for data visualization</td></tr><tr><td>Access Control</td><td>Basic authentication, limited access control</td><td>Role-based access control, encryption at-rest, encryption in transit, and in use</td><td>Role-based access control (RBAC), encryption at rest</td><td>Role-based access control (RBAC), encryption at rest, in transit</td></tr><tr><td>Online Data Archival</td><td>Limited support for online data archival</td><td>Automatic online data archival</td><td>Limited support for online data archival</td><td>Limited support for online data archival</td></tr><tr><td>Search Capabilities</td><td>Limited search capabilities</td><td>Full-text search, vector search</td><td>Limited search capabilities</td><td>Limited search capabilities</td></tr><tr><td>Data Manipulation</td><td>Basic CRUD operations, limited data manipulation capabilities</td><td>Advanced query and data manipulation capabilities</td><td>Data manipulation and CRUD capabilities</td><td>Supports advanced graph traversal and manipulation operations</td></tr><tr><td>Data Structure</td><td>Stores any type of data</td><td>Stores JSON/BSON data</td><td>Columns and rows matrix</td><td>Nodes, edges, and relationships</td></tr><tr><td>Use Cases</td><td>General purposes</td><td>Suited for time-series, IoT analytics, real-time analytics</td><td>Suited for time-series data, IoT analytics</td><td>Well-suited for graph analytics</td></tr><tr><td>Scalability and Consistency</td><td>Horizontal scalability and eventual consistency</td><td>Horizontal scalability and eventual consistency</td><td>Horizontal scalability and eventual consistency</td><td>Horizontal scalability and eventual consistency</td></tr><tr><td>Indexing</td><td>Simple indexes</td><td>Indexes on fields</td><td>Secondary indexes</td><td>Indexes on nodes/edges</td></tr><tr><td>Query Capability</td><td>Limited by key</td><td>Rich querying capability</td><td>Limited by columns</td><td>Specialized graph query</td></tr><tr><td>Schema</td><td>Schemaless</td><td>Flexible schema</td><td>Flexible schema</td><td>Flexible schema</td></tr><tr><td>Data Format</td><td>Simple key-value pairs</td><td>JSON/BSON documents</td><td>Column and row families</td><td>Nodes, edges, and relationships</td></tr></tbody></table><h2 id="_4-nosql-데이터베이스의-역사" tabindex="-1"><a class="header-anchor" href="#_4-nosql-데이터베이스의-역사"><span>4. NoSQL 데이터베이스의 역사</span></a></h2><ul><li>NoSQL 데이터베이스는 2000년대 후반에 스토리지 비용 감소와 함께 등장했습니다. 데이터 중복을 피하기 위해 복잡하고 관리하기 어려운 데이터 모델을 탈피하는 시기였습니다.</li><li>다중 모델 데이터베이스는 여러 유형의 NoSQL 데이터 모델을 지원하여 개발자가 애플리케이션 요구에 따라 선택할 수 있으며, 예로 CosmosDB와 ArangoDB가 있습니다. Google의 BigTable에 대한 논문이 발표된 2000년대 초반과, MongoDB와 CouchDB의 출현이 본격화 된 2009년은 NoSQL 데이터베이스가 크게 증가한 주요 시기였습니다.</li><li>2010년대에는 다양한 유형의 NoSQL 데이터베이스가 등장했고, 클라우드 컴퓨팅의 인기가 높아지면서 개발자들은 애플리케이션과 데이터를 공용 클라우드에 호스팅하기 시작했으며, 데이터를 여러 서버와 지역에 분산시켜 애플리케이션의 복원력을 높이고 확장성을 제공하려는 시도가 증가하였습니다.</li></ul><iframe src="https://ourworldindata.org/grapher/historical-cost-of-computer-memory-and-storage?tab=chart" loading="lazy" style="width:100%;height:600px;border:0px none;" allow="web-share; clipboard-write"></iframe><h2 id="_5-nosql-데이터베이스-기능" tabindex="-1"><a class="header-anchor" href="#_5-nosql-데이터베이스-기능"><span>5. NoSQL 데이터베이스 기능</span></a></h2><p>NoSQL 데이터베이스에는 일반적으로 다음과 같은 기능이 있습니다:</p><ul><li>분산 컴퓨팅</li><li>스케일링</li><li>유연한 스키마 및 풍부한 쿼리 언어</li><li>개발자의 사용 편의성</li><li>파티션 청크</li><li>고 가용성</li></ul><h2 id="_6-rdbms와-nosql-데이터베이스의-차이점" tabindex="-1"><a class="header-anchor" href="#_6-rdbms와-nosql-데이터베이스의-차이점"><span>6. RDBMS와 NoSQL 데이터베이스의 차이점</span></a></h2><ul><li>NoSQL 데이터베이스에서 데이터 모델링 방식은 <em>다중 레코드 트랜잭션의 필요성을 제거</em>할 수 있습니다.</li><li>관계형 모델과 문서 저장소에 사용자 및 취미 정보를 저장하는 예제를 고려하면, 관계형 데이터베이스에서는 두 테이블의 레코드를 업데이트하기 위해 <em>트랜잭션</em>이 필요하지만 문서 저장소에서는 <em>단일 문서 업데이트</em>로 가능합니다.</li><li>문서 저장소에서는 <em>다중 레코드 트랜잭션</em>이 필요하지 않습니다.</li></ul><figure><img src="https://raw.githubusercontent.com/Great-Stone/images/master/picgo/image-20240706171054646.png" alt="취미 정보를 저장 예제" tabindex="0" loading="lazy"><figcaption>취미 정보를 저장 예제</figcaption></figure><table><thead><tr><th>특징</th><th>NoSQL</th><th>RDBMS</th></tr></thead><tbody><tr><td>데이터 모델링</td><td>NoSQL 데이터베이스 유형 (예 : Key/Value, Document, Graph, Wide-Column)에 따라 모델이 반 구조화 및 비 구조화 된 데이터에 적합하도록합니다.</td><td>테이블 형식 데이터 구조를 사용하며 데이터는 행과 열 세트로 표시되므로 모델이 구조화 된 데이터에 적합합니다.</td></tr><tr><td>스키마</td><td>Key/Value, Document, Graph, Wide-Column가 다른 유형의 데이터를 포함 할 수있는 유연한 스키마를 제공합니다. 유연성으로 인해 필요한 경우 스키마를 쉽게 변경할 수 있습니다.</td><td>테이블 형식 데이터 구조를 사용하며 데이터는 행과 열 세트로 표시되므로 모델이 구조화 된 데이터에 적합합니다.</td></tr><tr><td>쿼리 언어</td><td>사용 된 NoSQL 데이터베이스 유형에 따라 다릅니다. 예를 들어 MongoDB에는 MQL, Neo4J는 Cypher를 사용합니다.</td><td>대부분 구조화 된 쿼리 언어 (SQL)를 사용합니다.</td></tr><tr><td>확장성</td><td>수직 및 수평 스케일링을 위해 설계되었습니다.</td><td>수직 스케일링을 위해 설계되었습니다. 그러나 수평 스케일링을 위해 제한된 기능을 확장 할 수 있습니다.</td></tr><tr><td>데이터 관계</td><td>관계는 중첩, 명시 적 또는 암시적일 수 있습니다.</td><td>관계는 외래 키를 통해 정의되며 조인을 사용하여 액세스합니다.</td></tr><tr><td>트랜젝션 유형</td><td>ACID 또는 BASE-compliant</td><td>ACID를 준수</td></tr><tr><td>적합성</td><td>실시간 처리, 빅 데이터 분석 및 분산 환경에 적합합니다.</td><td>읽기 및 트랜잭션 워크로드에 적합합니다.</td></tr><tr><td>데이터 일관성</td><td>높은 데이터 일관성을 제공합니다.</td><td>대부분의 경우 일관성을 제공합니다.</td></tr><tr><td>분산 컴퓨팅</td><td>NoSQL을 도입 한 주된 이유 중 하나는 분산 컴퓨팅 때문이며 NoSQL 데이터베이스는 샤딩, 복제 및 클러스터링을 통한 분산 데이터 스토리지, 수직 및 수평 스케일링을 지원합니다.</td><td>클러스터링 및 복제를 통해 분산 컴퓨팅을 지원합니다. 그러나 전통적으로 분산 아키텍처를 지원하도록 설계되지 않았기 때문에 확장 성이 떨어지고 유연성이 떨어집니다.</td></tr><tr><td>내결함성</td><td>데이터 복제로 인해 내결함성과 고 가용성이 내장되어 있습니다.</td><td>복제, 백업 및 복구 메커니즘을 사용합니다. 그러나이를 위해 설계되었으므로 응용 프로그램 개발 중에 재해 복구 메커니즘과 같은 추가 조치를 구현해야 할 수도 있습니다.</td></tr><tr><td>데이터 파티셔닝</td><td>샤딩과 복제를 통해 이루어집니다.</td><td>테이블 기반 파티션 및 파티션 가지 치기(pruning)를 지원합니다.</td></tr><tr><td>데이터를 객체 매핑</td><td>JSON 문서, 광역 저장소 또는 키-값 쌍과 같이 다양한 방식으로 —으로 데이터를 저장합니다. ODM (객체 데이터 매핑) 프레임 워크를 통해 추상화를 제공하여 객체 지향 방식으로 NoSQL 데이터를 처리합니다.</td><td>데이터베이스 열과 객체 지향 응용 프로그램 코드간에 완벽하게 통합되도록 데이터 대 객체 매핑에 더 의존합니다.</td></tr></tbody></table><h2 id="_7-nosql-사용-사례" tabindex="-1"><a class="header-anchor" href="#_7-nosql-사용-사례"><span>7. NoSQL 사용 사례</span></a></h2><ul><li>실시간 분석, 컨텐츠 관리, IoT 애플리케이션, 권장 시스템, 사기 탐지, 제품 카탈로그 관리 등</li><li>빠르게 진행되는 민첩한 개발</li><li>구조화 및 반 구조화 된 데이터 저장</li><li>방대한 양의 데이터</li><li>스케일 아웃 아키텍처 요구 사항</li><li>마이크로 서비스 및 실시간 스트리밍과 같은 최신 애플리케이션 지원</li></ul>`,34),l=[s];function i(d,r){return a(),e("div",null,l)}const u=t(o,[["render",i],["__file","nosql-explained.html.vue"]]),h=JSON.parse('{"path":"/05-Software/MongoDB/nosql-explained.html","title":"NoSQL 데이터베이스 - MongoDB","lang":"ko-KR","frontmatter":{"description":"NoSQL이란 무엇인가요? NoSQL 데이터베이스 설명","tag":["MongoDB"],"head":[["meta",{"property":"og:url","content":"https://docmoa.github.io/05-Software/MongoDB/nosql-explained.html"}],["meta",{"property":"og:site_name","content":"docmoa"}],["meta",{"property":"og:title","content":"NoSQL 데이터베이스 - MongoDB"}],["meta",{"property":"og:description","content":"NoSQL이란 무엇인가요? NoSQL 데이터베이스 설명"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://raw.githubusercontent.com/Great-Stone/images/master/picgo/image-20240706165500563.png"}],["meta",{"property":"og:locale","content":"ko-KR"}],["meta",{"property":"og:updated_time","content":"2024-07-06T08:39:50.000Z"}],["meta",{"property":"article:tag","content":"MongoDB"}],["meta",{"property":"article:modified_time","content":"2024-07-06T08:39:50.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"NoSQL 데이터베이스 - MongoDB\\",\\"image\\":[\\"https://raw.githubusercontent.com/Great-Stone/images/master/picgo/image-20240706165500563.png\\",\\"https://raw.githubusercontent.com/Great-Stone/images/master/picgo/image-20240706171054646.png\\"],\\"dateModified\\":\\"2024-07-06T08:39:50.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"1.️ NoSQL 데이터베이스","slug":"_1-️-nosql-데이터베이스","link":"#_1-️-nosql-데이터베이스","children":[]},{"level":2,"title":"2. NoSQL 데이터베이스 유형","slug":"_2-nosql-데이터베이스-유형","link":"#_2-nosql-데이터베이스-유형","children":[{"level":3,"title":"2.1 문서(Document) 지향형 데이터베이스","slug":"_2-1-문서-document-지향형-데이터베이스","link":"#_2-1-문서-document-지향형-데이터베이스","children":[]},{"level":3,"title":"2.2 Key-Value(K/V) 저장소","slug":"_2-2-key-value-k-v-저장소","link":"#_2-2-key-value-k-v-저장소","children":[]},{"level":3,"title":"2.3 wide-column 저장소","slug":"_2-3-wide-column-저장소","link":"#_2-3-wide-column-저장소","children":[]},{"level":3,"title":"2.4 Graph 데이터베이스","slug":"_2-4-graph-데이터베이스","link":"#_2-4-graph-데이터베이스","children":[]},{"level":3,"title":"2.5 Multi-model(다중 모델) 데이터베이스","slug":"_2-5-multi-model-다중-모델-데이터베이스","link":"#_2-5-multi-model-다중-모델-데이터베이스","children":[]}]},{"level":2,"title":"3. NoSQL 유형의 비교","slug":"_3-nosql-유형의-비교","link":"#_3-nosql-유형의-비교","children":[]},{"level":2,"title":"4. NoSQL 데이터베이스의 역사","slug":"_4-nosql-데이터베이스의-역사","link":"#_4-nosql-데이터베이스의-역사","children":[]},{"level":2,"title":"5. NoSQL 데이터베이스 기능","slug":"_5-nosql-데이터베이스-기능","link":"#_5-nosql-데이터베이스-기능","children":[]},{"level":2,"title":"6. RDBMS와 NoSQL 데이터베이스의 차이점","slug":"_6-rdbms와-nosql-데이터베이스의-차이점","link":"#_6-rdbms와-nosql-데이터베이스의-차이점","children":[]},{"level":2,"title":"7. NoSQL 사용 사례","slug":"_7-nosql-사용-사례","link":"#_7-nosql-사용-사례","children":[]}],"git":{"createdTime":1720255190000,"updatedTime":1720255190000,"contributors":[{"name":"Great-Stone","email":"hahohh@gmail.com","commits":1}]},"readingTime":{"minutes":9.22,"words":553},"filePathRelative":"05-Software/MongoDB/nosql-explained.md","localizedDate":"2024년 7월 6일","excerpt":"\\n<blockquote>\\n<p>원문 : <a href=\\"https://www.mongodb.com/resources/basics/databases/nosql-explained\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">https://www.mongodb.com/resources/basics/databases/nosql-explained</a><br>\\nNoSQL 데이터베이스인 MongoDB를 통해 NoSQL의 다양한 유형과 활용에 대해 설명하는 내용입니다. 문서 지향형, 키-값, 와이드-칼럼, 그래프 등 다양한 NoSQL 데이터베이스의 특징과 역사를 다루고 있습니다. 또한 MongoDB를 활용한 NoSQL 쿼리 튜토리얼을 제공하며 Multi-record Transactions에 대한 내용도 다룹니다.</p>\\n</blockquote>"}');export{u as comp,h as data};
