import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as n,c as e,a,h as t}from"./app-DVMlqOhY.js";const p={},o=a("h1",{id:"remote-runs",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#remote-runs"},[a("span",null,"Remote Runs")])],-1),r=a("p",null,"Terraform의 Remote Runs이라는 기능에 대해 확인합니다.",-1),l=a("p",null,"Terraform Cloud와 Terraform Enterprise는 원격으로 트리거링 되어 동작하는 메커니즘을 제공하고 있습니다.",-1),c=a("iframe",{width:"560",height:"315",src:"https://www.youtube.com/embed/fqCcVYm7u4g",frameborder:"0",allow:"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture",allowfullscreen:""},null,-1),i=t(`<p>Enterprise에서는 수행의 주체가 중앙 서버이며, 등록된 VCS나 Terraform 설정 파일의 구성을 통해 원격으로 트리거링할 수 있습니다.</p><hr><table><thead><tr><th>유형</th><th>지원여부</th></tr></thead><tbody><tr><td>Terraform OSS (Open Source Software)</td><td>•</td></tr><tr><td>Terraform Cloud</td><td>✔︎</td></tr><tr><td>Terraform Cloud for Business</td><td>✔︎</td></tr><tr><td>Terraform Enterprise</td><td>✔︎</td></tr></tbody></table><hr><p>원격으로 실행시키는 메커니즘은 총 3가지 형태가 있습니다.</p><ul><li>VCS에서 Pull 요청시</li><li>CI/CD 과정에서 API를 통한 호출</li><li>CLI로 수행</li></ul><h2 id="vcs-pull-request" tabindex="-1"><a class="header-anchor" href="#vcs-pull-request"><span>VCS Pull Request</span></a></h2><p>워크스페이스는 VCS와 연동하는 것이 일반적이며, 이 경우 VCS에 Pull이 발생하면 이를 감지하여 해당 워크스페이스의 Run이 수행되는 케이스 입니다.</p><figure><img src="https://raw.githubusercontent.com/Great-Stone/images/master/uPic/Terraform Cloud 2020-07-15 23-01-23.png" alt="Terraform Cloud 2020-07-15 23-01-23" tabindex="0" loading="lazy"><figcaption>Terraform Cloud 2020-07-15 23-01-23</figcaption></figure><p>VCS에 Pull이 발생하는 것은 최종적으로 검증된 코드가 올라왔다고 판단되어 동작하며, 특정 파일이나 경로에 관련 동작이 발생했을 경우에만 Run이 수행되도록 설정 가능합니다.</p><h2 id="api-call" tabindex="-1"><a class="header-anchor" href="#api-call"><span>API call</span></a></h2><p>별도의 CI/CD 파이프라인과 연계하여 사용하는 경우에는 API를 호출하여 실행시키는 방식을 제공합니다. 인프라의 변경 뿐만 아니라 애플리케이션과 상호 작용하는 경우에 유용하며, 인가된 사용자를 구분하기 위해 Token을 필요로 합니다. 주의해야 할 점은 문서상에 나와있는 것 처럼 Organization Token이 아닌 User나 Team의 Token으로 요청해야 합니다. <a href="https://www.terraform.io/docs/cloud/api/run.html#create-a-run" target="_blank" rel="noopener noreferrer">문서 링크</a></p><p>처음 워크스페이스에 Run을 요청하는 JSON 형태의 data의 예는 다음과 같습니다.</p><div class="language-json line-numbers-mode" data-highlighter="prismjs" data-ext="json" data-title="json"><pre class="language-json"><code><span class="line"><span class="token punctuation">{</span></span>
<span class="line">  <span class="token property">&quot;data&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token property">&quot;attributes&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token property">&quot;is-destroy&quot;</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token property">&quot;message&quot;</span><span class="token operator">:</span> <span class="token string">&quot;Remote Run - API&quot;</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token property">&quot;type&quot;</span><span class="token operator">:</span> <span class="token string">&quot;runs&quot;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token property">&quot;relationships&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token property">&quot;workspace&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token property">&quot;data&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">          <span class="token property">&quot;type&quot;</span><span class="token operator">:</span> <span class="token string">&quot;workspaces&quot;</span><span class="token punctuation">,</span></span>
<span class="line">          <span class="token property">&quot;id&quot;</span><span class="token operator">:</span> <span class="token string">&quot;ws-53JSjeBcXFTCVQis&quot;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">      <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>작성된 json파일을 POST 로 요청하는 형태는 다음과 같습니다.</p><div class="language-bash" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="line"><span class="token function">curl</span> <span class="token punctuation">\\</span></span>
<span class="line">  <span class="token parameter variable">--header</span> <span class="token string">&quot;Authorization: Bearer <span class="token variable">$TF_CLOUD_TOKEN</span>&quot;</span> <span class="token punctuation">\\</span></span>
<span class="line">  <span class="token parameter variable">--header</span> <span class="token string">&quot;Content-Type: application/vnd.api+json&quot;</span> <span class="token punctuation">\\</span></span>
<span class="line">  <span class="token parameter variable">--request</span> POST <span class="token punctuation">\\</span></span>
<span class="line">  <span class="token parameter variable">--data</span> @run.json <span class="token punctuation">\\</span></span>
<span class="line">  https://app.terraform.io/api/v2/runs</span>
<span class="line"></span></code></pre></div><p>Run을 요청한 응답 데이터에는 관련 <code>ìd</code>와 유형, 기타 정보들이 담겨있습니다.</p><div class="language-json" data-highlighter="prismjs" data-ext="json" data-title="json"><pre class="language-json"><code><span class="line"><span class="token punctuation">{</span></span>
<span class="line">  <span class="token property">&quot;data&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token property">&quot;id&quot;</span><span class="token operator">:</span> <span class="token string">&quot;run-CZcmD7eagjhyX0vN&quot;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token property">&quot;type&quot;</span><span class="token operator">:</span> <span class="token string">&quot;runs&quot;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token property">&quot;attributes&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token property">&quot;auto-apply&quot;</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token property">&quot;error-text&quot;</span><span class="token operator">:</span> <span class="token null keyword">null</span><span class="token punctuation">,</span></span>
<span class="line">      ...</span>
<span class="line"></span></code></pre></div><p>Terraform 웹 콘솔에 접속하여 확인해보면 해당 <code>ìd</code>값을 갖는 Run이 수행됨을 확인 할 수 있습니다.</p><p>이후 apply를 위해 <code>comment</code>가 담긴 데이터를 생성하고, 앞서 응답받은 Run의 <code>id</code> 경로로 요청을 보냅니다.</p><div class="language-json" data-highlighter="prismjs" data-ext="json" data-title="json"><pre class="language-json"><code><span class="line"><span class="token punctuation">{</span></span>
<span class="line">  <span class="token property">&quot;comment&quot;</span><span class="token operator">:</span><span class="token string">&quot;Looks good to me&quot;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre></div><div class="language-bash" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="line"><span class="token function">curl</span> <span class="token punctuation">\\</span></span>
<span class="line">  <span class="token parameter variable">--header</span> <span class="token string">&quot;Authorization: Bearer <span class="token variable">$TF_CLOUD_TOKEN</span>&quot;</span> <span class="token punctuation">\\</span></span>
<span class="line">  <span class="token parameter variable">--header</span> <span class="token string">&quot;Content-Type: application/vnd.api+json&quot;</span> <span class="token punctuation">\\</span></span>
<span class="line">  <span class="token parameter variable">--request</span> POST <span class="token punctuation">\\</span></span>
<span class="line">  <span class="token parameter variable">--data</span> @apply.json <span class="token punctuation">\\</span></span>
<span class="line">  https://app.terraform.io/api/v2/runs/run-CZcmD7eagjhyX0vN/actions/apply</span>
<span class="line"></span></code></pre></div><p>API 호출을 사용하면 다양한 시스템을 활용하여 Terraform을 수행할 수 있습니다.</p><h2 id="cli-수행" tabindex="-1"><a class="header-anchor" href="#cli-수행"><span>CLI 수행</span></a></h2><p>Terraform을 OSS로 사용하시는 분들은 커맨드 항목 중에 <code>login</code>, <code>logout</code>이 있는 것을 보셨을 수 있습니다. 해당 커맨드는 Terraform Cloud나 Terraform Enterprise를 활용하여 프로비저닝을 수행할 수 있는 커맨드 입니다. 원격으로 실행시키기 위해서는 우선 대상에 대한 정의가 필요합니다.</p><div class="language-javascript" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line">terraform <span class="token punctuation">{</span></span>
<span class="line">  backend <span class="token string">&quot;remote&quot;</span> <span class="token punctuation">{</span></span>
<span class="line">    organization <span class="token operator">=</span> <span class="token string">&quot;great-stone&quot;</span></span>
<span class="line">    workspaces <span class="token punctuation">{</span></span>
<span class="line">      name <span class="token operator">=</span> <span class="token string">&quot;random-pet-demo&quot;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre></div><p>tf 파일에 <code>backend</code>에 대한 설정을 추가하면 테라폼 실행시 원격의 서버와 통신하여 작업을 수행합니다. 워크스페이스의 경우 별도 VCS를 연동하지 않고 로컬과 연계하여 동작하게 됩니다. 또한 Apply 시 <code>yes</code>에 대한 동작도 웹콘솔에서 수행던 로컬에서 수행하던 서로 동기화 되어 실행 됩니다.</p><h2 id="마치며" tabindex="-1"><a class="header-anchor" href="#마치며"><span>마치며</span></a></h2><p>VCS, API, CLI 모두 Terraform의 Run을 수행하는 동일한 동작을 수행합니다. 각 팀, 조직에서의 프로비저닝을 위한 관리 방식에 따라 가장 알맞은 방식으로 접근할 수 있는 메커니즘을 잘 활용하면 효율적인 자원 관리가 가능합니다.</p>`,29),u=[o,r,l,c,i];function d(m,k){return n(),e("div",null,u)}const v=s(p,[["render",d],["__file","remoteruns.html.vue"]]),f=JSON.parse('{"path":"/04-HashiCorp/03-Terraform/01-Information/remoteruns.html","title":"Remote Runs","lang":"ko-KR","frontmatter":{"description":"Terraform Features","tag":["terraform","IaC"],"head":[["meta",{"property":"og:url","content":"https://docmoa.github.io/04-HashiCorp/03-Terraform/01-Information/remoteruns.html"}],["meta",{"property":"og:site_name","content":"docmoa"}],["meta",{"property":"og:title","content":"Remote Runs"}],["meta",{"property":"og:description","content":"Terraform Features"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://raw.githubusercontent.com/Great-Stone/images/master/uPic/Terraform%20Cloud%202020-07-15%2023-01-23.png"}],["meta",{"property":"og:locale","content":"ko-KR"}],["meta",{"property":"og:updated_time","content":"2023-09-18T13:12:54.000Z"}],["meta",{"property":"article:tag","content":"terraform"}],["meta",{"property":"article:tag","content":"IaC"}],["meta",{"property":"article:modified_time","content":"2023-09-18T13:12:54.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Remote Runs\\",\\"image\\":[\\"https://raw.githubusercontent.com/Great-Stone/images/master/uPic/Terraform%20Cloud%202020-07-15%2023-01-23.png\\"],\\"dateModified\\":\\"2023-09-18T13:12:54.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"VCS Pull Request","slug":"vcs-pull-request","link":"#vcs-pull-request","children":[]},{"level":2,"title":"API call","slug":"api-call","link":"#api-call","children":[]},{"level":2,"title":"CLI 수행","slug":"cli-수행","link":"#cli-수행","children":[]},{"level":2,"title":"마치며","slug":"마치며","link":"#마치며","children":[]}],"git":{"createdTime":1640262000000,"updatedTime":1695042774000,"contributors":[{"name":"Administrator","email":"admin@example.com","commits":1},{"name":"Great-Stone","email":"hahohh@gmail.com","commits":1}]},"readingTime":{"minutes":4.12,"words":247},"filePathRelative":"04-HashiCorp/03-Terraform/01-Information/remoteruns.md","localizedDate":"2021년 12월 23일","excerpt":"\\n<p>Terraform의 Remote Runs이라는 기능에 대해 확인합니다.</p>\\n<p>Terraform Cloud와 Terraform Enterprise는 원격으로 트리거링 되어 동작하는 메커니즘을 제공하고 있습니다.</p>\\n<iframe width=\\"560\\" height=\\"315\\" src=\\"https://www.youtube.com/embed/fqCcVYm7u4g\\" frameborder=\\"0\\" allow=\\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\\" allowfullscreen=\\"\\"></iframe>"}');export{v as comp,f as data};
