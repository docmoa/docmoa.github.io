import{_ as a,a as e,b as i,c as l,d as p,e as t}from"./1563945539114-BeDUHaoS.js";import{_ as c}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as o,o as d,c as r,b as u,a as n,h as v}from"./app-DVMlqOhY.js";const m={},b=n("h1",{id:"_2-jobs",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_2-jobs"},[n("span",null,"2. Jobs")])],-1),g=n("p",null,"프로젝트는 Job의 일부 입니다. 즉, 모든 프로젝트가 Job이지만 모든 Job이 프로젝트는 아닙니다. Job의 구조는 다음과 같습니다.",-1),k=v(`<p>FreeStyleProejct, MatrixProject, ExternalJob만 <code>New job</code>에 표시됩니다.</p><h2 id="_2-1-new-pipeline" tabindex="-1"><a class="header-anchor" href="#_2-1-new-pipeline"><span>2.1 New pipeline</span></a></h2><p>Step 1에서는 <code>stage</code>없이 기본 Pipeline을 실행하여 수행 테스트를 합니다.</p><ol><li><p>Jenkins 로그인</p></li><li><p>좌측 <code>새로운 Item</code> 클릭</p></li><li><p><code>Enter an item name</code>에 Job 이름 설정 (e.g. 2.Jobs)</p></li><li><p><code>Pipeline</code> 선택 후 <code>OK</code> 버튼 클릭</p></li><li><p><code>Pipeline</code> 항목 오른 쪽 <code>Try sample Pipelie...</code>클릭하여 <code>Hello world</code> 클릭 후 저장</p><div class="language-groovy" data-highlighter="prismjs" data-ext="groovy" data-title="groovy"><pre class="language-groovy"><code><span class="line">node <span class="token punctuation">{</span></span>
<span class="line">   echo <span class="token string">&#39;Hello World&#39;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre></div></li><li><p>좌측 <code>Build now</code>클릭</p></li><li><p>좌측 <code>Build History</code>의 최근 빌드된 항목(e.g. #1) 우측에 마우스를 가져가면 dropdown 버튼이 생깁니다. 해당 버튼을 클릭하여 <code>Console Output</code> 클릭</p></li><li><p>수행된 <code>echo</code> 동작 출력을 확인합니다.</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre class="language-text"><code><span class="line">Started by user GyuSeok.Lee</span>
<span class="line">Running in Durability level: MAX_SURVIVABILITY</span>
<span class="line">[Pipeline] Start of Pipeline</span>
<span class="line">[Pipeline] node</span>
<span class="line">Running on Jenkins in /var/lib/jenkins/workspace/2.Jobs</span>
<span class="line">[Pipeline] {</span>
<span class="line">[Pipeline] echo</span>
<span class="line">Hello World</span>
<span class="line">[Pipeline] }</span>
<span class="line">[Pipeline] // node</span>
<span class="line">[Pipeline] End of Pipeline</span>
<span class="line">Finished: SUCCESS</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><h2 id="_2-2-new-pipeline" tabindex="-1"><a class="header-anchor" href="#_2-2-new-pipeline"><span>2.2 New pipeline</span></a></h2><p>Step 2에서는 <code>stage</code> 를 구성하여 실행합니다.</p><ol><li><p>기존 생성한 Job 클릭 (e.g. 02-02.Jobs)</p></li><li><p>좌측 <code>구성</code>을 클릭하여 <code>Pipeline</code> 스크립트를수정합니다.</p><div class="language-groovy line-numbers-mode" data-highlighter="prismjs" data-ext="groovy" data-title="groovy"><pre class="language-groovy"><code><span class="line">pipeline<span class="token punctuation">{</span></span>
<span class="line">    agent any</span>
<span class="line">    stages <span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">stage</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">&quot;Hello&quot;</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            steps <span class="token punctuation">{</span></span>
<span class="line">                echo <span class="token string">&#39;Hello World&#39;</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>수정 후 좌측 <code>Build Now</code>를 클릭하여 빌드 수행 후 결과를 확인합니다.</p></li><li><p><code>Step 1</code>에서의 결과와는 달리 <code>Stage View</code>항목과 Pipeline stage가 수행된 결과를 확인할 수 있는 UI가 생성됩니다.</p><figure><img src="`+a+`" alt="1563942302074" tabindex="0" loading="lazy"><figcaption>1563942302074</figcaption></figure></li><li><p>수행된 빌드의 <code>Console Output</code>을 확인하면 앞서 <code>Step 1</code>에서는 없던 stage 항목이 추가되어 수행됨을 확인 할 수 있습니다.</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre class="language-text"><code><span class="line">Started by user GyuSeok.Lee</span>
<span class="line">Running in Durability level: MAX_SURVIVABILITY</span>
<span class="line">[Pipeline] Start of Pipeline</span>
<span class="line">[Pipeline] node</span>
<span class="line">Running on Jenkins in /var/lib/jenkins/workspace/2.Jobs</span>
<span class="line">[Pipeline] {</span>
<span class="line">[Pipeline] stage</span>
<span class="line">[Pipeline] { (Hello)</span>
<span class="line">[Pipeline] echo</span>
<span class="line">Hello World</span>
<span class="line">[Pipeline] }</span>
<span class="line">[Pipeline] // stage</span>
<span class="line">[Pipeline] }</span>
<span class="line">[Pipeline] // node</span>
<span class="line">[Pipeline] End of Pipeline</span>
<span class="line">Finished: SUCCESS</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><h2 id="_2-3-parameterizing-a-job" tabindex="-1"><a class="header-anchor" href="#_2-3-parameterizing-a-job"><span>2.3 Parameterizing a job</span></a></h2><p>Pipeline 내에서 사용되는 매개변수 정의를 확인해 봅니다. Pipeline 스크립트는 다음과 같습니다.</p><div class="language-groovy line-numbers-mode" data-highlighter="prismjs" data-ext="groovy" data-title="groovy"><pre class="language-groovy"><code><span class="line">pipeline <span class="token punctuation">{</span></span>
<span class="line">    agent any</span>
<span class="line">    parameters <span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">string</span><span class="token punctuation">(</span>name<span class="token punctuation">:</span> <span class="token string">&#39;Greeting&#39;</span><span class="token punctuation">,</span> defaultValue<span class="token punctuation">:</span> <span class="token string">&#39;Hello&#39;</span><span class="token punctuation">,</span> description<span class="token punctuation">:</span> <span class="token string">&#39;How should I greet the world?&#39;</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    stages <span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">stage</span><span class="token punctuation">(</span><span class="token string">&#39;Example&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            steps <span class="token punctuation">{</span></span>
<span class="line">                echo <span class="token interpolation-string"><span class="token string">&quot;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token expression">params<span class="token punctuation">.</span>Greeting</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> World!&quot;</span></span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>parameters</code>항목내에 매개변수의 데이터 유형(e.g. string)을 정의합니다. <code>name</code>은 값을 담고있는 변수이고 <code>defaultValue</code>의 값을 반환합니다. Pipeline에 정의된 <code>parameters</code>는 <code>params</code>내에 정의 되므로 <code>\${params.매개변수이름}</code>과 같은 형태로 호출 됩니다.</p><p>저장 후 다시 <code>구성</code>을 확인하면 <code>이 빌드는 매개변수가 있습니다</code>가 활성화 되고 내부에 추가된 매개변수 항목을 확인 할 수 있습니다.</p><figure><img src="`+e+'" alt="1563944944350" tabindex="0" loading="lazy"><figcaption>1563944944350</figcaption></figure><p>이렇게 저장된 Pipeline Job은 매개변수를 외부로부터 받을 수 있습니다. 따라서 좌측의 기존 <code>Build Now</code>는 <code>build with Parameters</code>로 변경되었고, 이를 클릭하면 Greeting을 정의할 수 있는 UI가 나타납니다. 해당 매개변수를 재정의 하여 빌드를 수행할 수 있습니다.</p><figure><img src="'+i+'" alt="1563944733249" tabindex="0" loading="lazy"><figcaption>1563944733249</figcaption></figure><figure><img src="'+l+`" alt="1563944765637" tabindex="0" loading="lazy"><figcaption>1563944765637</figcaption></figure><h2 id="_2-4-creating-multiple-steps-for-a-job" tabindex="-1"><a class="header-anchor" href="#_2-4-creating-multiple-steps-for-a-job"><span>2.4 Creating multiple steps for a job</span></a></h2><p>다중스텝을 위한 Pipeline 타입의 Item을 추가로 생성합니다. (e.g. 02-04.MultiStep)</p><p>Pipeline에 다음과 같이 스크립트를 추가합니다.</p><div class="language-groovy line-numbers-mode" data-highlighter="prismjs" data-ext="groovy" data-title="groovy"><pre class="language-groovy"><code><span class="line">pipeline <span class="token punctuation">{</span></span>
<span class="line">    agent any</span>
<span class="line">    stages <span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">stage</span><span class="token punctuation">(</span><span class="token string">&#39;Build&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            steps <span class="token punctuation">{</span></span>
<span class="line">                sh <span class="token string">&#39;echo &quot;Hello World&quot;&#39;</span></span>
<span class="line">                sh <span class="token string">&#39;&#39;&#39;</span>
<span class="line">                    echo &quot;Multiline shell steps works too&quot;</span>
<span class="line">                    ls -lah</span>
<span class="line">                &#39;&#39;&#39;</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>&#39;&#39;&#39;</code>은 스크립트 정의 시 여러줄을 입력할 수 있도록 묶어주는 역할을 합니다. 해당 스크립트에서는 <code>sh</code>로 구분된 스크립트 명령줄이 두번 수행됩니다.</p><figure><img src="`+p+`" alt="1563945323777" tabindex="0" loading="lazy"><figcaption>1563945323777</figcaption></figure><p>실행되는 여러 스크립트의 수행을 <code>stage</code>로 구분하기위해 기존 Pipeline 스크립트를 다음과 같이 수정합니다.</p><div class="language-groovy line-numbers-mode" data-highlighter="prismjs" data-ext="groovy" data-title="groovy"><pre class="language-groovy"><code><span class="line">pipeline <span class="token punctuation">{</span></span>
<span class="line">    agent any</span>
<span class="line">    stages <span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">stage</span><span class="token punctuation">(</span><span class="token string">&#39;Build-1&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            steps <span class="token punctuation">{</span></span>
<span class="line">                sh <span class="token string">&#39;echo &quot;Hello World&quot;&#39;</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">        <span class="token function">stage</span><span class="token punctuation">(</span><span class="token string">&#39;Build-2&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            steps <span class="token punctuation">{</span></span>
<span class="line">                sh <span class="token string">&#39;&#39;&#39;</span>
<span class="line">                    echo &quot;Multiline shell steps works too&quot;</span>
<span class="line">                    ls -lah</span>
<span class="line">                &#39;&#39;&#39;</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>stage를 구분하였기 때문에 각 실행되는 <code>sh</code> 스크립트는 각 스테이지에서 한번씩 수행되며, 이는 빌드의 결과로 나타납니다.</p><figure><img src="`+t+`" alt="1563945539114" tabindex="0" loading="lazy"><figcaption>1563945539114</figcaption></figure><h2 id="_2-5-adding-scripts-as-a-job-step" tabindex="-1"><a class="header-anchor" href="#_2-5-adding-scripts-as-a-job-step"><span>2.5 Adding scripts as a job step</span></a></h2><p>Pipeline의 step을 추가하여 결과를 확인하는 과정을 설명합니다. 피보나치 수열을 수행하는 쉘 스크립트를 시간제한을 두어 수행하고 그 결과를 확인합니다.</p><p>Jenkins가 설치된 서버에 [피보나치 수열]([<a href="https://namu.wiki/w/%ED%94%BC%EB%B3%B4%EB%82%98%EC%B9%98%20%EC%88%98%EC%97%B4" target="_blank" rel="noopener noreferrer">https://namu.wiki/w/피보나치 수열</a>](<a href="https://namu.wiki/w/%ED%94%BC%EB%B3%B4%EB%82%98%EC%B9%98" target="_blank" rel="noopener noreferrer">https://namu.wiki/w/피보나치</a> 수열))을 수행하는 스크립트를 작성합니다. Sleep이 있기 때문에 일정 시간 이상 소요 됩니다.</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="line">$ <span class="token function">mkdir</span> <span class="token parameter variable">-p</span> /var/jenkins_home/scripts</span>
<span class="line">$ <span class="token builtin class-name">cd</span> /var/jenkins_home/scripts</span>
<span class="line">$ <span class="token function">vi</span> ./fibonacci.sh</span>
<span class="line"><span class="token comment">#!/bin/bash</span></span>
<span class="line"><span class="token assign-left variable">N</span><span class="token operator">=</span><span class="token variable">\${1<span class="token operator">:-</span>10}</span></span>
<span class="line"></span>
<span class="line"><span class="token assign-left variable">a</span><span class="token operator">=</span><span class="token number">0</span></span>
<span class="line"><span class="token assign-left variable">b</span><span class="token operator">=</span><span class="token number">1</span></span>
<span class="line"></span>
<span class="line"><span class="token builtin class-name">echo</span> <span class="token string">&quot;The Fibonacci series is : &quot;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">for</span> <span class="token variable"><span class="token punctuation">((</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>N<span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">))</span></span></span>
<span class="line"><span class="token keyword">do</span></span>
<span class="line">    <span class="token builtin class-name">echo</span> <span class="token string">&quot;<span class="token variable">$a</span>&quot;</span></span>
<span class="line">    <span class="token function">sleep</span> <span class="token number">2</span></span>
<span class="line">    <span class="token assign-left variable">fn</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$((</span>a <span class="token operator">+</span> b<span class="token variable">))</span></span></span>
<span class="line">    <span class="token assign-left variable">a</span><span class="token operator">=</span><span class="token variable">$b</span></span>
<span class="line">    <span class="token assign-left variable">b</span><span class="token operator">=</span><span class="token variable">$fn</span></span>
<span class="line"><span class="token keyword">done</span></span>
<span class="line"><span class="token comment"># End of for loop</span></span>
<span class="line"></span>
<span class="line">$ <span class="token function">chown</span> <span class="token parameter variable">-R</span> jenkins /var/jenkins_home/</span>
<span class="line">$ <span class="token function">chmod</span> +x /var/jenkins_home/scripts/fibonacci.sh</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>다중스텝을 위한 Pipeline 타입의 Item을 추가로 생성합니다. (e.g. 02-05.AddingStep)</p><p>Pipeline에 다음과 같이 스크립트를 추가합니다.</p><div class="language-groovy line-numbers-mode" data-highlighter="prismjs" data-ext="groovy" data-title="groovy"><pre class="language-groovy"><code><span class="line">pipeline <span class="token punctuation">{</span></span>
<span class="line">    agent any</span>
<span class="line">    stages <span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">stage</span><span class="token punctuation">(</span><span class="token string">&#39;Deploy&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            steps <span class="token punctuation">{</span></span>
<span class="line">                <span class="token function">timeout</span><span class="token punctuation">(</span>time<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> unit<span class="token punctuation">:</span> <span class="token string">&#39;MINUTES&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">                    sh <span class="token string">&#39;/var/jenkins_home/scripts/fibonacci.sh 5&#39;</span></span>
<span class="line">                <span class="token punctuation">}</span></span>
<span class="line">                <span class="token function">timeout</span><span class="token punctuation">(</span>time<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> unit<span class="token punctuation">:</span> <span class="token string">&#39;MINUTES&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">                    sh <span class="token string">&#39;/var/jenkins_home/scripts/fibonacci.sh 32&#39;</span></span>
<span class="line">                <span class="token punctuation">}</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>steps</code>에 스크립트를 <code>timeout</code>이 감싸고 있으며, 각 스크립트의 제한시간은 1분입니다. 빌드를 수행하면 최종적으로는 <code>aborted</code>, 즉 중단됨 상태가 되는데 그 이유는 빌드 기록에서 해당 빌드를 클릭하면 확인 가능합니다.</p><ul><li><p><code>Build History</code>에서 최신 빌드를 클릭합니다.</p></li><li><p>좌측 <code>Pipeline Steps</code>를 클릭하면 Pipeline 수행 스텝을 확인할 수 있습니다.</p></li><li><p>첫번째로 나타나는 <code>/var/jenkins_home/scripts/fibonacci.sh 5</code> 를 수행하는 <code>Shell Script</code>의 콘솔창 버튼을 클릭하면 잘 수행되었음을 확인 할 수 있습니다.</p></li><li><p>두번째로 나타나는 <code>/var/jenkins_home/scripts/fibonacci.sh 32</code> 를 수행하는 <code>Shell Script</code>의 콘솔창 버튼을 클릭하면 다음과 같이 중도에 프로세스를 중지한 것을 확인 할 수 있습니다.</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre class="language-text"><code><span class="line">+ /var/jenkins_home/scripts/fibonacci.sh 32</span>
<span class="line">The Fibonacci series is : </span>
<span class="line">0</span>
<span class="line">1</span>
<span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">...</span>
<span class="line">317811</span>
<span class="line">514229</span>
<span class="line">Sending interrupt signal to process</span>
<span class="line">/var/jenkins_home/scripts/fibonacci.sh: line 16: 13543 Terminated              sleep 2</span>
<span class="line">832040</span>
<span class="line">/var/lib/jenkins/workspace/02-05.AddingStep@tmp/durable-e44bb232/script.sh: line 1: 13109 Terminated              /var/jenkins_home/scripts/fibonacci.sh 32</span>
<span class="line">script returned exit code 143</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul>`,35);function h(f,y){const s=o("Mermaid");return d(),r("div",null,[b,g,u(s,{id:"mermaid-6",code:"eJxtjk0KwkAMRveeYpbpolcQpr8qCmLBfabEOlJmJKZYb68NIhaa5XuP8HWM96vZn1bmcxZ20SUmTdcZWPcQxlaOHG/USqJBNjlTwQGF/bigapjBWuEGKiZq5NXTgt1+v+UxXHw3MIqPYdZZ7XJoZHDTwD9YwNnT8wcLhSWUoxAH7FW8AUDhPw0="}),k])}const x=c(m,[["render",h],["__file","02-jobs.html.vue"]]),w=JSON.parse(`{"path":"/05-Software/Jenkins/pipeline101/02-jobs.html","title":"2. Jobs","lang":"ko-KR","frontmatter":{"description":"jenkins 101","tag":["cicd","jenkins"],"head":[["meta",{"property":"og:url","content":"https://docmoa.github.io/05-Software/Jenkins/pipeline101/02-jobs.html"}],["meta",{"property":"og:site_name","content":"docmoa"}],["meta",{"property":"og:title","content":"2. Jobs"}],["meta",{"property":"og:description","content":"jenkins 101"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"ko-KR"}],["meta",{"property":"og:updated_time","content":"2023-09-18T13:12:54.000Z"}],["meta",{"property":"article:tag","content":"cicd"}],["meta",{"property":"article:tag","content":"jenkins"}],["meta",{"property":"article:modified_time","content":"2023-09-18T13:12:54.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"2. Jobs\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2023-09-18T13:12:54.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"2.1 New pipeline","slug":"_2-1-new-pipeline","link":"#_2-1-new-pipeline","children":[]},{"level":2,"title":"2.2 New pipeline","slug":"_2-2-new-pipeline","link":"#_2-2-new-pipeline","children":[]},{"level":2,"title":"2.3 Parameterizing a job","slug":"_2-3-parameterizing-a-job","link":"#_2-3-parameterizing-a-job","children":[]},{"level":2,"title":"2.4 Creating multiple steps for a job","slug":"_2-4-creating-multiple-steps-for-a-job","link":"#_2-4-creating-multiple-steps-for-a-job","children":[]},{"level":2,"title":"2.5 Adding scripts as a job step","slug":"_2-5-adding-scripts-as-a-job-step","link":"#_2-5-adding-scripts-as-a-job-step","children":[]}],"git":{"createdTime":1640327880000,"updatedTime":1695042774000,"contributors":[{"name":"Administrator","email":"admin@example.com","commits":1},{"name":"Great-Stone","email":"hahohh@gmail.com","commits":1}]},"readingTime":{"minutes":9.13,"words":548},"filePathRelative":"05-Software/Jenkins/pipeline101/02-jobs.md","localizedDate":"2021년 12월 24일","excerpt":"\\n<p>프로젝트는 Job의 일부 입니다. 즉, 모든 프로젝트가 Job이지만 모든 Job이 프로젝트는 아닙니다. Job의 구조는 다음과 같습니다.</p>\\n<p>FreeStyleProejct, MatrixProject, ExternalJob만 <code>New job</code>에 표시됩니다.</p>\\n<h2>2.1 New pipeline</h2>\\n<p>Step 1에서는 <code>stage</code>없이 기본 Pipeline을 실행하여 수행 테스트를 합니다.</p>\\n<ol>\\n<li>\\n<p>Jenkins 로그인</p>\\n</li>\\n<li>\\n<p>좌측 <code>새로운 Item</code> 클릭</p>\\n</li>\\n<li>\\n<p><code>Enter an item name</code>에 Job 이름 설정 (e.g. 2.Jobs)</p>\\n</li>\\n<li>\\n<p><code>Pipeline</code> 선택 후 <code>OK</code> 버튼 클릭</p>\\n</li>\\n<li>\\n<p><code>Pipeline</code> 항목 오른 쪽 <code>Try sample Pipelie...</code>클릭하여 <code>Hello world</code> 클릭 후 저장</p>\\n<div class=\\"language-groovy\\" data-highlighter=\\"prismjs\\" data-ext=\\"groovy\\" data-title=\\"groovy\\"><pre class=\\"language-groovy\\"><code><span class=\\"line\\">node <span class=\\"token punctuation\\">{</span></span>\\n<span class=\\"line\\">   echo <span class=\\"token string\\">'Hello World'</span></span>\\n<span class=\\"line\\"><span class=\\"token punctuation\\">}</span></span>\\n<span class=\\"line\\"></span></code></pre></div></li>\\n<li>\\n<p>좌측 <code>Build now</code>클릭</p>\\n</li>\\n<li>\\n<p>좌측 <code>Build History</code>의 최근 빌드된 항목(e.g. #1) 우측에 마우스를 가져가면 dropdown 버튼이 생깁니다. 해당 버튼을 클릭하여 <code>Console Output</code> 클릭</p>\\n</li>\\n<li>\\n<p>수행된 <code>echo</code> 동작 출력을 확인합니다.</p>\\n<div class=\\"language-text\\" data-highlighter=\\"prismjs\\" data-ext=\\"text\\" data-title=\\"text\\"><pre class=\\"language-text\\"><code><span class=\\"line\\">Started by user GyuSeok.Lee</span>\\n<span class=\\"line\\">Running in Durability level: MAX_SURVIVABILITY</span>\\n<span class=\\"line\\">[Pipeline] Start of Pipeline</span>\\n<span class=\\"line\\">[Pipeline] node</span>\\n<span class=\\"line\\">Running on Jenkins in /var/lib/jenkins/workspace/2.Jobs</span>\\n<span class=\\"line\\">[Pipeline] {</span>\\n<span class=\\"line\\">[Pipeline] echo</span>\\n<span class=\\"line\\">Hello World</span>\\n<span class=\\"line\\">[Pipeline] }</span>\\n<span class=\\"line\\">[Pipeline] // node</span>\\n<span class=\\"line\\">[Pipeline] End of Pipeline</span>\\n<span class=\\"line\\">Finished: SUCCESS</span>\\n<span class=\\"line\\"></span></code></pre></div></li>\\n</ol>"}`);export{x as comp,w as data};
