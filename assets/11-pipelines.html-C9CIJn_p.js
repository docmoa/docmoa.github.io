import{_ as n,a as s,b as a,c as e,d as i,e as p,f as t}from"./1564557613406-aoabhQ4f.js";import{_ as l}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o,c,h as u}from"./app-DVMlqOhY.js";const r={},d=u(`<h1 id="_11-pipelines" tabindex="-1"><a class="header-anchor" href="#_11-pipelines"><span>11. Pipelines</span></a></h1><h2 id="_11-1-automating-deployment-with-pipelines" tabindex="-1"><a class="header-anchor" href="#_11-1-automating-deployment-with-pipelines"><span>11.1 Automating deployment with pipelines</span></a></h2><p>Pipeline 타입의 Item을 추가로 생성합니다. (e.g. 11-01.AutomatingDeploymentWithPipelines)</p><p>Pipeline에 다음과 같은 스크립트를 입력합니다.</p><div class="language-groovy line-numbers-mode" data-highlighter="prismjs" data-ext="groovy" data-title="groovy"><pre class="language-groovy"><code><span class="line">pipeline <span class="token punctuation">{</span></span>
<span class="line">    agent any</span>
<span class="line">    stages <span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">stage</span><span class="token punctuation">(</span><span class="token string">&#39;Build&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            steps <span class="token punctuation">{</span></span>
<span class="line">                sh <span class="token string">&#39;echo &quot;Hello World&quot;&#39;</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">        <span class="token function">stage</span><span class="token punctuation">(</span><span class="token string">&#39;Test&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            steps <span class="token punctuation">{</span></span>
<span class="line">                sh <span class="token string">&#39;echo &quot;Test Hello World!&quot;&#39;</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>두개의 Stage를 갖는 Pipeline 스크립트입니다. Pipeline은 빌드 수행시의 각 단계를 구분하여 빌드의 과정을 확인하고 실패에 따른 단계별 확인이 가능합니다.</p><p>좌측 <code>Build Now</code>를 클릭하여 빌드를 수행하면 빌드에 대한 결과는 Stage 별로 성공 실패의 여부와 로그를 확인할 수 있도록 <code>Stage View</code>가 UI로 제공됩니다. Stage 별로 Stage View는 기록되며, Stage에 변경이 있거나 이름이 변경되는 경우에는 해당 UI에 변경이 발생하여 기존 Pipeline 기록을 보지 못할 수 있습니다.</p><figure><img src="`+n+`" alt="1564547435978" tabindex="0" loading="lazy"><figcaption>1564547435978</figcaption></figure><h2 id="_11-2-creating-pipeline-gates" tabindex="-1"><a class="header-anchor" href="#_11-2-creating-pipeline-gates"><span>11.2 Creating pipeline gates</span></a></h2><p>Pipeline 타입의 Item을 추가로 생성합니다. (e.g. 11-02.CreatingPipelineGates)</p><p>Pipeline에 다음과 같은 스크립트를 입력합니다.</p><div class="language-groovy line-numbers-mode" data-highlighter="prismjs" data-ext="groovy" data-title="groovy"><pre class="language-groovy"><code><span class="line">pipeline <span class="token punctuation">{</span></span>
<span class="line">    agent any</span>
<span class="line">    stages <span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">stage</span><span class="token punctuation">(</span><span class="token string">&#39;Build&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            steps <span class="token punctuation">{</span></span>
<span class="line">                sh <span class="token string">&#39;echo &quot;Hello World&quot;&#39;</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">        <span class="token function">stage</span><span class="token punctuation">(</span><span class="token string">&#39;BuildMore&#39;</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">            steps <span class="token punctuation">{</span></span>
<span class="line">                input message<span class="token punctuation">:</span> <span class="token interpolation-string"><span class="token string">&quot;Shall we build more?&quot;</span></span></span>
<span class="line">                sh <span class="token string">&#39;&#39;&#39;</span>
<span class="line">                    echo &quot;We are approved; continue!&quot;</span>
<span class="line">                    ls -lah</span>
<span class="line">                &#39;&#39;&#39;</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>개의 Stage를 갖는 Pipeline 스크립트입니다. 두번째 Stage에 <code>input</code> 스크립트가 있습니다. 이 스크립트가 추가되면 Pipeline을 진행하면서 해당하는 동작을 수행할 것인지, 마치 승인 작업과 같은 동작을 수행할 수 있습니다.</p><p>좌측 <code>Build Now</code>를 클릭하여 빌드를 수행하면 두번째 Stage에서 해당 작업을 수행할 지에 대한 물음을 확인 할 수 있습니다.</p><figure><img src="`+s+`" alt="1564547694870" tabindex="0" loading="lazy"><figcaption>1564547694870</figcaption></figure><p><code>Abort</code>를 선택하면 빌드 취소와 같은 동작으로 실패로 처리되지는 않습니다.</p><h2 id="_11-3-job-promotion-for-long-running-pipeline" tabindex="-1"><a class="header-anchor" href="#_11-3-job-promotion-for-long-running-pipeline"><span>11.3 Job promotion for long-running pipeline</span></a></h2><p>빌드 단계를 구현할 때 Pipeline 스크립트로 하나의 프로젝트 내에서 모든 동작을 정의 할 수도 있지만 서로다른 Job을 연계하고, 승인 절차를 따르도록 구성할 수 있습니다.</p><p>Job promotion 기능을 사용하기 위한 플러그인을 설치합니다.</p><ul><li><code>Jenkins 관리</code>에서 <code>플러그인 관리</code>를 선택합니다.</li><li><code>설치 가능</code> 탭을 클릭하고 상단의 검색에 <code>promoted</code>를 입력하면 <code>promoted builds</code>를 확인 할 수 있습니다. 설치합니다.</li></ul><p>FreeStyle 타입의 Item을 생성합니다. (e.g. 11-03.Job-one)</p><ul><li><p>General 탭의 <code>Promote builds when...</code>를 활성화 하여 설정합니다.</p><ul><li>Name : Manual</li><li>Criteria 설정의 <code>Only when manually approved</code> 활성화 <ul><li>Approvers : 승인자를 입력합니다. (e.g. admin)</li><li><code>ADD PRAMETER</code> 드롭박스에서 <code>Boolean Parameter</code>를 선택합니다. <ul><li>Name : approve</li></ul></li></ul></li></ul></li><li><p>Build 드롭박스에서 <code>Execute shell</code>을 선택합니다.</p></li><li><p>다음을 입력합니다.</p><div class="language-bash" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="line"><span class="token builtin class-name">echo</span> <span class="token string">&#39;This is the Job-one&#39;</span></span>
<span class="line"></span></code></pre></div></li><li><p>저장하면 생성된 프로젝트에 <code>Promotion Status</code>항목이 추가되어 생성됩니다.</p></li></ul><p><code>11-03.Job-one</code> 빌드 후 승인에 대한 다음 빌드를 진행할 FreeStyle 타입의 Item을 생성합니다. (e.g. 11-03.Job-two)</p><ul><li><p>빌드 유발 항목에서 <code>Build when another project is promoted</code>를 활성화 합니다. 어떤 Job에서 promote 상황이 발생하였을 때 빌드를 수행할지 지정합니다.</p><ul><li>Job Name : 11-03.Job-one</li><li>Promotion : Manual</li></ul></li><li><p>Build 드롭박스에서 <code>Execute shell</code>을 선택합니다.</p></li><li><p>다음을 입력합니다.</p><div class="language-bash" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="line"><span class="token builtin class-name">echo</span> <span class="token string">&#39;This is the Job-two&#39;</span></span>
<span class="line"></span></code></pre></div></li></ul><p><code>11-03.Job-one</code>에 대한 빌드를 수행합니다. 수행 완료 후 빌드 히스토리의 최근 빌드를 클릭(e.g. #1)하면 <code>Promotion Status</code>에 승인절차를 기다리고 있음을 확인할 수 있습니다. Parameters 항목의 <code>approve</code>를 체크하고 <code>APPROVE</code>버튼을 클릭합니다.</p><figure><img src="`+a+'" alt="1564554095622" tabindex="0" loading="lazy"><figcaption>1564554095622</figcaption></figure><p>승인이 완료되면 해당 프로젝트의 승인에 대한 이벤트를 통해 빌드를 수행하는 <code>11-03.Job-two</code>가 이어서 빌드됨을 확인 할 수 있습니다.</p><h2 id="_11-4-multibranch-repository-automation" tabindex="-1"><a class="header-anchor" href="#_11-4-multibranch-repository-automation"><span>11.4 Multibranch repository automation</span></a></h2><p>SCM의 Multibranch를 빌드하는 과정에 대해 설명합니다.</p><p>다음의 GitHub repository를 fork 합니다.</p><ul><li><a href="https://github.com/Great-Stone/multibranch-demo" target="_blank" rel="noopener noreferrer">https://github.com/Great-Stone/multibranch-demo</a></li></ul><p>Multibranch Pipeline 형태의 Item을 생성합니다. (e.g. 11-04.MultibranchRepositoryAutomation)</p><ul><li>Branch Sources의 <code>ADD SOURCE</code>드롭박스에서 GitHub를 클릭합니다. <ul><li>Credentials에서 앞서 생성한 GitHub 접속을 위한 Credential을 선택합니다.</li><li>Repository HTTPS URL에 앞서 fork한 GitHub URL을 입력하고 <code>VALIDATE</code>버튼을 클릭하여 잘 접근 되는지 확인합니다.</li></ul></li><li>Scan Multibranch Pipeline Triggers에서 <code>Periodically if not otherwise run</code>를 활성화 합니다. <ul><li>Interval 주기를 <code>1 minute</code>으로 설정합니다.</li></ul></li></ul><p>저장 후에는 자동적으로 모든 브랜치의 소스를 빌드 수행합니다.</p><figure><img src="'+e+'" alt="1564555063361" tabindex="0" loading="lazy"><figcaption>1564555063361</figcaption></figure><figure><img src="'+i+`" alt="1564554995103" tabindex="0" loading="lazy"><figcaption>1564554995103</figcaption></figure><p>SCM에서 브랜치를 여러개 관리하고 모두 빌드와 테스팅이 필요하다면 Multibranch 프로젝트를 생성하여 등록하고, 빌드 관리가 가능합니다.</p><h2 id="_11-5-creating-pipeline-with-snippets" tabindex="-1"><a class="header-anchor" href="#_11-5-creating-pipeline-with-snippets"><span>11.5 Creating pipeline with snippets</span></a></h2><p>Pipeline 을 스크립트를 작성하는 방법을 배워봅니다. Pipeline 타입의 Item을 생성합니다. (e.g. 11-05. CreatingPipelineWithSnippets)</p><p>Pipeline에 다음과 같은 스크립트를 입력합니다.</p><div class="language-groovy line-numbers-mode" data-highlighter="prismjs" data-ext="groovy" data-title="groovy"><pre class="language-groovy"><code><span class="line">pipeline <span class="token punctuation">{</span></span>
<span class="line">    agent any</span>
<span class="line">    stages <span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">stage</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">&quot;Hello&quot;</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            steps <span class="token punctuation">{</span></span>
<span class="line">                echo <span class="token string">&#39;Hello World&#39;</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>echo가 동작할때 시간을 기록하도록 스크립트를 수정해보겠습니다.</p><ul><li><p>Pipeline Syntax 링크를 클릭합니다.</p></li><li><p>Sample Step에서 <code>timestamps: timestamps</code>를 선택하고 <code>GENERATE PIPELINE SCRIPT</code>버튼을 클릭합니다.</p><div class="language-groovy" data-highlighter="prismjs" data-ext="groovy" data-title="groovy"><pre class="language-groovy"><code><span class="line">timestamps <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// some block</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre></div></li><li><p>사용방식을 확인하고 앞서 Pipeline 스크립트의 stage에 시간을 기록하도록 수정합니다.</p><div class="language-groovy" data-highlighter="prismjs" data-ext="groovy" data-title="groovy"><pre class="language-groovy"><code><span class="line"><span class="token punctuation">...</span></span>
<span class="line"><span class="token function">stage</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">&quot;Hello&quot;</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    steps <span class="token punctuation">{</span></span>
<span class="line">        timestamps <span class="token punctuation">{</span></span>
<span class="line">            echo <span class="token string">&#39;Hello World&#39;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">...</span></span>
<span class="line"></span></code></pre></div></li></ul><p>빌드를 수행하고 로그를 확인해 봅니다. echo 동작이 수행 될때 시간이 함께 표기되는 것을 확인 할 수 있습니다.</p><figure><img src="`+p+`" alt="1564555730104" tabindex="0" loading="lazy"><figcaption>1564555730104</figcaption></figure><h2 id="_11-6-discovering-global-pipeline-variables" tabindex="-1"><a class="header-anchor" href="#_11-6-discovering-global-pipeline-variables"><span>11.6 Discovering global pipeline variables</span></a></h2><p>Pipeline에서 사용할 수 있는 변수를 확인하고 사용하는 방법을 알아봅니다. Pipeline 타입의 Item을 생성합니다. (e.g. 11-06.DiscoveringGlobalPipelineVariables)</p><p>Pipeline에 다음과 같은 스크립트를 입력합니다.</p><div class="language-groovy line-numbers-mode" data-highlighter="prismjs" data-ext="groovy" data-title="groovy"><pre class="language-groovy"><code><span class="line">pipeline <span class="token punctuation">{</span></span>
<span class="line">    agent any</span>
<span class="line">    stages <span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">stage</span><span class="token punctuation">(</span><span class="token string">&#39;Build&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            steps <span class="token punctuation">{</span></span>
<span class="line">               echo <span class="token interpolation-string"><span class="token string">&quot;We are in build </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token expression">currentBuild<span class="token punctuation">.</span>number</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&quot;</span></span></span>
<span class="line">               echo <span class="token interpolation-string"><span class="token string">&quot;Our current result is </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token expression">currentBuild<span class="token punctuation">.</span>currentResult</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&quot;</span></span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">        <span class="token function">stage</span><span class="token punctuation">(</span><span class="token string">&#39;BuildMore&#39;</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">            steps <span class="token punctuation">{</span></span>
<span class="line">               echo <span class="token interpolation-string"><span class="token string">&quot;Name of the project is </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token expression">currentBuild<span class="token punctuation">.</span>projectName</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&quot;</span></span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">        <span class="token function">stage</span><span class="token punctuation">(</span><span class="token string">&#39;BuildEnv&#39;</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">            steps <span class="token punctuation">{</span></span>
<span class="line">                echo <span class="token interpolation-string"><span class="token string">&quot;Jenkins Home : </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token expression">env<span class="token punctuation">.</span>JENKINS_HOME</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&quot;</span></span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Pipeline 스크립트에서 사용가능한 변수와 사용방법은 <code>Pipeline Syntax</code> 링크의 <code>Global Variables Reference</code> 항목에서 확인 가능합니다.</p><figure><img src="`+t+'" alt="1564557613406" tabindex="0" loading="lazy"><figcaption>1564557613406</figcaption></figure>',51),g=[d];function m(v,k){return o(),c("div",null,g)}const f=l(r,[["render",m],["__file","11-pipelines.html.vue"]]),_=JSON.parse(`{"path":"/05-Software/Jenkins/pipeline101/11-pipelines.html","title":"11. Pipelines","lang":"ko-KR","frontmatter":{"description":"jenkins 101","tag":["cicd","jenkins"],"head":[["meta",{"property":"og:url","content":"https://docmoa.github.io/05-Software/Jenkins/pipeline101/11-pipelines.html"}],["meta",{"property":"og:site_name","content":"docmoa"}],["meta",{"property":"og:title","content":"11. Pipelines"}],["meta",{"property":"og:description","content":"jenkins 101"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"ko-KR"}],["meta",{"property":"og:updated_time","content":"2023-09-18T13:12:54.000Z"}],["meta",{"property":"article:tag","content":"cicd"}],["meta",{"property":"article:tag","content":"jenkins"}],["meta",{"property":"article:modified_time","content":"2023-09-18T13:12:54.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"11. Pipelines\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2023-09-18T13:12:54.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"11.1 Automating deployment with pipelines","slug":"_11-1-automating-deployment-with-pipelines","link":"#_11-1-automating-deployment-with-pipelines","children":[]},{"level":2,"title":"11.2 Creating pipeline gates","slug":"_11-2-creating-pipeline-gates","link":"#_11-2-creating-pipeline-gates","children":[]},{"level":2,"title":"11.3 Job promotion for long-running pipeline","slug":"_11-3-job-promotion-for-long-running-pipeline","link":"#_11-3-job-promotion-for-long-running-pipeline","children":[]},{"level":2,"title":"11.4 Multibranch repository automation","slug":"_11-4-multibranch-repository-automation","link":"#_11-4-multibranch-repository-automation","children":[]},{"level":2,"title":"11.5 Creating pipeline with snippets","slug":"_11-5-creating-pipeline-with-snippets","link":"#_11-5-creating-pipeline-with-snippets","children":[]},{"level":2,"title":"11.6 Discovering global pipeline variables","slug":"_11-6-discovering-global-pipeline-variables","link":"#_11-6-discovering-global-pipeline-variables","children":[]}],"git":{"createdTime":1640327880000,"updatedTime":1695042774000,"contributors":[{"name":"Administrator","email":"admin@example.com","commits":1},{"name":"Great-Stone","email":"hahohh@gmail.com","commits":1}]},"readingTime":{"minutes":7.13,"words":428},"filePathRelative":"05-Software/Jenkins/pipeline101/11-pipelines.md","localizedDate":"2021년 12월 24일","excerpt":"\\n<h2>11.1 Automating deployment with pipelines</h2>\\n<p>Pipeline 타입의 Item을 추가로 생성합니다. (e.g. 11-01.AutomatingDeploymentWithPipelines)</p>\\n<p>Pipeline에 다음과 같은 스크립트를 입력합니다.</p>\\n<div class=\\"language-groovy\\" data-highlighter=\\"prismjs\\" data-ext=\\"groovy\\" data-title=\\"groovy\\"><pre class=\\"language-groovy\\"><code><span class=\\"line\\">pipeline <span class=\\"token punctuation\\">{</span></span>\\n<span class=\\"line\\">    agent any</span>\\n<span class=\\"line\\">    stages <span class=\\"token punctuation\\">{</span></span>\\n<span class=\\"line\\">        <span class=\\"token function\\">stage</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">'Build'</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span></span>\\n<span class=\\"line\\">            steps <span class=\\"token punctuation\\">{</span></span>\\n<span class=\\"line\\">                sh <span class=\\"token string\\">'echo \\"Hello World\\"'</span></span>\\n<span class=\\"line\\">            <span class=\\"token punctuation\\">}</span></span>\\n<span class=\\"line\\">        <span class=\\"token punctuation\\">}</span></span>\\n<span class=\\"line\\">        <span class=\\"token function\\">stage</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">'Test'</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span></span>\\n<span class=\\"line\\">            steps <span class=\\"token punctuation\\">{</span></span>\\n<span class=\\"line\\">                sh <span class=\\"token string\\">'echo \\"Test Hello World!\\"'</span></span>\\n<span class=\\"line\\">            <span class=\\"token punctuation\\">}</span></span>\\n<span class=\\"line\\">        <span class=\\"token punctuation\\">}</span></span>\\n<span class=\\"line\\">    <span class=\\"token punctuation\\">}</span></span>\\n<span class=\\"line\\"><span class=\\"token punctuation\\">}</span></span>\\n<span class=\\"line\\"></span></code></pre></div>"}`);export{f as comp,_ as data};
