import{_ as n,a as s,b as a,c as t}from"./1564546697375-DhhAeZD5.js";import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as i,c as p,h as c}from"./app-DVMlqOhY.js";const l={},o=c(`<h1 id="_10-artifacts" tabindex="-1"><a class="header-anchor" href="#_10-artifacts"><span>10. Artifacts</span></a></h1><p>빌드 이후 빌드의 결과를 기록하고 저장하는 방법을 설명합니다.</p><h2 id="_10-1-creating-and-storing-artifacts" tabindex="-1"><a class="header-anchor" href="#_10-1-creating-and-storing-artifacts"><span>10.1 Creating and storing artifacts</span></a></h2><p>Pipeline 타입의 Item을 추가로 생성합니다. (e.g. 10-01.CreatingAndStoringArtifacts)</p><p>Pipeline에 다음과 같이 스크립트를 추가합니다.</p><div class="language-groovy line-numbers-mode" data-highlighter="prismjs" data-ext="groovy" data-title="groovy"><pre class="language-groovy"><code><span class="line">pipeline <span class="token punctuation">{</span></span>
<span class="line">    agent any</span>
<span class="line">    stages<span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">stage</span><span class="token punctuation">(</span><span class="token string">&#39;Build&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            steps<span class="token punctuation">{</span></span>
<span class="line">                sh <span class="token string">&#39;echo &quot;Generating artifacts for \${BUILD_NUMBER}&quot; &gt; output.txt&#39;</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">        <span class="token function">stage</span><span class="token punctuation">(</span><span class="token string">&#39;Archive&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            steps <span class="token punctuation">{</span></span>
<span class="line">                archiveArtifacts artifacts<span class="token punctuation">:</span> <span class="token string">&#39;output.txt&#39;</span><span class="token punctuation">,</span> onlyIfSuccessful<span class="token punctuation">:</span> <span class="token boolean">true</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>Archive</code> Stage에 <code>archiveArtifacts</code> 스크립트가 동작하는 예제입니다. 이같은 Pipeline 스크립트 작성을 도와주는 툴을 추가로 확인해 봅니다.</p><ul><li>Pipeline 하단의 <code>Pipeline Syntax</code> 링크를 클릭합니다.<br><img src="`+n+'" alt="1564546308113" loading="lazy"></li><li><code>Sample Step</code>에서 <code>archiveArtifacts: Archive the artifacts</code>를 선택합니다. <ul><li>Files to archive : output.txt</li><li><code>고급...</code>을 클릭합니다.</li><li>다음 항목을 활성화 합니다. <ul><li>Archive artifacts only if build is successful</li><li>Use default excludes</li><li>Treat include and exclude patterns as case sensitive</li></ul></li><li>하단의 <code>GENERATE PIPELINE SCRIPT</code>를 클릭합니다.</li></ul></li></ul><p>결과물을 확인하면 Pipeline 스크립트에 작성한 형태와 같은 것을 확인 할 수 있습니다.</p><figure><img src="'+s+'" alt="1564545470815" tabindex="0" loading="lazy"><figcaption>1564545470815</figcaption></figure><p>좌측 메뉴의 <code>Build Now</code>를 클릭하여 빌드 수행 후에 화면에 Artifacts 항목이 추가된 것을 확인할 수 있습니다. UI 상에는 마지막 빌드 결과가 강조되어 나오고 각 빌드에 대한 결과물은 각각의 빌드단계의 다운로드 버튼으로 확인하고 다운로드 할 수 있습니다.</p><figure><img src="'+a+`" alt="1564545639205" tabindex="0" loading="lazy"><figcaption>1564545639205</figcaption></figure><h2 id="_10-2-fingerprinting-for-artifact-tracking" tabindex="-1"><a class="header-anchor" href="#_10-2-fingerprinting-for-artifact-tracking"><span>10.2. Fingerprinting for artifact tracking</span></a></h2><p>빌드 이후 보관되는 파일에 대해 어떤 프로젝트, 어떤 빌드 에서 발생한 결과물인지 확인할 수 있는 핑거프린팅 기능을 설명합니다.</p><p><code>Step 1</code>의 프로젝트를 그대로 사용하거나 Pipeline 타입의 Item을 추가로 생성합니다. (e.g. 10-02.FingerprintingForArtifactTracking)</p><p><code>Step 1</code> Pipeline 스크립트의 <code>archiveArtifacts</code>에 <code>fingerprint: true</code>를 추가합니다.</p><div class="language-groovy line-numbers-mode" data-highlighter="prismjs" data-ext="groovy" data-title="groovy"><pre class="language-groovy"><code><span class="line">pipeline <span class="token punctuation">{</span></span>
<span class="line">    agent any</span>
<span class="line">    stages<span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">stage</span><span class="token punctuation">(</span><span class="token string">&#39;Build&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            steps<span class="token punctuation">{</span></span>
<span class="line">                sh <span class="token string">&#39;echo &quot;Generating text artifacts: Build:\${BUILD_NUMBER}&quot; &gt; output.txt&#39;</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">        <span class="token function">stage</span><span class="token punctuation">(</span><span class="token string">&#39;Archive&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            steps <span class="token punctuation">{</span></span>
<span class="line">                archiveArtifacts artifacts<span class="token punctuation">:</span> <span class="token string">&#39;output.txt&#39;</span><span class="token punctuation">,</span> fingerprint<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> onlyIfSuccessful<span class="token punctuation">:</span> <span class="token boolean">true</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>파일의 지문을 확인합니다.</p><ul><li><p>첫번째 빌드를 수행하고 빌드 결과 아카이브 파일 <code>output.txt</code>파일을 다운로드 받습니다. (파일을 우클릭하고 <code>다른 이름으로 링크 저장...</code> or <code>Download Linked File</code> 을 클릭하여 파일을 받습니다.)<br><img src="`+t+'" alt="1564546697375" loading="lazy"></p></li><li><p>좌측 상단의 <code>Jenkins</code>를 클릭하여 최상위 메뉴로 돌아갑니다.</p></li><li><p>좌측 메뉴의 <code>파일 핑거프린트 확인</code>을 클릭합니다.</p></li><li><p><code>파일 선택</code>버튼을 클릭하여 앞서 다운로드한 파일을 선택하고 <code>확인하기</code>버튼을 클릭합니다.</p></li><li><p>어떤 프로젝트의 몇번째 빌드에서 발생한 파일인지 확인합니다.</p></li><li><p>두번째 빌드를 수행하고 파일 핑거프린트를 확인해 봅니다.</p></li><li><p>빌드 번호 정보가 변경된 것을 확인합니다.</p></li></ul>',19),r=[o];function u(d,g){return i(),p("div",null,r)}const f=e(l,[["render",u],["__file","10-artifacts.html.vue"]]),h=JSON.parse(`{"path":"/05-Software/Jenkins/pipeline101/10-artifacts.html","title":"10. Artifacts","lang":"ko-KR","frontmatter":{"description":"jenkins 101","tag":["cicd","jenkins"],"head":[["meta",{"property":"og:url","content":"https://docmoa.github.io/05-Software/Jenkins/pipeline101/10-artifacts.html"}],["meta",{"property":"og:site_name","content":"docmoa"}],["meta",{"property":"og:title","content":"10. Artifacts"}],["meta",{"property":"og:description","content":"jenkins 101"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"ko-KR"}],["meta",{"property":"og:updated_time","content":"2023-09-18T13:12:54.000Z"}],["meta",{"property":"article:tag","content":"cicd"}],["meta",{"property":"article:tag","content":"jenkins"}],["meta",{"property":"article:modified_time","content":"2023-09-18T13:12:54.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"10. Artifacts\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2023-09-18T13:12:54.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"10.1 Creating and storing artifacts","slug":"_10-1-creating-and-storing-artifacts","link":"#_10-1-creating-and-storing-artifacts","children":[]},{"level":2,"title":"10.2. Fingerprinting for artifact tracking","slug":"_10-2-fingerprinting-for-artifact-tracking","link":"#_10-2-fingerprinting-for-artifact-tracking","children":[]}],"git":{"createdTime":1640327880000,"updatedTime":1695042774000,"contributors":[{"name":"Administrator","email":"admin@example.com","commits":1},{"name":"Great-Stone","email":"hahohh@gmail.com","commits":1}]},"readingTime":{"minutes":2.83,"words":170},"filePathRelative":"05-Software/Jenkins/pipeline101/10-artifacts.md","localizedDate":"2021년 12월 24일","excerpt":"\\n<p>빌드 이후 빌드의 결과를 기록하고 저장하는 방법을 설명합니다.</p>\\n<h2>10.1 Creating and storing artifacts</h2>\\n<p>Pipeline 타입의 Item을 추가로 생성합니다. (e.g. 10-01.CreatingAndStoringArtifacts)</p>\\n<p>Pipeline에 다음과 같이 스크립트를 추가합니다.</p>\\n<div class=\\"language-groovy\\" data-highlighter=\\"prismjs\\" data-ext=\\"groovy\\" data-title=\\"groovy\\"><pre class=\\"language-groovy\\"><code><span class=\\"line\\">pipeline <span class=\\"token punctuation\\">{</span></span>\\n<span class=\\"line\\">    agent any</span>\\n<span class=\\"line\\">    stages<span class=\\"token punctuation\\">{</span></span>\\n<span class=\\"line\\">        <span class=\\"token function\\">stage</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">'Build'</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span></span>\\n<span class=\\"line\\">            steps<span class=\\"token punctuation\\">{</span></span>\\n<span class=\\"line\\">                sh <span class=\\"token string\\">'echo \\"Generating artifacts for \${BUILD_NUMBER}\\" &gt; output.txt'</span></span>\\n<span class=\\"line\\">            <span class=\\"token punctuation\\">}</span></span>\\n<span class=\\"line\\">        <span class=\\"token punctuation\\">}</span></span>\\n<span class=\\"line\\">        <span class=\\"token function\\">stage</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">'Archive'</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span></span>\\n<span class=\\"line\\">            steps <span class=\\"token punctuation\\">{</span></span>\\n<span class=\\"line\\">                archiveArtifacts artifacts<span class=\\"token punctuation\\">:</span> <span class=\\"token string\\">'output.txt'</span><span class=\\"token punctuation\\">,</span> onlyIfSuccessful<span class=\\"token punctuation\\">:</span> <span class=\\"token boolean\\">true</span></span>\\n<span class=\\"line\\">            <span class=\\"token punctuation\\">}</span></span>\\n<span class=\\"line\\">        <span class=\\"token punctuation\\">}</span></span>\\n<span class=\\"line\\">    <span class=\\"token punctuation\\">}</span></span>\\n<span class=\\"line\\"><span class=\\"token punctuation\\">}</span></span>\\n<span class=\\"line\\"></span></code></pre></div>"}`);export{f as comp,h as data};
