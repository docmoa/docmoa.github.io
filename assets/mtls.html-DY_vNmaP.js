import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as a,c as n,h as e}from"./app-DVMlqOhY.js";const p={},t=e(`<h1 id="vault-pki-mtls-demo" tabindex="-1"><a class="header-anchor" href="#vault-pki-mtls-demo"><span>Vault PKI - mTLS demo</span></a></h1><blockquote><p>Demo App Github : <a href="https://github.com/Great-Stone/vault-mtls-demo" target="_blank" rel="noopener noreferrer">https://github.com/Great-Stone/vault-mtls-demo</a></p></blockquote><h2 id="_1-mtls-설명" tabindex="-1"><a class="header-anchor" href="#_1-mtls-설명"><span>1. mTLS 설명</span></a></h2><h3 id="_1-1-ssl과-tls" tabindex="-1"><a class="header-anchor" href="#_1-1-ssl과-tls"><span>1.1 SSL과 TLS</span></a></h3><p>SSL(Secure Sokets Layer, 보안 소캣 계층)는 클라이언트와 서버 사이에 전송된 데이터를 암호화 하고 인터넷 연결에 보안을 유지하는 표준 기술이다. 악의적 외부인이 클라이언트와 서버 사이에 전송되는 정보를 확인 및 탈취하는 것을 방지한다.</p><p>TLS(Transport Layer Security, 전송 계층 보안)는 현재 더이상 사용되지 않는 SSL을 계승하는 보다 진보된 보안 기술이다. SSL 3.0을 기반으로 만들어졌지만 호환되지는 않는다. 최신 버전은 TLS 1.3이다.</p><ul><li>TLS 1.2의 경우 암호화 방식과 키 교환 통신이 handshake 과정에 포한되어있어 2회 정도의 추가 요청이 있었다.</li><li>TLS 1.3에서는 handshake과정을 최소화해 암호화 통신하는 방안이 추가되어 HTTPS 통신에 속도와 보안이 개선되었다. <ul><li>handshake에 0-RTT 모드 추가</li><li>정적인 RSA와 Diffie-Hellman Cipher Suite 제거</li><li>handshake 최대한 암호화</li><li>키 교환과 암호화 방식을 Cipher Suite를 통해 묶어서 정하지 않고 개별적 지정</li></ul></li></ul><p>SSL 기술이 TLS로 대체되었다고 하지만 여전히 브라우저 인증서는 SSL 인증서라고 불린다.</p><h3 id="_1-2-tls-handshake" tabindex="-1"><a class="header-anchor" href="#_1-2-tls-handshake"><span>1.2 TLS Handshake</span></a></h3><p>TLS에서는 서버에만 TLS 인증서 및 공개/개인 키 쌍이 있고 클라이언트에는 없다. TLS 프로세스는 다음과 같다.</p><figure><img src="https://raw.githubusercontent.com/Great-Stone/images/master/uPic/image-20230320091036089.png" alt="image-20230320091036089" tabindex="0" loading="lazy"><figcaption>image-20230320091036089</figcaption></figure><h3 id="_1-3-mutualtls-mtls" tabindex="-1"><a class="header-anchor" href="#_1-3-mutualtls-mtls"><span>1.3 mutualTLS(mTLS)</span></a></h3><p>mTLS에서는 클라이언트와 서버 모두에 인증서가 있고 양쪽에서 공개/개인 키 쌍을 사용하여 인증한다. TLS 대비 mTLS는 양쪽을 확인하기 위한 추가 단계가 있다.</p><figure><img src="https://raw.githubusercontent.com/Great-Stone/images/master/uPic/image-20230320091236622.png" alt="image-20230320091236622" tabindex="0" loading="lazy"><figcaption>image-20230320091236622</figcaption></figure><h3 id="_1-4-mtls-의-장단점" tabindex="-1"><a class="header-anchor" href="#_1-4-mtls-의-장단점"><span>1.4 mTLS 의 장단점</span></a></h3><p>먼저 mTLS의 장점을 살펴보면,</p><ul><li>서버와 클라이언트 간의 상호 인증을 가능하게 하므로, 서버와 클라이언트 모두 신뢰할 수 있는 대상인지 확인할 수 있다. 이를 통해 중간자 공격 및 위조된 인증서와 같은 보안 문제를 방지할 수 있다.</li><li>mTLS는 암호화된 연결을 통해 전송되는 데이터의 안전성을 보장한다. TLS 프로토콜을 사용하므로, 데이터는 암호화되어 전송되며, 중간자 공격 및 도청과 같은 공격으로부터 안전하게 보호된다.</li></ul><p>mTLS의 단점은 다음과 같다.</p><ul><li>연결을 설정하는 과정에서 추가적인 CPU 리소스와 대역폭이 필요할 수 있다. 이는 특히 고사양의 서버에서 큰 부담이 될 수 있다.</li><li>서버와 클라이언트 모두가 인증서를 발급하고 관리해야 한다는 점이 있다. 인증서를 발급하는 과정은 복잡할 수 있으며, 이를 관리하는 것도 일정한 노력과 비용이 필요합니다.</li><li>mTLS를 구현하는 것은 애플리케이션과 서버 모두에게 추가적인 복잡성을 요구할 수 있다. 이를 위해 애플리케이션과 서버 모두에 대한 추가적인 설정 및 관리가 필요할 수 있다.</li></ul><h3 id="_1-5-구성의-예" tabindex="-1"><a class="header-anchor" href="#_1-5-구성의-예"><span>1.5 구성의 예</span></a></h3><h4 id="python-flask" tabindex="-1"><a class="header-anchor" href="#python-flask"><span>Python - Flask</span></a></h4><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre class="language-python"><code><span class="line"><span class="token keyword">from</span> flask <span class="token keyword">import</span> Flask<span class="token punctuation">,</span> render_template<span class="token punctuation">,</span> request<span class="token punctuation">,</span> make_response</span>
<span class="line"><span class="token keyword">import</span> ssl</span>
<span class="line"></span>
<span class="line">app <span class="token operator">=</span> Flask<span class="token punctuation">(</span>__name__<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">### APIs ###</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">&quot;__main__&quot;</span><span class="token punctuation">:</span></span>
<span class="line">    app<span class="token punctuation">.</span>debug <span class="token operator">=</span> <span class="token boolean">True</span></span>
<span class="line highlighted">    ssl_context <span class="token operator">=</span> ssl<span class="token punctuation">.</span>create_default_context<span class="token punctuation">(</span>purpose<span class="token operator">=</span>ssl<span class="token punctuation">.</span>Purpose<span class="token punctuation">.</span>CLIENT_AUTH<span class="token punctuation">,</span> cafile<span class="token operator">=</span><span class="token string">&#39;ca.crt&#39;</span><span class="token punctuation">)</span></span>
<span class="line highlighted">    ssl_context<span class="token punctuation">.</span>load_cert_chain<span class="token punctuation">(</span>certfile<span class="token operator">=</span><span class="token string-interpolation"><span class="token string">f&#39;site.crt&#39;</span></span><span class="token punctuation">,</span> keyfile<span class="token operator">=</span><span class="token string-interpolation"><span class="token string">f&#39;site.key&#39;</span></span><span class="token punctuation">,</span> password<span class="token operator">=</span><span class="token string">&#39;&#39;</span><span class="token punctuation">)</span></span>
<span class="line highlighted">    ssl_context<span class="token punctuation">.</span>verify_mode <span class="token operator">=</span> ssl<span class="token punctuation">.</span>CERT_REQUIRED</span>
<span class="line">    app<span class="token punctuation">.</span>run<span class="token punctuation">(</span>host<span class="token operator">=</span><span class="token string">&quot;0.0.0.0&quot;</span><span class="token punctuation">,</span> port<span class="token operator">=</span>src_port<span class="token punctuation">,</span> ssl_context<span class="token operator">=</span>ssl_context<span class="token punctuation">,</span> use_reloader<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="nginx" tabindex="-1"><a class="header-anchor" href="#nginx"><span>nginx</span></a></h4><div class="language-hcl line-numbers-mode" data-highlighter="prismjs" data-ext="hcl" data-title="hcl"><pre class="language-hcl"><code><span class="line"><span class="token comment"># default.conf</span></span>
<span class="line"><span class="token keyword">server</span> <span class="token punctuation">{</span></span>
<span class="line">    listen                  <span class="token number">443</span> ssl;</span>
<span class="line"></span>
<span class="line">    access_log /var/log/nginx/access.log;</span>
<span class="line">    error_log /var/log/nginx/error.log;</span>
<span class="line"></span>
<span class="line highlighted">    ssl_certificate         /etc/ssl/server.crt;</span>
<span class="line highlighted">    ssl_certificate_key     /etc/ssl/server.key;</span>
<span class="line highlighted">    ssl_protocols           TLSv1.<span class="token number">2</span> TLSv1.<span class="token number">3</span>;</span>
<span class="line highlighted">    ssl_client_certificate  /etc/nginx/client_certs/ca.crt;</span>
<span class="line highlighted">    ssl_verify_client       on;</span>
<span class="line highlighted">    ssl_verify_depth        <span class="token number">2</span>;</span>
<span class="line"></span>
<span class="line">    location / <span class="token punctuation">{</span></span>
<span class="line">        if ($ssl_client_verify !<span class="token punctuation">=</span> SUCCESS) <span class="token punctuation">{</span> return <span class="token number">403</span>; <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">### 구성 ###</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="apache-httpd-2-4" tabindex="-1"><a class="header-anchor" href="#apache-httpd-2-4"><span>Apache HTTPD 2.4</span></a></h4><div class="language-xml line-numbers-mode" data-highlighter="prismjs" data-ext="xml" data-title="xml"><pre class="language-xml"><code><span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>VirtualHost</span> <span class="token attr-name"><span class="token namespace">*:</span>80</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">    ServerName {DOMAIN}</span>
<span class="line">    Redirect permanent / https://{DOMAIN}</span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>VirtualHost</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>IfModule</span> <span class="token attr-name">mod_ssl.c</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>VirtualHost</span> <span class="token attr-name"><span class="token namespace">*:</span>443</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">        ServerAdmin info@{DOMAIN}</span>
<span class="line">        ServerName {DOMAIN}</span>
<span class="line"></span>
<span class="line">        Header always set Strict-Transport-Security &quot;max-age=63072000; includeSubdomains;&quot;</span>
<span class="line"></span>
<span class="line">        SSLEngine       on</span>
<span class="line">        SSLCompression      Off</span>
<span class="line">        SSLProtocol         ALL -SSLv2 -SSLv3</span>
<span class="line">        SSLHonorCipherOrder     On</span>
<span class="line">        SSLCipherSuite      EECDH+AESGCM:EDH+AESGCM:AES256+EECDH:AES256+EDH</span>
<span class="line highlighted">        SSLCertificateFile  {SSL}/fullchain.pem</span>
<span class="line highlighted">        SSLCertificateKeyFile   {SSL}/privkey.pem</span>
<span class="line highlighted">        SSLCACertificateFile    {PATH}/ca.crt</span>
<span class="line">        SSLStrictSNIVHostCheck  on</span>
<span class="line"></span>
<span class="line">        &lt;Location / &gt;</span>
<span class="line highlighted">            SSLVerifyClient     require </span>
<span class="line">            SSLVerifyDepth      1</span>
<span class="line"></span>
<span class="line">            Options FollowSymLinks</span>
<span class="line">            AllowOverride None</span>
<span class="line">        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Location</span><span class="token punctuation">&gt;</span></span>     </span>
<span class="line"></span>
<span class="line">        &lt;Location /health&gt;</span>
<span class="line">            SSLVerifyClient none</span>
<span class="line">        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Location</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"></span>
<span class="line">        ProxyPreserveHost On</span>
<span class="line">        ProxyRequests off</span>
<span class="line">        ProxyPass / http://localhost/</span>
<span class="line">        ProxyPassReverse / http://localhost/</span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>VirtualHost</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>IfModule</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><p>볼트가 제공하는 PKI 기능과 Agent의 자동 교체 기능을 활용하여 인증서 관리와 발급을 자동화하여 애플리케이션과 서버에 대한 부담을 줄이고 mTLS의 장점을 취할 수 있다.</p><h2 id="_2-use-openssl" tabindex="-1"><a class="header-anchor" href="#_2-use-openssl"><span>2. use OpenSSL</span></a></h2><blockquote><ul><li>참고 : <a href="https://bitgadak.tistory.com/5" target="_blank" rel="noopener noreferrer">https://bitgadak.tistory.com/5</a></li><li>openssl 대신 smallstep 을 사용하면 좀더 간단하다 : <a href="https://smallstep.com/hello-mtls/doc/client/requests" target="_blank" rel="noopener noreferrer">https://smallstep.com/hello-mtls/doc/client/requests</a></li><li>socket example : <a href="https://www.electricmonk.nl/log/2018/06/02/ssl-tls-client-certificate-verification-with-python-v3-4-sslcontext/" target="_blank" rel="noopener noreferrer">https://www.electricmonk.nl/log/2018/06/02/ssl-tls-client-certificate-verification-with-python-v3-4-sslcontext/</a></li></ul></blockquote><p>OpenSSL을 활용하여 볼트를 사용하지 않고 mTLS를 구현하는 과정을 설명한다.</p><h3 id="_2-1-root-key-생성" tabindex="-1"><a class="header-anchor" href="#_2-1-root-key-생성"><span>2.1 Root Key 생성</span></a></h3><p>root ca 생성을 위한 root key를 생성한다.</p><div class="language-bash" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="line"><span class="token builtin class-name">cd</span> cert</span>
<span class="line">openssl genrsa <span class="token parameter variable">-out</span> root.key <span class="token number">2048</span></span>
<span class="line"></span></code></pre></div><p>OS에 따라(Linux/MacOS) 권한 변경이 권장된다.</p><div class="language-bash" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="line"><span class="token function">chmod</span> <span class="token number">600</span> root.key</span>
<span class="line"></span></code></pre></div><h3 id="_2-2-root-ca-요청서-csr-생성" tabindex="-1"><a class="header-anchor" href="#_2-2-root-ca-요청서-csr-생성"><span>2.2 Root CA 요청서(CSR) 생성</span></a></h3><p>생성된 <code>root.key</code> 기반의 root ca 인증서 생성을 위한 요청서를 생성한다.</p><div class="language-bash" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="line">$ openssl req <span class="token parameter variable">-config</span> ca.conf <span class="token parameter variable">-extensions</span> usr_cert <span class="token parameter variable">-new</span> <span class="token parameter variable">-key</span> root.key <span class="token parameter variable">-out</span> ca.csr</span>
<span class="line"></span></code></pre></div><ul><li><code>-config</code> : 미리 구성해 놓은 ca용 구성 정보를 읽는다.</li></ul><p><code>openssl-xxx.conf</code> sample</p><table><thead><tr><th>구분</th><th>작성 예</th></tr></thead><tbody><tr><td>Country Name (국가코드)</td><td>KR</td></tr><tr><td>State or Province Name (시/도의 전체이름)</td><td>Seoul</td></tr><tr><td>Locality Name (시/군/구 등의 이름)</td><td>Songpa-gu</td></tr><tr><td>Organization (회사이름)</td><td>XXXX</td></tr><tr><td>Organization Unit (부서명)</td><td>Server</td></tr><tr><td>Common Name (SSL 인증서를 설치할 서버의 Full Domain)</td><td><a href="http://www.xxxx.com" target="_blank" rel="noopener noreferrer">www.xxxx.com</a></td></tr></tbody></table><h4 id="check" tabindex="-1"><a class="header-anchor" href="#check"><span>Check</span></a></h4><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="line">$ openssl req <span class="token parameter variable">-text</span> <span class="token parameter variable">-in</span> ca.csr</span>
<span class="line">Certificate Request:</span>
<span class="line">    Data:</span>
<span class="line">        Version: <span class="token number">0</span> <span class="token punctuation">(</span>0x0<span class="token punctuation">)</span></span>
<span class="line">        Subject: <span class="token assign-left variable">C</span><span class="token operator">=</span>KR, <span class="token assign-left variable">ST</span><span class="token operator">=</span>Seoul, <span class="token assign-left variable">L</span><span class="token operator">=</span>Seoul, <span class="token assign-left variable">O</span><span class="token operator">=</span>COMPANY, <span class="token assign-left variable">OU</span><span class="token operator">=</span>DEV/emailAddress<span class="token operator">=</span>example@example.com, <span class="token assign-left variable">CN</span><span class="token operator">=</span>example root</span>
<span class="line">        Subject Public Key Info:</span>
<span class="line">            Public Key Algorithm: rsaEncryption</span>
<span class="line">                RSA Public-Key: <span class="token punctuation">(</span><span class="token number">2048</span> bit<span class="token punctuation">)</span></span>
<span class="line">                Modulus:</span>
<span class="line">                    <span class="token operator">&lt;</span><span class="token punctuation">..</span>.생략<span class="token punctuation">..</span>.<span class="token operator">&gt;</span></span>
<span class="line">                Exponent: <span class="token number">65537</span> <span class="token punctuation">(</span>0x10001<span class="token punctuation">)</span></span>
<span class="line">        Attributes:</span>
<span class="line">        Requested Extensions:</span>
<span class="line">            X509v3 Basic Constraints: </span>
<span class="line">                CA:TRUE</span>
<span class="line">    Signature Algorithm: sha256WithRSAEncryption</span>
<span class="line">         <span class="token operator">&lt;</span><span class="token punctuation">..</span>.생략<span class="token punctuation">..</span>.<span class="token operator">&gt;</span></span>
<span class="line">-----BEGIN CERTIFICATE REQUEST-----</span>
<span class="line"><span class="token operator">&lt;</span><span class="token punctuation">..</span>.생략<span class="token punctuation">..</span>.<span class="token operator">&gt;</span></span>
<span class="line">-----END CERTIFICATE REQUEST-----</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-3-root-ca-인증서-생성" tabindex="-1"><a class="header-anchor" href="#_2-3-root-ca-인증서-생성"><span>2.3 Root CA 인증서 생성</span></a></h3><p>생성된 요청서에 대해 자체 서명(self-signning)한다.</p><div class="language-bash" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="line">openssl x509 <span class="token parameter variable">-req</span> <span class="token parameter variable">-days</span> <span class="token number">3650</span> <span class="token parameter variable">-in</span> ca.csr <span class="token parameter variable">-signkey</span> root.key <span class="token parameter variable">-extfile</span> ca.ext <span class="token parameter variable">-out</span> ca.crt</span>
<span class="line"></span></code></pre></div><ul><li><code>-days</code> : 인증서 기간은 10년으로 하였다.</li><li><code>-extfile</code> : 서명시 추가 정보에 대한 내용을 읽는다.</li></ul><h4 id="check-1" tabindex="-1"><a class="header-anchor" href="#check-1"><span>Check</span></a></h4><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="line">$ openssl x509 <span class="token parameter variable">-text</span> <span class="token parameter variable">-noout</span> <span class="token parameter variable">-in</span> ca.crt</span>
<span class="line">Certificate:</span>
<span class="line">    Data:</span>
<span class="line">        Version: <span class="token number">3</span> <span class="token punctuation">(</span>0x2<span class="token punctuation">)</span></span>
<span class="line">        Serial Number:</span>
<span class="line">            ee:38:a2:de:5e:b2:11:c8</span>
<span class="line">    Signature Algorithm: sha256WithRSAEncryption</span>
<span class="line">        Issuer: <span class="token assign-left variable">C</span><span class="token operator">=</span>KR, <span class="token assign-left variable">ST</span><span class="token operator">=</span>Seoul, <span class="token assign-left variable">L</span><span class="token operator">=</span>Seoul, <span class="token assign-left variable">O</span><span class="token operator">=</span>COMPANY, <span class="token assign-left variable">OU</span><span class="token operator">=</span>DEV/emailAddress<span class="token operator">=</span>example@example.com, <span class="token assign-left variable">CN</span><span class="token operator">=</span>example root</span>
<span class="line">        Validity</span>
<span class="line">            Not Before: Mar <span class="token number">15</span> 03:04:58 <span class="token number">2023</span> GMT</span>
<span class="line">            Not After <span class="token builtin class-name">:</span> Mar <span class="token number">12</span> 03:04:58 <span class="token number">2033</span> GMT</span>
<span class="line">        Subject: <span class="token assign-left variable">C</span><span class="token operator">=</span>KR, <span class="token assign-left variable">ST</span><span class="token operator">=</span>Seoul, <span class="token assign-left variable">L</span><span class="token operator">=</span>Seoul, <span class="token assign-left variable">O</span><span class="token operator">=</span>COMPANY, <span class="token assign-left variable">OU</span><span class="token operator">=</span>DEV/emailAddress<span class="token operator">=</span>example@example.com, <span class="token assign-left variable">CN</span><span class="token operator">=</span>example root</span>
<span class="line">        Subject Public Key Info:</span>
<span class="line">            Public Key Algorithm: rsaEncryption</span>
<span class="line">                RSA Public-Key: <span class="token punctuation">(</span><span class="token number">2048</span> bit<span class="token punctuation">)</span></span>
<span class="line">                Modulus:</span>
<span class="line">                    <span class="token operator">&lt;</span><span class="token punctuation">..</span>.생략<span class="token punctuation">..</span>.<span class="token operator">&gt;</span></span>
<span class="line">                Exponent: <span class="token number">65537</span> <span class="token punctuation">(</span>0x10001<span class="token punctuation">)</span></span>
<span class="line">        X509v3 extensions:</span>
<span class="line">            X509v3 Basic Constraints: </span>
<span class="line">                CA:TRUE</span>
<span class="line">    Signature Algorithm: sha256WithRSAEncryption</span>
<span class="line">         <span class="token operator">&lt;</span><span class="token punctuation">..</span>.생략<span class="token punctuation">..</span>.<span class="token operator">&gt;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>생성된 root ca 파일을 시스템에 신뢰할 수 있는 인증서로 등록하면, 브라우저 호출시 신뢰할 수 없는 인증서로 인한 경고 창이 뜨지 않는다.</p><ul><li>MacOS의 경우 <code>ca.crt</code>를 더블클릭하여 <code>키체인 접근</code> 앱에 <code>인증서</code> 탭에 등록하고, 등록된 <code>example.com</code>인증서를 더블클릭하여 <code>신뢰</code> 항목에서 <code>이 인증서 사용 시</code>를 <code>항상 신뢰</code>로 변경한다.</li><li>RedHat 계열 OS의 경우 <code>/etc/pki/ca-trust/source/anchors/</code> 에 인증서를 복사 한 후, <code>update-ca-trust</code> 명령을 실행한다.</li><li>Windows의 경우 <code>ca.crt</code>를 더블클릭하여 인증서 창의 <code>인증서 설치...</code>를 클릭, <code>인증서 가져오기 마법사</code>로 신뢰할 수 있는 인증서로 등록한다.</li></ul><h3 id="_2-4-서비스-a-용-key-생성" tabindex="-1"><a class="header-anchor" href="#_2-4-서비스-a-용-key-생성"><span>2.4 서비스 A 용 Key 생성</span></a></h3><p>데모 서비스 A용 인증서를 생성하기 위해 해당 인증서를 위한 key를 생성한다. 생성 시 패스워드를 넣어주며, 패스워드 없는 key를 생성하려는 경우 한번더 풀어주는 과정이 필요하다.</p><div class="language-bash" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="line"><span class="token comment"># 패스워드 4자리 이상 입력</span></span>
<span class="line">openssl genrsa <span class="token parameter variable">-aes256</span> <span class="token parameter variable">-out</span> service-a-with-pw.key <span class="token number">2048</span></span>
<span class="line"><span class="token comment"># 패스워드 없는 key</span></span>
<span class="line">openssl rsa <span class="token parameter variable">-in</span> service-a-with-pw.key <span class="token parameter variable">-out</span> service-a.key</span>
<span class="line"></span></code></pre></div><h3 id="_2-5-서비스-a-용-인증서-요청서-csr-생성" tabindex="-1"><a class="header-anchor" href="#_2-5-서비스-a-용-인증서-요청서-csr-생성"><span>2.5 서비스 A 용 인증서 요청서(CSR) 생성</span></a></h3><p>서비스 A용 인증서를 위한 요청서를 생성한다.</p><div class="language-bash" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="line">openssl req <span class="token parameter variable">-new</span> <span class="token parameter variable">-key</span> service-a.key <span class="token parameter variable">-config</span> service-a.conf <span class="token parameter variable">-out</span> service-a.csr</span>
<span class="line"></span></code></pre></div><ul><li><code>-config</code> : 미리 구성해 놓은 서비스 A용 구성 정보를 읽는다.</li></ul><h3 id="_2-6-서비스용-인증서-생성" tabindex="-1"><a class="header-anchor" href="#_2-6-서비스용-인증서-생성"><span>2.6 서비스용 인증서 생성</span></a></h3><p>자체 서명과정에서 앞서 생성한 root ca 인증서와 key를 넣어 서비스 A인증서가 root ca에 종속되도록 구성한다.</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="line">openssl x509 <span class="token parameter variable">-req</span> <span class="token parameter variable">-days</span> <span class="token number">365</span> <span class="token parameter variable">-in</span> service-a.csr <span class="token parameter variable">-extfile</span> service-a.ext <span class="token parameter variable">-CA</span> ca.crt <span class="token parameter variable">-CAkey</span> root.key <span class="token parameter variable">-CAcreateserial</span> <span class="token parameter variable">-out</span> service-a.crt</span>
<span class="line">$ openssl x509 <span class="token parameter variable">-text</span> <span class="token parameter variable">-in</span> service-a.crt</span>
<span class="line">Certificate:</span>
<span class="line">    Data:</span>
<span class="line">        Version: <span class="token number">3</span> <span class="token punctuation">(</span>0x2<span class="token punctuation">)</span></span>
<span class="line">        Serial Number:</span>
<span class="line">            ec:71:b0:dd:72:c2:a2:4a</span>
<span class="line">    Signature Algorithm: sha256WithRSAEncryption</span>
<span class="line">        Issuer: <span class="token assign-left variable">C</span><span class="token operator">=</span>KR, <span class="token assign-left variable">ST</span><span class="token operator">=</span>Seoul, <span class="token assign-left variable">L</span><span class="token operator">=</span>Seoul, <span class="token assign-left variable">O</span><span class="token operator">=</span>COMPANY, <span class="token assign-left variable">OU</span><span class="token operator">=</span>DEV/emailAddress<span class="token operator">=</span>example@example.com, <span class="token assign-left variable">CN</span><span class="token operator">=</span>example root</span>
<span class="line">        Validity</span>
<span class="line">            Not Before: Mar <span class="token number">15</span> 03:36:06 <span class="token number">2023</span> GMT</span>
<span class="line">            Not After <span class="token builtin class-name">:</span> Mar <span class="token number">14</span> 03:36:06 <span class="token number">2024</span> GMT</span>
<span class="line">        Subject: <span class="token assign-left variable">C</span><span class="token operator">=</span>KR, <span class="token assign-left variable">ST</span><span class="token operator">=</span>Seoul, <span class="token assign-left variable">L</span><span class="token operator">=</span>Seoul, <span class="token assign-left variable">O</span><span class="token operator">=</span>COMPANY, <span class="token assign-left variable">OU</span><span class="token operator">=</span>DEV/emailAddress<span class="token operator">=</span>example@example.com, <span class="token assign-left variable">CN</span><span class="token operator">=</span>service-a.example.com</span>
<span class="line">        Subject Public Key Info:</span>
<span class="line">            Public Key Algorithm: rsaEncryption</span>
<span class="line">                RSA Public-Key: <span class="token punctuation">(</span><span class="token number">2048</span> bit<span class="token punctuation">)</span></span>
<span class="line">                Modulus:</span>
<span class="line">                    <span class="token operator">&lt;</span><span class="token punctuation">..</span>생략<span class="token punctuation">..</span><span class="token operator">&gt;</span></span>
<span class="line">                Exponent: <span class="token number">65537</span> <span class="token punctuation">(</span>0x10001<span class="token punctuation">)</span></span>
<span class="line">        X509v3 extensions:</span>
<span class="line">            X509v3 Subject Alternative Name: </span>
<span class="line">                DNS:service-a.example.com</span>
<span class="line">    Signature Algorithm: sha256WithRSAEncryption</span>
<span class="line">         <span class="token operator">&lt;</span><span class="token punctuation">..</span>생략<span class="token punctuation">..</span><span class="token operator">&gt;</span></span>
<span class="line">-----BEGIN CERTIFICATE-----</span>
<span class="line"><span class="token operator">&lt;</span><span class="token punctuation">..</span>생략<span class="token punctuation">..</span><span class="token operator">&gt;</span></span>
<span class="line">-----END CERTIFICATE-----</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>-days</code> : 인증서 기간을 1년으로 하였다.</li><li><code>-CA</code> : root ca 인증서를 지정한다.</li><li><code>-CAkey</code> : root ca의 key를 지정한다.</li><li><code>-CAcreateserial</code> : 서명 작업에 root ca가 인증서에 대한 일련번호 생성</li><li><code>-extfile</code> : 서비스 A를 위한 추가 정보</li></ul><h3 id="_2-7-service-b용-생성" tabindex="-1"><a class="header-anchor" href="#_2-7-service-b용-생성"><span>2.7 Service B용 생성</span></a></h3><p>서비스 B에 대한 인증서도 생성한다. 앞서 설명된 내용을 생략하고 아래 커맨드만 나열한다.</p><div class="language-bash" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="line">openssl genrsa <span class="token parameter variable">-aes256</span> <span class="token parameter variable">-out</span> service-b-with-pw.key <span class="token number">2048</span></span>
<span class="line"></span>
<span class="line">openssl rsa <span class="token parameter variable">-in</span> service-b-with-pw.key <span class="token parameter variable">-out</span> service-b.key</span>
<span class="line"></span>
<span class="line">openssl req <span class="token parameter variable">-new</span> <span class="token parameter variable">-key</span> service-b.key <span class="token parameter variable">-config</span> service-b.conf <span class="token parameter variable">-out</span> service-b.csr</span>
<span class="line"></span>
<span class="line">openssl x509 <span class="token parameter variable">-req</span> <span class="token parameter variable">-days</span> <span class="token number">365</span> <span class="token parameter variable">-in</span> service-b.csr <span class="token parameter variable">-extfile</span> service-b.ext <span class="token parameter variable">-CA</span> ca.crt <span class="token parameter variable">-CAkey</span> root.key <span class="token parameter variable">-CAcreateserial</span> <span class="token parameter variable">-out</span> service-b.crt</span>
<span class="line"></span></code></pre></div><h2 id="_3-demo-app-python" tabindex="-1"><a class="header-anchor" href="#_3-demo-app-python"><span>3. Demo App (Python)</span></a></h2><p>데모 앱은 Python으로 구성되었다.</p><h3 id="_3-1-preparation" tabindex="-1"><a class="header-anchor" href="#_3-1-preparation"><span>3.1 preparation</span></a></h3><h4 id="python" tabindex="-1"><a class="header-anchor" href="#python"><span>Python</span></a></h4><div class="language-bash" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="line">$ python <span class="token parameter variable">--version</span></span>
<span class="line">Python <span class="token number">3.10</span>.5</span>
<span class="line"></span>
<span class="line">$ pip <span class="token parameter variable">--version</span></span>
<span class="line">pip <span class="token number">23.0</span>.1</span>
<span class="line"></span>
<span class="line">$ pip <span class="token function">install</span> requests flask</span>
<span class="line"></span></code></pre></div><h4 id="system-hosts" tabindex="-1"><a class="header-anchor" href="#system-hosts"><span>System : hosts</span></a></h4><div class="language-bash" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="line"><span class="token number">127.0</span>.0.1   service-a.example.com   service-b.example.com</span>
<span class="line"></span></code></pre></div><h3 id="_3-2-run-services" tabindex="-1"><a class="header-anchor" href="#_3-2-run-services"><span>3.2 Run services</span></a></h3><h4 id="service-a" tabindex="-1"><a class="header-anchor" href="#service-a"><span>Service A</span></a></h4><div class="language-bash" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="line"><span class="token builtin class-name">cd</span> python_service_a</span>
<span class="line">python main.py</span>
<span class="line"></span></code></pre></div><h4 id="service-b" tabindex="-1"><a class="header-anchor" href="#service-b"><span>Service B</span></a></h4><div class="language-bash" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="line"><span class="token builtin class-name">cd</span> python_service_b</span>
<span class="line">python main.py</span>
<span class="line"></span></code></pre></div><h3 id="_3-3-test-api" tabindex="-1"><a class="header-anchor" href="#_3-3-test-api"><span>3.3 Test API</span></a></h3><h4 id="check-curl-service-a" tabindex="-1"><a class="header-anchor" href="#check-curl-service-a"><span>Check curl - Service A</span></a></h4><p>Python으로 작성된 flask api server 구성은 다음과 같다.</p><div class="language-python" data-highlighter="prismjs" data-ext="py" data-title="py"><pre class="language-python"><code><span class="line"><span class="token comment"># main.py</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">### 생략 ###</span></span>
<span class="line"><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">&quot;__main__&quot;</span><span class="token punctuation">:</span></span>
<span class="line">    app<span class="token punctuation">.</span>debug <span class="token operator">=</span> <span class="token boolean">True</span></span>
<span class="line">    ssl_context <span class="token operator">=</span> ssl<span class="token punctuation">.</span>create_default_context<span class="token punctuation">(</span>purpose<span class="token operator">=</span>ssl<span class="token punctuation">.</span>Purpose<span class="token punctuation">.</span>CLIENT_AUTH<span class="token punctuation">,</span> cafile<span class="token operator">=</span><span class="token string">&#39;../cert/ca.crt&#39;</span><span class="token punctuation">)</span></span>
<span class="line">    ssl_context<span class="token punctuation">.</span>load_cert_chain<span class="token punctuation">(</span>certfile<span class="token operator">=</span><span class="token string-interpolation"><span class="token string">f&#39;../cert/</span><span class="token interpolation"><span class="token punctuation">{</span>src<span class="token punctuation">}</span></span><span class="token string">.crt&#39;</span></span><span class="token punctuation">,</span> keyfile<span class="token operator">=</span><span class="token string-interpolation"><span class="token string">f&#39;../cert/</span><span class="token interpolation"><span class="token punctuation">{</span>src<span class="token punctuation">}</span></span><span class="token string">.key&#39;</span></span><span class="token punctuation">,</span> password<span class="token operator">=</span><span class="token string">&#39;&#39;</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token comment"># ssl_context.verify_mode = ssl.CERT_REQUIRED</span></span>
<span class="line">    app<span class="token punctuation">.</span>run<span class="token punctuation">(</span>host<span class="token operator">=</span><span class="token string">&quot;0.0.0.0&quot;</span><span class="token punctuation">,</span> port<span class="token operator">=</span>src_port<span class="token punctuation">,</span> ssl_context<span class="token operator">=</span>ssl_context<span class="token punctuation">,</span> use_reloader<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> extra_files<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string-interpolation"><span class="token string">f&#39;../cert/</span><span class="token interpolation"><span class="token punctuation">{</span>src<span class="token punctuation">}</span></span><span class="token string">.crt&#39;</span></span><span class="token punctuation">]</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre></div><ul><li><code>ssl.create_default_context</code> : flask에서 사용할 ssl context를 정의한다. 여기 <code>cafile</code>에 root ca 파일을 지정한다.</li><li><code>ssl_context.load_cert_chain</code> : cert와 key를 지정하여 인증서 체인을 설정한다.</li><li><code>ssl_context.verify_mode</code> : service A는 인증서 검증을 무시할 수 있도록 해당 옵션에 주석처리 한다.</li><li><code>app.run(..., extra_files=[f&#39;../cert/{src}.crt&#39;])</code> : 인증서가 변경되면 flask를 다시 시작하도록 구성한다.</li></ul><p>서비스 A의 경우 https로 접근할 수 있고, <code>ssl.CERT_REQUIRED</code> 옵션이 활성화 되어있지 않아 신뢰할 수 없는 인증서라도 curl로 <code>--insecure</code> 옵션을 추가하여 응답을 확인할 수 있다. 브라우저에서도 별도의 신뢰 확인을 통해 접근가능하다.</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="line">$ <span class="token function">curl</span> https://service-a.example.com:7443</span>
<span class="line"></span>
<span class="line">curl: <span class="token punctuation">(</span><span class="token number">60</span><span class="token punctuation">)</span> SSL certificate problem: self signed certificate <span class="token keyword">in</span> certificate chain</span>
<span class="line">More details here: https://curl.se/docs/sslcerts.html</span>
<span class="line"></span>
<span class="line"><span class="token function">curl</span> failed to verify the legitimacy of the server and therefore could not</span>
<span class="line">establish a secure connection to it. To learn <span class="token function">more</span> about this situation and</span>
<span class="line">how to fix it, please visit the web page mentioned above.</span>
<span class="line">$ <span class="token function">curl</span> <span class="token parameter variable">--insecure</span> https://service-a.example.com:7443</span>
<span class="line"></span>
<span class="line">Hello from <span class="token string">&quot;service-a&quot;</span>% </span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="check-curl-service-b" tabindex="-1"><a class="header-anchor" href="#check-curl-service-b"><span>Check Curl - Service B</span></a></h4><p>Python으로 작성된 flask api server 구성은 다음과 같다.</p><div class="language-python" data-highlighter="prismjs" data-ext="py" data-title="py"><pre class="language-python"><code><span class="line"><span class="token comment"># main.py</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">### 생략 ###</span></span>
<span class="line"><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">&quot;__main__&quot;</span><span class="token punctuation">:</span></span>
<span class="line">    app<span class="token punctuation">.</span>debug <span class="token operator">=</span> <span class="token boolean">True</span></span>
<span class="line">    ssl_context <span class="token operator">=</span> ssl<span class="token punctuation">.</span>create_default_context<span class="token punctuation">(</span>purpose<span class="token operator">=</span>ssl<span class="token punctuation">.</span>Purpose<span class="token punctuation">.</span>CLIENT_AUTH<span class="token punctuation">,</span> cafile<span class="token operator">=</span><span class="token string">&#39;../cert/ca.crt&#39;</span><span class="token punctuation">)</span></span>
<span class="line">    ssl_context<span class="token punctuation">.</span>load_cert_chain<span class="token punctuation">(</span>certfile<span class="token operator">=</span><span class="token string-interpolation"><span class="token string">f&#39;../cert/</span><span class="token interpolation"><span class="token punctuation">{</span>src<span class="token punctuation">}</span></span><span class="token string">.crt&#39;</span></span><span class="token punctuation">,</span> keyfile<span class="token operator">=</span><span class="token string-interpolation"><span class="token string">f&#39;../cert/</span><span class="token interpolation"><span class="token punctuation">{</span>src<span class="token punctuation">}</span></span><span class="token string">.key&#39;</span></span><span class="token punctuation">,</span> password<span class="token operator">=</span><span class="token string">&#39;&#39;</span><span class="token punctuation">)</span></span>
<span class="line">    ssl_context<span class="token punctuation">.</span>verify_mode <span class="token operator">=</span> ssl<span class="token punctuation">.</span>CERT_REQUIRED</span>
<span class="line">    app<span class="token punctuation">.</span>run<span class="token punctuation">(</span>host<span class="token operator">=</span><span class="token string">&quot;0.0.0.0&quot;</span><span class="token punctuation">,</span> port<span class="token operator">=</span>src_port<span class="token punctuation">,</span> ssl_context<span class="token operator">=</span>ssl_context<span class="token punctuation">,</span> use_reloader<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> extra_files<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string-interpolation"><span class="token string">f&#39;../cert/</span><span class="token interpolation"><span class="token punctuation">{</span>src<span class="token punctuation">}</span></span><span class="token string">.crt&#39;</span></span><span class="token punctuation">]</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre></div><ul><li><code>ssl_context.verify_mode = ssl.CERT_REQUIRED</code> 설정으로 인해 인증서 검증이 반드시 필요하도록 설정한다.</li></ul><p><code>--insecure</code> 옵션을 추가하더라도 서비스 B는 인증서를 요구한다.</p><div class="language-bash" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="line">$ <span class="token function">curl</span> <span class="token parameter variable">--insecure</span> https://service-b.example.com:8443</span>
<span class="line">curl: <span class="token punctuation">(</span><span class="token number">56</span><span class="token punctuation">)</span> LibreSSL SSL_read: error:1404C45C:SSL routines:ST_OK:reason<span class="token punctuation">(</span><span class="token number">1116</span><span class="token punctuation">)</span>, errno <span class="token number">0</span></span>
<span class="line"></span></code></pre></div><p>따라서 요청시 root ca, cert(인증서), key를 함께 사용해야 한다.</p><div class="language-bash" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="line">$ <span class="token function">curl</span> <span class="token parameter variable">--cacert</span> ca.crt <span class="token parameter variable">--key</span> service-b.key <span class="token parameter variable">--cert</span> service-b.crt https://service-b.example.com:8443 </span>
<span class="line"></span></code></pre></div><h4 id="normal-mtls-check" tabindex="-1"><a class="header-anchor" href="#normal-mtls-check"><span>Normal mTLS Check</span></a></h4><p>서비스 A에서 B로 요청할 때 인증서 모두를 설정한 경우이다. 응답이 정상적으로 오는지 확인한다.</p><p><a href="https://service-a.example.com:7443/w-mtls" target="_blank" rel="noopener noreferrer">https://service-a.example.com:7443/w-mtls</a></p><h4 id="without-cert" tabindex="-1"><a class="header-anchor" href="#without-cert"><span>Without Cert</span></a></h4><p>서비스 A에서 B로 요청할 때 A의 인증정보를 담지 않은 경우이다. 서비스 B에서 인증서를 요구하는 메시지가 출력된다.</p><p><a href="https://service-a.example.com:7443/wo-cert-mtls" target="_blank" rel="noopener noreferrer">https://service-a.example.com:7443/wo-cert-mtls</a></p><div class="language-log" data-highlighter="prismjs" data-ext="log" data-title="log"><pre class="language-log"><code><span class="line"><span class="token operator">#</span> 응답</span>
<span class="line">SSLError<span class="token operator">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">&#39;[SSL: TLSV13_ALERT_CERTIFICATE_REQUIRED] tlsv13 alert certificate required&#39;</span><span class="token operator">)</span></span>
<span class="line"></span></code></pre></div><h4 id="without-ca" tabindex="-1"><a class="header-anchor" href="#without-ca"><span>Without CA</span></a></h4><p>서비스 A에서 B로 요청할 때 root ca를 포함하지 않는 경우이다. 인증을 위한 자체 서명 인증서를 요구한다.</p><p><a href="https://service-a.example.com:7443/wo-ca-mtls" target="_blank" rel="noopener noreferrer">https://service-a.example.com:7443/wo-ca-mtls</a></p><div class="language-log" data-highlighter="prismjs" data-ext="log" data-title="log"><pre class="language-log"><code><span class="line"><span class="token operator">#</span> 응답</span>
<span class="line">SSLError<span class="token operator">(</span>SSLCertVerificationError<span class="token operator">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">&#39;[SSL: CERTIFICATE_VERIFY_FAILED] certificate verify failed: self signed certificate in certificate chain&#39;</span><span class="token operator">)</span></span>
<span class="line"></span></code></pre></div><h4 id="with-expired-cert-service-a" tabindex="-1"><a class="header-anchor" href="#with-expired-cert-service-a"><span>With &#39;Expired&#39; Cert - Service A</span></a></h4><blockquote><p>faketime : <a href="https://github.com/wolfcw/libfaketime" target="_blank" rel="noopener noreferrer">https://github.com/wolfcw/libfaketime</a></p></blockquote><p><code>faketime</code>을 사용하여 서비스 A의 인증서 만료 기간을 현재시간 이전으로 만든다.</p><div class="language-bash" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="line">faketime <span class="token string">&#39;2023-01-01 00:00:00&#39;</span> /bin/bash <span class="token parameter variable">-c</span> <span class="token string">&#39;openssl x509 -req -days 30 -in service-a.csr -extfile service-a.ext -CA ca.crt -CAkey root.key -CAcreateserial -out service-a.crt&#39;</span></span>
<span class="line"></span></code></pre></div><p>서비스 A가 보유한 인증서가 만료된 경우 인증서 만료됨을 표기한다. (서비스 B 인증서는 정상)</p><p><a href="https://service-a.example.com:7443/w-mtls" target="_blank" rel="noopener noreferrer">https://service-a.example.com:7443/w-mtls</a></p><div class="language-log" data-highlighter="prismjs" data-ext="log" data-title="log"><pre class="language-log"><code><span class="line"><span class="token operator">#</span> 응답</span>
<span class="line">SSLError<span class="token operator">(</span>SSLError<span class="token operator">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">&#39;[SSL: SSLV3_ALERT_CERTIFICATE_EXPIRED] sslv3 alert certificate expired&#39;</span><span class="token operator">)</span></span>
<span class="line"></span></code></pre></div><h4 id="with-expired-cert-service-b" tabindex="-1"><a class="header-anchor" href="#with-expired-cert-service-b"><span>With &#39;Expired&#39; Cert - Service B</span></a></h4><blockquote><p>faketime : <a href="https://github.com/wolfcw/libfaketime" target="_blank" rel="noopener noreferrer">https://github.com/wolfcw/libfaketime</a></p></blockquote><p><code>faketime</code>을 사용하여 서비스 B의 인증서 만료 기간을 현재시간 이전으로 만든다.</p><div class="language-bash" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="line">faketime <span class="token string">&#39;2023-01-01 00:00:00&#39;</span> /bin/bash <span class="token parameter variable">-c</span> <span class="token string">&#39;openssl x509 -req -days 30 -in service-b.csr -extfile service-b.ext -CA ca.crt -CAkey root.key -CAcreateserial -out service-b.crt&#39;</span></span>
<span class="line"></span></code></pre></div><p>서비스 B가 보유한 인증서가 만료된 경우 인증서 만료됨을 표기한다. (서비스 A 인증서는 정상)</p><p><a href="https://service-a.example.com:7443/w-mtls" target="_blank" rel="noopener noreferrer">https://service-a.example.com:7443/w-mtls</a></p><div class="language-log" data-highlighter="prismjs" data-ext="log" data-title="log"><pre class="language-log"><code><span class="line">SSLError<span class="token operator">(</span>SSLCertVerificationError<span class="token operator">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">&#39;[SSL: CERTIFICATE_VERIFY_FAILED] certificate verify failed: certificate has expired&#39;</span><span class="token operator">)</span></span>
<span class="line"></span></code></pre></div><h4 id="with-different-cert-service-a-b" tabindex="-1"><a class="header-anchor" href="#with-different-cert-service-a-b"><span>With &#39;Different&#39; Cert - Service A &amp; B</span></a></h4><p>A와 B의 인증서 Root CA가 다른 경우 인증서 서명이 다르므로 요청 실패한다. 아래와 같이 서비스 B를 위한 인증서를 root ca부터 새로 생성한다.</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="line"><span class="token builtin class-name">cd</span> cert</span>
<span class="line"></span>
<span class="line">openssl genrsa <span class="token parameter variable">-out</span> root-b.key <span class="token number">2048</span></span>
<span class="line"></span>
<span class="line"><span class="token function">chmod</span> <span class="token number">600</span> root-b.key</span>
<span class="line"></span>
<span class="line">openssl req <span class="token parameter variable">-config</span> ca.conf <span class="token parameter variable">-extensions</span> usr_cert <span class="token parameter variable">-new</span> <span class="token parameter variable">-key</span> root-b.key <span class="token parameter variable">-out</span> ca-b.csr</span>
<span class="line"></span>
<span class="line">openssl x509 <span class="token parameter variable">-req</span> <span class="token parameter variable">-days</span> <span class="token number">3650</span> <span class="token parameter variable">-in</span> ca-b.csr <span class="token parameter variable">-signkey</span> root-b.key <span class="token parameter variable">-extfile</span> ca-b.ext <span class="token parameter variable">-out</span> ca-b.crt</span>
<span class="line"></span>
<span class="line">openssl genrsa <span class="token parameter variable">-aes256</span> <span class="token parameter variable">-out</span> service-b-with-pw.key <span class="token number">2048</span></span>
<span class="line"></span>
<span class="line">openssl rsa <span class="token parameter variable">-in</span> service-b-with-pw.key <span class="token parameter variable">-out</span> service-b.key</span>
<span class="line"></span>
<span class="line">openssl req <span class="token parameter variable">-new</span> <span class="token parameter variable">-key</span> service-b.key <span class="token parameter variable">-config</span> service-b.conf <span class="token parameter variable">-out</span> service-b.csr</span>
<span class="line"></span>
<span class="line">openssl x509 <span class="token parameter variable">-req</span> <span class="token parameter variable">-days</span> <span class="token number">365</span> <span class="token parameter variable">-in</span> service-b.csr <span class="token parameter variable">-extfile</span> service-b.ext <span class="token parameter variable">-CA</span> ca-b.crt <span class="token parameter variable">-CAkey</span> root-b.key <span class="token parameter variable">-CAcreateserial</span> <span class="token parameter variable">-out</span> service-b.crt</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>python_service_b</code>의 <code>main.py</code>에 서 ca 파일 이름을 변경한다.</p><div class="language-python" data-highlighter="prismjs" data-ext="py" data-title="py"><pre class="language-python"><code><span class="line"><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">&quot;__main__&quot;</span><span class="token punctuation">:</span></span>
<span class="line">    app<span class="token punctuation">.</span>debug <span class="token operator">=</span> <span class="token boolean">True</span></span>
<span class="line">    ssl_context <span class="token operator">=</span> ssl<span class="token punctuation">.</span>create_default_context<span class="token punctuation">(</span>purpose<span class="token operator">=</span>ssl<span class="token punctuation">.</span>Purpose<span class="token punctuation">.</span>CLIENT_AUTH<span class="token punctuation">,</span> cafile<span class="token operator">=</span><span class="token string">&#39;../cert/ca-b.crt&#39;</span><span class="token punctuation">)</span></span>
<span class="line">    ssl_context<span class="token punctuation">.</span>load_cert_chain<span class="token punctuation">(</span>certfile<span class="token operator">=</span><span class="token string-interpolation"><span class="token string">f&#39;../cert/</span><span class="token interpolation"><span class="token punctuation">{</span>src<span class="token punctuation">}</span></span><span class="token string">.crt&#39;</span></span><span class="token punctuation">,</span> keyfile<span class="token operator">=</span><span class="token string-interpolation"><span class="token string">f&#39;../cert/</span><span class="token interpolation"><span class="token punctuation">{</span>src<span class="token punctuation">}</span></span><span class="token string">.key&#39;</span></span><span class="token punctuation">,</span> password<span class="token operator">=</span><span class="token string">&#39;&#39;</span><span class="token punctuation">)</span></span>
<span class="line">    ssl_context<span class="token punctuation">.</span>verify_mode <span class="token operator">=</span> ssl<span class="token punctuation">.</span>CERT_REQUIRED</span>
<span class="line">    app<span class="token punctuation">.</span>run<span class="token punctuation">(</span>host<span class="token operator">=</span><span class="token string">&quot;0.0.0.0&quot;</span><span class="token punctuation">,</span> port<span class="token operator">=</span>src_port<span class="token punctuation">,</span> ssl_context<span class="token operator">=</span>ssl_context<span class="token punctuation">,</span> use_reloader<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> extra_files<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string-interpolation"><span class="token string">f&#39;../cert/</span><span class="token interpolation"><span class="token punctuation">{</span>src<span class="token punctuation">}</span></span><span class="token string">.crt&#39;</span></span><span class="token punctuation">]</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre></div><p>요청 시 서비스 A와 B의 서명이 달라 오류가 발생함을 확인한다.</p><p><a href="https://service-a.example.com:7443/w-mtls" target="_blank" rel="noopener noreferrer">https://service-a.example.com:7443/w-mtls</a></p><div class="language-log" data-highlighter="prismjs" data-ext="log" data-title="log"><pre class="language-log"><code><span class="line">SSLError<span class="token operator">(</span>SSLCertVerificationError<span class="token operator">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">&#39;[SSL: CERTIFICATE_VERIFY_FAILED] certificate verify failed: certificate signature failure&#39;</span><span class="token operator">)</span></span>
<span class="line"></span></code></pre></div><p>테스트가 끝났으면 다시 root ca 파일을 원래의 같은 <code>ca.crt</code> 파일로 지정한다.</p><h2 id="_4-vault-pki-setup" tabindex="-1"><a class="header-anchor" href="#_4-vault-pki-setup"><span>4. Vault PKI Setup</span></a></h2><blockquote><p>Vault Download : <a href="https://releases.hashicorp.com/vault/" target="_blank" rel="noopener noreferrer">https://releases.hashicorp.com/vault/</a></p></blockquote><p>Vault의 인증서 관리 및 자동화 관리 방안을 설명한다.</p><h3 id="_4-1-run-vault" tabindex="-1"><a class="header-anchor" href="#_4-1-run-vault"><span>4.1 Run Vault</span></a></h3><div class="language-bash" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="line">vault server <span class="token parameter variable">-dev</span> -dev-root-token-id<span class="token operator">=</span>root</span>
<span class="line"></span></code></pre></div><h3 id="_4-2-set-env-for-vault" tabindex="-1"><a class="header-anchor" href="#_4-2-set-env-for-vault"><span>4.2 Set env for Vault</span></a></h3><div class="language-bash" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="line"><span class="token builtin class-name">export</span> <span class="token assign-left variable">VAULT_ADDR</span><span class="token operator">=</span><span class="token string">&#39;http://127.0.0.1:8200&#39;</span></span>
<span class="line">$ vault login</span>
<span class="line"></span>
<span class="line">Token <span class="token punctuation">(</span>will be hidden<span class="token punctuation">)</span>: root</span>
<span class="line"></span></code></pre></div><h3 id="_4-3-enable-pki-setup" tabindex="-1"><a class="header-anchor" href="#_4-3-enable-pki-setup"><span>4.3 Enable PKI &amp; Setup</span></a></h3><h4 id="pki-엔진-활성화" tabindex="-1"><a class="header-anchor" href="#pki-엔진-활성화"><span>PKI 엔진 활성화</span></a></h4><div class="language-bash" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="line">vault secrets <span class="token builtin class-name">enable</span> pki</span>
<span class="line"></span></code></pre></div><h4 id="pki-엔진-ttl-tuning" tabindex="-1"><a class="header-anchor" href="#pki-엔진-ttl-tuning"><span>PKI 엔진 TTL tuning</span></a></h4><p>Vault 기본 <code>Max TTL</code>은 32일(786h) 이므로 원하는 <code>TTL</code>로 변경한다.</p><div class="language-bash" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="line">vault secrets tune -max-lease-ttl<span class="token operator">=</span>87600h pki</span>
<span class="line"></span></code></pre></div><h4 id="root-ca-생성" tabindex="-1"><a class="header-anchor" href="#root-ca-생성"><span>root CA 생성</span></a></h4><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="line">vault <span class="token function">write</span> pki/root/generate/internal <span class="token punctuation">\\</span></span>
<span class="line">    <span class="token assign-left variable">key_bits</span><span class="token operator">=</span><span class="token number">2048</span> <span class="token punctuation">\\</span></span>
<span class="line">    <span class="token assign-left variable">private_key_format</span><span class="token operator">=</span>pem <span class="token punctuation">\\</span></span>
<span class="line">    <span class="token assign-left variable">signature_bits</span><span class="token operator">=</span><span class="token number">256</span> <span class="token punctuation">\\</span></span>
<span class="line">    <span class="token assign-left variable">country</span><span class="token operator">=</span>KR <span class="token punctuation">\\</span></span>
<span class="line">    <span class="token assign-left variable">province</span><span class="token operator">=</span>Seoul <span class="token punctuation">\\</span></span>
<span class="line">    <span class="token assign-left variable">locality</span><span class="token operator">=</span>KR <span class="token punctuation">\\</span></span>
<span class="line">    <span class="token assign-left variable">organization</span><span class="token operator">=</span>COMPANY <span class="token punctuation">\\</span></span>
<span class="line">    <span class="token assign-left variable">ou</span><span class="token operator">=</span>DEV <span class="token punctuation">\\</span></span>
<span class="line">    <span class="token assign-left variable">common_name</span><span class="token operator">=</span>example.com <span class="token punctuation">\\</span></span>
<span class="line">    <span class="token assign-left variable">ttl</span><span class="token operator">=</span>87600h</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="crl-생성" tabindex="-1"><a class="header-anchor" href="#crl-생성"><span>CRL 생성</span></a></h4><p>Certificate Revocation List(인증서 해지 목록) 엔드포인트 작성</p><div class="language-bash" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="line">vault <span class="token function">write</span> pki/config/urls <span class="token punctuation">\\</span></span>
<span class="line">    <span class="token assign-left variable">issuing_certificates</span><span class="token operator">=</span><span class="token string">&quot;http://127.0.0.1:8200/v1/pki/ca&quot;</span> <span class="token punctuation">\\</span></span>
<span class="line">    <span class="token assign-left variable">crl_distribution_points</span><span class="token operator">=</span><span class="token string">&quot;http://127.0.0.1:8200/v1/pki/crl&quot;</span></span>
<span class="line"></span></code></pre></div><h4 id="role-생성" tabindex="-1"><a class="header-anchor" href="#role-생성"><span>Role 생성</span></a></h4><p>미리 Role을 구성해 놓으면 사용자 및 앱은 지정된 규칙에 따라 인증서를 발급받을 수 있다.</p><div class="language-bash" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="line">vault <span class="token function">write</span> pki/roles/example-dot-com <span class="token punctuation">\\</span></span>
<span class="line">    <span class="token assign-left variable">allowed_domains</span><span class="token operator">=</span>example.com <span class="token punctuation">\\</span></span>
<span class="line">    <span class="token assign-left variable">allow_subdomains</span><span class="token operator">=</span>true <span class="token punctuation">\\</span></span>
<span class="line">    <span class="token assign-left variable">max_ttl</span><span class="token operator">=</span>72h</span>
<span class="line"></span></code></pre></div><h4 id="발급-테스트" tabindex="-1"><a class="header-anchor" href="#발급-테스트"><span>발급 테스트</span></a></h4><div class="language-bash" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="line">vault <span class="token function">write</span> pki/issue/example-dot-com <span class="token punctuation">\\</span></span>
<span class="line">    <span class="token assign-left variable">common_name</span><span class="token operator">=</span>service-a.example.com</span>
<span class="line"></span></code></pre></div><h3 id="_4-4-vault-agent-setup" tabindex="-1"><a class="header-anchor" href="#_4-4-vault-agent-setup"><span>4.4 Vault Agent Setup</span></a></h3><blockquote><p><code>vault_agent</code> 디렉토리에서 작업한다.</p></blockquote><p>Vault Agent는 볼트가 가지고 있는 시크릿 정보를 발급 및 <code>TTL</code> 만료 시 자동 갱신해주는 역할을 수행한다.</p><h4 id="policy-추가" tabindex="-1"><a class="header-anchor" href="#policy-추가"><span>Policy 추가</span></a></h4><p>Vault Agent가 취득할 정책을 추가한다. 앞서 생성한 PKI 시크릿 엔진에 대한 권한이 설정되어있다.</p><div class="language-bash" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="line">$ vault policy <span class="token function">write</span> pki pki_policy.hcl</span>
<span class="line"></span></code></pre></div><h4 id="vault-agent를-위한-approle인증-추가" tabindex="-1"><a class="header-anchor" href="#vault-agent를-위한-approle인증-추가"><span>Vault Agent를 위한 approle인증 추가</span></a></h4><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="line">$ vault auth <span class="token builtin class-name">enable</span> approle</span>
<span class="line">Success<span class="token operator">!</span> Enabled approle auth method at: approle/</span>
<span class="line"></span>
<span class="line">$ vault <span class="token function">write</span> auth/approle/role/pki-agent <span class="token punctuation">\\</span></span>
<span class="line">    <span class="token assign-left variable">secret_id_ttl</span><span class="token operator">=</span>120m <span class="token punctuation">\\</span></span>
<span class="line">    <span class="token assign-left variable">token_ttl</span><span class="token operator">=</span>60m <span class="token punctuation">\\</span></span>
<span class="line">    <span class="token assign-left variable">token_max_tll</span><span class="token operator">=</span>120m <span class="token punctuation">\\</span></span>
<span class="line">    <span class="token assign-left variable">policies</span><span class="token operator">=</span><span class="token string">&quot;pki&quot;</span></span>
<span class="line">Success<span class="token operator">!</span> Data written to: auth/approle/role/pki-agent</span>
<span class="line"></span>
<span class="line">$ vault <span class="token builtin class-name">read</span> auth/approle/role/pki-agent/role-id</span>
<span class="line">Key        Value</span>
<span class="line">---        -----</span>
<span class="line">role_id    dfa2a248-1e1b-e2e9-200c-69c63b9ca447</span>
<span class="line"></span>
<span class="line">$ vault <span class="token function">write</span> <span class="token parameter variable">-f</span> auth/approle/role/pki-agent/secret-id</span>
<span class="line">Key                   Value</span>
<span class="line">---                   -----</span>
<span class="line">secret_id             864360c1-c79f-ea7c-727b-7752361fe1ba</span>
<span class="line">secret_id_accessor    3cc068e2-a172-2bb1-c097-b777c3525ba6</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="vault-agent가-사용할-roleid-secretid-저장" tabindex="-1"><a class="header-anchor" href="#vault-agent가-사용할-roleid-secretid-저장"><span>Vault Agent가 사용할 RoleID, SecretID 저장</span></a></h4><p>Vault Agent 실행 시 approle 인증방식을 사용하도록 구성하는 예제로, <code>role_id</code>와 <code>secret_id</code>가 필요하다. Vault Agent 재기동시에는 <code>secret_id</code>를 재발급 해야 한다.</p><div class="language-bash" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="line">$ vault <span class="token builtin class-name">read</span> <span class="token parameter variable">-field</span><span class="token operator">=</span>role_id auth/approle/role/pki-agent/role-id <span class="token operator">&gt;</span> roleid</span>
<span class="line"></span>
<span class="line">$ vault <span class="token function">write</span> <span class="token parameter variable">-f</span> <span class="token parameter variable">-field</span><span class="token operator">=</span>secret_id auth/approle/role/pki-agent/secret-id <span class="token operator">&gt;</span> secretid</span>
<span class="line"></span></code></pre></div><h4 id="template-확인" tabindex="-1"><a class="header-anchor" href="#template-확인"><span>Template 확인</span></a></h4><p>Vault Agent는 Template에 따라 시크릿을 특정 파일로 랜더링하는 기능을 갖고 있다.</p><div class="language-hcl" data-highlighter="prismjs" data-ext="hcl" data-title="hcl"><pre class="language-hcl"><code><span class="line"><span class="token comment"># ca-a.tpl</span></span>
<span class="line"><span class="token punctuation">{</span><span class="token punctuation">{</span>- <span class="token comment">/* ca-a.tpl */</span> -<span class="token punctuation">}</span><span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">{</span><span class="token punctuation">{</span> with secret <span class="token string">&quot;pki/issue/example-dot-com&quot;</span> <span class="token string">&quot;common_name=service-a.example.com&quot;</span> <span class="token string">&quot;ttl=2m&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">{</span><span class="token punctuation">{</span> .Data.issuing_ca <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">{</span><span class="token punctuation">{</span> end <span class="token punctuation">}</span><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre></div><p>위 구문은 <code>pki/issue/example-dot-com</code> 에서 <code>common_name=service-a.example.com</code> 인 인증서를 발급하는 것으로, 테스트를 위해 <code>ttl=2m</code>로 짧게 설정하였다. 볼트로 부터 받는 결과 중에서 <code>issuing_ca</code> 값을 랜더링한다.</p><p><code>vault_agent.hcl</code>에서는 위 Template에 대한 랜더링 결과를 특정 파일로 저장하도록 명시한다.</p><div class="language-hcl" data-highlighter="prismjs" data-ext="hcl" data-title="hcl"><pre class="language-hcl"><code><span class="line"><span class="token keyword">template</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token property">source</span>      <span class="token punctuation">=</span> <span class="token string">&quot;ca-a.tpl&quot;</span></span>
<span class="line">  <span class="token property">destination</span> <span class="token punctuation">=</span> <span class="token string">&quot;../cert/ca.crt&quot;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre></div><h4 id="vault-agent-실행" tabindex="-1"><a class="header-anchor" href="#vault-agent-실행"><span>Vault Agent 실행</span></a></h4><div class="language-bash" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="line">vault agent <span class="token parameter variable">-config</span><span class="token operator">=</span>vault_agent.hcl -log-level<span class="token operator">=</span>debug</span>
<span class="line"></span></code></pre></div><p>지정된 <code>TTL</code> 간격마다 템플릿 랜더링 로그 확인한다.</p><div class="language-log line-numbers-mode" data-highlighter="prismjs" data-ext="log" data-title="log"><pre class="language-log"><code><span class="line"><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span></span>
<span class="line"><span class="token date number">2023-03-18T</span><span class="token time number">22:29:09.312+0900</span> <span class="token punctuation">[</span><span class="token level debug keyword">DEBUG</span><span class="token punctuation">]</span> <span class="token operator">(</span>runner<span class="token operator">)</span> rendering <span class="token string">&quot;ca-a.tpl&quot;</span> <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token string">&quot;../cert/ca.crt&quot;</span></span>
<span class="line"><span class="token date number">2023-03-18T</span><span class="token time number">22:29:09.312+0900</span> <span class="token punctuation">[</span><span class="token level debug keyword">DEBUG</span><span class="token punctuation">]</span> <span class="token operator">(</span>runner<span class="token operator">)</span> checking template <span class="token hash constant">a04612e63b9a03a45ef968a8984a23db</span></span>
<span class="line"><span class="token date number">2023-03-18T</span><span class="token time number">22:29:09.312+0900</span> <span class="token punctuation">[</span><span class="token level debug keyword">DEBUG</span><span class="token punctuation">]</span> <span class="token operator">(</span>runner<span class="token operator">)</span> rendering <span class="token string">&quot;cert-a.tpl&quot;</span> <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token string">&quot;../cert/service-a.crt&quot;</span></span>
<span class="line"><span class="token date number">2023-03-18T</span><span class="token time number">22:29:09.312+0900</span> <span class="token punctuation">[</span><span class="token level debug keyword">DEBUG</span><span class="token punctuation">]</span> <span class="token operator">(</span>runner<span class="token operator">)</span> checking template <span class="token hash constant">850589d81f7afe64c7c5a0a8440c8569</span></span>
<span class="line"><span class="token date number">2023-03-18T</span><span class="token time number">22:29:09.312+0900</span> <span class="token punctuation">[</span><span class="token level debug keyword">DEBUG</span><span class="token punctuation">]</span> <span class="token operator">(</span>runner<span class="token operator">)</span> rendering <span class="token string">&quot;key-a.tpl&quot;</span> <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token string">&quot;../cert/service-a.key&quot;</span></span>
<span class="line"><span class="token date number">2023-03-18T</span><span class="token time number">22:29:09.312+0900</span> <span class="token punctuation">[</span><span class="token level debug keyword">DEBUG</span><span class="token punctuation">]</span> <span class="token operator">(</span>runner<span class="token operator">)</span> checking template <span class="token hash constant">60e7f2683d2c76a501eb54879bf89ad2</span></span>
<span class="line"><span class="token date number">2023-03-18T</span><span class="token time number">22:29:09.312+0900</span> <span class="token punctuation">[</span><span class="token level debug keyword">DEBUG</span><span class="token punctuation">]</span> <span class="token operator">(</span>runner<span class="token operator">)</span> rendering <span class="token string">&quot;cert-b.tpl&quot;</span> <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token string">&quot;../cert/service-b.crt&quot;</span></span>
<span class="line"><span class="token date number">2023-03-18T</span><span class="token time number">22:29:09.333+0900</span> <span class="token punctuation">[</span><span class="token level info keyword">INFO</span><span class="token punctuation">]</span> <span class="token operator">(</span>runner<span class="token operator">)</span> rendered <span class="token string">&quot;cert-b.tpl&quot;</span> <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token string">&quot;../cert/service-b.crt&quot;</span></span>
<span class="line"><span class="token date number">2023-03-18T</span><span class="token time number">22:29:09.333+0900</span> <span class="token punctuation">[</span><span class="token level debug keyword">DEBUG</span><span class="token punctuation">]</span> <span class="token operator">(</span>runner<span class="token operator">)</span> checking template <span class="token hash constant">1fb22b9f15857b7eeb0b68a3c9ac6d20</span></span>
<span class="line"><span class="token date number">2023-03-18T</span><span class="token time number">22:29:09.334+0900</span> <span class="token punctuation">[</span><span class="token level debug keyword">DEBUG</span><span class="token punctuation">]</span> <span class="token operator">(</span>runner<span class="token operator">)</span> rendering <span class="token string">&quot;key-b.tpl&quot;</span> <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token string">&quot;../cert/service-b.key&quot;</span></span>
<span class="line"><span class="token date number">2023-03-18T</span><span class="token time number">22:29:09.354+0900</span> <span class="token punctuation">[</span><span class="token level info keyword">INFO</span><span class="token punctuation">]</span> <span class="token operator">(</span>runner<span class="token operator">)</span> rendered <span class="token string">&quot;key-b.tpl&quot;</span> <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token string">&quot;../cert/service-b.key&quot;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>랜더링이 완료되고, 파일이 갱신되면 Python의 Flask 설정의 <code>extra_files</code> 항목이 변경되므로 재시작되어 인증서를 다시 읽어온다.</p><div class="language-log" data-highlighter="prismjs" data-ext="log" data-title="log"><pre class="language-log"><code><span class="line"> <span class="token operator">*</span> Detected change in <span class="token string">&#39;/vault-examples/mtls-pki/cert/130906523&#39;</span><span class="token punctuation">,</span> reloading</span>
<span class="line"> <span class="token operator">*</span> Detected change in <span class="token string">&#39;/vault-examples/mtls-pki/cert/service-a.crt&#39;</span><span class="token punctuation">,</span> reloading</span>
<span class="line"> <span class="token operator">*</span> Restarting with watchdog <span class="token operator">(</span>fsevents<span class="token operator">)</span></span>
<span class="line"> <span class="token operator">*</span> Debugger is active<span class="token operator">!</span></span>
<span class="line"> <span class="token operator">*</span> Debugger PIN<span class="token operator">:</span> <span class="token number">136</span><span class="token operator">-</span><span class="token number">647</span><span class="token operator">-</span><span class="token number">438</span></span>
<span class="line"></span></code></pre></div><p>변경된 인증서를 확인해보면 갱신된 유효기간을 확인할 수 있고, 브라우저에서도 인증서 보기를 통해 변경된 인증서의 유효기간을 확인할 수 있다.</p><figure><img src="https://raw.githubusercontent.com/Great-Stone/images/master/uPic/Monosnap 2023-03-19 14-44-08.png" alt="Monosnap 2023-03-19 14-44-08" tabindex="0" loading="lazy"><figcaption>Monosnap 2023-03-19 14-44-08</figcaption></figure><h2 id="_5-nomad-연계" tabindex="-1"><a class="header-anchor" href="#_5-nomad-연계"><span>5. Nomad 연계</span></a></h2><p>인증서 같은 시크릿은 파일 형태로 관리되는데, 이런 파일이 변경되면 애플리케이션 또는 웹서버나 솔루션에서 감지하는 구성이 필요하다. 데모 앱인 Python의 Flask에서는 Debug모드에 <code>extra_files</code>에 인증서를 지정하여 변경되는 인증서를 감지하도록 하였으나 이는 운영에서는 권장되지 않는 방식이며 인증서 교체와 함께 <code>watch</code>, <code>reload</code>, <code>restart</code>에 대한 동작이 요구된다.</p><p>애플리케이션에서 내부적으로 코드 구현을 통해 이를 교체하는 방법도 있으나, mTLS가 적용되는 코드 전반에 변경이 필요하므로 HasihCorp Nomad같은 Vault 연계된 애플리케이션 오케스트레이터를 활용할 수 있다.</p><p>Vault의 인증서 관리 및 자동화 관리 방안을 Nomad와 연계하여 설명한다.</p><blockquote><p>Nomad Download : <a href="https://releases.hashicorp.com/nomad/" target="_blank" rel="noopener noreferrer">https://releases.hashicorp.com/nomad/</a></p></blockquote><ul><li>Vault 서버는 그대로 두고, PKI를 기존것을 사용한다.</li><li>서비스 A와 B는 종료한다.</li><li>Vault Agent는 종료한다.</li></ul><p>준비된 Policy 및 Job은 <code>nomad</code> 디렉토리에 있다.</p><h3 id="_4-1-nomad-policy를-vault에-생성-및-nomad-실행" tabindex="-1"><a class="header-anchor" href="#_4-1-nomad-policy를-vault에-생성-및-nomad-실행"><span>4.1 Nomad Policy를 Vault에 생성 및 Nomad 실행</span></a></h3><p>Nomad 에 부여할 Vault의 정책을 생성한다.</p><div class="language-text" data-highlighter="prismjs" data-ext="text" data-title="text"><pre class="language-text"><code><span class="line">vault policy write nomad-server nomad_policy.hcl</span>
<span class="line"></span></code></pre></div><p>Nomad 에서 사용할 Token Role을 생성한다. Nomad에서 허용되는 정책은 앞서 생성한 <code>pki</code> 이다.</p><div class="language-bash" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="line">vault <span class="token function">write</span> auth/token/roles/nomad-cluster <span class="token assign-left variable">allowed_policies</span><span class="token operator">=</span><span class="token string">&quot;pki&quot;</span> <span class="token assign-left variable">disallowed_policies</span><span class="token operator">=</span>nomad-server <span class="token assign-left variable">token_explicit_max_ttl</span><span class="token operator">=</span><span class="token number">0</span> <span class="token assign-left variable">orphan</span><span class="token operator">=</span>true <span class="token assign-left variable">token_period</span><span class="token operator">=</span><span class="token string">&quot;259200&quot;</span> <span class="token assign-left variable">renewable</span><span class="token operator">=</span>true</span>
<span class="line"></span></code></pre></div><p>생성한 Token Role 기반으로 Nomad와의 설정에 사용할 Token을 하나 발급한다.</p><div class="language-bash" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="line">vault token create <span class="token parameter variable">-field</span> token <span class="token parameter variable">-policy</span> nomad-server <span class="token parameter variable">-period</span> 72h <span class="token parameter variable">-orphan</span> <span class="token operator">&gt;</span> /tmp/token.txt</span>
<span class="line"></span></code></pre></div><p>Nomad를 실행한다.</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="line">$ nomad agent <span class="token parameter variable">-dev</span> -vault-enabled<span class="token operator">=</span>true -vault-address<span class="token operator">=</span>http://127.0.0.1:8200 -vault-token<span class="token operator">=</span><span class="token variable"><span class="token variable">$(</span><span class="token function">cat</span> /tmp/token.txt<span class="token variable">)</span></span> -vault-tls-skip-verify<span class="token operator">=</span>true -vault-create-from-role<span class="token operator">=</span>nomad-cluster</span>
<span class="line"></span>
<span class="line"><span class="token operator">==</span><span class="token operator">&gt;</span> No configuration files loaded</span>
<span class="line"><span class="token operator">==</span><span class="token operator">&gt;</span> Starting Nomad agent<span class="token punctuation">..</span>.</span>
<span class="line"><span class="token operator">==</span><span class="token operator">&gt;</span> Nomad agent configuration:</span>
<span class="line"></span>
<span class="line">       Advertise Addrs: HTTP: <span class="token number">127.0</span>.0.1:4646<span class="token punctuation">;</span> RPC: <span class="token number">127.0</span>.0.1:4647<span class="token punctuation">;</span> Serf: <span class="token number">127.0</span>.0.1:4648</span>
<span class="line">            Bind Addrs: HTTP: <span class="token punctuation">[</span><span class="token number">127.0</span>.0.1:4646<span class="token punctuation">]</span><span class="token punctuation">;</span> RPC: <span class="token number">127.0</span>.0.1:4647<span class="token punctuation">;</span> Serf: <span class="token number">127.0</span>.0.1:4648</span>
<span class="line">                Client: <span class="token boolean">true</span></span>
<span class="line">             Log Level: DEBUG</span>
<span class="line">                Region: global <span class="token punctuation">(</span>DC: dc1<span class="token punctuation">)</span></span>
<span class="line">                Server: <span class="token boolean">true</span></span>
<span class="line">               Version: <span class="token number">1.5</span>.1</span>
<span class="line"></span>
<span class="line"><span class="token operator">==</span><span class="token operator">&gt;</span> Nomad agent started<span class="token operator">!</span> Log data will stream <span class="token keyword">in</span> below:</span>
<span class="line"><span class="token punctuation">..</span>.</span>
<span class="line">    <span class="token number">2023</span>-03-19T15:34:30.081+0900 <span class="token punctuation">[</span>DEBUG<span class="token punctuation">]</span> nomad.vault: starting renewal loop: <span class="token assign-left variable">creation_ttl</span><span class="token operator">=</span>72h0m0s</span>
<span class="line">    <span class="token number">2023</span>-03-19T15:34:30.082+0900 <span class="token punctuation">[</span>DEBUG<span class="token punctuation">]</span> nomad.vault: successfully renewed server token</span>
<span class="line">    <span class="token number">2023</span>-03-19T15:34:30.082+0900 <span class="token punctuation">[</span>INFO<span class="token punctuation">]</span>  nomad.vault: successfully renewed token: <span class="token assign-left variable">next_renewal</span><span class="token operator">=</span>35h59m59.999944054s</span>
<span class="line"><span class="token punctuation">..</span>.</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-2-set-env-for-nomad" tabindex="-1"><a class="header-anchor" href="#_4-2-set-env-for-nomad"><span>4.2 Set env for Nomad</span></a></h3><div class="language-text" data-highlighter="prismjs" data-ext="text" data-title="text"><pre class="language-text"><code><span class="line">export NOMAD_ADDR=&#39;http://127.0.0.1:4646&#39;</span>
<span class="line"></span></code></pre></div><h3 id="_4-3-job-spec-설명" tabindex="-1"><a class="header-anchor" href="#_4-3-job-spec-설명"><span>4.3 Job spec 설명</span></a></h3><p>Nomad Job을 해석하면 다음과 같다.</p><div class="language-hcl line-numbers-mode" data-highlighter="prismjs" data-ext="hcl" data-title="hcl"><pre class="language-hcl"><code><span class="line">job <span class="token string">&quot;mtls-service-a&quot;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token property">datacenters</span> <span class="token punctuation">=</span> <span class="token punctuation">[</span><span class="token string">&quot;dc1&quot;</span><span class="token punctuation">]</span></span>
<span class="line"></span>
<span class="line">  <span class="token property">type</span> <span class="token punctuation">=</span> <span class="token string">&quot;service&quot;</span></span>
<span class="line"></span>
<span class="line">  group <span class="token string">&quot;service&quot;</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token property">count</span> <span class="token punctuation">=</span> <span class="token number">1</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">network</span> <span class="token punctuation">{</span></span>
<span class="line">      port <span class="token string">&quot;https&quot;</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token property">static</span> <span class="token punctuation">=</span> <span class="token number">7433</span></span>
<span class="line">      <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    </span>
<span class="line">    <span class="token comment"># vault에서 할당받을 Polocy를 명시 한다.</span></span>
<span class="line">    <span class="token comment"># 해당 Policy로 생성되는 Token의 변경시 동작은 change_mode에서 지정한다.</span></span>
<span class="line">    <span class="token keyword">vault</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token property">namespace</span> <span class="token punctuation">=</span> <span class="token string">&quot;&quot;</span></span>
<span class="line">      <span class="token property">policies</span> <span class="token punctuation">=</span> <span class="token punctuation">[</span><span class="token string">&quot;pki&quot;</span><span class="token punctuation">]</span></span>
<span class="line">      <span class="token property">change_mode</span> <span class="token punctuation">=</span> <span class="token string">&quot;noop&quot;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    task <span class="token string">&quot;python-task&quot;</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token property">driver</span> <span class="token punctuation">=</span> <span class="token string">&quot;raw_exec&quot;</span></span>
<span class="line"></span>
<span class="line">      <span class="token keyword">config</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token property">command</span> <span class="token punctuation">=</span> <span class="token string">&quot;local/start.sh&quot;</span></span>
<span class="line">      <span class="token punctuation">}</span></span>
<span class="line">      <span class="token keyword">template</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token property">data</span> <span class="token punctuation">=</span> <span class="token heredoc string">&lt;&lt;EOH</span>
<span class="line">#!/bin/bash</span>
<span class="line">cp -R /Users/gs/workspaces/hashicorp_example/vault-examples/mtls-pki/python_service_a python_service_a</span>
<span class="line">cd python_service_a</span>
<span class="line">pip install requests flask</span>
<span class="line">python main.py</span>
<span class="line">      EOH</span></span>
<span class="line">        <span class="token property">destination</span> <span class="token punctuation">=</span> <span class="token string">&quot;local/start.sh&quot;</span></span>
<span class="line">      <span class="token punctuation">}</span></span>
<span class="line">      </span>
<span class="line">      <span class="token comment"># Vault Agent에서 구성했던 Template이 Job내에 정의된다.</span></span>
<span class="line">      <span class="token keyword">template</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token property">data</span> <span class="token punctuation">=</span> <span class="token heredoc string">&lt;&lt;EOH</span>
<span class="line">{{- /* ca-a.tpl */ -}}</span>
<span class="line">{{ with secret &quot;pki/issue/example-dot-com&quot; &quot;common_name=service-a.example.com&quot; &quot;ttl=2m&quot; }}</span>
<span class="line">{{ .Data.issuing_ca }}{{ end }}</span>
<span class="line">      EOH</span></span>
<span class="line">        <span class="token property">destination</span> <span class="token punctuation">=</span> <span class="token string">&quot;/cert/ca.crt&quot;</span></span>
<span class="line">        <span class="token property">change_mode</span> <span class="token punctuation">=</span> <span class="token string">&quot;noop&quot;</span></span>
<span class="line">      <span class="token punctuation">}</span></span>
<span class="line">      <span class="token comment"># 인증서가 변경되는 경우 change_mode에 지정된 restart를 통해 Job을 재시작한다.</span></span>
<span class="line">      <span class="token keyword">template</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token property">data</span> <span class="token punctuation">=</span> <span class="token heredoc string">&lt;&lt;EOH</span>
<span class="line">{{- /* cert-a.tpl */ -}}</span>
<span class="line">{{ with secret &quot;pki/issue/example-dot-com&quot; &quot;common_name=service-a.example.com&quot; &quot;ttl=2m&quot; }}</span>
<span class="line">{{ .Data.certificate }}{{ end }}</span>
<span class="line">      EOH</span></span>
<span class="line">        <span class="token property">destination</span> <span class="token punctuation">=</span> <span class="token string">&quot;/cert/service-a.crt&quot;</span></span>
<span class="line">        <span class="token property">change_mode</span> <span class="token punctuation">=</span> <span class="token string">&quot;restart&quot;</span></span>
<span class="line">      <span class="token punctuation">}</span></span>
<span class="line">      <span class="token keyword">template</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token property">data</span> <span class="token punctuation">=</span> <span class="token heredoc string">&lt;&lt;EOH</span>
<span class="line">{{- /* key-a.tpl */ -}}</span>
<span class="line">{{ with secret &quot;pki/issue/example-dot-com&quot; &quot;common_name=service-a.example.com&quot; &quot;ttl=2m&quot; }}</span>
<span class="line">{{ .Data.private_key }}{{ end }}</span>
<span class="line">      EOH</span></span>
<span class="line">        <span class="token property">destination</span> <span class="token punctuation">=</span> <span class="token string">&quot;/cert/service-a.key&quot;</span></span>
<span class="line">        <span class="token property">change_mode</span> <span class="token punctuation">=</span> <span class="token string">&quot;noop&quot;</span></span>
<span class="line">      <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>change_mode</code> 의 경우 인증서 변경후 동작을 정의하는데,</p><ul><li><code>noop</code>은 아무 동작도 수행하지 않음을 의미한다.</li><li><code>restart</code>는 Job을 재시작한다.</li><li><code>signal</code>은 system signal을 호출하며, systemctl로 실행되는 프로세스의 경우 <code>SIGHUP</code>을 지정하면 reload 동작이 발생한다.</li></ul><h3 id="_4-4-job-실행" tabindex="-1"><a class="header-anchor" href="#_4-4-job-실행"><span>4.4 Job 실행</span></a></h3><p>앞서 Python을 직접 실행했던것과 같이 Nomad 를 통해 Python을 실행하며, 조건은 동일하다. Flask에서 파일 체크를 위해 추가했던 <code>extra_files</code>는 삭제해도 된다.</p><div class="language-bash" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="line">nomad job run service_a_job.hcl</span>
<span class="line">nomad job run service_b_job.hcl</span>
<span class="line"></span></code></pre></div><figure><img src="https://raw.githubusercontent.com/Great-Stone/images/master/uPic/Jobs - Nomad 2023-03-19.png" alt="Jobs - Nomad 2023-03-19" tabindex="0" loading="lazy"><figcaption>Jobs - Nomad 2023-03-19</figcaption></figure><p>Vault 에서 가져온 인증서가 변경되면 <code>change_mode</code>에 정의된 <code>restart</code> 에 의해 애플리케이션을 자동 재시작 한다.</p><figure><img src="https://raw.githubusercontent.com/Great-Stone/images/master/uPic/Task python-task logs - Nomad 2023-03-19 16-55-40.png" alt="Task python-task logs - Nomad 2023-03-19 16-55-40" tabindex="0" loading="lazy"><figcaption>Task python-task logs - Nomad 2023-03-19 16-55-40</figcaption></figure><h2 id="_5-consul의-mtls" tabindex="-1"><a class="header-anchor" href="#_5-consul의-mtls"><span>5. Consul의 mTLS</span></a></h2><p>Consul에서는 mTLS를 위한 인증서를 각 애플리케이션에서 분리하여 envoy로 구현된 proxy에서 이를 대체한다. 따라서 애플리케이션에는 별도 mTLS 구현이 불필요하며, 인증서 교체를 Consul이 제공하는 proxy가 담당하게 된다.</p><p>Consul Service Mesh에서 기본 제공하는 mTLS를 사용하는 경우 장점은</p><ul><li>애플리케이션 개발에 mTLS 및 인증서 관리가 불필요하다.</li><li>Consul 내에서 인증서가 자동 교체된다.</li><li>mTLS의 서비스 간 인증 외에 Intention과 같은 서비스 요청에 대한 방향성을 지정 가능하다.</li></ul><p>단점은 Consul의 Control Plane과 Data Plane을 구분하는 동작으로 인해 추가적인 리소스가 발생한다는 점이다.</p><figure><img src="https://raw.githubusercontent.com/Great-Stone/images/master/uPic/Service Mesh Certificate Authority - Overview | Consul | HashiCorp Developer 2023-03-19 17-23-03.png" alt="Service Mesh Certificate Authority - Overview | Consul | HashiCorp Developer 2023-03-19 17-23-03" tabindex="0" loading="lazy"><figcaption>Service Mesh Certificate Authority - Overview | Consul | HashiCorp Developer 2023-03-19 17-23-03</figcaption></figure><figure><img src="https://raw.githubusercontent.com/Great-Stone/images/master/uPic/Load Balancing Services in Consul Service Mesh with Envoy | Consul | HashiCorp Developer 2023-03-19 17-25-21.png" alt="Load Balancing Services in Consul Service Mesh with Envoy | Consul | HashiCorp Developer 2023-03-19 17-25-21" tabindex="0" loading="lazy"><figcaption>Load Balancing Services in Consul Service Mesh with Envoy | Consul | HashiCorp Developer 2023-03-19 17-25-21</figcaption></figure>`,211),l=[t];function i(c,o){return a(),n("div",null,l)}const d=s(p,[["render",i],["__file","mtls.html.vue"]]),k=JSON.parse('{"path":"/04-HashiCorp/06-Vault/04-UseCase/mtls.html","title":"Vault PKI - mTLS demo","lang":"ko-KR","frontmatter":{"head":[["meta",{"name":"Vault PKI를 사용하여 mTLS 구성의 인증서 자동화","content":"Vault PKI와 mTLS 데모 앱 설명"}],["meta",{"property":"og:url","content":"https://docmoa.github.io/04-HashiCorp/06-Vault/04-UseCase/mtls.html"}],["meta",{"property":"og:site_name","content":"docmoa"}],["meta",{"property":"og:title","content":"Vault PKI - mTLS demo"}],["meta",{"property":"og:description","content":"Vault PKI - mTLS demo Demo App Github : https://github.com/Great-Stone/vault-mtls-demo 1. mTLS 설명 1.1 SSL과 TLS SSL(Secure Sokets Layer, 보안 소캣 계층)는 클라이언트와 서버 사이에 전송된 데이터를 암호화 하고 ..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://raw.githubusercontent.com/Great-Stone/images/master/uPic/image-20230320091036089.png"}],["meta",{"property":"og:locale","content":"ko-KR"}],["meta",{"property":"og:updated_time","content":"2023-09-18T13:12:54.000Z"}],["meta",{"property":"article:tag","content":"vault"}],["meta",{"property":"article:tag","content":"pki"}],["meta",{"property":"article:tag","content":"mTLS"}],["meta",{"property":"article:modified_time","content":"2023-09-18T13:12:54.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Vault PKI - mTLS demo\\",\\"image\\":[\\"https://raw.githubusercontent.com/Great-Stone/images/master/uPic/image-20230320091036089.png\\",\\"https://raw.githubusercontent.com/Great-Stone/images/master/uPic/image-20230320091236622.png\\",\\"https://raw.githubusercontent.com/Great-Stone/images/master/uPic/Monosnap%202023-03-19%2014-44-08.png\\",\\"https://raw.githubusercontent.com/Great-Stone/images/master/uPic/Jobs%20-%20Nomad%202023-03-19.png\\",\\"https://raw.githubusercontent.com/Great-Stone/images/master/uPic/Task%20python-task%20logs%20-%20Nomad%202023-03-19%2016-55-40.png\\",\\"https://raw.githubusercontent.com/Great-Stone/images/master/uPic/Service%20Mesh%20Certificate%20Authority%20-%20Overview%20%7C%20Consul%20%7C%20HashiCorp%20Developer%202023-03-19%2017-23-03.png\\",\\"https://raw.githubusercontent.com/Great-Stone/images/master/uPic/Load%20Balancing%20Services%20in%20Consul%20Service%20Mesh%20with%20Envoy%20%7C%20Consul%20%7C%20HashiCorp%20Developer%202023-03-19%2017-25-21.png\\"],\\"dateModified\\":\\"2023-09-18T13:12:54.000Z\\",\\"author\\":[]}"]],"tag":["vault","pki","mTLS"],"description":"Vault PKI - mTLS demo Demo App Github : https://github.com/Great-Stone/vault-mtls-demo 1. mTLS 설명 1.1 SSL과 TLS SSL(Secure Sokets Layer, 보안 소캣 계층)는 클라이언트와 서버 사이에 전송된 데이터를 암호화 하고 ..."},"headers":[{"level":2,"title":"1. mTLS 설명","slug":"_1-mtls-설명","link":"#_1-mtls-설명","children":[{"level":3,"title":"1.1 SSL과 TLS","slug":"_1-1-ssl과-tls","link":"#_1-1-ssl과-tls","children":[]},{"level":3,"title":"1.2 TLS Handshake","slug":"_1-2-tls-handshake","link":"#_1-2-tls-handshake","children":[]},{"level":3,"title":"1.3 mutualTLS(mTLS)","slug":"_1-3-mutualtls-mtls","link":"#_1-3-mutualtls-mtls","children":[]},{"level":3,"title":"1.4 mTLS 의 장단점","slug":"_1-4-mtls-의-장단점","link":"#_1-4-mtls-의-장단점","children":[]},{"level":3,"title":"1.5 구성의 예","slug":"_1-5-구성의-예","link":"#_1-5-구성의-예","children":[]}]},{"level":2,"title":"2. use OpenSSL","slug":"_2-use-openssl","link":"#_2-use-openssl","children":[{"level":3,"title":"2.1 Root Key 생성","slug":"_2-1-root-key-생성","link":"#_2-1-root-key-생성","children":[]},{"level":3,"title":"2.2 Root CA 요청서(CSR) 생성","slug":"_2-2-root-ca-요청서-csr-생성","link":"#_2-2-root-ca-요청서-csr-생성","children":[]},{"level":3,"title":"2.3 Root CA 인증서 생성","slug":"_2-3-root-ca-인증서-생성","link":"#_2-3-root-ca-인증서-생성","children":[]},{"level":3,"title":"2.4 서비스 A 용 Key 생성","slug":"_2-4-서비스-a-용-key-생성","link":"#_2-4-서비스-a-용-key-생성","children":[]},{"level":3,"title":"2.5 서비스 A 용 인증서 요청서(CSR) 생성","slug":"_2-5-서비스-a-용-인증서-요청서-csr-생성","link":"#_2-5-서비스-a-용-인증서-요청서-csr-생성","children":[]},{"level":3,"title":"2.6 서비스용 인증서 생성","slug":"_2-6-서비스용-인증서-생성","link":"#_2-6-서비스용-인증서-생성","children":[]},{"level":3,"title":"2.7 Service B용 생성","slug":"_2-7-service-b용-생성","link":"#_2-7-service-b용-생성","children":[]}]},{"level":2,"title":"3. Demo App (Python)","slug":"_3-demo-app-python","link":"#_3-demo-app-python","children":[{"level":3,"title":"3.1 preparation","slug":"_3-1-preparation","link":"#_3-1-preparation","children":[]},{"level":3,"title":"3.2 Run services","slug":"_3-2-run-services","link":"#_3-2-run-services","children":[]},{"level":3,"title":"3.3 Test API","slug":"_3-3-test-api","link":"#_3-3-test-api","children":[]}]},{"level":2,"title":"4. Vault PKI Setup","slug":"_4-vault-pki-setup","link":"#_4-vault-pki-setup","children":[{"level":3,"title":"4.1 Run Vault","slug":"_4-1-run-vault","link":"#_4-1-run-vault","children":[]},{"level":3,"title":"4.2 Set env for Vault","slug":"_4-2-set-env-for-vault","link":"#_4-2-set-env-for-vault","children":[]},{"level":3,"title":"4.3 Enable PKI & Setup","slug":"_4-3-enable-pki-setup","link":"#_4-3-enable-pki-setup","children":[]},{"level":3,"title":"4.4 Vault Agent Setup","slug":"_4-4-vault-agent-setup","link":"#_4-4-vault-agent-setup","children":[]}]},{"level":2,"title":"5. Nomad 연계","slug":"_5-nomad-연계","link":"#_5-nomad-연계","children":[{"level":3,"title":"4.1 Nomad Policy를 Vault에 생성 및 Nomad 실행","slug":"_4-1-nomad-policy를-vault에-생성-및-nomad-실행","link":"#_4-1-nomad-policy를-vault에-생성-및-nomad-실행","children":[]},{"level":3,"title":"4.2 Set env for Nomad","slug":"_4-2-set-env-for-nomad","link":"#_4-2-set-env-for-nomad","children":[]},{"level":3,"title":"4.3 Job spec 설명","slug":"_4-3-job-spec-설명","link":"#_4-3-job-spec-설명","children":[]},{"level":3,"title":"4.4 Job 실행","slug":"_4-4-job-실행","link":"#_4-4-job-실행","children":[]}]},{"level":2,"title":"5. Consul의 mTLS","slug":"_5-consul의-mtls","link":"#_5-consul의-mtls","children":[]}],"git":{"createdTime":1679214075000,"updatedTime":1695042774000,"contributors":[{"name":"Great-Stone","email":"hahohh@gmail.com","commits":7}]},"readingTime":{"minutes":43.32,"words":2599},"filePathRelative":"04-HashiCorp/06-Vault/04-UseCase/mtls.md","localizedDate":"2023년 3월 19일","excerpt":"\\n<blockquote>\\n<p>Demo App Github : <a href=\\"https://github.com/Great-Stone/vault-mtls-demo\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">https://github.com/Great-Stone/vault-mtls-demo</a></p>\\n</blockquote>\\n<h2>1. mTLS 설명</h2>\\n<h3>1.1 SSL과 TLS</h3>\\n<p>SSL(Secure Sokets Layer, 보안 소캣 계층)는 클라이언트와 서버 사이에 전송된 데이터를 암호화 하고 인터넷 연결에 보안을 유지하는 표준 기술이다. 악의적 외부인이 클라이언트와 서버 사이에 전송되는 정보를 확인 및 탈취하는 것을 방지한다.</p>","autoDesc":true}');export{d as comp,k as data};
