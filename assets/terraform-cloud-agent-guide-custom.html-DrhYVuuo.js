import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as t,c as a,h as n}from"./app-DVMlqOhY.js";const s={},r=n(`<h1 id="terraform-cloud-agent-가이드" tabindex="-1"><a class="header-anchor" href="#terraform-cloud-agent-가이드"><span>Terraform Cloud Agent 가이드</span></a></h1><p>Terraform Cloud Agent(Agent)는 Terraform Enterprise/Cloud(TFE/C)에서 사용가능한 사용자 정의 Terraform 실행 환경을 제공합니다. 사용자는 Agent를 사용하여 Terraform 실행을 위해 기본 제공되는 이미지 대신 커스텀 패키지가 설치된 별도 이미지를 사용할 수 있고, 이미지 실행 위치를 네트워크 환경에서 자체 호스팅 할 수 있습니다.</p><figure><img src="https://raw.githubusercontent.com/Great-Stone/images/master/picgo/Monosnap Terraform Agent | onemodel 2024-01-08 14-40-18.png" alt="Monosnap Terraform Agent | onemodel 2024-01-08 14-40-18" tabindex="0" loading="lazy"><figcaption>Monosnap Terraform Agent | onemodel 2024-01-08 14-40-18</figcaption></figure><blockquote><p><a href="https://developer.hashicorp.com/terraform/cloud-docs/agents" target="_blank" rel="noopener noreferrer">Terraform Cloud Agents</a></p><p><a href="https://developer.hashicorp.com/terraform/enterprise/application-administration/agents-on-tfe" target="_blank" rel="noopener noreferrer">Terraform Cloud Agents on TFE</a></p><p><a href="https://developer.hashicorp.com/terraform/tutorials/cloud/cloud-agents" target="_blank" rel="noopener noreferrer">Manage private environments with Terraform Cloud agents</a></p></blockquote><h2 id="terraform-enterprise-cloud-요구사항" tabindex="-1"><a class="header-anchor" href="#terraform-enterprise-cloud-요구사항"><span>Terraform Enterprise/Cloud 요구사항</span></a></h2><p>Agent는 Pull 기반이므로 Agent→ TFE/C 로 네트워크 연결이 발생합니다. 실행되는 모든 Agent는 Terraform 작업 수행을 위해 TFE/C를 폴링하고 해당 작업을 로컬에서 실행합니다.</p><p>TFE/C의 제약 및 차이는 다음과 같습니다.</p><table><thead><tr><th></th><th>TFE</th><th>TFC</th></tr></thead><tbody><tr><td>지원 릴리즈</td><td>v202109-1</td><td></td></tr><tr><td>Agent 수 제한</td><td>제한 없음</td><td>계약에 따라 (1/3/10~)</td></tr><tr><td>TFE/C 호스트 이름 등록</td><td>TFE 호스트 이름 정의 필요</td><td>기본 <a href="http://app.terraform.io" target="_blank" rel="noopener noreferrer">app.terraform.io</a></td></tr><tr><td>사용자 정의 번들</td><td>번들 지원</td><td>미지원</td></tr></tbody></table><p>Agent 실행을 위안 네트워크 요구사항은 다음 대상으로의 Outbound가 허용되어야 합니다.</p><table><thead><tr><th style="text-align:left;">대상(Hostname)</th><th style="text-align:left;">포트/프로토콜</th><th style="text-align:left;">용도</th></tr></thead><tbody><tr><td style="text-align:left;">TFE/C Hostname(e.g. <a href="http://app.terraform.io" target="_blank" rel="noopener noreferrer">app.terraform.io</a>)</td><td style="text-align:left;">tcp/443, HTTPS</td><td style="text-align:left;">워크로드 폴링, State 업데이트 제공, TFE/C 프라이빗 모듈 레지스트리에서 프라이빗 모듈 다운로드</td></tr><tr><td style="text-align:left;"><a href="http://registry.terraform.io" target="_blank" rel="noopener noreferrer">registry.terraform.io</a></td><td style="text-align:left;">tcp/443, HTTPS</td><td style="text-align:left;">공개되어있는 프로바이더 및 모듈 다운로드하기</td></tr><tr><td style="text-align:left;"><a href="http://releases.hashicorp.com" target="_blank" rel="noopener noreferrer">releases.hashicorp.com</a></td><td style="text-align:left;">tcp/443, HTTPS</td><td style="text-align:left;">Terraform 바이너리 다운로드</td></tr><tr><td style="text-align:left;"><a href="http://archivist.terraform.io" target="_blank" rel="noopener noreferrer">archivist.terraform.io</a></td><td style="text-align:left;">tcp/443, HTTPS</td><td style="text-align:left;">Blob Storage</td></tr></tbody></table><h2 id="terraform-agent-구성-custom" tabindex="-1"><a class="header-anchor" href="#terraform-agent-구성-custom"><span>Terraform Agent 구성 (Custom)</span></a></h2><p>Agent 구성을 위한 단계는 다음과 같습니다. 여기서는 사용자 정의 Agent를 포함하여 단계별로 예를 들어 설명합니다. <code>Option</code>은 사용자 정의 단계로, 필요시 진행합니다.</p><table><thead><tr><th>단계</th><th>설명</th><th>구분</th></tr></thead><tbody><tr><td>1</td><td>사용자 정의 Agent 요건 정의 및 요청 (Option)</td><td>TF 실무자</td></tr><tr><td>2</td><td>사용자 정의 Agent를 생성 및 레지스트리 등록 (Option)</td><td>TFE/C 관리자</td></tr><tr><td>3</td><td>VM 또는 K8s에 Agent 실행 환경 구성</td><td>TFE/C 관리자</td></tr><tr><td>4</td><td>Agent Pool 생성</td><td>TFE/C 관리자</td></tr><tr><td>5</td><td>Agent 실행 및 Pool 등록 확인</td><td>TFE/C 관리자</td></tr><tr><td>6</td><td>Workspace에서 Agent 실행 환경 설정</td><td>TF 실무자</td></tr></tbody></table><h3 id="_1-사용자-정의-agent-요건-정의-option" tabindex="-1"><a class="header-anchor" href="#_1-사용자-정의-agent-요건-정의-option"><span>1. 사용자 정의 Agent 요건 정의 (Option)</span></a></h3><p>TF 실무자는 TFE/C에서 워크로드 실행시 필요한 추가 요소에 대해 정의하고, TFE/C 관리자에게 사용자 정의 Agent 생성을 요청합니다. 예를 들어 다음의 패키지/실행 요소가 필요하다고 정의 합니다.</p><ul><li>aws cli</li><li>ansible</li><li>jq</li></ul><h3 id="_2-사용자-정의-agent를-생성-option" tabindex="-1"><a class="header-anchor" href="#_2-사용자-정의-agent를-생성-option"><span>2. 사용자 정의 Agent를 생성 (Option)</span></a></h3><p>TFE/C 관리자는 사용자 정의 Agent에 대한 요구가 있는 경우 <code>Dockerfile</code>을 작성하여 TFE/C에서 사용할 이미지를 생성할 수 있습니다.</p><ul><li><code>hashicorp/tfc-agent:latest</code> 기본 이미지 사용</li><li>sudo 다운로드 및 suders.d 설정</li><li>패키지 업데이트 및 각종 유틸리티 다운로드 <ul><li>aws cli는 공식 가이드를 참고합니다. (<a href="https://docs.aws.amazon.com/ko_kr/cli/latest/userguide/getting-started-install.html" target="_blank" rel="noopener noreferrer">https://docs.aws.amazon.com/ko_kr/cli/latest/userguide/getting-started-install.html</a>)</li></ul></li><li>CA 파일 등록 : 사설인증서 등록 <ul><li>cert.crt 파일 사전에 준비</li><li>필요시 ICA (Intermediate CA)</li></ul></li></ul><div class="language-docker line-numbers-mode" data-highlighter="prismjs" data-ext="docker" data-title="docker"><pre class="language-docker"><code><span class="line"><span class="token instruction"><span class="token keyword">FROM</span> hashicorp/tfc-agent:latest</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># Switch the to root user in order to perform privileged actions such as</span></span>
<span class="line"><span class="token comment"># installing software.</span></span>
<span class="line"><span class="token instruction"><span class="token keyword">USER</span> root</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># Install sudo. The container runs as a non-root user, but people may rely on</span></span>
<span class="line"><span class="token instruction"><span class="token keyword">RUN</span> apt-get -y install sudo</span></span>
<span class="line"><span class="token comment"># Permit tfc-agent to use sudo apt-get commands.</span></span>
<span class="line"><span class="token instruction"><span class="token keyword">RUN</span> echo <span class="token string">&#39;tfc-agent ALL=NOPASSWD: /usr/bin/apt-get , /usr/bin/apt&#39;</span> &gt;&gt; /etc/sudoers.d/50-tfc-agent</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># the ability to apt-get install things.</span></span>
<span class="line"><span class="token instruction"><span class="token keyword">RUN</span> apt-get update &amp;&amp; DEBIAN_FRONTEND=noninteractive apt-get install -y --no-install-recommends unzip curl ca-certificates ansible jq python3-pip &amp;&amp; wget -qO awscliv2.zip https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip &amp;&amp; unzip awscliv2.zip &amp;&amp; ./aws/install &amp;&amp; rm -rf ./aws &amp;&amp; rm -rf /var/lib/apt/lists/*</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># Add CA certificates and ca-trust.</span></span>
<span class="line"><span class="token instruction"><span class="token keyword">ADD</span> cert.crt /usr/local/share/ca-certificates</span></span>
<span class="line"><span class="token instruction"><span class="token keyword">RUN</span> update-ca-certificates</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># Switch back to the tfc-agent user as needed by Terraform agents.</span></span>
<span class="line"><span class="token instruction"><span class="token keyword">USER</span> tfc-agent</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>다음과 같이 이미지 빌드를 수행합합니다.</p><div class="language-bash" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="line"><span class="token function">docker</span> build --no-cache <span class="token parameter variable">-t</span> cumstom.image.host/tfc-agent:v1 <span class="token builtin class-name">.</span></span>
<span class="line"></span></code></pre></div><p>생성된 이미지를 관리하는 이미지 레지스트리에 생성된 이미지를 저장합니다.</p><div class="language-bash" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="line"><span class="token function">docker</span> push https://cumstom.image.host/hashicorp/tfc-agent:v1</span>
<span class="line"></span></code></pre></div><h3 id="_3-agent-실행-환경-구성" tabindex="-1"><a class="header-anchor" href="#_3-agent-실행-환경-구성"><span>3. Agent 실행 환경 구성</span></a></h3><p>Agent는 TFE/C에 내장된 기본 실행하는 기본 워커 이미지 대신 사용자 정의로 구성된 워커 이미지를 사용하도록 구성합니다. Agent는 TFE/C에 대한 지속적인 폴링을 수행하는 지속적인 실행 프로세스로 실행됩니다. 오류 발생 시 Agent가 자동으로 재시작 되도록 구성하는 것이 좋습니다.</p><p>컨테이너로 실행 되므로 Agent가 실행되기 위한 Docker, Podman 같은 컨테이너 런타임이 구성된 BM/VM 환경, Nomad, 또는 Kubernetes 환경이 필요합니다.</p><blockquote><p>Terraform Agent Kubernetes Operator : <a href="https://developer.hashicorp.com/terraform/tutorials/cloud/cloud-agents" target="_blank" rel="noopener noreferrer">https://developer.hashicorp.com/terraform/tutorials/cloud/cloud-agents</a></p></blockquote><h3 id="_4-agent-pool-생성" tabindex="-1"><a class="header-anchor" href="#_4-agent-pool-생성"><span>4. Agent Pool 생성</span></a></h3><p>Agent를 위한 Pool을 TFE/C에 구성하고, 워크스페이스에서는 이 Pool을 선택하여 작업을 수행합니다. Agent Pool을 생성하려면 TFE/C의 Organazation의 <code>Settings</code> 에서 <code>Agents</code> 에서 수행합니다.</p><figure><img src="https://raw.githubusercontent.com/Great-Stone/images/master/picgo/image-20240108162153120.png" alt="image-20240108162153120" tabindex="0" loading="lazy"><figcaption>image-20240108162153120</figcaption></figure><p><code>Create agent pool</code>을 선택하여 새로운 <code>Agent Pool Name</code>을 입력하고 <code>Continue</code>를 클릭합니다.</p><figure><img src="https://raw.githubusercontent.com/Great-Stone/images/master/picgo/image-20240108162258806.png" alt="image-20240108162258806" tabindex="0" loading="lazy"><figcaption>image-20240108162258806</figcaption></figure><p>다음으로 <code>Token management</code>에서 <code>Description</code>을 입력하고 <code>Create token</code> 버튼을 클릭합니다.</p><figure><img src="https://raw.githubusercontent.com/Great-Stone/images/master/picgo/image-20240108163026960.png" alt="image-20240108163026960" tabindex="0" loading="lazy"><figcaption>image-20240108163026960</figcaption></figure><p>Agent Token과 Agent를 실행하기 위한 예제 명령이 표시 됩니다. 생성된 Token은 Agent를 실행하고 구분짓는데 사용됩니다.</p><figure><img src="https://raw.githubusercontent.com/Great-Stone/images/master/picgo/Monosnap Image 2024-01-08 16-36-31.png" alt="Monosnap Image 2024-01-08 16-36-31" tabindex="0" loading="lazy"><figcaption>Monosnap Image 2024-01-08 16-36-31</figcaption></figure><h3 id="_5-agent-실행-및-pool-등록-확인" tabindex="-1"><a class="header-anchor" href="#_5-agent-실행-및-pool-등록-확인"><span>5. Agent 실행 및 Pool 등록 확인</span></a></h3><p><code>agent1.list</code> 파일이라는 파일을 생성하고 아래 내용을 붙여넣습니다.</p><div class="language-ini" data-highlighter="prismjs" data-ext="ini" data-title="ini"><pre class="language-ini"><code><span class="line"><span class="token key attr-name">TFC_AGENT_TOKEN</span><span class="token punctuation">=</span><span class="token value attr-value">&lt;YOUR TOKEN&gt;</span></span>
<span class="line"><span class="token key attr-name">TFC_AGENT_NAME</span><span class="token punctuation">=</span><span class="token value attr-value">agent1</span></span>
<span class="line"></span></code></pre></div><p>이전 단계에서 만든 토큰으로 <code>TFC_AGENT_TOKEN</code>의 값을 업데이트합니다. Agent의 이름은 <code>agent1</code>로 지정합니다. 이 이름은 TFE/C의 Agent 관리 UI와 실행 시 표시되므로 나중에 특정 Agent를 식별할 수 있습니다.</p><p>다음과 같이 Agent를 실행합니다. 사용자 정의 Agent 이미지를 사용하는 경우 해당 이미지 주소를 넣어줍니다.</p><div class="language-bash" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="line"><span class="token comment"># 생성한 agent1.list 파일을 환경변수 파일로 지정하는 경우</span></span>
<span class="line"><span class="token function">docker</span> run --env-file agent1.list hashicorp/tfc-agent:latest</span>
<span class="line"></span>
<span class="line"><span class="token comment"># 환경변수를 CLI에 inline으로 지정하는 경우</span></span>
<span class="line"><span class="token function">docker</span> run <span class="token parameter variable">-e</span> TFC_AGENT_TOKEN <span class="token parameter variable">-e</span> TFC_AGENT_NAME hashicorp/tfc-agent:latest</span>
<span class="line"></span></code></pre></div><h3 id="_6-workspace에서-agent-실행-환경-설정" tabindex="-1"><a class="header-anchor" href="#_6-workspace에서-agent-실행-환경-설정"><span>6. Workspace에서 Agent 실행 환경 설정</span></a></h3><p>사용자는 워크스페이스의 설정에서 <code>General</code> 항목에서 <code>Execution Mode</code>를 <code>Custom</code>으로 설정하고, <code>Agent</code>에서 해당 워크스페이스가 실행됨을 지정할 수 있습니다. <code>Agent</code> 선택 시 앞서 생성된 <code>Agent pool</code>의 항목을 설정합니다.</p><figure><img src="https://raw.githubusercontent.com/Great-Stone/images/master/picgo/image-20240108172038279.png" alt="image-20240108172038279" tabindex="0" loading="lazy"><figcaption>image-20240108172038279</figcaption></figure><p>해당 워크스페이스에서 실행시 지정한 Agent에서 실행되는지 확인합니다. 아래 동작은 aws cli, python이 설치된 Agent에서 <code>local_exec</code>로 버전을 확인한 결과 입니다.</p><figure><img src="https://raw.githubusercontent.com/Great-Stone/images/master/picgo/bl2fve.jpg" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure>`,48),o=[r];function i(l,p){return t(),a("div",null,o)}const g=e(s,[["render",i],["__file","terraform-cloud-agent-guide-custom.html.vue"]]),m=JSON.parse('{"path":"/04-HashiCorp/03-Terraform/02-Config/terraform-cloud-agent-guide-custom.html","title":"Terraform Cloud Agent 가이드","lang":"ko-KR","frontmatter":{"description":"TFE/TFC에서 Terraform Cloud Agent 구성","tag":["Terraform"],"head":[["meta",{"property":"og:url","content":"https://docmoa.github.io/04-HashiCorp/03-Terraform/02-Config/terraform-cloud-agent-guide-custom.html"}],["meta",{"property":"og:site_name","content":"docmoa"}],["meta",{"property":"og:title","content":"Terraform Cloud Agent 가이드"}],["meta",{"property":"og:description","content":"TFE/TFC에서 Terraform Cloud Agent 구성"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://raw.githubusercontent.com/Great-Stone/images/master/picgo/Monosnap%20Terraform%20Agent%20%7C%20onemodel%202024-01-08%2014-40-18.png"}],["meta",{"property":"og:locale","content":"ko-KR"}],["meta",{"property":"og:updated_time","content":"2024-01-08T08:58:06.000Z"}],["meta",{"property":"article:tag","content":"Terraform"}],["meta",{"property":"article:modified_time","content":"2024-01-08T08:58:06.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Terraform Cloud Agent 가이드\\",\\"image\\":[\\"https://raw.githubusercontent.com/Great-Stone/images/master/picgo/Monosnap%20Terraform%20Agent%20%7C%20onemodel%202024-01-08%2014-40-18.png\\",\\"https://raw.githubusercontent.com/Great-Stone/images/master/picgo/image-20240108162153120.png\\",\\"https://raw.githubusercontent.com/Great-Stone/images/master/picgo/image-20240108162258806.png\\",\\"https://raw.githubusercontent.com/Great-Stone/images/master/picgo/image-20240108163026960.png\\",\\"https://raw.githubusercontent.com/Great-Stone/images/master/picgo/Monosnap%20Image%202024-01-08%2016-36-31.png\\",\\"https://raw.githubusercontent.com/Great-Stone/images/master/picgo/image-20240108172038279.png\\",\\"https://raw.githubusercontent.com/Great-Stone/images/master/picgo/bl2fve.jpg\\"],\\"dateModified\\":\\"2024-01-08T08:58:06.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"Terraform Enterprise/Cloud 요구사항","slug":"terraform-enterprise-cloud-요구사항","link":"#terraform-enterprise-cloud-요구사항","children":[]},{"level":2,"title":"Terraform Agent 구성 (Custom)","slug":"terraform-agent-구성-custom","link":"#terraform-agent-구성-custom","children":[{"level":3,"title":"1. 사용자 정의 Agent 요건 정의 (Option)","slug":"_1-사용자-정의-agent-요건-정의-option","link":"#_1-사용자-정의-agent-요건-정의-option","children":[]},{"level":3,"title":"2. 사용자 정의 Agent를 생성 (Option)","slug":"_2-사용자-정의-agent를-생성-option","link":"#_2-사용자-정의-agent를-생성-option","children":[]},{"level":3,"title":"3. Agent 실행 환경 구성","slug":"_3-agent-실행-환경-구성","link":"#_3-agent-실행-환경-구성","children":[]},{"level":3,"title":"4. Agent Pool 생성","slug":"_4-agent-pool-생성","link":"#_4-agent-pool-생성","children":[]},{"level":3,"title":"5. Agent 실행 및 Pool 등록 확인","slug":"_5-agent-실행-및-pool-등록-확인","link":"#_5-agent-실행-및-pool-등록-확인","children":[]},{"level":3,"title":"6. Workspace에서 Agent 실행 환경 설정","slug":"_6-workspace에서-agent-실행-환경-설정","link":"#_6-workspace에서-agent-실행-환경-설정","children":[]}]}],"git":{"createdTime":1704702469000,"updatedTime":1704704286000,"contributors":[{"name":"Great-Stone","email":"hahohh@gmail.com","commits":2}]},"readingTime":{"minutes":8.7,"words":522},"filePathRelative":"04-HashiCorp/03-Terraform/02-Config/terraform-cloud-agent-guide-custom.md","localizedDate":"2024년 1월 8일","excerpt":"\\n<p>Terraform Cloud Agent(Agent)는 Terraform Enterprise/Cloud(TFE/C)에서 사용가능한 사용자 정의 Terraform 실행 환경을 제공합니다. 사용자는 Agent를 사용하여 Terraform 실행을 위해 기본 제공되는 이미지 대신 커스텀 패키지가 설치된 별도 이미지를 사용할 수 있고, 이미지 실행 위치를 네트워크 환경에서 자체 호스팅 할 수 있습니다.</p>\\n<figure><img src=\\"https://raw.githubusercontent.com/Great-Stone/images/master/picgo/Monosnap Terraform Agent | onemodel 2024-01-08 14-40-18.png\\" alt=\\"Monosnap Terraform Agent | onemodel 2024-01-08 14-40-18\\" tabindex=\\"0\\" loading=\\"lazy\\"><figcaption>Monosnap Terraform Agent | onemodel 2024-01-08 14-40-18</figcaption></figure>"}');export{g as comp,m as data};
