import{_ as a}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as e,c as s,h as n}from"./app-DVMlqOhY.js";const r={},t=n(`<h1 id="terraform-enterprise-backup-restore" tabindex="-1"><a class="header-anchor" href="#terraform-enterprise-backup-restore"><span>Terraform Enterprise Backup &amp; Restore</span></a></h1><h2 id="_1-backup-restore-개요" tabindex="-1"><a class="header-anchor" href="#_1-backup-restore-개요"><span>1. Backup &amp; Restore 개요</span></a></h2><p>Backup은 Object Storage와 PostgreSQL을 포함한 모든 데이터를 대상으로 이루어진다. 다만, 설치 구성요소들에 대한 Backup이 되는 것은 아니기 때문에 Restore시 새로운 Terraform Enterprise의 설치가 필요하다.</p><p>아래와 같은 주의 사항이 존재</p><ul><li>Backup된 Terraform Enterprise와 Restore된 Terraform Enterprise 사이에 버전 차이가 있어서는 안된다. 즉, Backup을 진행한 버전 그대로 Restore 과정을 진행해야 한다.</li><li>Backup된 PostgreSQL과 Restore된 PostgreSQL 사이에 버전 차이가 있어서는 안된다. 즉, Backup을 진행한 버전 그대로 Restore 과정을 진행해야 한다.</li><li>Restore 과정 진행 시 Terraform Enterprise는 application data가 없는 상태로 새로 설치되어야 한다.</li><li>Restore 과정이 완료된 후 Terraform Enterprise는 재시작이 필요하다.</li></ul><h2 id="_2-인증-및-보안" tabindex="-1"><a class="header-anchor" href="#_2-인증-및-보안"><span>2. 인증 및 보안</span></a></h2><p>Terraform Enterprise의 Backup과 Restore를 위한 별도의 인증 토큰이 존재하며 아래 명령어를 이용하여 해당 Token을 취득할 수 있다.</p><div class="language-bash" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="line"><span class="token function">docker</span> <span class="token builtin class-name">exec</span> <span class="token parameter variable">-t</span> terraform-enterprise-tfe-1 /bin/bash <span class="token parameter variable">-c</span> <span class="token string">&#39;cat /var/run/terraform-enterprise/backup-restore/config.hcl | grep backup_token&#39;</span></span>
<span class="line"></span></code></pre></div><p>Terraform Enterprise는 내부에 자체 내장된 Vault의 일부 기능을 이용해 데이터를 암/복호화한다. 다만, Backup 과정에서는 해당 데이터를 암/복호화하기 위한 Vault 암호키가 제공되지 않기 때문에 기존 저장된 암호화 데이터를 먼저 Vault가 복호화한 뒤 사용자가 임의 지정한 Password를 통해 재암호화하여 Backup 과정을 진행한다. Restore 과정에서는 Backup 과정에서 사용된 것과 동일한 Password를 이용하여 데이터를 복호화한 뒤 새로운 Terraform Enterprise가 설치되고 나면 자체 내장된 Vault의 암호화키를 이용하여 데이터를 재암호화한 뒤 Restore 과정이 마무리된다.</p><div class="language-bash" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="line"><span class="token function">vi</span> payload.json</span>
<span class="line"></span></code></pre></div><div class="language-json" data-highlighter="prismjs" data-ext="json" data-title="json"><pre class="language-json"><code><span class="line"><span class="token punctuation">{</span></span>
<span class="line">  <span class="token property">&quot;password&quot;</span><span class="token operator">:</span> <span class="token string">&quot;temporary-password&quot;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre></div><ul><li>Backup과 Restore 시 반드시 같은 Password가 제공되어야 한다.</li><li>Backup 과정 시 <code>&quot;skip_object_storage&quot;: &quot;true&quot;</code> 항목을 추가해 Object Storage의 용량이 너무 클 경우 Object Storage만 생략하여 Backup을 진행할 수 있다. (Default: <code>false</code>)</li></ul><h2 id="_3-mounted-disk-배포-시-backup-restore" tabindex="-1"><a class="header-anchor" href="#_3-mounted-disk-배포-시-backup-restore"><span>3. Mounted Disk 배포 시 Backup &amp; Restore</span></a></h2><div class="hint-container warning"><p class="hint-container-title">주의</p><p>하기 aux 폴더 누락 이슈로 bind 경로를 추가한 내용은 &#39;Terraform Enterprise Releases v202402-2&#39;에서 진행된 내용이며 &#39;최신 Releases v202406-1&#39;에서는 따로 bind 경로를 추가 설정하지 않아도 잘 실행됨을 확인하였습니다.</p></div><p>Mounted disk 배포 모델은, Failover 또는 Active/Active 기능 없이 단일 컴퓨팅 환경에 Terraform Enterprise를 배포한다. 본 가이드는 Mounted disk 배포 모델인 <strong>TFE1</strong>서버에서 backup 진행 이후, 동일한 Mounted disk 배포 모델 <strong>TFE2</strong> 서버로 restore 과정을 진행한다.</p><h3 id="_3-1-docker-compose-yaml-bind-경로-추가" tabindex="-1"><a class="header-anchor" href="#_3-1-docker-compose-yaml-bind-경로-추가"><span>3.1. docker-compose.yaml bind 경로 추가</span></a></h3><p><strong>TFE1</strong> 서버에서 Backup 이후 <strong>TFE2</strong> 서버에서 Restore 과정 진행 시 state 파일 경로인 <strong>/var/lib/terraform-enterprise/aux</strong> 폴더가 누락되는 이슈로 aux 디렉토리를 생성해준 후 volumes에 bind를 추가한다.<br><code>docker-compose.yaml</code> 파일 변경은 TFE1 서버와 TFE2 서버에서 동일하게 진행한다.<br> 단 Restore하고자 하는 <strong>TFE2</strong> 서버는 Terraform Enterprise는 application data가 없는 상태에서 Restore가 진행되어야 한다.</p><div class="language-bash" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="line"><span class="token function">mkdir</span> ~/aux</span>
<span class="line"></span></code></pre></div><p><code>TFE1 서버, TFE2 서버 - docker-compose.yaml</code>의 volumes</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="line">    volumes:</span>
<span class="line">      - type: <span class="token builtin class-name">bind</span></span>
<span class="line">        source: /var/run/docker.sock</span>
<span class="line">        target: /run/docker.sock</span>
<span class="line">      - type: <span class="token builtin class-name">bind</span></span>
<span class="line">        source: ./cert</span>
<span class="line">        target: /etc/ssl/private/terraform-enterprise</span>
<span class="line">      - type: <span class="token builtin class-name">bind</span></span>
<span class="line">        source: ./aux</span>
<span class="line">        target: /var/lib/terraform-enterprise/aux</span>
<span class="line">      - type: volume</span>
<span class="line">        source: terraform-enterprise</span>
<span class="line">        target: /var/lib/terraform-enterprise</span>
<span class="line">      - type: volume</span>
<span class="line">        source: terraform-enterprise-cache</span>
<span class="line">        target: /var/cache/tfe-task-worker/terraform</span>
<span class="line">    extra_hosts:</span>
<span class="line">      - <span class="token string">&quot;&lt;TFE1 HOSTNAME&gt;:&lt;TFE1 IP&gt;&quot;</span></span>
<span class="line">volumes:</span>
<span class="line">  terraform-enterprise:</span>
<span class="line">  terraform-enterprise-cache:</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-bash" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="line"><span class="token function">docker-compose</span> up <span class="token parameter variable">--detach</span></span>
<span class="line"></span></code></pre></div><h3 id="_3-2-aux-폴더-내용-전송" tabindex="-1"><a class="header-anchor" href="#_3-2-aux-폴더-내용-전송"><span>3.2. aux 폴더 내용 전송</span></a></h3><p><strong>TFE1</strong> 서버의 <strong>/home/user/aux/archivist/terraform</strong> 경로를 통해 states 파일이 들어가 있는 것을 확인할 수 있다. Restore 하고자 하는 <strong>TFE2</strong> 서버에 <strong>TFE1</strong> 서버의 aux 폴더의 내용을 복사해서 넣어준다.</p><p><code>TFE1 서버에서 진행</code></p><div class="language-bash" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="line"><span class="token function">scp</span> <span class="token parameter variable">-r</span> <span class="token parameter variable">-i</span> <span class="token operator">&lt;</span>key.pem<span class="token operator">&gt;</span> ~/aux <span class="token operator">&lt;</span>TFE2 <span class="token environment constant">USER</span><span class="token operator">&gt;</span>@<span class="token operator">&lt;</span>TFE2 IP<span class="token operator">&gt;</span>:/home/user/</span>
<span class="line"></span></code></pre></div><p><code>POST /_backup/api/v1/backup</code></p><div class="language-bash" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="line"><span class="token function">curl</span> <span class="token punctuation">\\</span></span>
<span class="line">  <span class="token parameter variable">--header</span> <span class="token string">&quot;Authorization: Bearer &lt;TOKEN&gt;&quot;</span> <span class="token punctuation">\\</span></span>
<span class="line">  <span class="token parameter variable">--request</span> POST <span class="token punctuation">\\</span></span>
<span class="line">  <span class="token parameter variable">--data</span> @payload.json <span class="token punctuation">\\</span></span>
<span class="line">  <span class="token parameter variable">--output</span> backup.blob <span class="token punctuation">\\</span></span>
<span class="line">  https://<span class="token operator">&lt;</span>TFE1 <span class="token environment constant">HOSTNAME</span><span class="token operator">&gt;</span>/_backup/api/v1/backup</span>
<span class="line"></span></code></pre></div><ul><li><code>--header</code>: 앞선 과정에서 취득한 Token 값 입력</li><li><code>--data</code>: 앞선 과정에서 생성한 <code>.json</code> 파일 지정</li><li><code>--output</code>: Backup된 내용을 추출할 파일명 지정</li></ul><p><strong>TFE1</strong> 서버에 backup.blob 파일이 생성된 것을 볼 수 있다.</p><h3 id="_3-3-restore" tabindex="-1"><a class="header-anchor" href="#_3-3-restore"><span>3.3. Restore</span></a></h3><p><code>POST /_backup/api/v1/restore</code></p><p>Restore하기 전 반드시 Terraform Enterprise를 새로 설치해야 한다.(application data가 쌓이지 않은 초기 상태여야 한다.)<br> Restore 하고자 하는 TFE2 서버의 Terraform Enterprise 서비스 시작 후 TFE1에서 Restore curl 진행한다.</p><div class="language-bash" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="line"><span class="token function">curl</span> <span class="token punctuation">\\</span></span>
<span class="line">  <span class="token parameter variable">--header</span> <span class="token string">&quot;Authorization: Bearer &lt;TOKEN&gt;&quot;</span> <span class="token punctuation">\\</span></span>
<span class="line">  <span class="token parameter variable">--request</span> POST <span class="token punctuation">\\</span></span>
<span class="line">  <span class="token parameter variable">--form</span> <span class="token assign-left variable">config</span><span class="token operator">=</span>@payload.json <span class="token punctuation">\\</span></span>
<span class="line">  <span class="token parameter variable">--form</span> <span class="token assign-left variable">snapshot</span><span class="token operator">=</span>@backup.blob <span class="token punctuation">\\</span></span>
<span class="line">  https://<span class="token operator">&lt;</span>TFE2 <span class="token environment constant">HOSTNAME</span><span class="token operator">&gt;</span>/_backup/api/v1/restore</span>
<span class="line"></span></code></pre></div><ul><li><code>--header</code>: 앞선 과정에서 취득한 Token 값 입력</li><li><code>--form config</code>: 앞선 과정에서 생성한 <code>.json</code> 파일 지정</li><li><code>--form snapshot</code>: Backup 과정에서 생성된 <code>.blob</code> 파일 지정</li></ul>`,34),p=[t];function o(l,i){return e(),s("div",null,p)}const u=a(r,[["render",o],["__file","tfe-backup-restore.html.vue"]]),m=JSON.parse('{"path":"/04-HashiCorp/03-Terraform/06-TerraformEnterprise/tfe-backup-restore.html","title":"Terraform Enterprise Backup & Restore","lang":"ko-KR","frontmatter":{"description":"Terraform Enterprise Backup & Restore","tag":["Terraform","backup","restore"],"author":"hognod(ddim), dyana(ddim)","head":[["meta",{"property":"og:url","content":"https://docmoa.github.io/04-HashiCorp/03-Terraform/06-TerraformEnterprise/tfe-backup-restore.html"}],["meta",{"property":"og:site_name","content":"docmoa"}],["meta",{"property":"og:title","content":"Terraform Enterprise Backup & Restore"}],["meta",{"property":"og:description","content":"Terraform Enterprise Backup & Restore"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"ko-KR"}],["meta",{"property":"og:updated_time","content":"2024-07-15T02:27:15.000Z"}],["meta",{"property":"article:author","content":"hognod(ddim), dyana(ddim)"}],["meta",{"property":"article:tag","content":"Terraform"}],["meta",{"property":"article:tag","content":"backup"}],["meta",{"property":"article:tag","content":"restore"}],["meta",{"property":"article:modified_time","content":"2024-07-15T02:27:15.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Terraform Enterprise Backup & Restore\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-07-15T02:27:15.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"hognod(ddim), dyana(ddim)\\"}]}"]]},"headers":[{"level":2,"title":"1. Backup & Restore 개요","slug":"_1-backup-restore-개요","link":"#_1-backup-restore-개요","children":[]},{"level":2,"title":"2. 인증 및 보안","slug":"_2-인증-및-보안","link":"#_2-인증-및-보안","children":[]},{"level":2,"title":"3. Mounted Disk 배포 시 Backup & Restore","slug":"_3-mounted-disk-배포-시-backup-restore","link":"#_3-mounted-disk-배포-시-backup-restore","children":[{"level":3,"title":"3.1. docker-compose.yaml bind 경로 추가","slug":"_3-1-docker-compose-yaml-bind-경로-추가","link":"#_3-1-docker-compose-yaml-bind-경로-추가","children":[]},{"level":3,"title":"3.2. aux 폴더 내용 전송","slug":"_3-2-aux-폴더-내용-전송","link":"#_3-2-aux-폴더-내용-전송","children":[]},{"level":3,"title":"3.3. Restore","slug":"_3-3-restore","link":"#_3-3-restore","children":[]}]}],"git":{"createdTime":1719302610000,"updatedTime":1721010435000,"contributors":[{"name":"ddim","email":"ddim@example.com","commits":2},{"name":"Great-Stone","email":"hahohh@gmail.com","commits":1}]},"readingTime":{"minutes":5.82,"words":349},"filePathRelative":"04-HashiCorp/03-Terraform/06-TerraformEnterprise/tfe-backup-restore.md","localizedDate":"2024년 6월 25일","excerpt":"\\n<h2>1. Backup &amp; Restore 개요</h2>\\n<p>Backup은 Object Storage와 PostgreSQL을 포함한 모든 데이터를 대상으로 이루어진다. 다만, 설치 구성요소들에 대한 Backup이 되는 것은 아니기 때문에 Restore시 새로운 Terraform Enterprise의 설치가 필요하다.</p>\\n<p>아래와 같은 주의 사항이 존재</p>\\n<ul>\\n<li>Backup된 Terraform Enterprise와 Restore된 Terraform Enterprise 사이에 버전 차이가 있어서는 안된다. 즉, Backup을 진행한 버전 그대로 Restore 과정을 진행해야 한다.</li>\\n<li>Backup된 PostgreSQL과 Restore된 PostgreSQL 사이에 버전 차이가 있어서는 안된다. 즉, Backup을 진행한 버전 그대로 Restore 과정을 진행해야 한다.</li>\\n<li>Restore 과정 진행 시 Terraform Enterprise는 application data가 없는 상태로 새로 설치되어야 한다.</li>\\n<li>Restore 과정이 완료된 후 Terraform Enterprise는 재시작이 필요하다.</li>\\n</ul>","copyright":{"author":"hognod(ddim), dyana(ddim)"}}');export{u as comp,m as data};
