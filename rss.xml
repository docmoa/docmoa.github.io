<?xml version="1.0" encoding="utf-8"?><?xml-stylesheet type="text/xsl" href="https://docmoa.github.io/rss.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <atom:link href="https://docmoa.github.io/rss.xml" rel="self" type="application/rss+xml"/>
    <title>docmoa</title>
    <link>https://docmoa.github.io/</link>
    <description>A docs for docmoa</description>
    <language>ko-KR</language>
    <pubDate>Wed, 12 Feb 2025 02:12:01 GMT</pubDate>
    <lastBuildDate>Wed, 12 Feb 2025 02:12:01 GMT</lastBuildDate>
    <generator>@vuepress/plugin-feed</generator>
    <docs>https://validator.w3.org/feed/docs/rss2.html</docs>
    <item>
      <title>Vault를 활용한 mTLS 인증 자동화로 웹 서비스 보안 강화하기</title>
      <link>https://docmoa.github.io/04-HashiCorp/06-Vault/04-UseCase/mtls-authentication-to-secure-web-services.html</link>
      <guid>https://docmoa.github.io/04-HashiCorp/06-Vault/04-UseCase/mtls-authentication-to-secure-web-services.html</guid>
      <source url="https://docmoa.github.io/rss.xml">Vault를 활용한 mTLS 인증 자동화로 웹 서비스 보안 강화하기</source>
      <description>Vault를 활용한 mTLS 인증 자동화로 웹 서비스 보안 강화하기 웹 서비스의 보안은 현대 IT 인프라에서 가장 중요한 요소 중 하나입니다. 특히 민감한 데이터를 다루는 서비스에서는 단순한 사용자명/패스워드 인증을 넘어선 보다 강력한 보안 메커니즘이 필요합니다. 이러한 맥락에서 상호 TLS(mTLS) 인증은 클라이...</description>
      <pubDate>Wed, 12 Feb 2025 01:58:15 GMT</pubDate>
      <content:encoded><![CDATA[
<p>웹 서비스의 보안은 현대 IT 인프라에서 가장 중요한 요소 중 하나입니다. 특히 민감한 데이터를 다루는 서비스에서는 단순한 사용자명/패스워드 인증을 넘어선 보다 강력한 보안 메커니즘이 필요합니다. 이러한 맥락에서 상호 TLS(mTLS) 인증은 클라이언트와 서버 간의 양방향 인증을 제공하는 강력한 보안 솔루션입니다.</p>
<h2>mTLS의 필요성과 도전 과제</h2>
<blockquote>
<p>참고 'mTLS 인증' : <a href="https://wiki.kreonet.net/web-auth-sso/mtls-51119765.html" target="_blank" rel="noopener noreferrer">https://wiki.kreonet.net/web-auth-sso/mtls-51119765.html</a></p>
</blockquote>
<p>mTLS(mutual TLS)는 클라이언트와 서버가 서로를 인증하는 프로토콜입니다. 일반적인 TLS가 서버만을 인증하는 것과 달리, mTLS에서는 클라이언트도 인증서를 통해 자신의 신원을 증명해야 합니다. 이는 다음과 같은 이점을 제공합니다:</p>
<ul>
<li>무단 액세스 방지</li>
<li>중간자 공격 차단</li>
<li>클라이언트 신원의 암호화 기반 검증</li>
<li>API와 서비스에 대한 세밀한 접근 제어</li>
</ul>
<p>특히 상호간 인증이라는 점에서 무작위로 웹사이트를 크롤링 하거나, 외부인이 접근하지 말아야할 웹 리소스를 보호할 수 있습니다.</p>
<p>하지만 mTLS 구현에는 여러 가지 어려움이 있습니다:</p>
<ul>
<li>인증서 수명 주기 관리의 복잡성</li>
<li>인증서 배포와 갱신의 번거로움</li>
<li>사용자 경험 저하 가능성</li>
<li>인프라 구성의 복잡성 증가</li>
</ul>
<h2>HashiCorp Vault를 활용한 자동화된 mTLS 구현</h2>
<p>HashiCorp Vault는 이러한 mTLS 구현의 어려움을 해결할 수 있는 강력한 도구입니다. Vault의 PKI 시크릿 엔진을 활용하면 다음과 같은 이점을 얻을 수 있습니다:</p>
<h3>1. 자동화된 인증서 수명 주기 관리</h3>
<p>Vault는 PKI 시크릿 엔진을 통해 인증서의 발급, 갱신, 폐기를 자동화할 수 있습니다. 이는 다음과 같은 장점을 제공합니다:</p>
<ul>
<li>인증서 만료 관리의 자동화</li>
<li>실시간 인증서 발급 및 갱신</li>
<li>중앙화된 인증서 관리</li>
</ul>
<h3>2. 세밀한 접근 제어</h3>
<p>Vault의 정책 기반 접근 제어를 통해 다음과 같은 보안 강화가 가능합니다:</p>
<ul>
<li>사용자/애플리케이션별 맞춤형 인증서 정책</li>
<li>역할 기반 접근 제어(RBAC) 구현</li>
<li>감사 로그를 통한 모든 인증서 작업 추적</li>
</ul>
<h3>3. 보안 강화</h3>
<p>Vault를 통한 mTLS 구현은 다음과 같은 보안 이점을 제공합니다:</p>
<ul>
<li>중요 시스템에 대한 무단 접근 차단</li>
<li>암호화된 통신 보장</li>
<li>민감한 데이터의 노출 위험 감소</li>
</ul>
<h2>실제 적용 사례</h2>
<p>Vault를 통한 mTLS 구현은 다음과 같은 환경에서 특히 유용합니다:</p>
<ul>
<li>마이크로서비스 아키텍처
<ul>
<li>서비스 간 통신의 보안 강화</li>
<li>서비스 신원 확인의 자동화</li>
</ul>
</li>
<li>기업 내부 시스템
<ul>
<li>중요 관리 도구에 대한 접근 제어</li>
<li>내부 API의 보안 강화</li>
</ul>
</li>
<li>규제 대상 산업
<ul>
<li>컴플라이언스 요구사항 충족</li>
<li>감사 추적 기능 제공</li>
</ul>
</li>
</ul>
<div class="hint-container info">
<p class="hint-container-title">관련 글</p>
<p>서비스 간 mTLS에 대해서는 다음 글에서 데모와 함께 다루었습니다.</p>
<p><a href="https://docmoa.github.io/04-HashiCorp/06-Vault/04-UseCase/mtls.html" target="_blank" rel="noopener noreferrer">Vault PKI - mTLS demo</a></p>
</div>
<h2>구현 예시</h2>
<blockquote>
<ul>
<li>
<p>GitHub Source : <a href="https://github.com/Great-Stone/vault-pki-ssl-client-auth" target="_blank" rel="noopener noreferrer">https://github.com/Great-Stone/vault-pki-ssl-client-auth</a></p>
</li>
<li>
<p>GitHub 한국어 README (macOS, Linux) : <a href="https://github.com/Great-Stone/vault-pki-ssl-client-auth/blob/main/README_KR.md" target="_blank" rel="noopener noreferrer">https://github.com/Great-Stone/vault-pki-ssl-client-auth/blob/main/README_KR.md</a></p>
</li>
<li>
<p>GitHub 한국어 README (windows11) : <a href="https://github.com/Great-Stone/vault-pki-ssl-client-auth/blob/main/README_WIN.md" target="_blank" rel="noopener noreferrer">https://github.com/Great-Stone/vault-pki-ssl-client-auth/blob/main/README_WIN.md</a></p>
</li>
</ul>
</blockquote>
<p>Vault를 사용한 mTLS 구현은 다음과 같은 단계로 이루어집니다:</p>
<ul>
<li>Vault PKI 시크릿 엔진 설정</li>
<li>인증서 발급 정책 및 역할 구성</li>
<li>클라이언트 인증서(인증용) 자동 발급 시스템 구축</li>
<li>웹 서버의 mTLS 구성</li>
<li>클라이언트 인증 자동화 구현</li>
</ul>
<p>인증서를 발급받고, 대상 웹서버에 접근하는 프로세스는 다음과 같습니다.</p>
<div class="hint-container warning">
<p class="hint-container-title">데모 실행 준비사항</p>
<p>필수 설치 및 실행 환경은 다음과 같습니다.</p>
<ul>
<li>Vault, Nomad, Docker가 실행가능한 환경이여야 합니다.
<ul>
<li>Install Vault - <a href="https://developer.hashicorp.com/vault/install?product_intent=vault" target="_blank" rel="noopener noreferrer">https://developer.hashicorp.com/vault/install?product_intent=vault</a></li>
<li>Install Nomad - <a href="https://developer.hashicorp.com/nomad/install?product_intent=nomad" target="_blank" rel="noopener noreferrer">https://developer.hashicorp.com/nomad/install?product_intent=nomad</a></li>
</ul>
</li>
<li>Python 3 및 필요한 패키지 (flask, hvac, cryptography)를 설치해야 합니다.</li>
</ul>
</div>
<div class="hint-container info">
<p class="hint-container-title">정보</p>
<p>빠른 구성 및 테스트를 위해 CLI(shell, powershell)로 설명되었습니다. UI나 Terraform을 사용하는 것도 무방합니다.</p>
</div>
<h3>1. Setup ENV</h3>
<p>명령어를 실행할 터미널에서 다음을 설정합니다.</p>

<h3>2. Run Vault</h3>
<p>다른 창에서 실행</p>

<h3>3. Setup Vault PKI</h3>
<ul>
<li>웹서버의 <code>HTTPS(TLS)</code> 구성을 위한 PKI와 클라이언트 인증을 위한 PKI는 별개 입니다. 여기서는 구성 편의 상 같은 PKI 엔진을 사용합니다.</li>
<li>사용자 인증을 받기 위한 PKI Role인 <code>pki/roles/user-auth</code>에는 <code>client_flag=true</code> 옵션이 추가되어 클라이언트 인증용 인증서를 발급하도록 합니다.</li>
</ul>

<h3>4. Vault Policy &amp; Token for Nomad</h3>
<p>인증서 적용을 자동화하기위해 Nomad를 활용하였습니다. 예제에서 제시한 Nginx의 인증서를 수동으로 파일을 작성하여 설정해주어도 무방합니다. 또한 K8s 환경에서는 VSO를 연계하여 사용하여도 됩니다.</p>
<blockquote>
<p>VSO 설명 : <a href="https://docmoa.github.io/04-HashiCorp/06-Vault/04-UseCase/vault-k8s-usecase-csi-injection.html" target="_blank" rel="noopener noreferrer">https://docmoa.github.io/04-HashiCorp/06-Vault/04-UseCase/vault-k8s-usecase-csi-injection.html</a></p>
</blockquote>

<h3>5. Run Nomad with Vault Toekn</h3>
<p>Nginx를 실행 및 관리하기 위한 Nomad를 실행합니다. Nomad에서 Vault의 PKI가 발급하는 인증서를 자동 생성/갱신 하기위해 Vault의 Token을 사용합니다.</p>
<ul>
<li><a href="#4-vault-policy--token-for-nomad">4. Vault Policy &amp; Token for Nomad</a>에서 구성한 Vault와의 인증을 위한 Token Role을 생성합니다.
<ul>
<li>Token Role 생성 시 pki에 대한 권한이 부여된 정책을 사용할 수 있도록 <code>allowed_policies="pki_policy"</code> 옵션을 추가합니다.</li>
<li>Nomad 연계를 위한 자체 정책인 <code>nomad-server</code>는 생성할 수 없도록 <code>disallowed_policies="$NOMAD_POLICY"</code> 옵션을 추가합니다.</li>
<li><code>orphan=true</code> 옵션을 주면 최대 만료 TTL 없이 계속 갱신할 수 있는 고아 토큰으로 생성됩니다.</li>
</ul>
</li>
</ul>

<h3>6. Setup Vault Userpass</h3>
<p>사용자는 브라우저 접속을 위한 인증서를 받기위한 인증 메커니즘이 필요합니다. 여기서는 별도의 IDP를 구성하지 않고 Vault의 <code>userpass</code>인증으로 사용자 인증을 처리합니다.</p>
<ul>
<li><code>user1</code>이라는 사용자를 생성하고, 해당 사용자는 pki를 요청할 수 있는 정책을 소유합니다.</li>
</ul>
<div class="hint-container tip">
<p class="hint-container-title">팁</p>
<p>Vault는 API를 제공하므로, 타 시스템에서 인증 IDP로도 사용할 수 있습니다.</p>
</div>
<div class="language-bash" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="line">vault auth <span class="token builtin class-name">enable</span> userpass</span>
<span class="line">vault <span class="token function">write</span> auth/userpass/users/user1 <span class="token assign-left variable">password</span><span class="token operator">=</span>password <span class="token assign-left variable">policies</span><span class="token operator">=</span>pki_policy</span>
<span class="line"></span></code></pre></div><h3>7. Nginx run on Nomad with mTLS configuration</h3>
<p>클라이언트 인증서 인증 옵션이 적용된 Nginx를 배포 합니다. UI에서 배포하는 것도 가능합니다.</p>

<details class="hint-container details"><summary>Nomad Job 설명</summary>
<div class="language-hcl" data-highlighter="prismjs" data-ext="hcl" data-title="hcl"><pre class="language-hcl"><code><span class="line">job <span class="token string">"nginx"</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token property">datacenters</span> <span class="token punctuation">=</span> <span class="token punctuation">[</span><span class="token string">"dc1"</span><span class="token punctuation">]</span></span>
<span class="line"></span>
<span class="line">  group <span class="token string">"nginx"</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">network</span> <span class="token punctuation">{</span></span>
<span class="line">      port <span class="token string">"https"</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token property">to</span>      <span class="token punctuation">=</span> <span class="token number">443</span></span>
<span class="line">        <span class="token property">static</span>  <span class="token punctuation">=</span> <span class="token number">443</span></span>
<span class="line">      <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    task <span class="token string">"server"</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">      <span class="token property">driver</span> <span class="token punctuation">=</span> <span class="token string">"docker"</span></span>
<span class="line"></span>
<span class="line">      <span class="token keyword">config</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token property">image</span> <span class="token punctuation">=</span> <span class="token string">"nginx"</span></span>
<span class="line">        <span class="token property">ports</span> <span class="token punctuation">=</span> <span class="token punctuation">[</span><span class="token string">"https"</span><span class="token punctuation">]</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment"># Docker의 Volume으로 생성된 인증서와 웹페이지를 지정합니다.</span></span>
<span class="line">        <span class="token property">volumes</span> <span class="token punctuation">=</span> <span class="token punctuation">[</span></span>
<span class="line">          <span class="token string">"local/conf.d:/etc/nginx/conf.d"</span>,</span>
<span class="line">          <span class="token string">"local/certs:/etc/nginx/certs"</span>,</span>
<span class="line">          <span class="token string">"local/www:/home/www"</span>,</span>
<span class="line">          <span class="token string">"local/secure:/home/secure"</span></span>
<span class="line">        <span class="token punctuation">]</span></span>
<span class="line">      <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">      <span class="token comment"># Nginx용 구성 파일을 템플릿팅 합니다.</span></span>
<span class="line">      <span class="token keyword">template</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token property">data</span> <span class="token punctuation">=</span> <span class="token heredoc string">&lt;&lt;-EOF</span>
<span class="line">        server {</span>
<span class="line">          listen 443 ssl;</span>
<span class="line">          server_name service-a.example.com;</span>
<span class="line">          ssl_certificate "/etc/nginx/certs/server.pem";</span>
<span class="line">          ssl_certificate_key "/etc/nginx/certs/server.key";</span>
<span class="line"></span>
<span class="line">          ssl_client_certificate  "/etc/nginx/certs/server.pem"; # 클라이언트 인증서 확인을 위한 CA 인증서, TLS를 위한 웹서버용 인증서와는 별도 관리 가능</span>
<span class="line">          # ssl_verify_client       on; # 클라이언트 인증서 검증 활성화</span>
<span class="line">          ssl_verify_client       optional;</span>
<span class="line"></span>
<span class="line">          ssl_protocols           TLSv1.2 TLSv1.3;</span>
<span class="line">          ssl_session_timeout     10m;</span>
<span class="line">          </span>
<span class="line">          proxy_read_timeout      300;</span>
<span class="line">          proxy_buffers           64 16k;</span>
<span class="line"></span>
<span class="line">          location / {</span>
<span class="line">            root /home/www;</span>
<span class="line">            index index.html;</span>
<span class="line">          }</span>
<span class="line"></span>
<span class="line">          location /secure { # 클라이언트 인증서가 확인되지 않으면 이 경로에는 접근할 수 없습니다.</span>
<span class="line">            if ($ssl_client_verify != SUCCESS) { return 403; }</span>
<span class="line">            alias /home/secure;</span>
<span class="line">            index index.html;</span>
<span class="line">          }</span>
<span class="line">        }</span>
<span class="line">        EOF</span></span>
<span class="line"></span>
<span class="line">        <span class="token property">destination</span>   <span class="token punctuation">=</span> <span class="token string">"local/conf.d/default.conf"</span></span>
<span class="line">        <span class="token property">change_mode</span>   <span class="token punctuation">=</span> <span class="token string">"signal"</span></span>
<span class="line">        <span class="token property">change_signal</span> <span class="token punctuation">=</span> <span class="token string">"SIGHUP"</span></span>
<span class="line">      <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">      <span class="token comment"># Nginx용 서버인증서(HTTPS)를 생성합니다.</span></span>
<span class="line">      <span class="token keyword">template</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token property">data</span> <span class="token punctuation">=</span> <span class="token heredoc string">&lt;&lt;-EOF</span>
<span class="line">        {{ with secret "pki/issue/example-dot-com" "common_name=service-a.example.com" "ttl=60m" }}</span>
<span class="line">        {{ .Data.certificate }}</span>
<span class="line">        {{ .Data.issuing_ca }}{{ end }}</span>
<span class="line">        EOF</span></span>
<span class="line">        <span class="token property">destination</span>   <span class="token punctuation">=</span> <span class="token string">"local/certs/server.pem"</span></span>
<span class="line">      <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">      <span class="token comment"># Nginx용 서버인증서(HTTPS) 키를 생성합니다.</span></span>
<span class="line">      <span class="token keyword">template</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token property">data</span> <span class="token punctuation">=</span> <span class="token heredoc string">&lt;&lt;-EOF</span>
<span class="line">        {{ with secret "pki/issue/example-dot-com" "common_name=service-a.example.com" "ttl=60m" }}</span>
<span class="line">        {{ .Data.private_key }}{{ end }}</span>
<span class="line">        EOF</span></span>
<span class="line">        <span class="token property">destination</span>   <span class="token punctuation">=</span> <span class="token string">"local/certs/server.key"</span></span>
<span class="line">      <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">      <span class="token comment"># Nginx용 클라이언트 인증서를 확인할 수 있는 CA 인증서를 생성합니다.</span></span>
<span class="line">      <span class="token keyword">template</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token property">data</span> <span class="token punctuation">=</span> <span class="token heredoc string">&lt;&lt;-EOF</span>
<span class="line">        {{ with secret "pki/root/generate/internal" "common_name=example.com" "ttl=87600h" }}</span>
<span class="line">        {{ .Data.certificate }}{{ end }}</span>
<span class="line">        EOF</span></span>
<span class="line">        <span class="token property">destination</span>   <span class="token punctuation">=</span> <span class="token string">"local/certs/ca.pem"</span></span>
<span class="line">      <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">      <span class="token keyword">template</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token property">data</span> <span class="token punctuation">=</span> <span class="token heredoc string">&lt;&lt;-EOF</span>
<span class="line">        &lt;h1&gt;Default page&lt;/h1&gt;</span>
<span class="line">        EOF</span></span>
<span class="line">        <span class="token property">destination</span>   <span class="token punctuation">=</span> <span class="token string">"local/www/index.html"</span></span>
<span class="line">      <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">      <span class="token keyword">template</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token property">data</span> <span class="token punctuation">=</span> <span class="token heredoc string">&lt;&lt;-EOF</span>
<span class="line">        &lt;h1&gt;Secure page&lt;/h1&gt;</span>
<span class="line">        EOF</span></span>
<span class="line">        <span class="token property">destination</span>   <span class="token punctuation">=</span> <span class="token string">"local/secure/index.html"</span></span>
<span class="line">      <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre></div></details>
<h3>8. Set <code>hosts</code> file and browser check</h3>
<p>dns로 페이지를 접근할 수 있도록 <code>hosts</code> 파일을 수정합니다.</p>

<h4>8.1 check page - Default</h4>
<p>각 페이지에 접속하여 어떻게 출력되는지 확인합니다.</p>
<p>click(allow) : <a href="https://service-a.example.com" target="_blank" rel="noopener noreferrer">https://service-a.example.com</a></p>
<p>서비스용 인증서는 공인 인증서가 아니고, Vault가 생성한 Root CA를 시스템에 등록하지 않았기 때문에 경고 페이지가 발생합니다. <code>세부사항 보기</code>로 이동하여 웹 사이트를 허용합니다.</p>
<figure><figcaption>browser-ca-issue</figcaption></figure>
<figure><figcaption>browser-ca-issue</figcaption></figure>
<p>Default page가 있는 <code>Root</code>경로는 인증을 요구하지 않으므로 접속이 확인됩니다.</p>
<figure><figcaption>browser-default-page</figcaption></figure>
<h4>8.2 check page - Default</h4>
<p>Nginx 서버 구성에서 <code>/secure</code> 경로는 인증이 안되는경우 오류를 반환하도록 구성했습니다.</p>
<div class="language-ini" data-highlighter="prismjs" data-ext="ini" data-title="ini"><pre class="language-ini"><code><span class="line">location /secure { # 클라이언트 인증서가 확인되지 않으면 이 경로에는 접근할 수 없습니다.</span>
<span class="line highlighted">  <span class="token key attr-name">if ($ssl_client_verify !</span><span class="token punctuation">=</span> <span class="token value attr-value">SUCCESS) { return 403; }</span></span>
<span class="line">  alias /home/secure;</span>
<span class="line">  index index.html;</span>
<span class="line">}</span>
<span class="line"></span></code></pre></div><p>click(deny) : <a href="https://service-a.example.com/secure" target="_blank" rel="noopener noreferrer">https://service-a.example.com/secure</a></p>
<p>인증에 필요한 인증서가 제시되지 않았으므로, 해당 페이지에서는 403에러를 반환합니다.</p>
<figure><figcaption>browser-secure-page-forbidden</figcaption></figure>
<h3>9. pkcs12 client key 받기</h3>
<p>웹서버 인증에 필요한 인증서를 발급받는 절차를 설명합니다. GitHub에서 다운받은 디렉토리에서 <code>₩pk12-app</code> 위치에서 실행합니다.</p>
<div class="hint-container warning">
<p class="hint-container-title">경고</p>
<ul>
<li>Python3 가 필요합니다.</li>
<li>필요 패키지를 설치해야 합니다.</li>
</ul>
<div class="language-bash" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="line">python <span class="token parameter variable">-m</span> pip <span class="token function">install</span> flask hvac cryptography</span>
<span class="line"></span></code></pre></div></div>
<p>Python으로 작성된 파일을 실행합니다.</p>
<div class="language-bash" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="line">python main.py</span>
<span class="line"></span></code></pre></div><p>해당 앱은 <code>8888</code>포트로 열려있습니다. <a href="http://127.0.0.1:8888" target="_blank" rel="noopener noreferrer">http://127.0.0.1:8888</a> 페이지로 이동합니다.</p>
<figure><figcaption>pki-get</figcaption></figure>
<p>앞서 생성한 Vault userpass 인증의 username인 <code>user1</code>과 password인 <code>password</code>를 입력하고, 인증서용 비밀번호(예: <code>1234</code>)를 입력하면 Vault로 부터 PEM인증서를 받아 pkcs#12 인증서로 변환 후 다운로드가 진행됩니다.</p>
<p>만약 Vault 에서 PEM을 직접 받는 경우, <code>OpenSSL</code>을 사용하여 다음과 같이 PEM 인증서를 pkcs#12 형태로 변경할 수 있습니다.</p>
<div class="language-bash" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="line">openssl pkcs12 <span class="token parameter variable">-export</span> <span class="token parameter variable">-out</span> user1.p12 <span class="token punctuation">\</span></span>
<span class="line">  <span class="token parameter variable">-inkey</span> private_key.pem <span class="token parameter variable">-in</span> certificate.pem <span class="token punctuation">\</span></span>
<span class="line">  <span class="token parameter variable">-certfile</span> issuing_ca.pem</span>
<span class="line"></span></code></pre></div><p>다운 받은 인증서를 더블클릭하여 Host OS에 인증서를 등록합니다. 등록시 인증서 발급 때 입력한 인증서용 비밀번호가 필요합니다.</p>
<figure><figcaption>pk12 registration - macOS</figcaption></figure>
<p>인증서 등록이 완료되면 내 인증서 목록에 표기됩니다.</p>
<figure><figcaption>Key Chain - macOS</figcaption></figure>
<h2>10. 인증서로 웹서버 인증 받기</h2>
<p>다시 인증서를 요구하는 페이지로 이동합니다.</p>
<p>click : <a href="https://service-a.example.com/secure" target="_blank" rel="noopener noreferrer">https://service-a.example.com/secure</a></p>
<p><code>example.com</code>에 대한 인증서이므로, 브라우저에서는 해당 DNS가 같으면 자동으로 인식합니다.</p>
<figure><figcaption>Check Cert</figcaption></figure>
<p>인증서를 등록하면 이제 <code>secure</code> 경로의 페이지 내용을 확인할 수 있습니다.</p>
<figure><figcaption>browser-secure-page-access</figcaption></figure>
<h2>결론</h2>
<p>Vault를 활용한 mTLS 구현은 현대 웹 서비스의 보안 요구사항을 효과적으로 충족시킬 수 있는 솔루션입니다. 자동화된 인증서 관리, 세밀한 접근 제어, 강력한 보안성을 통해 민감한 데이터와 시스템을 보호할 수 있습니다. 특히 Vault의 자동화 기능은 운영 부담을 줄이면서도 보안을 강화할 수 있는 균형 잡힌 접근 방식을 제공합니다.<br>
보안은 단순한 기능이 아닌 지속적인 프로세스입니다. Vault를 통한 mTLS 구현은 이러한 보안 프로세스를 자동화하고 표준화하는 데 큰 도움이 될 것입니다.</p>
]]></content:encoded>
    </item>
    <item>
      <title>안전한 RAG 시스템 구축: HashiCorp Vault와 Amazon Bedrock 활용</title>
      <link>https://docmoa.github.io/04-HashiCorp/06-Vault/04-UseCase/Secured-RAG-with-Vault-on-aws.html</link>
      <guid>https://docmoa.github.io/04-HashiCorp/06-Vault/04-UseCase/Secured-RAG-with-Vault-on-aws.html</guid>
      <source url="https://docmoa.github.io/rss.xml">안전한 RAG 시스템 구축: HashiCorp Vault와 Amazon Bedrock 활용</source>
      <description>안전한 RAG 시스템 구축: HashiCorp Vault와 Amazon Bedrock 활용 개요 AI 기술의 발전과 함께 기업들은 데이터를 더 효과적으로 활용하기 위한 새로운 방법들을 모색하고 있습니다. 특히, 생성형 AI(GenAI) 와 대규모 언어 모델(LLM) 은 조직이 데이터를 처리하고 활용하는 방식을 변화시...</description>
      <pubDate>Tue, 07 Jan 2025 09:23:20 GMT</pubDate>
      <content:encoded><![CDATA[
<h2>개요</h2>
<p>AI 기술의 발전과 함께 기업들은 데이터를 더 효과적으로 활용하기 위한 새로운 방법들을 모색하고 있습니다. 특히, <strong>생성형 AI(GenAI)</strong> 와 <strong>대규모 언어 모델(LLM)</strong> 은 조직이 데이터를 처리하고 활용하는 방식을 변화시키는 핵심 도구로 자리 잡고 있습니다. 하지만 기존의 LLM은 사전에 학습된 데이터에만 의존하기 때문에 최신 정보에 접근하거나 조직 내 특정 요구사항에 맞춘 답변을 제공하는 데 한계가 있습니다.</p>
<p>이러한 한계를 해결하기 위해 등장한 기술이 바로 <strong>Retrieval-Augmented Generation (RAG)</strong> 입니다. RAG는 모델이 외부 데이터 소스를 검색하여 최신 정보를 통합하고, 이를 기반으로 맞춤형 답변을 생성할 수 있도록 합니다. 이를 통해 조직은 더 정교하고 유용한 지식 기반 시스템을 구축할 수 있습니다. 그러나 RAG 시스템은 개인정보(PII), 민감정보, 클라우드 자격 증명 등 중요한 데이터를 다룰 수밖에 없기에 데이터 보안과 보호가 필수적입니다.</p>
<p><strong>HashiCorp Vault</strong> 는 이러한 민감정보를 안전하게 관리하고 보호할 수 있는 강력한 솔루션입니다. Vault는 <strong>Transit 암호화, Tokenization, Masking, FPE(형태 보존 암호화)</strong> 등의 기능을 통해 데이터를 안전하게 암호화하고, 컴플라이언스와 규제 요구사항을 충족할 수 있도록 지원합니다.</p>
<figure><figcaption>참고: Vault Masking 기능을 활용한 안전한 데이터 파이프라인 예시</figcaption></figure>
<p>본 포스팅에서는 AWS 환경에서 <strong>Amazon Bedrock</strong> 과 함께 RAG를 구축하는 방법을 소개하며, Vault를 활용해 민감정보를 안전하게 보호하는 방안을 설명합니다.</p>
<div class="hint-container tip">
<p class="hint-container-title">💡 감사한 분(Special Thanks)</p>
<p>본 글은 HashiCorp의 <a href="https://www.linkedin.com/in/david-wright-57336a4/" target="_blank" rel="noopener noreferrer">David Wright</a>의 <a href="https://github.com/dawright22/aws-rag-terraform-deployment-demo" target="_blank" rel="noopener noreferrer">GitHub 저장소</a> 데모 시나리오를 분석 및 참고하여 작성되었습니다.</p>
</div>
]]></content:encoded>
    </item>
    <item>
      <title>Nomad, Vault를 keycloak oidc로 관리하기 with terraform</title>
      <link>https://docmoa.github.io/04-HashiCorp/03-Terraform/03-Sample/hashicorp-oidc.html</link>
      <guid>https://docmoa.github.io/04-HashiCorp/03-Terraform/03-Sample/hashicorp-oidc.html</guid>
      <source url="https://docmoa.github.io/rss.xml">Nomad, Vault를 keycloak oidc로 관리하기 with terraform</source>
      <description>Nomad, Vault를 keycloak oidc로 관리하기 with terraform 요즘같이 사내에 많은 Open Source, Enterprise Soulition이 사용되는 시기에 각 Solution별로 ID/Password를 관리하는 것은 쉽지 않습니다. 거기다 만약 Dev, Stage, Production...</description>
      <pubDate>Tue, 24 Sep 2024 03:11:56 GMT</pubDate>
      <content:encoded><![CDATA[
<p>요즘같이 사내에 많은 Open Source, Enterprise Soulition이 사용되는 시기에 각 Solution별로 <strong>ID/Password를 관리하는 것</strong>은 쉽지 않습니다.<br>
거기다 만약 Dev, Stage, Production등의 환경별로 구축이 되어 있다면 이미 ID/Password를 저장하고 관리하는 것만 으로도 <strong>굉장히 반복적이고 귀찮은 작업</strong>이 될 것 입니다.</p>
<p>우리는 이러한 상황을 해결하기 위해 IDP(Identity Provider) Solution을 사용합니다.<br>
다양한 IDP가 있겠으나 제가 속한 회사에서는 <strong>Keycloak</strong>을 사용하고 있고 그 Keycloak을 통해<br>
gitlab, grafana, nomad, vault의 사용자 인증 및 권한관리를 하고 있습니다.<br>
이 중 <strong>Terraform code</strong>로 구현이 완벽히 된 <strong>Nomad와 Vault</strong>의 Code에 대해 설명드리겠습니다.</p>
<h2>Keycloak 공통영역</h2>
<ul>
<li>Realm, Users, Groups등을 미리 설정합니다.
<ul>
<li>Groups은 아래와 같습니다.
<ul>
<li>opsTeam: Write권한이 있는 사용자 그룹</li>
<li>devTeam: Read권한만 있는 사용자 그룹</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3>Terraform으로 Keycloak의 사전 정보를 구현</h3>
<ul>
<li>계정 정보는 Yaml로 관리하며, Group은 아직 두개 뿐이라 Variables로 관리합니다.</li>
<li>reader, mgmt의 role 또한 여기서 생성됩니다.</li>
</ul>
<details>
  <summary>Keycloak Common 코드 보기</summary>
<div class="language-bash" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="line"><span class="token comment">#main.tf </span></span>
<span class="line">resource <span class="token string">"keycloak_realm"</span> <span class="token string">"realm"</span> <span class="token punctuation">{</span></span>
<span class="line">  realm   <span class="token operator">=</span> var.keycloak_realm</span>
<span class="line">  enabled <span class="token operator">=</span> <span class="token boolean">true</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">resource <span class="token string">"keycloak_user"</span> <span class="token string">"user_reader"</span> <span class="token punctuation">{</span></span>
<span class="line">  for_each <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token keyword">for</span> <span class="token for-or-select variable">user</span> <span class="token keyword">in</span> local.keycloak_reader<span class="token punctuation">[</span><span class="token string">"users"</span><span class="token punctuation">]</span> <span class="token builtin class-name">:</span> user<span class="token punctuation">[</span><span class="token string">"username"</span><span class="token punctuation">]</span> <span class="token operator">=</span><span class="token operator">&gt;</span> user <span class="token punctuation">}</span></span>
<span class="line">  realm_id <span class="token operator">=</span> keycloak_realm.realm.id</span>
<span class="line">  username <span class="token operator">=</span> each.value<span class="token punctuation">[</span><span class="token string">"username"</span><span class="token punctuation">]</span></span>
<span class="line">  enabled  <span class="token operator">=</span> <span class="token boolean">true</span></span>
<span class="line"></span>
<span class="line">  email      <span class="token operator">=</span> each.value<span class="token punctuation">[</span><span class="token string">"email"</span><span class="token punctuation">]</span></span>
<span class="line">  first_name <span class="token operator">=</span> each.value<span class="token punctuation">[</span><span class="token string">"first_name"</span><span class="token punctuation">]</span></span>
<span class="line">  last_name  <span class="token operator">=</span> each.value<span class="token punctuation">[</span><span class="token string">"last_name"</span><span class="token punctuation">]</span></span>
<span class="line"></span>
<span class="line">  initial_password <span class="token punctuation">{</span></span>
<span class="line">    value     <span class="token operator">=</span> each.value<span class="token punctuation">[</span><span class="token string">"pwd"</span><span class="token punctuation">]</span></span>
<span class="line">    temporary <span class="token operator">=</span> <span class="token boolean">false</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">resource <span class="token string">"keycloak_user"</span> <span class="token string">"user_management"</span> <span class="token punctuation">{</span></span>
<span class="line">  for_each <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token keyword">for</span> <span class="token for-or-select variable">user</span> <span class="token keyword">in</span> local.keycloak_mgmt<span class="token punctuation">[</span><span class="token string">"users"</span><span class="token punctuation">]</span> <span class="token builtin class-name">:</span> user<span class="token punctuation">[</span><span class="token string">"username"</span><span class="token punctuation">]</span> <span class="token operator">=</span><span class="token operator">&gt;</span> user <span class="token punctuation">}</span></span>
<span class="line">  realm_id <span class="token operator">=</span> keycloak_realm.realm.id</span>
<span class="line">  username <span class="token operator">=</span> each.value<span class="token punctuation">[</span><span class="token string">"username"</span><span class="token punctuation">]</span></span>
<span class="line">  enabled  <span class="token operator">=</span> <span class="token boolean">true</span></span>
<span class="line"></span>
<span class="line">  email      <span class="token operator">=</span> each.value<span class="token punctuation">[</span><span class="token string">"email"</span><span class="token punctuation">]</span></span>
<span class="line">  first_name <span class="token operator">=</span> each.value<span class="token punctuation">[</span><span class="token string">"first_name"</span><span class="token punctuation">]</span></span>
<span class="line">  last_name  <span class="token operator">=</span> each.value<span class="token punctuation">[</span><span class="token string">"last_name"</span><span class="token punctuation">]</span></span>
<span class="line"></span>
<span class="line">  initial_password <span class="token punctuation">{</span></span>
<span class="line">    value     <span class="token operator">=</span> each.value<span class="token punctuation">[</span><span class="token string">"pwd"</span><span class="token punctuation">]</span></span>
<span class="line">    temporary <span class="token operator">=</span> <span class="token boolean">false</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">resource <span class="token string">"keycloak_role"</span> <span class="token string">"realm_role"</span> <span class="token punctuation">{</span></span>
<span class="line">  realm_id    <span class="token operator">=</span> keycloak_realm.realm.id</span>
<span class="line">  name        <span class="token operator">=</span> <span class="token string">"nomadoidc"</span></span>
<span class="line">  description <span class="token operator">=</span> <span class="token string">"My Realm Role"</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">resource <span class="token string">"keycloak_role"</span> <span class="token string">"mgmt_realm_role"</span> <span class="token punctuation">{</span></span>
<span class="line">  realm_id    <span class="token operator">=</span> keycloak_realm.realm.id</span>
<span class="line">  name        <span class="token operator">=</span> var.keycloak_mgmt</span>
<span class="line">  description <span class="token operator">=</span> <span class="token string">"My mgmt Role"</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">resource <span class="token string">"keycloak_role"</span> <span class="token string">"redaer_realm_role"</span> <span class="token punctuation">{</span></span>
<span class="line">  realm_id    <span class="token operator">=</span> keycloak_realm.realm.id</span>
<span class="line">  name        <span class="token operator">=</span> <span class="token string">"reader"</span></span>
<span class="line">  description <span class="token operator">=</span> <span class="token string">"My redaer Role"</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line">resource <span class="token string">"keycloak_group"</span> <span class="token string">"reader_group"</span> <span class="token punctuation">{</span></span>
<span class="line">  realm_id <span class="token operator">=</span> keycloak_realm.realm.id</span>
<span class="line">  name     <span class="token operator">=</span> var.keycloak_reader_group</span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">resource <span class="token string">"keycloak_group"</span> <span class="token string">"management_group"</span> <span class="token punctuation">{</span></span>
<span class="line">  realm_id <span class="token operator">=</span> keycloak_realm.realm.id</span>
<span class="line">  name     <span class="token operator">=</span> var.keycloak_mgmt_group</span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">locals <span class="token punctuation">{</span></span>
<span class="line">  reader_usernames <span class="token operator">=</span> <span class="token punctuation">[</span></span>
<span class="line">    <span class="token keyword">for</span> <span class="token for-or-select variable">user</span> <span class="token keyword">in</span> local.keycloak_reader<span class="token punctuation">[</span><span class="token string">"users"</span><span class="token punctuation">]</span> <span class="token builtin class-name">:</span> user<span class="token punctuation">[</span><span class="token string">"username"</span><span class="token punctuation">]</span></span>
<span class="line">  <span class="token punctuation">]</span></span>
<span class="line">  mgmt_usernames <span class="token operator">=</span> <span class="token punctuation">[</span></span>
<span class="line">    <span class="token keyword">for</span> <span class="token for-or-select variable">user</span> <span class="token keyword">in</span> local.keycloak_mgmt<span class="token punctuation">[</span><span class="token string">"users"</span><span class="token punctuation">]</span> <span class="token builtin class-name">:</span> user<span class="token punctuation">[</span><span class="token string">"username"</span><span class="token punctuation">]</span></span>
<span class="line">  <span class="token punctuation">]</span>  </span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">resource <span class="token string">"keycloak_group_memberships"</span> <span class="token string">"reader_group_members"</span> <span class="token punctuation">{</span></span>
<span class="line">  realm_id <span class="token operator">=</span> keycloak_realm.realm.id</span>
<span class="line">  group_id <span class="token operator">=</span> keycloak_group.reader_group.id</span>
<span class="line"></span>
<span class="line">  members  <span class="token operator">=</span> local.reader_usernames</span>
<span class="line">  </span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">resource <span class="token string">"keycloak_group_memberships"</span> <span class="token string">"management_group_members"</span> <span class="token punctuation">{</span></span>
<span class="line">  realm_id <span class="token operator">=</span> keycloak_realm.realm.id</span>
<span class="line">  group_id <span class="token operator">=</span> keycloak_group.management_group.id</span>
<span class="line"></span>
<span class="line">  members  <span class="token operator">=</span> local.mgmt_usernames</span>
<span class="line">  </span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">resource <span class="token string">"keycloak_group_roles"</span> <span class="token string">"reader_group_roles"</span> <span class="token punctuation">{</span></span>
<span class="line">  realm_id <span class="token operator">=</span> keycloak_realm.realm.id</span>
<span class="line">  group_id <span class="token operator">=</span> keycloak_group.reader_group.id</span>
<span class="line"></span>
<span class="line">  role_ids   <span class="token operator">=</span> <span class="token punctuation">[</span>keycloak_role.redaer_realm_role.id<span class="token punctuation">]</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">resource <span class="token string">"keycloak_group_roles"</span> <span class="token string">"mgmt_group_roles"</span> <span class="token punctuation">{</span></span>
<span class="line">  realm_id <span class="token operator">=</span> keycloak_realm.realm.id</span>
<span class="line">  group_id <span class="token operator">=</span> keycloak_group.management_group.id</span>
<span class="line"></span>
<span class="line">  role_ids   <span class="token operator">=</span> <span class="token punctuation">[</span>keycloak_role.mgmt_realm_role.id<span class="token punctuation">]</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line">resource <span class="token string">"keycloak_openid_client_scope"</span> <span class="token string">"groups"</span> <span class="token punctuation">{</span></span>
<span class="line">  realm_id <span class="token operator">=</span> keycloak_realm.realm.id</span>
<span class="line">  name     <span class="token operator">=</span> <span class="token string">"groups"</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">resource <span class="token string">"keycloak_openid_user_realm_role_protocol_mapper"</span> <span class="token string">"user_realm_role_mapper"</span> <span class="token punctuation">{</span></span>
<span class="line">  realm_id        <span class="token operator">=</span> keycloak_realm.realm.id</span>
<span class="line">  client_scope_id <span class="token operator">=</span> keycloak_openid_client_scope.groups.id</span>
<span class="line">  name            <span class="token operator">=</span> <span class="token string">"groups"</span></span>
<span class="line"></span>
<span class="line">  claim_name <span class="token operator">=</span> <span class="token string">"groups"</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">#var.tf</span></span>
<span class="line">variable <span class="token string">"nomad_addr"</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">variable <span class="token string">"keycloak_addr"</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">variable <span class="token string">"keycloak_admin_user"</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">variable <span class="token string">"keycloak_admin_password"</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">variable <span class="token string">"keycloak_scheme"</span> <span class="token punctuation">{</span></span>
<span class="line">  default <span class="token operator">=</span> <span class="token string">"https"</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">variable <span class="token string">"keycloak_realm"</span> <span class="token punctuation">{</span></span>
<span class="line">  default <span class="token operator">=</span> <span class="token string">"HashiCorp"</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">variable <span class="token string">"reader_yaml"</span> <span class="token punctuation">{</span></span>
<span class="line">  default <span class="token operator">=</span> <span class="token string">"reader.yaml"</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">variable <span class="token string">"mgmt_yaml"</span> <span class="token punctuation">{</span></span>
<span class="line">  default <span class="token operator">=</span> <span class="token string">"mgmt.yaml"</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">locals <span class="token punctuation">{</span></span>
<span class="line">  keycloak_reader <span class="token operator">=</span> yamldecode<span class="token punctuation">(</span>file<span class="token punctuation">(</span>var.reader_yaml<span class="token punctuation">))</span></span>
<span class="line">  keycloak_mgmt   <span class="token operator">=</span> yamldecode<span class="token punctuation">(</span>file<span class="token punctuation">(</span>var.mgmt_yaml<span class="token punctuation">))</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">variable <span class="token string">"keycloak_mgmt"</span> <span class="token punctuation">{</span></span>
<span class="line">  default <span class="token operator">=</span> <span class="token string">"mgmt"</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">variable <span class="token string">"keycloak_reader_group"</span> <span class="token punctuation">{</span></span>
<span class="line">  default <span class="token operator">=</span> <span class="token string">"devTeam"</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">variable <span class="token string">"keycloak_mgmt_group"</span> <span class="token punctuation">{</span></span>
<span class="line">  default <span class="token operator">=</span> <span class="token string">"opsTeam"</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token comment">#mgmt.yaml</span></span>
<span class="line">users:</span>
<span class="line"><span class="token punctuation">..</span>.</span>
<span class="line">users:</span>
<span class="line">  - username: ung</span>
<span class="line">    email: ung@mz.co.kr</span>
<span class="line">    first_name: ung</span>
<span class="line">    last_name: hee</span>
<span class="line">    pwd: ungungung</span>
<span class="line"><span class="token punctuation">..</span>.</span>
<span class="line"><span class="token comment">#reader.yaml</span></span>
<span class="line">users:</span>
<span class="line"><span class="token punctuation">..</span>.</span>
<span class="line">users:</span>
<span class="line">  - username: gslee</span>
<span class="line">    email: gs@hashicorp.com</span>
<span class="line">    first_name: gs</span>
<span class="line">    last_name: lee</span>
<span class="line">    pwd: gsgsgsgs</span>
<span class="line"><span class="token punctuation">..</span>.</span>
<span class="line"></span></code></pre></div></details>
<h2>Nomad OIDC Terraform Code</h2>
<h3>Terraform으로 Keycloak과 Nomad OIDC 설정</h3>
<ul>
<li>Keycloak oidc client를 생성합니다.
<ul>
<li>valid_redirect_uri에 nomad oidc uri인 /oidc/callback, /ui/settings/tokens를 추가해줍니다.</li>
<li>Nomad Role = Keycloak Groups을 맵핑 시켜서 권한을 동기화 시킵니다.</li>
</ul>
</li>
<li>Nomad는 Token Base로 인증인가를 합니다.
<ul>
<li>Token의 각 read, write role을 만듭니다.</li>
<li>그 role기반으로 Keycloak group과 맵핑합니다.</li>
</ul>
</li>
</ul>
<details>
  <summary>Nomad, Keycloak 코드 보기</summary>
<div class="language-bash" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="line"><span class="token comment">#keycloak.tf</span></span>
<span class="line">resource <span class="token string">"keycloak_openid_client"</span> <span class="token string">"openid_client"</span> <span class="token punctuation">{</span></span>
<span class="line">  realm_id  <span class="token operator">=</span> var.relam_id</span>
<span class="line">  client_id <span class="token operator">=</span> <span class="token string">"nomadoidc"</span></span>
<span class="line"></span>
<span class="line">  name                  <span class="token operator">=</span> <span class="token string">"nomadoidc"</span></span>
<span class="line">  enabled               <span class="token operator">=</span> <span class="token boolean">true</span></span>
<span class="line">  standard_flow_enabled <span class="token operator">=</span> <span class="token boolean">true</span></span>
<span class="line"></span>
<span class="line">  access_type <span class="token operator">=</span> <span class="token string">"CONFIDENTIAL"</span></span>
<span class="line">  valid_redirect_uris <span class="token operator">=</span> <span class="token punctuation">[</span></span>
<span class="line">    <span class="token string">"<span class="token variable">${var.nomad_scheme}</span>://<span class="token variable">${var.nomad_addr}</span>/oidc/callback"</span>,</span>
<span class="line">    <span class="token string">"<span class="token variable">${var.nomad_scheme}</span>://<span class="token variable">${var.nomad_addr}</span>/ui/settings/tokens"</span>,</span>
<span class="line">    <span class="token string">"http://localhost:4649/oidc/callback"</span>,</span>
<span class="line">  <span class="token punctuation">]</span></span>
<span class="line"></span>
<span class="line">  login_theme <span class="token operator">=</span> <span class="token string">"keycloak"</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">resource <span class="token string">"keycloak_openid_client_default_scopes"</span> <span class="token string">"client_default_scopes"</span> <span class="token punctuation">{</span></span>
<span class="line">  realm_id  <span class="token operator">=</span> var.relam_id</span>
<span class="line">  client_id <span class="token operator">=</span> keycloak_openid_client.openid_client.id</span>
<span class="line"></span>
<span class="line">  default_scopes <span class="token operator">=</span> <span class="token punctuation">[</span></span>
<span class="line">    <span class="token string">"profile"</span>,</span>
<span class="line">    <span class="token string">"email"</span>,</span>
<span class="line">    <span class="token string">"roles"</span>,</span>
<span class="line">    <span class="token string">"groups"</span>,</span>
<span class="line">    keycloak_openid_client_scope.openid_client_scope.name</span>
<span class="line">  <span class="token punctuation">]</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line">resource <span class="token string">"keycloak_role"</span> <span class="token string">"management_role"</span> <span class="token punctuation">{</span></span>
<span class="line">  realm_id    <span class="token operator">=</span> var.relam_id</span>
<span class="line">  client_id   <span class="token operator">=</span> keycloak_openid_client.openid_client.id</span>
<span class="line">  name        <span class="token operator">=</span> <span class="token string">"mgmt"</span></span>
<span class="line">  description <span class="token operator">=</span> <span class="token string">"Management role"</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">resource <span class="token string">"keycloak_role"</span> <span class="token string">"reader_role"</span> <span class="token punctuation">{</span></span>
<span class="line">  realm_id    <span class="token operator">=</span> var.relam_id</span>
<span class="line">  client_id   <span class="token operator">=</span> keycloak_openid_client.openid_client.id</span>
<span class="line">  name        <span class="token operator">=</span> <span class="token string">"reader"</span></span>
<span class="line">  description <span class="token operator">=</span> <span class="token string">"Reader role"</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">resource <span class="token string">"keycloak_openid_client_scope"</span> <span class="token string">"openid_client_scope"</span> <span class="token punctuation">{</span></span>
<span class="line">  realm_id               <span class="token operator">=</span> var.relam_id</span>
<span class="line">  name                   <span class="token operator">=</span> keycloak_openid_client.openid_client.name</span>
<span class="line">  description            <span class="token operator">=</span> <span class="token string">"When requested, this scope will map a user's group memberships to a claim"</span></span>
<span class="line">  include_in_token_scope <span class="token operator">=</span> <span class="token boolean">true</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">#nomad.tf</span></span>
<span class="line">resource <span class="token string">"nomad_acl_auth_method"</span> <span class="token string">"keycloak"</span> <span class="token punctuation">{</span></span>
<span class="line">  name           <span class="token operator">=</span> <span class="token string">"keycloak"</span></span>
<span class="line">  <span class="token builtin class-name">type</span>           <span class="token operator">=</span> <span class="token string">"OIDC"</span></span>
<span class="line">  token_locality <span class="token operator">=</span> <span class="token string">"global"</span></span>
<span class="line">  max_token_ttl  <span class="token operator">=</span> <span class="token string">"150m0s"</span></span>
<span class="line">  default        <span class="token operator">=</span> <span class="token boolean">true</span></span>
<span class="line"></span>
<span class="line">  config <span class="token punctuation">{</span></span>
<span class="line">    oidc_discovery_url <span class="token operator">=</span> format<span class="token punctuation">(</span><span class="token string">"<span class="token variable">${var.keycloak_scheme}</span>://<span class="token variable">${var.keycloak_addr}</span>/realms/%s"</span>, var.keycloak_realm<span class="token punctuation">)</span></span>
<span class="line">    oidc_client_id     <span class="token operator">=</span> var.client_id</span>
<span class="line">    oidc_client_secret <span class="token operator">=</span> keycloak_openid_client.openid_client.client_secret</span>
<span class="line">    bound_audiences <span class="token operator">=</span> <span class="token punctuation">[</span></span>
<span class="line">      var.client_id</span>
<span class="line">    <span class="token punctuation">]</span></span>
<span class="line">    oidc_scopes <span class="token operator">=</span> <span class="token punctuation">[</span></span>
<span class="line">      <span class="token string">"groups"</span></span>
<span class="line">    <span class="token punctuation">]</span></span>
<span class="line">    allowed_redirect_uris <span class="token operator">=</span> <span class="token punctuation">[</span></span>
<span class="line">      <span class="token string">"<span class="token variable">${var.nomad_scheme}</span>://<span class="token variable">${var.nomad_addr}</span>/oidc/callback"</span>,</span>
<span class="line">      <span class="token string">"<span class="token variable">${var.nomad_scheme}</span>://<span class="token variable">${var.nomad_addr}</span>/ui/settings/tokens"</span>,</span>
<span class="line">      <span class="token string">"http://localhost:4649/oidc/callback"</span>, // CLI로 호출하는 경우를 위해 필요</span>
<span class="line">    <span class="token punctuation">]</span></span>
<span class="line">    list_claim_mappings <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token function">groups</span> <span class="token operator">=</span> <span class="token string">"roles"</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">resource <span class="token string">"nomad_acl_binding_rule"</span> <span class="token string">"reader"</span> <span class="token punctuation">{</span></span>
<span class="line">  description <span class="token operator">=</span> <span class="token string">"reader rule"</span></span>
<span class="line">  auth_method <span class="token operator">=</span> nomad_acl_auth_method.keycloak.name</span>
<span class="line">  selector    <span class="token operator">=</span> <span class="token string">"reader in list.roles"</span></span>
<span class="line">  bind_type   <span class="token operator">=</span> <span class="token string">"role"</span></span>
<span class="line">  bind_name   <span class="token operator">=</span> nomad_acl_role.dev.name</span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">resource <span class="token string">"nomad_acl_binding_rule"</span> <span class="token string">"mgmt"</span> <span class="token punctuation">{</span></span>
<span class="line">  description <span class="token operator">=</span> <span class="token string">"management rule"</span></span>
<span class="line">  auth_method <span class="token operator">=</span> nomad_acl_auth_method.keycloak.name</span>
<span class="line">  selector    <span class="token operator">=</span> <span class="token string">"mgmt in list.roles"</span></span>
<span class="line">  bind_type   <span class="token operator">=</span> <span class="token string">"role"</span></span>
<span class="line">  bind_name   <span class="token operator">=</span> nomad_acl_role.mgmt.name</span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">resource <span class="token string">"nomad_acl_policy"</span> <span class="token string">"dev"</span> <span class="token punctuation">{</span></span>
<span class="line">  name <span class="token operator">=</span> var.nomad_reader</span>
<span class="line"></span>
<span class="line">  rules_hcl <span class="token operator">=</span> <span class="token operator">&lt;&lt;</span><span class="token string">EOT</span>
<span class="line">namespace "*" {</span>
<span class="line">  policy = "read"</span>
<span class="line">  capabilities = [</span>
<span class="line">    "list-jobs",</span>
<span class="line">    "parse-job",</span>
<span class="line">    "read-job",</span>
<span class="line">    "csi-list-volume",</span>
<span class="line">    "csi-read-volume",</span>
<span class="line">    "list-scaling-policies",</span>
<span class="line">    "read-scaling-policy"</span>
<span class="line">  ]</span>
<span class="line">}</span>
<span class="line"></span>
<span class="line">EOT</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">resource <span class="token string">"nomad_acl_role"</span> <span class="token string">"dev"</span> <span class="token punctuation">{</span></span>
<span class="line">  name        <span class="token operator">=</span> <span class="token string">"<span class="token variable">${var.nomad_reader}</span>-acl-role"</span></span>
<span class="line">  description <span class="token operator">=</span> <span class="token string">"An ACL Role for cluster dev"</span></span>
<span class="line"></span>
<span class="line">  policy <span class="token punctuation">{</span></span>
<span class="line">    name <span class="token operator">=</span> nomad_acl_policy.dev.name</span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">resource <span class="token string">"nomad_acl_policy"</span> <span class="token string">"mgmt"</span> <span class="token punctuation">{</span></span>
<span class="line">  name <span class="token operator">=</span> var.nomad_mgmt</span>
<span class="line"></span>
<span class="line">  rules_hcl <span class="token operator">=</span> <span class="token operator">&lt;&lt;</span><span class="token string">EOT</span>
<span class="line">namespace "*" {</span>
<span class="line">  policy = "write"</span>
<span class="line">    capabilities = [</span>
<span class="line">      "list-jobs",</span>
<span class="line">      "parse-job",</span>
<span class="line">      "read-job",</span>
<span class="line">      "submit-job",</span>
<span class="line">      "dispatch-job",</span>
<span class="line">      "read-logs",</span>
<span class="line">      "read-fs",</span>
<span class="line">      "alloc-exec",</span>
<span class="line">      "alloc-lifecycle",</span>
<span class="line">      "csi-write-volume",</span>
<span class="line">      "csi-mount-volume",</span>
<span class="line">      "list-scaling-policies",</span>
<span class="line">      "read-scaling-policy",</span>
<span class="line">      "read-job-scaling",</span>
<span class="line">      "scale-job"</span>
<span class="line">  ]</span>
<span class="line">}</span>
<span class="line">EOT</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">resource <span class="token string">"nomad_acl_role"</span> <span class="token string">"mgmt"</span> <span class="token punctuation">{</span></span>
<span class="line">  name        <span class="token operator">=</span> <span class="token string">"<span class="token variable">${var.nomad_mgmt}</span>-acl-role"</span></span>
<span class="line">  description <span class="token operator">=</span> <span class="token string">"An ACL Role for cluster mgmt"</span></span>
<span class="line"></span>
<span class="line">  policy <span class="token punctuation">{</span></span>
<span class="line">    name <span class="token operator">=</span> nomad_acl_policy.mgmt.name</span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token comment"># var.tf</span></span>
<span class="line">variable <span class="token string">"nomad_addr"</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">variable <span class="token string">"keycloak_addr"</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line">variable <span class="token string">"keycloak_admin_user"</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">variable <span class="token string">"keycloak_admin_password"</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">variable <span class="token string">"nomad_scheme"</span> <span class="token punctuation">{</span></span>
<span class="line">  default <span class="token operator">=</span> <span class="token string">"https"</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">variable <span class="token string">"nomad_region"</span> <span class="token punctuation">{</span></span>
<span class="line">  default <span class="token operator">=</span> <span class="token string">"global"</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">variable <span class="token string">"keycloak_scheme"</span> <span class="token punctuation">{</span></span>
<span class="line">  default <span class="token operator">=</span> <span class="token string">"https"</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">variable <span class="token string">"keycloak_realm"</span> <span class="token punctuation">{</span></span>
<span class="line">  default <span class="token operator">=</span> <span class="token string">"HashiCorp"</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">variable <span class="token string">"nomad_reader"</span> <span class="token punctuation">{</span></span>
<span class="line">  default <span class="token operator">=</span> <span class="token string">"devTeam"</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">variable <span class="token string">"nomad_mgmt"</span> <span class="token punctuation">{</span></span>
<span class="line">  default <span class="token operator">=</span> <span class="token string">"opsTeam"</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">variable <span class="token string">"client_id"</span> <span class="token punctuation">{</span></span>
<span class="line">  default <span class="token operator">=</span> <span class="token string">"nomadoidc"</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre></div></details>
<h3>결과화면 추가</h3>
<ul>
<li>Nomad UI에서 SSO 연동 버튼이 활성화됩니다.</li>
</ul>
<figure><figcaption>Nomad UI</figcaption></figure>
<ul>
<li>Mgmt group인 ung 계정으로 로그인 하면 opsTeam의 write권한을 할당받습니다.</li>
</ul>
<figure><figcaption>Nomad UI</figcaption></figure>
<ul>
<li>Reader group인 gslee 계정으로 로그인 하면 devTeam의 read권한을 할당받습니다.</li>
</ul>
<figure><figcaption>Nomad UI</figcaption></figure>
<h2>Vault OIDC Terraform Code</h2>
<h3>Terraform으로 Keycloak과 Vault OIDC 설정</h3>
<ul>
<li>Keycloak oidc client를 생성합니다.</li>
<li>Vault는 entity group의 alias name과 Keycloak group name을 맵핑합니다.
<ul>
<li>Vault group 생성 시에는 external로 생성이 필요합니다.</li>
<li>opsTeam에는 전체 Write권한을, devTeam에는 전체 Read권한을 적용합니다.</li>
</ul>
</li>
</ul>
<details>
  <summary>Vault, Keycloak 코드 보기</summary>
<div class="language-bash" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="line"><span class="token comment">#keycloak.tf</span></span>
<span class="line"></span>
<span class="line">resource <span class="token string">"keycloak_openid_client"</span> <span class="token string">"openid_client"</span> <span class="token punctuation">{</span></span>
<span class="line">  realm_id  <span class="token operator">=</span> var.relam_id</span>
<span class="line">  client_id <span class="token operator">=</span> <span class="token string">"vault-oidc-ung"</span></span>
<span class="line"></span>
<span class="line">  name                  <span class="token operator">=</span> <span class="token string">"vault-oidc-ung"</span></span>
<span class="line">  enabled               <span class="token operator">=</span> <span class="token boolean">true</span></span>
<span class="line">  standard_flow_enabled <span class="token operator">=</span> <span class="token boolean">true</span></span>
<span class="line"></span>
<span class="line">  access_type <span class="token operator">=</span> <span class="token string">"CONFIDENTIAL"</span></span>
<span class="line">  valid_redirect_uris <span class="token operator">=</span> <span class="token punctuation">[</span></span>
<span class="line">    <span class="token string">"<span class="token variable">${var.vault_url}</span>/*"</span></span>
<span class="line">   <span class="token punctuation">]</span></span>
<span class="line">  login_theme <span class="token operator">=</span> <span class="token string">"keycloak"</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">resource <span class="token string">"keycloak_openid_user_client_role_protocol_mapper"</span> <span class="token string">"user_client_role_mapper"</span> <span class="token punctuation">{</span></span>
<span class="line">  realm_id  <span class="token operator">=</span> var.relam_id</span>
<span class="line">  client_id <span class="token operator">=</span> keycloak_openid_client.openid_client.id</span>
<span class="line">  name      <span class="token operator">=</span> <span class="token string">"ung-user-client-role-mapper"</span></span>
<span class="line">  claim_name <span class="token operator">=</span> format<span class="token punctuation">(</span><span class="token string">"resource_access.%s.roles"</span>,</span>
<span class="line">  keycloak_openid_client.openid_client.client_id<span class="token punctuation">)</span></span>
<span class="line">  multivalued <span class="token operator">=</span> <span class="token boolean">true</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">#vault.tf</span></span>
<span class="line">resource <span class="token string">"vault_identity_oidc_key"</span> <span class="token string">"keycloak_provider_key"</span> <span class="token punctuation">{</span></span>
<span class="line">  name      <span class="token operator">=</span> <span class="token string">"keycloak"</span></span>
<span class="line">  algorithm <span class="token operator">=</span> <span class="token string">"RS256"</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">resource <span class="token string">"vault_jwt_auth_backend"</span> <span class="token string">"keycloak"</span> <span class="token punctuation">{</span></span>
<span class="line">  path               <span class="token operator">=</span> <span class="token string">"oidc-keycloak"</span></span>
<span class="line">  <span class="token builtin class-name">type</span>               <span class="token operator">=</span> <span class="token string">"oidc"</span></span>
<span class="line">  default_role       <span class="token operator">=</span> <span class="token string">"default"</span></span>
<span class="line">  oidc_discovery_url <span class="token operator">=</span> format<span class="token punctuation">(</span><span class="token string">"<span class="token variable">${var.keycloak_url}</span>/realms/HashiCorp"</span><span class="token punctuation">)</span></span>
<span class="line">  oidc_client_id     <span class="token operator">=</span> keycloak_openid_client.openid_client.client_id</span>
<span class="line">  oidc_client_secret <span class="token operator">=</span> keycloak_openid_client.openid_client.client_secret</span>
<span class="line">  </span>
<span class="line">  tune <span class="token punctuation">{</span></span>
<span class="line">    audit_non_hmac_request_keys  <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span></span>
<span class="line">    audit_non_hmac_response_keys <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span></span>
<span class="line">    default_lease_ttl            <span class="token operator">=</span> <span class="token string">"1h"</span></span>
<span class="line">    listing_visibility           <span class="token operator">=</span> <span class="token string">"unauth"</span></span>
<span class="line">    max_lease_ttl                <span class="token operator">=</span> <span class="token string">"1h"</span></span>
<span class="line">    passthrough_request_headers  <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span></span>
<span class="line">    token_type                   <span class="token operator">=</span> <span class="token string">"default-service"</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">resource <span class="token string">"vault_jwt_auth_backend_role"</span> <span class="token string">"devteam"</span> <span class="token punctuation">{</span></span>
<span class="line">  backend       <span class="token operator">=</span> vault_jwt_auth_backend.keycloak.path</span>
<span class="line">  role_name     <span class="token operator">=</span> <span class="token string">"devTeam"</span></span>
<span class="line">  token_ttl     <span class="token operator">=</span> <span class="token number">3600</span></span>
<span class="line">  token_max_ttl <span class="token operator">=</span> <span class="token number">3600</span></span>
<span class="line">  token_policies <span class="token operator">=</span> concat<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">"devTeam"</span><span class="token punctuation">]</span><span class="token punctuation">)</span></span>
<span class="line">  bound_audiences <span class="token operator">=</span> <span class="token punctuation">[</span>keycloak_openid_client.openid_client.client_id<span class="token punctuation">]</span></span>
<span class="line">  user_claim      <span class="token operator">=</span> <span class="token string">"sub"</span></span>
<span class="line">  claim_mappings <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">    preferred_username <span class="token operator">=</span> <span class="token string">"username"</span></span>
<span class="line">    email              <span class="token operator">=</span> <span class="token string">"email"</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line">  role_type             <span class="token operator">=</span> <span class="token string">"oidc"</span></span>
<span class="line">  allowed_redirect_uris <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"<span class="token variable">${var.vault_url}</span>/ui/vault/auth/oidc-keycloak/oidc/callback"</span>, </span>
<span class="line">                            <span class="token string">"<span class="token variable">${var.vault_url}</span>/oidc/callback"</span><span class="token punctuation">]</span></span>
<span class="line">  <span class="token comment">#groups_claim          = format("/resource_access/%s/roles", keycloak_openid_client.openid_client.client_id)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">resource <span class="token string">"vault_identity_oidc_key"</span> <span class="token string">"keycloak_provider_key"</span> <span class="token punctuation">{</span></span>
<span class="line">  name      <span class="token operator">=</span> <span class="token string">"keycloak"</span></span>
<span class="line">  algorithm <span class="token operator">=</span> <span class="token string">"RS256"</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">resource <span class="token string">"vault_jwt_auth_backend"</span> <span class="token string">"keycloak"</span> <span class="token punctuation">{</span></span>
<span class="line">  path               <span class="token operator">=</span> <span class="token string">"oidc-keycloak"</span></span>
<span class="line">  <span class="token builtin class-name">type</span>               <span class="token operator">=</span> <span class="token string">"oidc"</span></span>
<span class="line">  default_role       <span class="token operator">=</span> <span class="token string">"default"</span></span>
<span class="line">  oidc_discovery_url <span class="token operator">=</span> format<span class="token punctuation">(</span><span class="token string">"<span class="token variable">${var.keycloak_url}</span>/realms/HashiCorp"</span><span class="token punctuation">)</span></span>
<span class="line">  oidc_client_id     <span class="token operator">=</span> keycloak_openid_client.openid_client.client_id</span>
<span class="line">  oidc_client_secret <span class="token operator">=</span> keycloak_openid_client.openid_client.client_secret</span>
<span class="line">  </span>
<span class="line">  tune <span class="token punctuation">{</span></span>
<span class="line">    audit_non_hmac_request_keys  <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span></span>
<span class="line">    audit_non_hmac_response_keys <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span></span>
<span class="line">    default_lease_ttl            <span class="token operator">=</span> <span class="token string">"1h"</span></span>
<span class="line">    listing_visibility           <span class="token operator">=</span> <span class="token string">"unauth"</span></span>
<span class="line">    max_lease_ttl                <span class="token operator">=</span> <span class="token string">"1h"</span></span>
<span class="line">    passthrough_request_headers  <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span></span>
<span class="line">    token_type                   <span class="token operator">=</span> <span class="token string">"default-service"</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">resource <span class="token string">"vault_jwt_auth_backend_role"</span> <span class="token string">"devteam"</span> <span class="token punctuation">{</span></span>
<span class="line">  backend       <span class="token operator">=</span> vault_jwt_auth_backend.keycloak.path</span>
<span class="line">  role_name     <span class="token operator">=</span> <span class="token string">"devTeam"</span></span>
<span class="line">  token_ttl     <span class="token operator">=</span> <span class="token number">3600</span></span>
<span class="line">  token_max_ttl <span class="token operator">=</span> <span class="token number">3600</span></span>
<span class="line">  token_policies <span class="token operator">=</span> concat<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">"devTeam"</span><span class="token punctuation">]</span><span class="token punctuation">)</span></span>
<span class="line">  bound_audiences <span class="token operator">=</span> <span class="token punctuation">[</span>keycloak_openid_client.openid_client.client_id<span class="token punctuation">]</span></span>
<span class="line">  user_claim      <span class="token operator">=</span> <span class="token string">"sub"</span></span>
<span class="line">  claim_mappings <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">    preferred_username <span class="token operator">=</span> <span class="token string">"username"</span></span>
<span class="line">    email              <span class="token operator">=</span> <span class="token string">"email"</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line">  role_type             <span class="token operator">=</span> <span class="token string">"oidc"</span></span>
<span class="line">  allowed_redirect_uris <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"<span class="token variable">${var.vault_url}</span>/ui/vault/auth/oidc-keycloak/oidc/callback"</span>, </span>
<span class="line">                            <span class="token string">"<span class="token variable">${var.vault_url}</span>/oidc/callback"</span><span class="token punctuation">]</span></span>
<span class="line">  <span class="token comment">#groups_claim          = format("/resource_access/%s/roles", keycloak_openid_client.openid_client.client_id)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line">resource <span class="token string">"vault_jwt_auth_backend_role"</span> <span class="token string">"opsteam"</span> <span class="token punctuation">{</span></span>
<span class="line">  backend       <span class="token operator">=</span> vault_jwt_auth_backend.keycloak.path</span>
<span class="line">  role_name     <span class="token operator">=</span> <span class="token string">"opsTeam"</span></span>
<span class="line">  token_ttl     <span class="token operator">=</span> <span class="token number">3600</span></span>
<span class="line">  token_max_ttl <span class="token operator">=</span> <span class="token number">3600</span></span>
<span class="line">  token_policies <span class="token operator">=</span> concat<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">"opsTeam"</span><span class="token punctuation">]</span><span class="token punctuation">)</span></span>
<span class="line">  bound_audiences <span class="token operator">=</span> <span class="token punctuation">[</span>keycloak_openid_client.openid_client.client_id<span class="token punctuation">]</span></span>
<span class="line">  user_claim      <span class="token operator">=</span> <span class="token string">"sub"</span></span>
<span class="line">  claim_mappings <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">    preferred_username <span class="token operator">=</span> <span class="token string">"username"</span></span>
<span class="line">    email              <span class="token operator">=</span> <span class="token string">"email"</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line">  role_type             <span class="token operator">=</span> <span class="token string">"oidc"</span></span>
<span class="line">  allowed_redirect_uris <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"<span class="token variable">${var.vault_url}</span>/ui/vault/auth/oidc-keycloak/oidc/callback"</span>, </span>
<span class="line">                            <span class="token string">"<span class="token variable">${var.vault_url}</span>/oidc/callback"</span><span class="token punctuation">]</span></span>
<span class="line">  <span class="token comment">#groups_claim          = format("/resource_access/%s/roles", keycloak_openid_client.openid_client.client_id)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">#</span></span></code></pre></div></details>]]></content:encoded>
    </item>
    <item>
      <title>Gitlab 파이프라인의 Secret을 Vault로 관리</title>
      <link>https://docmoa.github.io/04-HashiCorp/06-Vault/04-UseCase/gitlabci-with-vault.html</link>
      <guid>https://docmoa.github.io/04-HashiCorp/06-Vault/04-UseCase/gitlabci-with-vault.html</guid>
      <source url="https://docmoa.github.io/rss.xml">Gitlab 파이프라인의 Secret을 Vault로 관리</source>
      <description>Gitlab 파이프라인의 Secret을 Vault로 관리 Vault 설정 참고 링크: Hashicorp 공홈 Nomad Vault 연동 참고 링크: docmoa Application을 배포할때 우리는 Application의 Secret만 관리하는 것이 아닌, CI또는 CD 단계에서 사용되는 Secret의 정보 또한 ...</description>
      <pubDate>Wed, 18 Sep 2024 09:45:16 GMT</pubDate>
      <content:encoded><![CDATA[
<blockquote>
<p>Vault 설정 참고 링크: <a href="https://developer.hashicorp.com/well-architected-framework/security/security-cicd-vault" target="_blank" rel="noopener noreferrer">Hashicorp 공홈</a></p>
</blockquote>
<blockquote>
<p>Nomad Vault 연동 참고 링크: <a href="https://docmoa.github.io/04-HashiCorp/07-Nomad/04-UseCase/spring-boot-with-vaultandNomad.html" target="_blank" rel="noopener noreferrer">docmoa</a></p>
</blockquote>
<p>Application을 배포할때 우리는 <strong>Application의 Secret</strong>만 관리하는 것이 아닌, <strong>CI또는 CD 단계에서 사용되는 Secret</strong>의 정보 또한 우리가 관리하는 대상이 됩니다.</p>
<p>가령 그러한 정보들은 다음과 같습니다.</p>
<ul>
<li>kubernetes api 통신을 위한 <strong>kubectl</strong></li>
<li>Nomad Deploy에 필요한 role이 적용된 <strong>Token</strong></li>
<li>다이렉트로 EC2에 배포하기 위한 <strong>ssh pem</strong></li>
<li>Argo-cd 배포를 위한 인증정보</li>
<li>그밖에 다양한 연동 tool의 인증, 인가정보</li>
</ul>
<p>이러한 다양한 Secret은 Vault를 통해 <strong>동적으로 관리</strong>할 수 있으며, 동적인 Secret Engine이 제공되지 않는다면 KV Secret Engine을 통해서 <strong>Static한 Data</strong>를 저장해서 관리 할 수도 있습니다.</p>
<p>이번 파이프라인은 Vault에서 Nomad Token을 받아오기 위한 Secret Engine을 만들고 Gitlab CI에서 배포 시 Token을 생성하여 Application을 배포하는 과정을 테스트해보도록 하겠습니다.</p>
<ol>
<li>Vault Secret Engine 설정</li>
</ol>
<ul>
<li>Vault Secret Engine은 아래와 같이 설정했습니다.</li>
</ul>
<div class="language-hcl" data-highlighter="prismjs" data-ext="hcl" data-title="hcl"><pre class="language-hcl"><code><span class="line"><span class="token comment">#Vault에서 제공하는 Nomad Secret Engine을 생성합니다.</span></span>
<span class="line"><span class="token keyword">resource <span class="token type variable">"vault_nomad_secret_backend"</span></span> <span class="token string">"config"</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token property">backend</span>                   <span class="token punctuation">=</span> <span class="token string">"nomad"</span></span>
<span class="line">  <span class="token property">description</span>               <span class="token punctuation">=</span> <span class="token string">"mzc nomad-server description"</span></span>
<span class="line">  <span class="token property">default_lease_ttl_seconds</span> <span class="token punctuation">=</span> <span class="token string">"360"</span></span>
<span class="line">  <span class="token property">max_lease_ttl_seconds</span>     <span class="token punctuation">=</span> <span class="token string">"720"</span></span>
<span class="line">  <span class="token property">address</span>                   <span class="token punctuation">=</span> <span class="token string">"https://<span class="token interpolation"><span class="token punctuation">$</span><span class="token punctuation">{</span><span class="token keyword">var</span><span class="token punctuation">.</span><span class="token type variable">nomad_addr</span><span class="token punctuation">}</span></span>"</span></span>
<span class="line">  <span class="token property">token</span>                     <span class="token punctuation">=</span> data.local_file.nomad_bootstrap.content</span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">#해당 role에 대해서는 배포를 위해 management 권한으로 설정합니다.</span></span>
<span class="line"><span class="token keyword">resource <span class="token type variable">"vault_nomad_secret_role"</span></span> <span class="token string">"nomad_role"</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token property">backend</span>   <span class="token punctuation">=</span> vault_nomad_secret_backend.config.backend</span>
<span class="line">  <span class="token property">role</span>      <span class="token punctuation">=</span> <span class="token string">"nomad_role"</span></span>
<span class="line">  <span class="token property">global</span>    <span class="token punctuation">=</span> <span class="token boolean">true</span></span>
<span class="line">  <span class="token property">type</span>      <span class="token punctuation">=</span> <span class="token string">"management"</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre></div><ol start="2">
<li>Vault gitlab jwt 연동</li>
</ol>
<ul>
<li>Gitlab CI에서 Vault의 인증인가를 받기 위해 JWT 연동을 진행합니다.
<ul>
<li>해당 auth의 role에 token policy는 1번에서 생성한 nomad secret engine의 접근 가능하게 설정합니다.</li>
</ul>
</li>
</ul>
<div class="language-hcl" data-highlighter="prismjs" data-ext="hcl" data-title="hcl"><pre class="language-hcl"><code><span class="line"><span class="token keyword">resource <span class="token type variable">"vault_jwt_auth_backend"</span></span> <span class="token string">"gitlab"</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token property">description</span> <span class="token punctuation">=</span> <span class="token string">"JWT Auth for GitLab"</span>  </span>
<span class="line">  <span class="token property">path</span>               <span class="token punctuation">=</span> <span class="token string">"gitlab-jwt"</span></span>
<span class="line">  <span class="token property">oidc_discovery_url</span> <span class="token punctuation">=</span> <span class="token string">"https://gitlab-url.url"</span></span>
<span class="line">  <span class="token property">bound_issuer</span>       <span class="token punctuation">=</span> <span class="token string">"https://gitlab-url.url"</span>  </span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">resource <span class="token type variable">"vault_policy"</span></span> <span class="token string">"nomad_mgmt"</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token property">name</span> <span class="token punctuation">=</span> <span class="token string">"nomad-mgmt"</span></span>
<span class="line"></span>
<span class="line">  <span class="token property">policy</span> <span class="token punctuation">=</span> <span class="token heredoc string">&lt;&lt;EOT</span>
<span class="line">path "nomad/creds/nomad_role" {</span>
<span class="line">  capabilities = ["read","create"]</span>
<span class="line">}</span>
<span class="line">path "nomad/creds/nomad_role/*" {</span>
<span class="line">  capabilities = ["read","create"]</span>
<span class="line">}</span>
<span class="line">EOT</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">#제 환경의 gitlab repository(project)의 id가 5입니다.</span></span>
<span class="line"><span class="token keyword">resource <span class="token type variable">"vault_jwt_auth_backend_role"</span></span> <span class="token string">"gitlab_role"</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token property">backend</span>            <span class="token punctuation">=</span> vault_jwt_auth_backend.gitlab.path</span>
<span class="line">  <span class="token property">role_name</span>          <span class="token punctuation">=</span> <span class="token string">"gitlab-role"</span></span>
<span class="line">  <span class="token property">role_type</span>          <span class="token punctuation">=</span> <span class="token string">"jwt"</span></span>
<span class="line">  <span class="token property">bound_audiences</span>    <span class="token punctuation">=</span> <span class="token punctuation">[</span><span class="token string">"https://gitlab-url.url"</span><span class="token punctuation">]</span></span>
<span class="line">  <span class="token property">user_claim</span>         <span class="token punctuation">=</span> <span class="token string">"user_email"</span></span>
<span class="line">  <span class="token property">token_policies</span>     <span class="token punctuation">=</span> <span class="token punctuation">[</span>vault_policy.nomad_mgmt.name<span class="token punctuation">]</span></span>
<span class="line">  <span class="token property">bound_claims</span> <span class="token punctuation">=</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token property">project_id</span> <span class="token punctuation">=</span> <span class="token string">"5"</span>,</span>
<span class="line">    <span class="token property">ref</span> <span class="token punctuation">=</span> <span class="token string">"main"</span>,</span>
<span class="line">    <span class="token property">ref_type</span> <span class="token punctuation">=</span> <span class="token string">"branch"</span></span>
<span class="line">  <span class="token punctuation">}</span>  </span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre></div><ol start="3">
<li>Gitlab-CI 설정</li>
</ol>
<ul>
<li>.gitlab-ci.yml 파일입니다.
<ul>
<li>파이프라인 전체는 아니며 Gitlab ci에서 Vault의 인증인가를 받고 Nomad Token을 활용하는 CD 단계로 보시면 됩니다.</li>
<li>bound_audiences에 기입 한 값 기준으로 체크 후 임시 Token을 발급받습니다.</li>
<li>jwt Token을 기반으로 미리 연동해 둔 gitlab-role에 대한 token을 받아옵니다.</li>
<li>gitlab-role token을 활용하여 Nomad token을 다음 stage로 넘겨줍니다.</li>
</ul>
</li>
</ul>
<div class="language-yaml" data-highlighter="prismjs" data-ext="yml" data-title="yml"><pre class="language-yaml"><code><span class="line"></span></code></pre></div>]]></content:encoded>
    </item>
    <item>
      <title>Vault로 Spring Boot 구성관리 Nomad Version</title>
      <link>https://docmoa.github.io/04-HashiCorp/07-Nomad/04-UseCase/spring-boot-with-vaultandNomad.html</link>
      <guid>https://docmoa.github.io/04-HashiCorp/07-Nomad/04-UseCase/spring-boot-with-vaultandNomad.html</guid>
      <source url="https://docmoa.github.io/rss.xml">Vault로 Spring Boot 구성관리 Nomad Version</source>
      <description>Vault로 Spring Boot 구성관리 Nomad Version token, app-role로 관리: docmoa aws-auth로 관리: docmoa Spring Boot에서는 Token, AppRole 외에도 AWS Auth를 통해 시크릿을 주입할 수 있습니다. AWS Auth 방식은 AWS IAM과 EC2 ...</description>
      <pubDate>Sun, 08 Sep 2024 11:26:38 GMT</pubDate>
      <content:encoded><![CDATA[
<blockquote>
<p>token, app-role로 관리: <a href="https://docmoa.github.io/04-HashiCorp/06-Vault/04-UseCase/spring-boot.html" target="_blank" rel="noopener noreferrer">docmoa</a></p>
</blockquote>
<blockquote>
<p>aws-auth로 관리: <a href="https://docmoa.github.io/04-HashiCorp/06-Vault/04-UseCase/spring-boot-with-vault.html" target="_blank" rel="noopener noreferrer">docmoa</a></p>
</blockquote>
<p>Spring Boot에서는 <strong>Token, AppRole</strong> 외에도 <strong>AWS Auth</strong>를 통해 시크릿을 주입할 수 있습니다. AWS Auth 방식은 <strong>AWS IAM과 EC2 Tag</strong>를 기반으로 인증 및 권한 부여 과정을 간소화하는 장점이 있습니다.</p>
<p>하지만 AWS Auth의 단점은 <strong>AWS에 종속</strong>된다는 점과, <strong>IAM 권한 설정</strong> 과정이 복잡해져 관리가 어려워질 수 있다는 것입니다. IAM 정책 및 권한을 잘못 설정하면 보안 취약점이 발생하거나 접근이 제대로 이루어지지 않는 문제를 겪을 수 있습니다.</p>
<p>그래서 이에 대한 해결책으로 <strong>Nomad를 통해 Vault와 통합하여 애플리케이션을 관리</strong>하는 방식을 제안드립니다. Nomad를 사용하면 애플리케이션의 배포와 Vault 인증, 권한 부여 과정이 Nomad와 Vault 간에만 처리되며, 개발자는 이를 신경 쓰지 않고 배포를 관리할 수 있습니다.</p>
<p>Nomad와 Vault의 통합을 통해 인증과 인가를 자동화하고 관리 복잡성을 줄이는 방법을 아래 테스트에서 함께 살펴보시죠.</p>
<p>먼저 아래 두가지 방식이 있을 것 같습니다.</p>
<ul>
<li>token만 치환하면 되는 상황</li>
<li>secret을 받아오고 Nomad job에 주입하는 방식</li>
</ul>
<p>처음 거는 Spring boot app으로 진행 할 것이며, 두번째는 keycloak env를 관리하는 것으로 진행하도록 하겠습니다.</p>
<ol>
<li>Vault Secret 설정</li>
</ol>
<ul>
<li>Vault Secret은 아래와 같이 설정했습니다.
<ul>
<li>vault_token_auth_backend_role.nomad_cluster에서는 Nomad Cluster의 적용 될 token의 role 설정입니다.</li>
<li>vault_policy.admin에서는 Nomad Cluster에서 token을 인증인가 받는 권한이 설정됩니다.</li>
<li>vault_policy.vault_and_spring에서는 Nomad job에서 사용 할 Secret의 Path의 권한을 설정합니다.</li>
<li>vault_kv_secret_v2.keycloak_env에서는 keycloak에서 사용되는 환경변수를 관리합니다.</li>
</ul>
</li>
</ul>
<div class="language-hcl" data-highlighter="prismjs" data-ext="hcl" data-title="hcl"><pre class="language-hcl"><code><span class="line"><span class="token comment">#Nomad Cluster의 적용 될 policy와 job에서 사용 될 policy를 role에 설정합니다.</span></span>
<span class="line"><span class="token keyword">resource <span class="token type variable">"vault_token_auth_backend_role"</span></span> <span class="token string">"nomad_cluster"</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token property">allowed_policies</span>        <span class="token punctuation">=</span> <span class="token punctuation">[</span>vault_policy.admin.name,vault_policy.vault_and_spring.name<span class="token punctuation">]</span></span>
<span class="line">  <span class="token property">orphan</span>                  <span class="token punctuation">=</span> <span class="token boolean">true</span></span>
<span class="line">  <span class="token property">token_period</span>            <span class="token punctuation">=</span> <span class="token number">94608000</span></span>
<span class="line">  <span class="token property">renewable</span>               <span class="token punctuation">=</span> <span class="token boolean">true</span></span>
<span class="line">  <span class="token property">token_explicit_max_ttl</span>  <span class="token punctuation">=</span> <span class="token number">0</span>    </span>
<span class="line">  <span class="token property">role_name</span>               <span class="token punctuation">=</span> <span class="token string">"nomad-admin"</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># Admin 정책 생성</span></span>
<span class="line"><span class="token keyword">resource <span class="token type variable">"vault_policy"</span></span> <span class="token string">"admin"</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token property">name</span> <span class="token punctuation">=</span> <span class="token string">"nomad-admin"</span></span>
<span class="line"></span>
<span class="line">  <span class="token property">policy</span> <span class="token punctuation">=</span> <span class="token heredoc string">&lt;&lt;EOT</span>
<span class="line"># Read system health check</span>
<span class="line">path "sys/health" {</span>
<span class="line">  capabilities = ["read", "sudo"]</span>
<span class="line">}</span>
<span class="line"></span>
<span class="line"># List existing policies</span>
<span class="line">path "sys/policies/acl" {</span>
<span class="line">  capabilities = ["list"]</span>
<span class="line">}</span>
<span class="line"></span>
<span class="line"># Create and manage ACL policies</span>
<span class="line">path "sys/policies/acl/*" {</span>
<span class="line">  capabilities = ["create", "read", "update", "delete", "list", "sudo"]</span>
<span class="line">}</span>
<span class="line"></span>
<span class="line"># Manage auth methods broadly across Vault</span>
<span class="line">path "auth/*" {</span>
<span class="line">  capabilities = ["create", "read", "update", "delete", "list", "sudo"]</span>
<span class="line">}</span>
<span class="line"></span>
<span class="line"># Create, update, and delete auth methods</span>
<span class="line">path "sys/auth/*" {</span>
<span class="line">  capabilities = ["create", "update", "delete", "sudo"]</span>
<span class="line">}</span>
<span class="line"></span>
<span class="line"># List auth methods</span>
<span class="line">path "sys/auth" {</span>
<span class="line">  capabilities = ["read"]</span>
<span class="line">}</span>
<span class="line"></span>
<span class="line"># List, create, update, and delete key/value secrets</span>
<span class="line">path "nomad-job/*" {</span>
<span class="line">  capabilities = ["create", "read", "update", "delete", "list", "sudo"]</span>
<span class="line">}</span>
<span class="line"></span>
<span class="line"># Manage secrets engines</span>
<span class="line">path "sys/mounts/*" {</span>
<span class="line">  capabilities = ["create", "read", "update", "delete", "list", "sudo"]</span>
<span class="line">}</span>
<span class="line"></span>
<span class="line"># List existing secrets engines.</span>
<span class="line">path "sys/mounts" {</span>
<span class="line">  capabilities = ["read"]</span>
<span class="line">}</span>
<span class="line">EOT</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">#application에서 접근 시 사용 되는 policy입니다.</span></span>
<span class="line"><span class="token keyword">resource <span class="token type variable">"vault_policy"</span></span> <span class="token string">"vault_and_spring"</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token property">name</span> <span class="token punctuation">=</span> <span class="token string">"vault_and_spring"</span></span>
<span class="line"></span>
<span class="line">  <span class="token property">policy</span> <span class="token punctuation">=</span> <span class="token heredoc string">&lt;&lt;EOT</span>
<span class="line">path "mzc-spring/data/java_and_vault" {</span>
<span class="line">  capabilities = ["read","update","create"]</span>
<span class="line">}</span>
<span class="line"></span>
<span class="line">path "mzc-spring/data/java_and_vault/dev" {</span>
<span class="line">  capabilities = ["read","update","create"]</span>
<span class="line">}</span>
<span class="line"></span>
<span class="line">EOT</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># Token 생성</span></span>
<span class="line"><span class="token keyword">resource <span class="token type variable">"vault_token"</span></span> <span class="token string">"admin_token"</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token property">policies</span>  <span class="token punctuation">=</span> <span class="token punctuation">[</span>vault_policy.admin.name<span class="token punctuation">]</span></span>
<span class="line">  <span class="token property">period</span>    <span class="token punctuation">=</span> <span class="token string">"36500h"</span> <span class="token comment"># 36500시간 (약 4년)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span class="token comment"># Vault에 KV secret engine 마운트</span></span>
<span class="line"><span class="token keyword">resource <span class="token type variable">"vault_mount"</span></span> <span class="token string">"nomad-job"</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token property">path</span>    <span class="token punctuation">=</span> <span class="token string">"nomad-job"</span></span>
<span class="line">  <span class="token property">type</span>    <span class="token punctuation">=</span> <span class="token string">"kv"</span></span>
<span class="line">  <span class="token property">options</span> <span class="token punctuation">=</span> <span class="token punctuation">{</span> <span class="token property">version</span> <span class="token punctuation">=</span> <span class="token string">"2"</span> <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># sample로 보게 될 keycloak secret 입니다.</span></span>
<span class="line"><span class="token keyword">resource <span class="token type variable">"vault_kv_secret_v2"</span></span> <span class="token string">"keycloak_env"</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token property">mount</span>               <span class="token punctuation">=</span> vault_mount.nomad-job.path</span>
<span class="line">  <span class="token property">name</span>                <span class="token punctuation">=</span> <span class="token string">"keycloak/config"</span></span>
<span class="line">  <span class="token property">cas</span>                 <span class="token punctuation">=</span> <span class="token number">1</span></span>
<span class="line">  <span class="token property">delete_all_versions</span> <span class="token punctuation">=</span> <span class="token boolean">false</span></span>
<span class="line">  <span class="token property">data_json</span> <span class="token punctuation">=</span> jsonencode(<span class="token punctuation">{</span></span>
<span class="line">    <span class="token property">KEYCLOAK_ADMIN</span>                   <span class="token punctuation">=</span> <span class="token string">"id"</span>,</span>
<span class="line">    <span class="token property">KEYCLOAK_ADMIN_PASSWORD</span>          <span class="token punctuation">=</span> <span class="token string">"passowrd"</span>,</span>
<span class="line">    <span class="token property">KEYCLOAK_BASE_URL</span>                <span class="token punctuation">=</span> <span class="token string">"/realms/master/hostname-debug"</span>,</span>
<span class="line">    <span class="token property">KC_HOSTNAME_DEBUG</span>                <span class="token punctuation">=</span> <span class="token boolean">true</span>,</span>
<span class="line">    <span class="token property">KC_HOSTNAME_STRICT</span>               <span class="token punctuation">=</span> <span class="token boolean">true</span>,</span>
<span class="line">    <span class="token property">KC_HOSTNAME</span>                      <span class="token punctuation">=</span> <span class="token string">"keycloak.domain"</span>,</span>
<span class="line">    <span class="token property">KC_HOSTNAME_STRICT_HTTPS</span>         <span class="token punctuation">=</span> <span class="token boolean">true</span>,</span>
<span class="line">    <span class="token property">KC_HTTP_ENABLED</span>                  <span class="token punctuation">=</span> <span class="token boolean">false</span>,</span>
<span class="line">    <span class="token property">KC_HTTPS_CERTIFICATE_FILE</span>        <span class="token punctuation">=</span> <span class="token string">"/etc/x509/https/keycloak.crt"</span>,</span>
<span class="line">    <span class="token property">KC_HTTPS_CERTIFICATE_KEY_FILE</span>    <span class="token punctuation">=</span> <span class="token string">"/etc/x509/https/keycloak.key"</span>,</span>
<span class="line">    <span class="token property">QUARKUS_HTTP_HOST</span>                <span class="token punctuation">=</span> <span class="token string">"0.0.0.0"</span></span>
<span class="line">  <span class="token punctuation">}</span>)</span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre></div><ol start="2">
<li>Nomad 설정</li>
</ol>
<ul>
<li>Nomad Server와 Client에 다음과 같은 설정이 추가됩니다.</li>
</ul>
<div class="language-hcl" data-highlighter="prismjs" data-ext="hcl" data-title="hcl"><pre class="language-hcl"><code><span class="line"><span class="token comment"># Nomad Server /etc/nomad.d/nomad.hcl</span></span>
<span class="line">...</span>
<span class="line"><span class="token keyword">vault</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token property">enabled</span> <span class="token punctuation">=</span> <span class="token boolean">true</span></span>
<span class="line">    <span class="token property">address</span> <span class="token punctuation">=</span> <span class="token string">"vault Server url:port"</span></span>
<span class="line">    <span class="token property">namespace</span> <span class="token punctuation">=</span> <span class="token string">"admin"</span></span>
<span class="line">    <span class="token property">create_from_role</span> <span class="token punctuation">=</span> <span class="token string">"nomad-admin"</span></span>
<span class="line">    <span class="token property">token</span> <span class="token punctuation">=</span> <span class="token string">"1번에서 생성한 token"</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line">...</span>
<span class="line"><span class="token comment"># Nomad Client /etc/nomad.d/nomad.hcl</span></span>
<span class="line"><span class="token keyword">vault</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token property">enabled</span>   <span class="token punctuation">=</span> <span class="token boolean">true</span></span>
<span class="line">  <span class="token property">address</span>   <span class="token punctuation">=</span> <span class="token string">"vault Server url:port"</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line">...</span>
<span class="line"></span></code></pre></div><ol start="3">
<li>Nomad job에서 Secret 설정</li>
</ol>
<ul>
<li>Nomad는 배포를 job이라는 형식을 통해서 배포합니다.</li>
<li>배포를 진행할때 Vault에 있는 Secret을 file화 하거나 환경변수에 넣을 수 있습니다.</li>
<li>keycloak app에서 어떤식으로 적용되는 지 같이 살펴보시죠.</li>
</ul>
<div class="language-text" data-highlighter="prismjs" data-ext="text" data-title="text"><pre class="language-text"><code><span class="line">job "keycloak" {</span>
<span class="line">  type = "service"</span>
<span class="line">  datacenters = ["dc1"]</span>
<span class="line"></span>
<span class="line">  group "keycloak" {</span>
<span class="line">    count = 1</span>
<span class="line">....................       </span>
<span class="line">    </span>
<span class="line">    task "keycloak" {</span>
<span class="line">      driver = "docker"</span>
<span class="line">  </span>
<span class="line">      config {</span>
<span class="line">        image = "quay.io/keycloak/keycloak:24.0.0"</span>
<span class="line">        args = ["start",</span>
<span class="line">        "--optimized",</span>
<span class="line">        "--https-port=9443"]</span>
<span class="line">        volumes = [</span>
<span class="line">          "local/keycloak.conf:/etc/keycloak.conf",</span>
<span class="line">        ] </span>
<span class="line">        ports = ["http"]</span>
<span class="line"></span>
<span class="line">      }</span>
<span class="line">      #Vault의 policy를 지정합니다.</span>
<span class="line">      vault {</span>
<span class="line">        policies  = ["nomad-admin"]</span>
<span class="line">        change_mode   = "signal"</span>
<span class="line">        change_signal = "SIGINT"</span>
<span class="line">      }</span>
<span class="line">      #데이터를 받아 올 secret의 path를 지정하고 모든 key, value를 key=value로 치환합니다.</span>
<span class="line">      template {</span>
<span class="line">        data = &lt;&lt;EOH</span>
<span class="line">    {{- with secret "nomad-job/data/keycloak/config" }}</span>
<span class="line">    {{- range $key, $value := .Data.data }}</span>
<span class="line">    {{ $key }}="{{ $value }}"</span>
<span class="line">    {{- end }}</span>
<span class="line">    {{- end }}</span>
<span class="line">    EOH</span>
<span class="line"></span>
<span class="line">        destination = "secrets/file.env"</span>
<span class="line">        env         = true</span>
<span class="line">     }      </span>
<span class="line">....................      </span>
<span class="line">  }</span>
<span class="line">}</span>
<span class="line"></span></code></pre></div><ol start="4">
<li>배포 확인</li>
</ol>
<ul>
<li>
<p>먼저 secret한 값들은 유저가 알지 못해야 하며, 확인도 할 수 없어야 합니다.</p>
</li>
<li>
<p>배포대상(container 또는 서버)에 접근한다면 확인이 가능합니다. 이 행위 자체는 이미 보안적인 이슈가 생긴 상황이나 긴급한 상황일 경우일 것입니다.</p>
</li>
<li>
<p>nomad ui에서는 env 파일을 읽을 수 없습니다.<br>
</p>
</li>
<li>
<p>nomad ui에서는 token 또한 읽을 수 없습니다.<br>
</p>
</li>
<li>
<p>Container에 다이렉트로 접근해야 만 env를 확인 할 수 있습니다.<br>
</p>
</li>
</ul>
<ol start="5">
<li>미리 Application에 Token만 주입하면 되는 상황</li>
</ol>
<ul>
<li>이미 <a href="https://docmoa.github.io/04-HashiCorp/06-Vault/04-UseCase/spring-boot.html" target="_blank" rel="noopener noreferrer">docmoa</a>에서 알아 본 Token방식의 인증 일 경우는 CI/CD에서 Token을 주입해야합니다.</li>
<li>만약 Nomad로 배포하면 이러한 Token 또한 Nomad가 주입, 로테이트까지 진행해줍니다.</li>
<li>keycloak sample과 다르게 매우 단순합니다. token만 주입하면 되기 때문입니다.</li>
<li>먼저 지난 yaml을 한번 더 확인해보겠습니다.</li>
</ul>
<div class="language-text" data-highlighter="prismjs" data-ext="text" data-title="text"><pre class="language-text"><code><span class="line">spring:</span>
<span class="line">  cloud:</span>
<span class="line">    vault:</span>
<span class="line">      host: vault_url</span>
<span class="line">      port: 8200</span>
<span class="line">      scheme: https</span>
<span class="line">      namespace: admin</span>
<span class="line">      authentication: TOKEN</span>
<span class="line">      application-name: java_and_vault</span>
<span class="line">      # VAULT_TOKEN이라는 환경변수의 Vault token만 있으면 됩니다.</span>
<span class="line">      token: ${VAULT_TOKEN:root}</span>
<span class="line">      # profiles: dev</span>
<span class="line">      generic:</span>
<span class="line">        enabled: false</span>
<span class="line">      kv:</span>
<span class="line">        enabled: true</span>
<span class="line">        backend: mzc-spring</span>
<span class="line">        profile-separator: /</span>
<span class="line"></span></code></pre></div><ul>
<li>
<p>spring.cloud.vault.token에 환경변수로 VAULT_TOKEN만 있으면 되는 상황입니다.</p>
</li>
<li>
<p>해당 토큰만 있다면 나머지 Secret은 spring.cloud.vault.kv.backend 설정에 따라 불러 올 수 있는 상황입니다.</p>
</li>
<li>
<p>다음은 Nomad job입니다.</p>
</li>
</ul>
<div class="language-text" data-highlighter="prismjs" data-ext="text" data-title="text"><pre class="language-text"><code><span class="line">job "vault_and_spring" {</span>
<span class="line">  type = "service"</span>
<span class="line">  datacenters = ["dc1"]</span>
<span class="line"></span>
<span class="line">  group "vault_and_spring" {</span>
<span class="line">    count = 1</span>
<span class="line">    </span>
<span class="line">    service {</span>
<span class="line">      name = "spring"</span>
<span class="line">      tags = ["vault","spring"]</span>
<span class="line">      provider = "nomad"</span>
<span class="line">      check {</span>
<span class="line">        type  = "tcp"</span>
<span class="line">        interval = "20s"</span>
<span class="line">        timeout  = "2s"</span>
<span class="line">        port  = "vault_and_spring"</span>
<span class="line">      }      </span>
<span class="line">    }</span>
<span class="line">    </span>
<span class="line">    network {</span>
<span class="line">      port "vault_and_spring" {</span>
<span class="line">        static  = 8081</span>
<span class="line">        to      = 8081</span>
<span class="line">      }</span>
<span class="line">    }</span>
<span class="line">    task "ecr-login" {</span>
<span class="line">      driver = "raw_exec"</span>
<span class="line"></span>
<span class="line">      config {</span>
<span class="line">        command = "/bin/bash"</span>
<span class="line">        args    = ["local/ecr-login.sh"]</span>
<span class="line">      }</span>
<span class="line">      template {</span>
<span class="line">        data = &lt;&lt;EOH</span>
<span class="line">aws ecr get-login-password --region ap-northeast-2 | docker login --username AWS --password-stdin account.dkr.ecr.ap-northeast-2.amazonaws.com</span>
<span class="line">cat /root/.docker/config.json</span>
<span class="line">EOH</span>
<span class="line">    destination = "local/ecr-login.sh"</span>
<span class="line">      }</span>
<span class="line"></span>
<span class="line">      resources {</span>
<span class="line">        cpu    = 100</span>
<span class="line">        memory = 256</span>
<span class="line">      }</span>
<span class="line"></span>
<span class="line">      lifecycle {</span>
<span class="line">        hook   = "prestart"</span>
<span class="line">        sidecar = false</span>
<span class="line">      }</span>
<span class="line">    }    </span>
<span class="line">      </span>
<span class="line">    task "vault_and_spring" {</span>
<span class="line">      driver = "docker"</span>
<span class="line">  </span>
<span class="line">      config {</span>
<span class="line">        image = "account.dkr.ecr.ap-northeast-2.amazonaws.com/vault_and_spring:latest"</span>
<span class="line">        args = ["--spring.profiles.active=dev"] </span>
<span class="line">        ports = ["vault_and_spring"]</span>
<span class="line">      }</span>
<span class="line">      #미리 생성한 Vault token을 기입해줍니다.</span>
<span class="line">      vault {</span>
<span class="line">        policies  = ["vault_and_spring"]</span>
<span class="line">        change_mode   = "signal"</span>
<span class="line">        change_signal = "SIGINT"</span>
<span class="line">      }      </span>
<span class="line">...................</span>
<span class="line">}</span>
<span class="line"></span></code></pre></div><ul>
<li>keycloak과는 다르게 secret을 env에 넣는 구문이 없습니다.</li>
</ul>
<ol start="6">
<li>적용 확인</li>
</ol>
<ul>
<li>배포 결과를 확인해봅시다.<br>
</li>
<li>이제는 익숙한 url과 db id, password가 잘 찍히고 있습니다.</li>
</ul>
]]></content:encoded>
    </item>
    <item>
      <title>Vault로 Spring Boot 구성관리 aws-auth Version</title>
      <link>https://docmoa.github.io/04-HashiCorp/06-Vault/04-UseCase/spring-boot-with-vault.html</link>
      <guid>https://docmoa.github.io/04-HashiCorp/06-Vault/04-UseCase/spring-boot-with-vault.html</guid>
      <source url="https://docmoa.github.io/rss.xml">Vault로 Spring Boot 구성관리 aws-auth Version</source>
      <description>Vault로 Spring Boot 구성관리 aws-auth Version token, app-role로 관리: docmoa Spring boot에서는 Token, App-role을 제외하고 aws-auth를 통해서도 Secret을 주입 할 수 있습니다. aws-auth에서는 다음의 두 기능을 지원합니다. AWS IA...</description>
      <pubDate>Wed, 04 Sep 2024 10:00:02 GMT</pubDate>
      <content:encoded><![CDATA[
<blockquote>
<p>token, app-role로 관리: <a href="https://docmoa.github.io/04-HashiCorp/06-Vault/04-UseCase/spring-boot.html" target="_blank" rel="noopener noreferrer">docmoa</a></p>
</blockquote>
<p>Spring boot에서는 Token, App-role을 제외하고 aws-auth를 통해서도 Secret을 주입 할 수 있습니다.<br>
aws-auth에서는 다음의 두 기능을 지원합니다.</p>
<ul>
<li>AWS IAM
<ul>
<li>EC2에 적용되는 AWS IAM Name을 기반으로 인증, 인가를 받고 Application이 <strong>실행</strong> 될 때 Secret을 주입합니다.</li>
</ul>
</li>
<li>EC2 Tag
<ul>
<li>EC2에 적용되는 AWS Tag Name의 Value 기반으로 인증, 인가를 받고 Application이 <strong>실행</strong> 될 때 Secret을 주입합니다.</li>
</ul>
</li>
</ul>
<p>두 기능에 대한 장점은 Spring boot의 공통 영역인 application.yaml의 token이나 app-role의 값이 노출되는 것을 방지할 수 있고, ci/cd 단계 또한 치환하는 과정이 줄어듭니다.</p>
<p>자세한 기능들은 아래의 설정을 보면서 알아보겠습니다.</p>
<ol>
<li>Vault Secret 설정</li>
</ol>
<ul>
<li>Vault Secret은 아래와 같이 설정했습니다.</li>
<li>여기서 생성하는 <strong>Secret Engine</strong>명과 <strong>KV Path</strong>명을 기준으로 자동화를 쉽게 할 수 있습니다.</li>
</ul>
<div class="language-hcl" data-highlighter="prismjs" data-ext="hcl" data-title="hcl"><pre class="language-hcl"><code><span class="line"><span class="token comment"># Vault Secret engine의 이름을 spring* application 이름과 동일하게 맞추면 조금 더 설정이 쉽습니다.</span></span>
<span class="line"><span class="token keyword">resource <span class="token type variable">"vault_mount"</span></span> <span class="token string">"kv_spring"</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token property">path</span>    <span class="token punctuation">=</span> <span class="token string">"java_and_vault"</span></span>
<span class="line">  <span class="token property">type</span>    <span class="token punctuation">=</span> <span class="token string">"kv"</span></span>
<span class="line">  <span class="token property">options</span> <span class="token punctuation">=</span> <span class="token punctuation">{</span> <span class="token property">version</span> <span class="token punctuation">=</span> <span class="token string">"2"</span> <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># secret engine path는 profile 명으로 지정한다면 조금 더 설정이 쉽습니다.</span></span>
<span class="line"><span class="token keyword">resource <span class="token type variable">"vault_kv_secret_v2"</span></span> <span class="token string">"kv_java_and_vault_dev"</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token property">mount</span>               <span class="token punctuation">=</span> vault_mount.kv_spring.path</span>
<span class="line">  <span class="token property">name</span>                <span class="token punctuation">=</span> <span class="token string">"dev"</span></span>
<span class="line">  <span class="token property">cas</span>                 <span class="token punctuation">=</span> <span class="token number">1</span></span>
<span class="line">  <span class="token property">delete_all_versions</span> <span class="token punctuation">=</span> <span class="token boolean">false</span></span>
<span class="line">  <span class="token property">data_json</span> <span class="token punctuation">=</span> jsonencode(<span class="token punctuation">{</span></span>
<span class="line">    <span class="token property">"cloud.aws.s3.accessKey"</span>     <span class="token punctuation">=</span> <span class="token string">"aws_access"</span>,</span>
<span class="line">    <span class="token property">"cloud.aws.s3.bucket"</span>        <span class="token punctuation">=</span> <span class="token string">"gc-vault-test"</span>,</span>
<span class="line">    <span class="token property">"cloud.aws.s3.region"</span>        <span class="token punctuation">=</span> <span class="token string">"ap-northeast-2"</span>,</span>
<span class="line">    <span class="token property">"cloud.aws.s3.secretKey"</span>     <span class="token punctuation">=</span> <span class="token string">"aws_secret"</span>,</span>
<span class="line">    <span class="token property">"spring.datasource.password"</span> <span class="token punctuation">=</span> <span class="token string">"password"</span>,</span>
<span class="line">    <span class="token property">"spring.datasource.url"</span>      <span class="token punctuation">=</span> <span class="token string">"db_url"</span>,</span>
<span class="line">    <span class="token property">"spring.datasource.username"</span> <span class="token punctuation">=</span> <span class="token string">"username"</span></span>
<span class="line">  <span class="token punctuation">}</span>)</span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre></div><ol start="2">
<li>Vault AWS-Auth 설정 (IAM, EC2-Tag)</li>
</ol>
<ul>
<li>aws_spring_boot_iam
<ul>
<li>iam 기준으로 인증하는 aws-auth role입니다.</li>
<li>미리 생성한 aws iam을 "bound_iam_role_arns"에 명시합니다.</li>
</ul>
</li>
<li>aws_spring_boot_ec2
<ul>
<li>ec2 tag 기준으로 인증하는 aws-auth role입니다.</li>
<li>ec2에 tag key로 "role_tag" value로는 output인 "vault_ec2_tag"에 값을 입력합니다.</li>
</ul>
</li>
</ul>
<div class="language-hcl" data-highlighter="prismjs" data-ext="hcl" data-title="hcl"><pre class="language-hcl"><code><span class="line"><span class="token keyword">resource <span class="token type variable">"vault_policy"</span></span> <span class="token string">"policy_spring_boot"</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token property">name</span> <span class="token punctuation">=</span> <span class="token string">"spring-boot-vault"</span></span>
<span class="line"></span>
<span class="line">  <span class="token property">policy</span> <span class="token punctuation">=</span> <span class="token heredoc string">&lt;&lt;EOT</span>
<span class="line">path "${vault_mount.kv_spring.path}/data/java_and_vault" {</span>
<span class="line">  capabilities = ["read"]</span>
<span class="line">}</span>
<span class="line"></span>
<span class="line">path "${vault_mount.kv_spring.path}/data/java_and_vault/dev" {</span>
<span class="line">  capabilities = ["read"]</span>
<span class="line">}</span>
<span class="line">EOT</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">resource <span class="token type variable">"vault_auth_backend"</span></span> <span class="token string">"aws"</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token property">type</span> <span class="token punctuation">=</span> <span class="token string">"aws"</span></span>
<span class="line">  <span class="token property">path</span> <span class="token punctuation">=</span> <span class="token string">"aws"</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">resource <span class="token type variable">"vault_aws_auth_backend_role"</span></span> <span class="token string">"aws_spring_boot_iam"</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token property">backend</span>   <span class="token punctuation">=</span> vault_auth_backend.aws.path</span>
<span class="line">  <span class="token property">role</span>      <span class="token punctuation">=</span> <span class="token string">"aws-spring-boot-iam"</span></span>
<span class="line">  <span class="token property">auth_type</span> <span class="token punctuation">=</span> <span class="token string">"iam"</span></span>
<span class="line">  <span class="token property">bound_iam_role_arns</span> <span class="token punctuation">=</span> <span class="token punctuation">[</span></span>
<span class="line">    <span class="token string">"arn:aws:iam::accountID:role/vault_role"</span></span>
<span class="line">  <span class="token punctuation">]</span></span>
<span class="line">  <span class="token property">inferred_entity_type</span> <span class="token punctuation">=</span> <span class="token string">"ec2_instance"</span></span>
<span class="line">  <span class="token property">inferred_aws_region</span>  <span class="token punctuation">=</span> <span class="token string">"ap-northeast-2"</span></span>
<span class="line">  <span class="token property">token_policies</span>       <span class="token punctuation">=</span> <span class="token punctuation">[</span><span class="token string">"<span class="token interpolation"><span class="token punctuation">$</span><span class="token punctuation">{</span>vault_policy<span class="token punctuation">.</span>policy_spring_boot<span class="token punctuation">.</span>name<span class="token punctuation">}</span></span>"</span><span class="token punctuation">]</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">resource <span class="token type variable">"vault_aws_auth_backend_role"</span></span> <span class="token string">"aws_spring_boot_ec2"</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token property">backend</span>           <span class="token punctuation">=</span> vault_auth_backend.aws.path</span>
<span class="line">  <span class="token property">role</span>              <span class="token punctuation">=</span> <span class="token string">"aws-spring-boot-ec2"</span></span>
<span class="line">  <span class="token property">auth_type</span>         <span class="token punctuation">=</span> <span class="token string">"ec2"</span></span>
<span class="line">  <span class="token property">bound_account_ids</span> <span class="token punctuation">=</span> <span class="token punctuation">[</span><span class="token string">"accountID"</span><span class="token punctuation">]</span></span>
<span class="line">  <span class="token property">role_tag</span>          <span class="token punctuation">=</span> <span class="token string">"svc_type"</span></span>
<span class="line">  <span class="token property">token_policies</span>    <span class="token punctuation">=</span> <span class="token punctuation">[</span><span class="token string">"<span class="token interpolation"><span class="token punctuation">$</span><span class="token punctuation">{</span>vault_policy<span class="token punctuation">.</span>policy_spring_boot<span class="token punctuation">.</span>name<span class="token punctuation">}</span></span>"</span><span class="token punctuation">]</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">resource <span class="token type variable">"vault_aws_auth_backend_role_tag"</span></span> <span class="token string">"aws_spring_boot_ec2_tag"</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token property">backend</span> <span class="token punctuation">=</span> vault_auth_backend.aws.path</span>
<span class="line">  <span class="token property">role</span>    <span class="token punctuation">=</span> vault_aws_auth_backend_role.aws_spring_boot_ec2.role</span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">output<span class="token type variable"> "vault_ec2_tag" </span></span><span class="token punctuation">{</span></span>
<span class="line">  <span class="token property">value</span> <span class="token punctuation">=</span> vault_aws_auth_backend_role_tag.aws_spring_boot_ec2_tag.tag_value</span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre></div><ol start="3">
<li>공통영역 (AWS-IAM)</li>
</ol>
<ul>
<li>application.yaml 파일입니다.</li>
<li>아래와 같이 datasource와 aws 접근 정보를 생략한다고 해도 제 데이터는 Vault Secret Engine Path의 key명 기준으로 Value값을 치환합니다.</li>
<li>ex)s3 접근하는 accesskey는 "cloud.aws.s3.accessKey"의 Value 값인 "aws_access"를 치환합니다.</li>
</ul>
<div class="language-yaml" data-highlighter="prismjs" data-ext="yml" data-title="yml"><pre class="language-yaml"><code><span class="line"><span class="token key atrule">spring</span><span class="token punctuation">:</span></span>
<span class="line">  <span class="token key atrule">thymeleaf</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token key atrule">check-template-location</span><span class="token punctuation">:</span> <span class="token boolean important">true</span></span>
<span class="line">    <span class="token key atrule">prefix</span><span class="token punctuation">:</span> classpath<span class="token punctuation">:</span>/templates/</span>
<span class="line">    <span class="token key atrule">suffix</span><span class="token punctuation">:</span> .html</span>
<span class="line">    <span class="token key atrule">mode</span><span class="token punctuation">:</span> HTML</span>
<span class="line">    <span class="token key atrule">encoding</span><span class="token punctuation">:</span> UTF<span class="token punctuation">-</span><span class="token number">8</span></span>
<span class="line">    <span class="token key atrule">content-type</span><span class="token punctuation">:</span> text/html</span>
<span class="line">    <span class="token key atrule">cache</span><span class="token punctuation">:</span> <span class="token boolean important">false</span></span>
<span class="line">  <span class="token key atrule">devtools</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token key atrule">livereload</span><span class="token punctuation">:</span></span>
<span class="line">      <span class="token key atrule">enabled</span><span class="token punctuation">:</span> <span class="token boolean important">true</span></span>
<span class="line">  <span class="token key atrule">cloud</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token key atrule">vault</span><span class="token punctuation">:</span></span>
<span class="line">      <span class="token key atrule">host</span><span class="token punctuation">:</span> vault_URL</span>
<span class="line">      <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">8200</span></span>
<span class="line">      <span class="token key atrule">scheme</span><span class="token punctuation">:</span> https</span>
<span class="line">      <span class="token key atrule">namespace</span><span class="token punctuation">:</span> admin</span>
<span class="line">      <span class="token comment">#인증은 AWS IAM으로 합니다.</span></span>
<span class="line">      <span class="token key atrule">authentication</span><span class="token punctuation">:</span> AWS_IAM</span>
<span class="line">      <span class="token key atrule">aws-iam</span><span class="token punctuation">:</span></span>
<span class="line">        <span class="token key atrule">aws-path</span><span class="token punctuation">:</span> aws</span>
<span class="line">        <span class="token comment">#위에서 Vault에서 만든 role을 명시합니다.</span></span>
<span class="line">        <span class="token key atrule">role</span><span class="token punctuation">:</span> aws<span class="token punctuation">-</span>spring<span class="token punctuation">-</span>boot<span class="token punctuation">-</span>iam</span>
<span class="line">        <span class="token key atrule">endpoint-uri</span><span class="token punctuation">:</span> https<span class="token punctuation">:</span>//sts.ap<span class="token punctuation">-</span>northeast<span class="token punctuation">-</span>2.amazonaws.com</span>
<span class="line">      <span class="token key atrule">config</span><span class="token punctuation">:</span></span>
<span class="line">        <span class="token key atrule">lifecycle</span><span class="token punctuation">:</span></span>
<span class="line">          <span class="token key atrule">enabled</span><span class="token punctuation">:</span> <span class="token boolean important">true</span></span>
<span class="line">          <span class="token key atrule">min-renewal</span><span class="token punctuation">:</span> 10s</span>
<span class="line">          <span class="token key atrule">renew-interval</span><span class="token punctuation">:</span> 10s</span>
<span class="line">      <span class="token key atrule">kv</span><span class="token punctuation">:</span></span>
<span class="line">        <span class="token key atrule">enabled</span><span class="token punctuation">:</span> <span class="token boolean important">true</span></span>
<span class="line">        <span class="token key atrule">backend</span><span class="token punctuation">:</span> kv_example</span>
<span class="line">        <span class="token key atrule">profile-separator</span><span class="token punctuation">:</span> /</span>
<span class="line">      <span class="token key atrule">application-name</span><span class="token punctuation">:</span> java_and_vault</span>
<span class="line">      <span class="token key atrule">profiles</span><span class="token punctuation">:</span> dev</span>
<span class="line">      <span class="token key atrule">generic</span><span class="token punctuation">:</span></span>
<span class="line">        <span class="token key atrule">enabled</span><span class="token punctuation">:</span> <span class="token boolean important">false</span></span>
<span class="line"></span>
<span class="line">  <span class="token key atrule">config</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token key atrule">import</span><span class="token punctuation">:</span> vault<span class="token punctuation">:</span>//</span>
<span class="line"></span></code></pre></div><ol start="4">
<li>공통영역 (AWS-EC2-Tag)</li>
</ol>
<ul>
<li>application.yaml 파일입니다.</li>
<li>아래와 같이 datasource와 aws 접근 정보를 생략한다고 해도 제 데이터는 Vault Secret Engine Path의 key명 기준으로 Value값을 치환합니다.</li>
<li>ex)s3 접근하는 accesskey는 "cloud.aws.s3.accessKey"의 Value 값인 "aws_access"를 치환합니다.</li>
</ul>
<div class="hint-container warning">
<p class="hint-container-title">경고</p>
<p>nonce는 application의 인식값입니다. 지정하지 않고 해당 ec2에서 실행된다면 다음의 명령어로 확인하여야 합니다.</p>
<div class="language-bash" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="line"><span class="token comment">#vault read auth/ung/identity-accesslist/instance-id</span></span>
<span class="line">$ vault <span class="token builtin class-name">read</span> auth/ung/identity-accesslist/i-044a58e2f2c812e70</span>
<span class="line"></span>
<span class="line">Key                          Value</span>
<span class="line"></span></code></pre></div></div>
]]></content:encoded>
    </item>
    <item>
      <title>Vault 사설 인증서 관리 테스트</title>
      <link>https://docmoa.github.io/04-HashiCorp/06-Vault/06-Config/vault-cert-test.html</link>
      <guid>https://docmoa.github.io/04-HashiCorp/06-Vault/06-Config/vault-cert-test.html</guid>
      <source url="https://docmoa.github.io/rss.xml">Vault 사설 인증서 관리 테스트</source>
      <description>Vault 사설 인증서 관리 테스트</description>
      <pubDate>Sat, 31 Aug 2024 05:01:41 GMT</pubDate>
      <content:encoded><![CDATA[
<ul>
<li><a href="#vault%EC%9D%B8%EC%A6%9D%EC%84%9C-%EC%82%AC%EC%A0%84%EC%A4%80%EB%B9%84%EC%82%AC%ED%95%AD">사전 준비 사항</a></li>
<li><a href="#vault%EC%9D%B8%EC%A6%9D%EC%84%9C-1.vault%EC%82%AC%EC%84%A4%EC%9D%B8%EC%A6%9D%EC%84%9C%EB%A7%8C%EB%93%A4%EA%B8%B0">1. Vault 사설 인증서 만들기</a>
<ul>
<li><a href="#vault%EC%9D%B8%EC%A6%9D%EC%84%9C-1.1%ED%99%98%EA%B2%BD%EB%B3%80%EC%88%98%EC%84%A4%EC%A0%95">1.1 환경 변수 설정</a>
<ul>
<li><a href="#vault%EC%9D%B8%EC%A6%9D%EC%84%9C-1.1.1kubernetes%EC%97%90%EC%84%9C%EC%84%9C%EB%AA%85%ED%95%A0%ED%82%A4%EC%83%9D%EC%84%B1">1.1.1 Kubernetes에서 서명할 키 생성</a></li>
<li><a href="#vault%EC%9D%B8%EC%A6%9D%EC%84%9C-1.1.2%EC%9D%B8%EC%A6%9D%EC%84%9C%EC%84%9C%EB%AA%85%EC%9A%94%EC%B2%AD(csr)%EC%9D%84%EC%83%9D%EC%84%B1">1.1.2 인증서 서명 요청(CSR)을 생성</a></li>
<li><a href="#vault%EC%9D%B8%EC%A6%9D%EC%84%9C-1.1.3csr%EC%9D%84%EC%83%9D%EC%84%B1">1.1.3 CSR을 생성</a></li>
<li><a href="#vault%EC%9D%B8%EC%A6%9D%EC%84%9C-1.1.4csr.yaml%EC%83%9D%EC%84%B1">1.1.4 csr.yaml 생성</a></li>
<li><a href="#vault%EC%9D%B8%EC%A6%9D%EC%84%9C-1.1.5csr.yaml%EB%B0%B0%ED%8F%AC">1.1.5 csr.yaml 배포</a></li>
<li><a href="#vault%EC%9D%B8%EC%A6%9D%EC%84%9C-1.1.6csr%EC%9D%84%EC%8A%B9%EC%9D%B8%EC%9A%94%EC%B2%AD">1.1.6 CSR을 승인 요청</a></li>
<li><a href="#vault%EC%9D%B8%EC%A6%9D%EC%84%9C-1.1.7%EC%8A%B9%EC%9D%B8%EC%83%81%ED%83%9C%ED%99%95%EC%9D%B8">1.1.7 승인 상태 확인</a></li>
</ul>
</li>
</ul>
</li>
<li><a href="#vault%EC%9D%B8%EC%A6%9D%EC%84%9C-2.%ED%82%A4,%EC%9D%B8%EC%A6%9D%EC%84%9C%EB%B0%8Fkubernetesca%EB%A5%BCkubernetessecret%EC%A0%80%EC%9E%A5">2. 키, 인증서 및 Kubernetes CA를 Kubernetes secret 저장</a>
<ul>
<li><a href="#vault%EC%9D%B8%EC%A6%9D%EC%84%9C-2.1crt%ED%8C%8C%EC%9D%BC%EC%83%9D%EC%84%B1">2.1 crt 파일 생성</a></li>
<li><a href="#vault%EC%9D%B8%EC%A6%9D%EC%84%9C-2.2%EC%BF%A0%EB%B2%84%EB%84%A4%ED%8B%B0%EC%8A%A4ca%EC%84%A4%EC%A0%95%ED%8C%8C%EC%9D%BC">2.2 쿠버네티스 ca 설정 파일</a></li>
<li><a href="#vault%EC%9D%B8%EC%A6%9D%EC%84%9C-2.3key,crt,ca%EC%9D%B8%EC%A6%9D%EC%84%9C%EC%8B%9C%ED%81%AC%EB%A6%BF%EC%83%9D%EC%84%B1">2.3 key, crt, ca 인증서 시크릿 생성</a></li>
</ul>
</li>
<li><a href="#vault%EC%9D%B8%EC%A6%9D%EC%84%9C-3.vaulttls%EC%9D%B8%EC%A6%9D%EC%84%9C%EC%A0%81%EC%9A%A9">3. Vault tls 인증서 적용</a>
<ul>
<li><a href="#vault%EC%9D%B8%EC%A6%9D%EC%84%9C-3.1helmvalues.yaml%ED%8C%8C%EC%9D%BC">3.1 helm values.yaml 파일</a></li>
<li><a href="#vault%EC%9D%B8%EC%A6%9D%EC%84%9C-3.2awsnlb%EB%A5%BC%ED%86%B5%ED%95%B4%EC%A0%91%EA%B7%BC%EC%9D%B8%EC%A6%9D%EC%84%9C%ED%99%95%EC%9D%B8">3.2 AWS NLB를 통해 접근 인증서 확인</a></li>
<li><a href="#vault%EC%9D%B8%EC%A6%9D%EC%84%9C-3.3acm%EC%9D%B8%EC%A6%9D%EC%84%9C%EB%A5%BC%ED%86%B5%ED%95%B4%EC%A0%91%EA%B7%BC">3.3 ACM 인증서를 통해 접근</a>
<ul>
<li><a href="#vault%EC%9D%B8%EC%A6%9D%EC%84%9C-3.3.1route53%EC%84%A4%EC%A0%95">3.3.1 Route53 설정</a></li>
<li><a href="#vault%EC%9D%B8%EC%A6%9D%EC%84%9C-3.3.2%EB%A0%88%EC%BD%94%EB%93%9C%EC%83%9D%EC%84%B1">3.3.2 레코드 생성</a></li>
<li><a href="#vault%EC%9D%B8%EC%A6%9D%EC%84%9C-3.3.3%EB%A0%88%EC%BD%94%EB%93%9C%EC%84%A4%EC%A0%95">3.3.3 레코드 설정</a></li>
<li><a href="#vault%EC%9D%B8%EC%A6%9D%EC%84%9C-3.3.4aws%EC%9D%B8%EC%A6%9D%EC%84%9C%EB%A5%BC%ED%86%B5%ED%95%B4vaultui%EC%A0%91%EA%B7%BC">3.3.4 AWS 인증서를 통해 Vault UI 접근</a></li>
</ul>
</li>
</ul>
</li>
<li><a href="#vault%EC%9D%B8%EC%A6%9D%EC%84%9C-4.awsprivateca%EB%A5%BC%EC%82%AC%EC%9A%A9%ED%95%98%EB%8A%94%EC%9D%B8%EC%A6%9D%EC%84%9C%EC%83%9D%EC%84%B1">4. AWS Private Ca를 사용 하는 인증서 생성</a>
<ul>
<li><a href="#vault%EC%9D%B8%EC%A6%9D%EC%84%9C-4.1%EC%82%AC%EC%A0%84%EC%A4%80%EB%B9%84%EC%9A%94%EA%B1%B4">4.1 사전 준비 요건</a></li>
<li><a href="#vault%EC%9D%B8%EC%A6%9D%EC%84%9C-4.2acm%EC%9D%B8%EC%A6%9D%EC%84%9C%EC%83%9D%EC%84%B1">4.2 ACM 인증서 생성</a></li>
</ul>
</li>
<li><a href="#vault%EC%9D%B8%EC%A6%9D%EC%84%9C-5.awsprivateca%EA%B8%B0%EB%B0%98%EC%9C%BC%EB%A1%9C%EC%83%9D%EC%84%B1%EB%90%9C%EC%9D%B8%EC%A6%9D%EC%84%9C%EB%A5%BCvault%EC%97%90%EC%A0%81%EC%9A%A9">5. AWS Private Ca 기반으로 생성 된 인증서를 Vault에 적용</a></li>
<li><a href="#vault%EC%9D%B8%EC%A6%9D%EC%84%9C-%EA%B2%B0%EB%A1%A0">결론</a>
<ul>
<li><a href="#vault%EC%9D%B8%EC%A6%9D%EC%84%9C-%EC%A7%84%ED%96%89%EB%B0%A9%EC%8B%9D">진행 방식</a></li>
<li><a href="#vault%EC%9D%B8%EC%A6%9D%EC%84%9C-%EB%8C%80%EC%95%88">대안</a></li>
</ul>
</li>
</ul>
<h1><a class="header-anchor" href="#사전-준비-사항"><span></span></a><a name="vault인증서-사전준비사항"></a><strong>사전 준비 사항</strong></h1>
<ul>
<li>k8s 환경
<ul>
<li>NLB 설치</li>
<li>AWS ENS CSI Driver</li>
<li>AWS Load Balancer Controller</li>
</ul>
</li>
<li>Vault 라이선스</li>
</ul>
<div class="language-text" data-highlighter="prismjs" data-ext="text" data-title="text"><pre class="language-text"><code><span class="line">touch vault.hclic =&gt; vault 라이센스 내용 첨부</span>
<span class="line"></span>
<span class="line">vaultsecret=$(cat vault.hclic)</span>
<span class="line"></span>
<span class="line">kubectl create secret generic vault-ent-license --from-literal="license=${vaultsecret}"</span>
<span class="line"></span></code></pre></div><ul>
<li>eks 자격증명 secret 생성</li>
</ul>
<div class="language-text" data-highlighter="prismjs" data-ext="text" data-title="text"><pre class="language-text"><code><span class="line">kubectl create secret generic eks-creds \</span>
<span class="line">    --from-literal=AWS_ACCESS_KEY_ID="[AWS_ACCESS_KEY_ID]" \</span>
<span class="line">    --from-literal=AWS_SECRET_ACCESS_KEY="[AWS_SECRET_ACCESS_KEY]"</span>
<span class="line"></span></code></pre></div><ul>
<li>helm 설치 및 vault repo add</li>
</ul>
<div class="language-text" data-highlighter="prismjs" data-ext="text" data-title="text"><pre class="language-text"><code><span class="line">curl https://raw.githubusercontent.com/helm/helm/master/scripts/get-helm-3 &gt; get_helm.sh</span>
<span class="line">chmod 700 get_helm.sh</span>
<span class="line">./get_helm.sh</span>
<span class="line"></span>
<span class="line">curl -L https://git.io/get_helm.sh | bash -s -- --version v3.8.2</span>
<span class="line"></span>
<span class="line"></span>
<span class="line">helm repo add hashicorp https://helm.releases.hashicorp.com</span>
<span class="line">helm repo list</span>
<span class="line"></span></code></pre></div><div class="hint-container caution">
<p class="hint-container-title">위험</p>
<ul>
<li>AWS Private CA 요금<br>
참조: <a href="https://aws.amazon.com/ko/private-ca/pricing/" target="_blank" rel="noopener noreferrer">https://aws.amazon.com/ko/private-ca/pricing/</a></li>
</ul>
</div>
<h1><a class="header-anchor" href="#_1-vault-사설-인증서-만들기"><span></span></a><a name="vault인증서-1.vault사설인증서만들기"></a><strong>1. Vault 사설 인증서 만들기</strong></h1>
<h2><a class="header-anchor" href="#_1-1-환경-변수-설정"><span></span></a><a name="vault인증서-1.1환경변수설정"></a><strong>1.1 환경 변수 설정</strong></h2>
<div class="language-text" data-highlighter="prismjs" data-ext="text" data-title="text"><pre class="language-text"><code><span class="line"># SERVICE is the name of the Vault service in Kubernetes.</span>
<span class="line">export SERVICE=vault</span>
<span class="line"></span>
<span class="line"># NAMESPACE where the Vault service is running.</span>
<span class="line">export NAMESPACE=default</span>
<span class="line"></span>
<span class="line"># SECRET_NAME to create in the Kubernetes secrets store.</span>
<span class="line">export SECRET_NAME=vault-tls</span>
<span class="line"></span>
<span class="line"># TMPDIR is a temporary working directory.</span>
<span class="line">export TMPDIR=/home/ec2-user/tls-vault</span>
<span class="line"></span>
<span class="line"># certificate request</span>
<span class="line">export CSR_NAME=vault-csr</span>
<span class="line"></span>
<span class="line"></span></code></pre></div><h3><a class="header-anchor" href="#_1-1-1-kubernetes에서-서명할-키-생성"><span></span></a><a name="vault인증서-1.1.1kubernetes에서서명할키생성"></a><strong>1.1.1 Kubernetes에서 서명할 키 생성</strong></h3>
<div class="language-text" data-highlighter="prismjs" data-ext="text" data-title="text"><pre class="language-text"><code><span class="line">openssl genrsa -out ${TMPDIR}/vault.key 2048</span>
<span class="line"></span></code></pre></div><h3><a class="header-anchor" href="#_1-1-2-인증서-서명-요청-csr-을-생성"><span></span></a><a name="vault인증서-1.1.2인증서서명요청(csr)을생성"></a><strong>1.1.2 인증서 서명 요청(CSR)을 생성</strong></h3>
<div class="language-text" data-highlighter="prismjs" data-ext="text" data-title="text"><pre class="language-text"><code><span class="line">cat &lt;&lt;EOF &gt;${TMPDIR}/csr.conf</span>
<span class="line"></span>
<span class="line">[req]</span>
<span class="line">default_bits = 2048</span>
<span class="line">prompt = no</span>
<span class="line">encrypt_key = yes</span>
<span class="line">default_md = sha256</span>
<span class="line">req_extensions = v3_req</span>
<span class="line">distinguished_name = req_distinguished_name</span>
<span class="line">[req_distinguished_name]</span>
<span class="line">emailAddress = admin@admin.dev</span>
<span class="line">CN = ${SERVICE}.${NAMESPACE}.svc</span>
<span class="line">[ v3_req ]</span>
<span class="line">basicConstraints = CA:FALSE</span>
<span class="line">keyUsage = nonRepudiation, digitalSignature, keyEncipherment</span>
<span class="line">extendedKeyUsage = serverAuth</span>
<span class="line">subjectAltName = @alt_names</span>
<span class="line">[alt_names]</span>
<span class="line">DNS.1 = ${SERVICE}</span>
<span class="line">DNS.2 = ${SERVICE}.${NAMESPACE}</span>
<span class="line">DNS.3 = ${SERVICE}.${NAMESPACE}.svc</span>
<span class="line">DNS.4 = ${SERVICE}.${NAMESPACE}.svc.cluster.local</span>
<span class="line">DNS.5 = \*.vault-internal</span>
<span class="line">IP.1 = 127.0.0.1</span>
<span class="line">EOF</span>
<span class="line"></span></code></pre></div><h3><a class="header-anchor" href="#_1-1-3-csr을-생성"><span></span></a><a name="vault인증서-1.1.3csr을생성"></a><strong>1.1.3 CSR을 생성</strong></h3>
<div class="language-text" data-highlighter="prismjs" data-ext="text" data-title="text"><pre class="language-text"><code><span class="line">openssl req -config ${TMPDIR}/csr.conf -new -key ${TMPDIR}/vault.key -subj "/CN=${SERVICE}.${NAMESPACE}.svc" -out ${TMPDIR}/server.csr</span>
<span class="line"></span></code></pre></div><h3><a class="header-anchor" href="#_1-1-4-csr-yaml-생성"><span></span></a><a name="vault인증서-1.1.4csr.yaml생성"></a><strong>1.1.4 csr.yaml 생성</strong></h3>
<div class="hint-container warning">
<p class="hint-container-title">경고</p>
<figure><figcaption></figcaption></figure>
</div>
<div class="language-text" data-highlighter="prismjs" data-ext="text" data-title="text"><pre class="language-text"><code><span class="line">cat &lt;&lt;EOF &gt;${TMPDIR}/csr.yaml</span>
<span class="line"></span>
<span class="line">apiVersion: certificates.k8s.io/v1</span>
<span class="line">kind: CertificateSigningRequest</span>
<span class="line">metadata:</span>
<span class="line">   name: ${CSR_NAME}</span>
<span class="line">spec:</span>
<span class="line">   groups:</span>
<span class="line">   - system:authenticated</span>
<span class="line">   request: $(cat ${TMPDIR}/server.csr | base64 | tr -d '\n')</span>
<span class="line">   signerName: beta.eks.amazonaws.com/app-serving</span>
<span class="line">   usages:</span>
<span class="line">   - digital signature</span>
<span class="line">   - key encipherment</span>
<span class="line">   - server auth</span>
<span class="line">EOF</span>
<span class="line"></span></code></pre></div><h3><a class="header-anchor" href="#_1-1-5-csr-yaml-배포"><span></span></a><a name="vault인증서-1.1.5csr.yaml배포"></a><strong>1.1.5 csr.yaml 배포</strong></h3>
<div class="language-text" data-highlighter="prismjs" data-ext="text" data-title="text"><pre class="language-text"><code><span class="line">kubectl create -f ${TMPDIR}/csr.yaml</span>
<span class="line"></span>
<span class="line">- 승인(approve)이 되기 전까지 상태는 pending</span>
<span class="line"></span></code></pre></div><h3><a class="header-anchor" href="#_1-1-6-csr을-승인-요청"><span></span></a><a name="vault인증서-1.1.6csr을승인요청"></a><strong>1.1.6 CSR을 승인 요청</strong></h3>
<div class="language-text" data-highlighter="prismjs" data-ext="text" data-title="text"><pre class="language-text"><code><span class="line">kubectl certificate approve ${CSR_NAME}</span>
<span class="line"></span></code></pre></div><h3><a class="header-anchor" href="#_1-1-7-승인-상태-확인"><span></span></a><a name="vault인증서-1.1.7승인상태확인"></a><strong>1.1.7 승인 상태 확인</strong></h3>
<figure><figcaption></figcaption></figure>
<h1><a class="header-anchor" href="#_2-키-인증서-및-kubernetes-ca를-kubernetes-secret-저장"><span></span></a><a name="vault인증서-2.키,인증서및kubernetesca를kubernetessecret저장"></a><strong>2. 키, 인증서 및 Kubernetes CA를 Kubernetes secret 저장</strong></h1>
<h2><a class="header-anchor" href="#_2-1-crt-파일-생성"><span></span></a><a name="vault인증서-2.1crt파일생성"></a><strong>2.1 crt 파일 생성</strong></h2>
<div class="language-text" data-highlighter="prismjs" data-ext="text" data-title="text"><pre class="language-text"><code><span class="line">serverCert=$(kubectl get csr ${CSR_NAME} -o jsonpath="{.status.certificate}")</span>
<span class="line"></span>
<span class="line">echo "${serverCert}" | openssl base64 -d -A -out ${TMPDIR}/vault.crt</span>
<span class="line"></span></code></pre></div><h2><a class="header-anchor" href="#_2-2-쿠버네티스-ca-설정-파일"><span></span></a><a name="vault인증서-2.2쿠버네티스ca설정파일"></a><strong>2.2 쿠버네티스 ca 설정 파일</strong></h2>
<div class="language-text" data-highlighter="prismjs" data-ext="text" data-title="text"><pre class="language-text"><code><span class="line">kubectl config view --raw --minify --flatten -o jsonpath='{.clusters[].cluster.certificate-authority-data}' | base64 -d &gt; ${TMPDIR}/vault.ca</span>
<span class="line"></span></code></pre></div><h2><a class="header-anchor" href="#_2-3-key-crt-ca-인증서-시크릿-생성"><span></span></a><a name="vault인증서-2.3key,crt,ca인증서시크릿생성"></a><strong>2.3 key, crt, ca 인증서 시크릿 생성</strong></h2>
<div class="language-text" data-highlighter="prismjs" data-ext="text" data-title="text"><pre class="language-text"><code><span class="line">kubectl create secret generic ${SECRET_NAME} \</span>
<span class="line">   --namespace ${NAMESPACE} \</span>
<span class="line">   --from-file=vault.key=${TMPDIR}/vault.key \</span>
<span class="line">   --from-file=vault.crt=${TMPDIR}/vault.crt \</span>
<span class="line">   --from-file=vault.ca=${TMPDIR}/vault.ca</span>
<span class="line"></span></code></pre></div><h1><a class="header-anchor" href="#_3-vault-tls-인증서-적용"><span></span></a><a name="vault인증서-3.vaulttls인증서적용"></a><strong>3. Vault tls 인증서 적용</strong></h1>
<h2><a class="header-anchor" href="#_3-1-helm-values-yaml-파일"><span></span></a><a name="vault인증서-3.1helmvalues.yaml파일"></a><strong>3.1 helm values.yaml 파일</strong></h2>
<div class="language-text" data-highlighter="prismjs" data-ext="text" data-title="text"><pre class="language-text"><code><span class="line">global:</span>
<span class="line"></span>
<span class="line">    enabled: true</span>
<span class="line"></span>
<span class="line">    tlsDisable: false</span>
<span class="line"></span>
<span class="line">server:</span>
<span class="line"></span>
<span class="line">    enterpriseLicense:</span>
<span class="line">      secretName: vault-ent-license</span>
<span class="line"></span>
<span class="line">    extraVolumes:</span>
<span class="line"></span>
<span class="line">    - type: secret</span>
<span class="line"></span>
<span class="line">      name: vault-tls</span>
<span class="line"></span>
<span class="line">    extraEnvironmentVars:</span>
<span class="line"></span>
<span class="line">      VAULT_CACERT: "/vault/userconfig/vault-tls/vault.ca"</span>
<span class="line"></span>
<span class="line">      CA_CERT: "/var/run/secrets/kubernetes.io/serviceaccount/ca.crt"</span>
<span class="line"></span>
<span class="line">    ha:</span>
<span class="line"></span>
<span class="line">      enabled: true</span>
<span class="line">      raft:</span>
<span class="line"></span>
<span class="line">        enabled: true</span>
<span class="line"></span>
<span class="line">        setNodeId: true</span>
<span class="line"></span>
<span class="line">        config: |</span>
<span class="line"></span>
<span class="line">          ui = true</span>
<span class="line">          listener "tcp" {</span>
<span class="line"></span>
<span class="line">            tls_disable = 0</span>
<span class="line"></span>
<span class="line">            address = "[::]:8200"</span>
<span class="line"></span>
<span class="line">            cluster_address = "[::]:8201"</span>
<span class="line"></span>
<span class="line">            tls_cert_file = "/vault/userconfig/vault-tls/vault.crt"</span>
<span class="line"></span>
<span class="line">            tls_key_file  = "/vault/userconfig/vault-tls/vault.key"</span>
<span class="line"></span>
<span class="line">            tls_client_ca_file = "/vault/userconfig/vault-tls/vault.ca"</span>
<span class="line"></span>
<span class="line">          }</span>
<span class="line"></span>
<span class="line">          storage "raft" {</span>
<span class="line"></span>
<span class="line">            path = "/vault/data"</span>
<span class="line"></span>
<span class="line">            retry_join {</span>
<span class="line"></span>
<span class="line">              leader_api_addr = "https://vault-0.vault-internal:8200"</span>
<span class="line"></span>
<span class="line">              leader_ca_cert_file = "/vault/userconfig/vault-tls/vault.ca"</span>
<span class="line"></span>
<span class="line">              leader_client_cert_file = "/vault/userconfig/vault-tls/vault.crt"</span>
<span class="line"></span>
<span class="line">              leader_client_key_file = "/vault/userconfig/vault-tls/vault.key"</span>
<span class="line"></span>
<span class="line">            }</span>
<span class="line">            retry_join {</span>
<span class="line"></span>
<span class="line">              leader_api_addr = "https://vault-1.vault-internal:8200"</span>
<span class="line"></span>
<span class="line">              leader_ca_cert_file = "/vault/userconfig/vault-tls/vault.ca"</span>
<span class="line"></span>
<span class="line">              leader_client_cert_file = "/vault/userconfig/vault-tls/vault.crt"</span>
<span class="line">              leader_client_key_file = "/vault/userconfig/vault-tls/vault.key"</span>
<span class="line">            }</span>
<span class="line">            retry_join {</span>
<span class="line">              leader_api_addr = "https://vault-2.vault-internal:8200"</span>
<span class="line">              leader_ca_cert_file = "/vault/userconfig/vault-tls/vault.ca"</span>
<span class="line"></span>
<span class="line">              leader_client_cert_file = "/vault/userconfig/vault-tls/vault.crt"</span>
<span class="line"></span>
<span class="line">              leader_client_key_file = "/vault/userconfig/vault-tls/vault.key"</span>
<span class="line">            }</span>
<span class="line"></span>
<span class="line">            autopilot {</span>
<span class="line"></span>
<span class="line">              last_contact_threshold = "200ms"</span>
<span class="line"></span>
<span class="line">              last_contact_failure_threshold = "10m"</span>
<span class="line"></span>
<span class="line">              max_trailing_logs = 250000</span>
<span class="line"></span>
<span class="line">              min_quorum = 5</span>
<span class="line"></span>
<span class="line">              server_stabilization_time = "10s"</span>
<span class="line"></span>
<span class="line">            }</span>
<span class="line"></span>
<span class="line">           }</span>
<span class="line"></span>
<span class="line">          seal "awskms" {</span>
<span class="line">             region     = "ap-northeast-2"</span>
<span class="line"></span>
<span class="line">             kms_key_id = "{ kms_key_id }"</span>
<span class="line"></span>
<span class="line">           }</span>
<span class="line"></span>
<span class="line">          service_registration "kubernetes" {}</span>
<span class="line"></span>
<span class="line">    image:</span>
<span class="line"></span>
<span class="line">      repository: hashicorp/vault-enterprise</span>
<span class="line"></span>
<span class="line">      tag: 1.12.1-ent</span>
<span class="line"></span>
<span class="line">    env:</span>
<span class="line"></span>
<span class="line">    - name: VAULT_CACERT</span>
<span class="line"></span>
<span class="line">      value: "/vault/userconfig/vault-tls/vault.ca"</span>
<span class="line"></span>
<span class="line">    extraSecretEnvironmentVars:</span>
<span class="line"></span>
<span class="line">      - envName: AWS_ACCESS_KEY_ID</span>
<span class="line"></span>
<span class="line">        secretName: eks-creds</span>
<span class="line"></span>
<span class="line">        secretKey: AWS_ACCESS_KEY_ID</span>
<span class="line"></span>
<span class="line">      - envName: AWS_SECRET_ACCESS_KEY</span>
<span class="line"></span>
<span class="line">        secretName: eks-creds</span>
<span class="line"></span>
<span class="line">        secretKey: AWS_SECRET_ACCESS_KEY</span>
<span class="line"></span>
<span class="line">    service:</span>
<span class="line"></span>
<span class="line">      enabled: true</span>
<span class="line"></span>
<span class="line">      active:</span>
<span class="line"></span>
<span class="line">        enabled: false</span>
<span class="line"></span>
<span class="line">      standby:</span>
<span class="line"></span>
<span class="line">        enabled: false</span>
<span class="line"></span>
<span class="line">      type: ClusterIP</span>
<span class="line">      loadBalancerClass: service.k8s.aws/nlb</span>
<span class="line"></span>
<span class="line">      annotations:</span>
<span class="line">    dataStorage:</span>
<span class="line">      enabled: true</span>
<span class="line"></span>
<span class="line">      storageClass: gp3</span>
<span class="line"></span>
<span class="line">      size: 100Gi</span>
<span class="line"></span>
<span class="line">    auditStorage:</span>
<span class="line"></span>
<span class="line">      enabled: true</span>
<span class="line"></span>
<span class="line">      # Size of the PVC created</span>
<span class="line"></span>
<span class="line">      size: 100Gi</span>
<span class="line"></span>
<span class="line">      # Location where the PVC will be mounted.</span>
<span class="line"></span>
<span class="line">      mountPath: "/vault/audit"</span>
<span class="line"></span>
<span class="line">      # Name of the storage class to use.  If null it will use the</span>
<span class="line"></span>
<span class="line">      # configured default Storage Class.</span>
<span class="line"></span>
<span class="line">      storageClass: gp3</span>
<span class="line"></span>
<span class="line">      # Access Mode of the storage device being used for the PVC</span>
<span class="line"></span>
<span class="line">      accessMode: ReadWriteOnce</span>
<span class="line"></span>
<span class="line">      # Annotations to apply to the PVC</span>
<span class="line"></span>
<span class="line">      annotations: {}</span>
<span class="line"></span>
<span class="line">ui:</span>
<span class="line"></span>
<span class="line">    enabled: true</span>
<span class="line"></span>
<span class="line">    publishNotReadyAddresses: true</span>
<span class="line"></span>
<span class="line">    activeVaultPodOnly: false</span>
<span class="line"></span>
<span class="line">    serviceType: "LoadBalancer"</span>
<span class="line"></span>
<span class="line">    serviceNodePort: null</span>
<span class="line"></span>
<span class="line">    externalPort: 443</span>
<span class="line"></span>
<span class="line">    targetPort: 8200</span>
<span class="line"></span>
<span class="line">    annotations:</span>
<span class="line"></span>
<span class="line">       service.beta.kubernetes.io/aws-load-balancer-ip-address-type: ipv4</span>
<span class="line"></span>
<span class="line">       service.beta.kubernetes.io/aws-load-balancer-name: gbkim-vault-test-lb</span>
<span class="line"></span>
<span class="line">       service.beta.kubernetes.io/aws-load-balancer-scheme: internet-facing</span>
<span class="line"></span>
<span class="line">       service.beta.kubernetes.io/aws-load-balancer-nlb-target-type: ip</span>
<span class="line"></span>
<span class="line">       service.beta.kubernetes.io/aws-load-balancer-subnets: { 서브넷 id }</span>
<span class="line"></span>
<span class="line">       service.beta.kubernetes.io/aws-load-balancer-type: external</span>
<span class="line"></span>
<span class="line">       service.beta.kubernetes.io/aws-load-balancer-ssl-cert: { 인증서 arn }</span>
<span class="line"></span>
<span class="line">       service.beta.kubernetes.io/aws-load-balancer-ssl-ports: "443"</span>
<span class="line"></span>
<span class="line">       service.beta.kubernetes.io/aws-load-balancer-backend-protocol: ssl</span>
<span class="line"></span></code></pre></div><h2><a class="header-anchor" href="#_3-2-aws-nlb를-통해-접근-인증서-확인"><span></span></a><a name="vault인증서-3.2awsnlb를통해접근인증서확인"></a><strong>3.2 AWS NLB를 통해 접근 인증서 확인</strong></h2>
<figure><figcaption></figcaption></figure>
<h2><a class="header-anchor" href="#_3-3-acm-인증서를-통해-접근"><span></span></a><a name="vault인증서-3.3acm인증서를통해접근"></a><strong>3.3 ACM 인증서를 통해 접근</strong></h2>
<h3><a class="header-anchor" href="#_3-3-1-route53-설정"><span></span></a><a name="vault인증서-3.3.1route53설정"></a><strong>3.3.1 Route53 설정</strong></h3>
<figure><figcaption></figcaption></figure>
<h3><a class="header-anchor" href="#_3-3-2-레코드-생성"><span></span></a><a name="vault인증서-3.3.2레코드생성"></a><strong>3.3.2 레코드 생성</strong></h3>
<figure><figcaption></figcaption></figure>
<h3><a class="header-anchor" href="#_3-3-3-레코드-설정"><span></span></a><a name="vault인증서-3.3.3레코드설정"></a><strong>3.3.3 레코드 설정</strong></h3>
<ul>
<li>레코드 이름
<ul>
<li>대상 도메인 이름 설정</li>
</ul>
</li>
<li>레코드 유형
<ul>
<li>A</li>
</ul>
</li>
<li>별칭
<ul>
<li>On</li>
</ul>
</li>
<li>트래픽 라우팅 대상
<ul>
<li>NLB</li>
<li>ap-northeast-2(서울)</li>
<li>사용하고자 하는 AWS 로드 밸런서 지정</li>
</ul>
</li>
<li>라우팅 정책
<ul>
<li>단순 라우팅</li>
</ul>
</li>
</ul>
<figure><figcaption></figcaption></figure>
<h3><a class="header-anchor" href="#_3-3-4-aws-인증서를-통해-vault-ui-접근"><span></span></a><a name="vault인증서-3.3.4aws인증서를통해vaultui접근"></a><strong>3.3.4 AWS 인증서를 통해 Vault UI 접근</strong></h3>
<figure><figcaption></figcaption></figure>
<h1><a class="header-anchor" href="#_4-aws-private-ca를-사용-하는-인증서-생성"><span></span></a><a name="vault인증서-4.awsprivateca를사용하는인증서생성"></a><strong>4. AWS Private Ca를 사용 하는 인증서 생성</strong></h1>
<h2><a class="header-anchor" href="#_4-1-사전-준비-요건"><span></span></a><a name="vault인증서-4.1사전준비요건"></a><strong>4.1 사전 준비 요건</strong></h2>
<ul>
<li>Private Ca 생성<br>
</li>
</ul>
<h2><a class="header-anchor" href="#_4-2-acm-인증서-생성"><span></span></a><a name="vault인증서-4.2acm인증서생성"></a><strong>4.2 ACM 인증서 생성</strong></h2>
<ul>
<li>
<p>요청<br>
</p>
</li>
<li>
<p>인증서 요청</p>
<ul>
<li>프라이빗 인증서 요청(인증서 기관이 aws가 아닌 PrivateCA로 만든 주체로 함)</li>
<li>다음<br>
</li>
</ul>
</li>
<li>
<p>인증 기관 세부 정보</p>
</li>
</ul>
<p><br>
</p>
<ul>
<li>
<p>도메인 이름<br>
</p>
</li>
<li>
<p>키 알고리즘<br>
</p>
</li>
<li>
<p>태그</p>
</li>
<li>
<p>인증서 갱신 권한</p>
</li>
<li>
<p>요청</p>
</li>
</ul>
<figure><figcaption></figcaption></figure>
<ul>
<li>Private Ca에 대한 인증 기관 기반으로 인증서 생성<br>
</li>
</ul>
<h1><a class="header-anchor" href="#_5-aws-private-ca-기반으로-생성-된-인증서를-vault에-적용"><span></span></a><a name="vault인증서-5.awsprivateca기반으로생성된인증서를vault에적용"></a><strong>5. AWS Private Ca 기반으로 생성 된 인증서를 Vault에 적용</strong></h1>
<ul>
<li>
<p>내보내기<br>
</p>
</li>
<li>
<p>인증서 내보내기</p>
<ul>
<li>AWS 상에서 내보기를 사용하려면 비밀번호를 생성 후 내보기가 가능<br>
</li>
</ul>
</li>
<li>
<p>내보낸 인증서</p>
</li>
<li>
<p>다운로드<br>
</p>
</li>
<li>
<p>사설 인증서 가져오기<br>
</p>
</li>
</ul>
<h1><a class="header-anchor" href="#결론"><span></span></a><a name="vault인증서-결론"></a><strong>결론</strong></h1>
<p>테스트 한 결과로는 Private Ca로 EKS 환경에서 Vault에 사설 인증서를 적용은 불가능</p>
<p>안되는 이유</p>
]]></content:encoded>
    </item>
    <item>
      <title>Vault Secret를 AWS Secret manager 연동</title>
      <link>https://docmoa.github.io/04-HashiCorp/06-Vault/04-UseCase/secret-sync.html</link>
      <guid>https://docmoa.github.io/04-HashiCorp/06-Vault/04-UseCase/secret-sync.html</guid>
      <source url="https://docmoa.github.io/rss.xml">Vault Secret를 AWS Secret manager 연동</source>
      <description>Vault Secret를 AWS Secret manager 연동 Secret Sync 공식 자료: Secret Sync AWS Secret Manager Sync 자료: Secret Manager Sync 현대의 IT 환경에서는 다양한 클라우드 서비스를 사용하는 것이 일반적입니다. 대부분의 경우 AWS를 주로 사용하...</description>
      <pubDate>Sat, 31 Aug 2024 04:59:08 GMT</pubDate>
      <content:encoded><![CDATA[
<blockquote>
<p>Secret Sync 공식 자료: <a href="https://developer.hashicorp.com/vault/docs/sync" target="_blank" rel="noopener noreferrer">Secret Sync</a><br>
AWS Secret Manager Sync 자료: <a href="https://developer.hashicorp.com/vault/docs/sync/awssm" target="_blank" rel="noopener noreferrer">Secret Manager Sync</a></p>
</blockquote>
<p>현대의 IT 환경에서는 다양한 클라우드 서비스를 사용하는 것이 일반적입니다.<br>
대부분의 경우 AWS를 주로 사용하지만, AWS를 비롯한 클라우드 서비스 제공자(CSP)에서 간헐적으로 발생하는 서비스 이슈를 경험할 때가 있습니다. 특히, AWS 리전의 장애가 발생할 경우를 대비하여, GCP나 Azure, 나아가 IDC를 백업 용도로 고려하는 것이 중요합니다.<br>
관리형 Kubernetes와 같은 관리형 서비스의 대책도 중요하지만, 오늘은 관리형 Secret 도구에 대한 대처 방안에 대해 알아보겠습니다.</p>
<p>Vault를 사용하면 여러 CSP의 Sync를 통해 하나의 Vault Secret으로 여러 CSP에 Secret을 동기화할 수 있습니다. 이를 통해 각 CSP의 관리형 Kubernetes 환경에 동일한 Secret을 적용할 수 있어, 애플리케이션의 Secret 형상을 일관되게 유지하고 관리할 수 있습니다.</p>
<p>이제, 이 기능을 어떻게 적용할 수 있는지 알아보겠습니다.</p>
<h2>Vault Secret과 AWS Secret Manager의 비밀정보를 동기화 과정</h2>
<ol>
<li>먼저 Vault Policy는 다음과 같이 필요합니다.</li>
</ol>
<div class="language-hcl" data-highlighter="prismjs" data-ext="hcl" data-title="hcl"><pre class="language-hcl"><code><span class="line">path <span class="token string">"sys/sync/*"</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token property">capabilities</span> <span class="token punctuation">=</span> <span class="token punctuation">[</span><span class="token string">"read"</span>, <span class="token string">"list"</span>, <span class="token string">"create"</span>, <span class="token string">"update"</span>, <span class="token string">"delete"</span><span class="token punctuation">]</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"> </span>
<span class="line">path <span class="token string">"secret_sync/*"</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token property">capabilities</span> <span class="token punctuation">=</span> <span class="token punctuation">[</span><span class="token string">"read"</span><span class="token punctuation">]</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre></div><ol start="2">
<li>Secret Engine을 만들고 데이터를 넣도록 하겠습니다.</li>
</ol>
<div class="language-hcl" data-highlighter="prismjs" data-ext="hcl" data-title="hcl"><pre class="language-hcl"><code><span class="line"><span class="token keyword">resource <span class="token type variable">"vault_mount"</span></span> <span class="token string">"secret_sync"</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token property">path</span>        <span class="token punctuation">=</span> <span class="token string">"secret_sync"</span></span>
<span class="line">  <span class="token property">type</span>        <span class="token punctuation">=</span> <span class="token string">"kv"</span></span>
<span class="line">  <span class="token property">options</span>     <span class="token punctuation">=</span> <span class="token punctuation">{</span> <span class="token property">version</span> <span class="token punctuation">=</span> <span class="token string">"2"</span> <span class="token punctuation">}</span></span>
<span class="line">  <span class="token property">description</span> <span class="token punctuation">=</span> <span class="token string">"KV Version 2 secret engine mount"</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">resource <span class="token type variable">"vault_kv_secret_v2"</span></span> <span class="token string">"secret_sync"</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token property">mount</span>                      <span class="token punctuation">=</span> vault_mount.secret_sync.path</span>
<span class="line">  <span class="token property">name</span>                       <span class="token punctuation">=</span> <span class="token string">"dev"</span></span>
<span class="line">  <span class="token property">cas</span>                        <span class="token punctuation">=</span> <span class="token number">1</span></span>
<span class="line">  <span class="token property">delete_all_versions</span>        <span class="token punctuation">=</span> <span class="token boolean">true</span></span>
<span class="line">  <span class="token property">data_json</span>                  <span class="token punctuation">=</span> jsonencode(local.secrets_map)</span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre></div><ul>
<li>더미 데이터는 다음과 같습니다.</li>
</ul>
<div class="language-bash" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="line">$ <span class="token function">cat</span> secret.csv</span>
<span class="line"></span>
<span class="line">key,secret_path,secret_key,secret_value</span>
<span class="line"><span class="token number">1</span>,path1,oEyzn3Ko,ueWXdREVkbO8</span>
<span class="line"><span class="token number">2</span>,path2,L1wxhMoU,McY5TAQDQFfQ</span>
<span class="line"><span class="token number">3</span>,path3,92ky4qgj,onahCbfYh8IN</span>
<span class="line"><span class="token number">4</span>,path4,oj2aquZr,YvPZOwthQpii</span>
<span class="line"><span class="token number">5</span>,path5,vIqHT6mI,xRRxYsMwklPK</span>
<span class="line"><span class="token number">6</span>,path6,C6dsxbmR,Gryegjb99vvR</span>
<span class="line"><span class="token number">7</span>,path7,e5ksUpsi,hLNFqIFF7gl7</span>
<span class="line"><span class="token number">8</span>,path8,1K7TRAIC,r4uSkISmyvWp</span>
<span class="line"><span class="token number">9</span>,path9,xfTzJl3r,tSFrxHjhpXfs</span>
<span class="line"><span class="token number">10</span>,path10,72ABuQWZ,FthcwQESffIo</span>
<span class="line"></span></code></pre></div><ol start="3">
<li>vault ui에서 정상적으로 배포된 secret을 확인합니다.</li>
</ol>
<figure><figcaption></figcaption></figure>
<ol start="4">
<li>정상적으로 배포된 Vault Secret을 AWS Secret Manager에 Sync를 진행합니다.</li>
</ol>
<ul>
<li>Terraform code는 다음과 같습니다.</li>
</ul>
<div class="language-hcl" data-highlighter="prismjs" data-ext="hcl" data-title="hcl"><pre class="language-hcl"><code><span class="line"><span class="token comment"># name template 참고 링크: https://developer.hashicorp.com/vault/docs/sync#name-template</span></span>
<span class="line"><span class="token keyword">resource <span class="token type variable">"vault_secrets_sync_aws_destination"</span></span> <span class="token string">"static_aws"</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token property">name</span>                 <span class="token punctuation">=</span> <span class="token string">"aws_secret_sync"</span></span>
<span class="line">  <span class="token property">access_key_id</span>        <span class="token punctuation">=</span> var.aws_access_key_id</span>
<span class="line">  <span class="token property">secret_access_key</span>    <span class="token punctuation">=</span> var.aws_secret_access_key</span>
<span class="line">  <span class="token property">region</span>               <span class="token punctuation">=</span> <span class="token string">"ap-northeast-2"</span></span>
<span class="line">  <span class="token property">secret_name_template</span> <span class="token punctuation">=</span> <span class="token string">"vault_{{ .MountAccessor | lowercase }}_{{ .SecretPath | lowercase }}"</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">resource <span class="token type variable">"vault_secrets_sync_association"</span></span> <span class="token string">"static_gh_token"</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token property">name</span>        <span class="token punctuation">=</span> vault_secrets_sync_aws_destination.static_aws.name</span>
<span class="line">  <span class="token property">type</span>        <span class="token punctuation">=</span> vault_secrets_sync_aws_destination.static_aws.type</span>
<span class="line">  <span class="token property">mount</span>       <span class="token punctuation">=</span> <span class="token string">"secret_sync"</span></span>
<span class="line">  <span class="token property">secret_name</span> <span class="token punctuation">=</span> <span class="token string">"dev"</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre></div><ol start="5">
<li>배포를 진행하고 AWS Console에서 확인하면 다음과 같습니다.</li>
</ol>
<div class="hint-container info">
<p class="hint-container-title">Vault Secret의 License가 없어, 공식홈페이지의 결과 화면입니다.</p>
<figure><figcaption></figcaption></figure>
</div>
<h2>Secret Sync 기능은 다음의 서비스의 동기화를 지원하고 있습니다.</h2>
<ul>
<li>aws</li>
<li>azure</li>
<li>gcp</li>
<li>github</li>
<li>vercel</li>
</ul>
<div class="hint-container info">
<p class="hint-container-title">참고</p>
<p>github action에서는 다음과 같이 활용도 가능합니다.</p>
<div class="language-yaml" data-highlighter="prismjs" data-ext="yml" data-title="yml"><pre class="language-yaml"><code><span class="line"><span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Login to AWS ECR</span>
<span class="line">  <span class="token key atrule">run</span><span class="token punctuation">:</span> <span class="token punctuation">|</span><span class="token scalar string"></span>
<span class="line">    echo "Set vars"</span>
<span class="line">    AWS_ACCOUNT_ID=$(echo "$AWS_ACCOUNT_ID" | jq -r '.AWS_ACCOUNT_ID')</span>
<span class="line">    AWS_ACCESS_KEY_ID=$(echo "$AWS_ACCESS_KEY_ID" | jq -r '.AWS_ACCESS_KEY_ID')</span>
<span class="line">    AWS_SECRET_ACCESS_KEY=$(echo "$AWS_SECRET_ACCESS_KEY" | jq -r '.AWS_SECRET_ACCESS_KEY')</span>
<span class="line">    echo "Login to AWS ECR"</span>
<span class="line">    aws ecr get-login-password --region $AWS_DEFAULT_REGION | docker login --username AWS --password-stdin $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com</span></span>
<span class="line">  <span class="token key atrule">env</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token key atrule">AWS_DEFAULT_REGION</span><span class="token punctuation">:</span> $<span class="token punctuation">{</span><span class="token punctuation">{</span> vars.AWS_DEFAULT_REGION <span class="token punctuation">}</span><span class="token punctuation">}</span></span>
<span class="line">    <span class="token key atrule">AWS_ACCOUNT_ID</span><span class="token punctuation">:</span> $<span class="token punctuation">{</span><span class="token punctuation">{</span> secrets.VAULT_KV_5047F8B7_AWS_ACCOUNT_ID <span class="token punctuation">}</span><span class="token punctuation">}</span></span>
<span class="line">    <span class="token key atrule">AWS_ACCESS_KEY_ID</span><span class="token punctuation">:</span> $<span class="token punctuation">{</span><span class="token punctuation">{</span> secrets.VAULT_KV_5047F8B7_AWS_ACCESS_KEY_ID <span class="token punctuation">}</span><span class="token punctuation">}</span></span>
<span class="line">    <span class="token key atrule">AWS_SECRET_ACCESS_KEY</span><span class="token punctuation">:</span> $<span class="token punctuation">{</span><span class="token punctuation">{</span> secrets.VAULT_KV_5047F8B7_AWS_SECRET_ACCESS_KEY <span class="token punctuation">}</span><span class="token punctuation">}</span>      </span>
<span class="line"></span></code></pre></div></div>
]]></content:encoded>
    </item>
    <item>
      <title>UbuCon Korea 2024</title>
      <link>https://docmoa.github.io/06-etc/class/ubucon-korea-2024.html</link>
      <guid>https://docmoa.github.io/06-etc/class/ubucon-korea-2024.html</guid>
      <source url="https://docmoa.github.io/rss.xml">UbuCon Korea 2024</source>
      <description>우분투와 함께 배포하기</description>
      <pubDate>Sun, 11 Aug 2024 03:52:01 GMT</pubDate>
      <content:encoded><![CDATA[<figure><img src="https://eventusstorage.blob.core.windows.net/evs/Image/ubuntukr/81549/ProjectInfo/Cover/f16d8e1dd7af46cfb910dfaf9574dd60.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<h1>UbuCon Korea 2024</h1>
<blockquote>
<p><a href="https://2024.ubuntu-kr.org/ko/" target="_blank" rel="noopener noreferrer">행사 홈페이지</a><br>
2024년 8월 10일<br>
한국 마이크로소프트<br>
일정표 : <a href="https://events.canonical.com/event/48/timetable/#20240810" target="_blank" rel="noopener noreferrer">https://events.canonical.com/event/48/timetable/#20240810</a></p>
</blockquote>
<h2>1. Opening remarks (10:00)</h2>
<p>우분투 커뮤니티의 맴버 소개와 UbuCon Korea의 발걸음을 이야기해 주었다.<br>
<code>UbuCon Asia 2022</code> 행사 이후 UbuCon Korea가 별도로 진행되고 있다. 2022년 <code>UbuCon Asia</code>가 서울에서 개최된 이후 분리되어 운영되는 걸로 보여진다. 인상적인건 <code>UbuCon Asia 2022</code>의 로고가 초롱불이 형상화되어있다.</p>
<figure><img src="https://res.cloudinary.com/canonical/image/fetch/f_auto,q_auto,fl_sanitize,c_fill,w_1664,h_568/https://ubuntu.com/wp-content/uploads/0cc4/Untitled.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<p>2023년부터 UbuCon Korea가 진행되었다.</p>
<figure><img src="https://eventusstorage.blob.core.windows.net/evs/Image/ubuntukr/65995/ProjectInfo/Cover/7fe204e41d664c8fb9a806ee6faf806e.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<p><a href="https://2023.ubuntu-kr.org/ko/" target="_blank" rel="noopener noreferrer">UbuCon Korea 2023 - 홈페이지</a></p>
<h2>2. 기조연설 Keynote (10:30)</h2>
<p>아쉽게도 캐노니컬에서의 키노트는 사정상 생략 되었다.</p>
<p>우분투 코리아의 7기 운영진의 문준상 대표의 대표된 썰(?)을 이야기해주었다.</p>
<ul>
<li><a href="https://disclosures.ubuntu-kr.org/organizers/gen7/" target="_blank" rel="noopener noreferrer">7기 운영진 정보</a></li>
</ul>
<p>표현은 납치라는 표현이라 했지만, 커뮤니티 운영과 책임자로서의 어깨가 무거운 만큼, 부담이 있을거라 생각되었다.</p>
<p>이후 7기 운영진에서 우분투 커뮤니티의 멤버쉽에 대한 안내와 자격에 대해 안내해주었다.</p>
<ul>
<li><a href="https://ubuntu.com/community/membership" target="_blank" rel="noopener noreferrer">Ubuntu Membership 안내</a></li>
</ul>
<p>멤버십 특전에 명시되어있지는 않으나, Ubuntu Summit같은 행사가 있는 경우 경비를 지원받을 수 있다고도 언급되었다.</p>
<h3>2.1 멤버십 요건</h3>
<ul>
<li><a href="https://ubuntu.com/community/membership/requirements" target="_blank" rel="noopener noreferrer">Membership Requirements</a></li>
</ul>
<p>Ubuntu 구성원 선정 기준의 간단한 요약은 다음과 같다.</p>
<p>시간: 6개월 이상의 지속적인 Ubuntu 관련 공헌이 필요합니다. 추천서가 필요합니다.<br>
공헌 방식: 기술적 공헌 외에도, 아트워크, 문서, 포럼, IRC, 버그 조정, 번역, 개발 및 패키징, 마케팅 및 홍보 등 모든 종류의 공헌이 인정됩니다.<br>
상류 프로젝트(Upstream) 공헌: Ubuntu는 Debian 및 기타 상류 프로젝트에 대한 공헌을 환영합니다. 그러나 멤버십은 우분투 다운스트림 참여를 필요로 합니다.<br>
추천서: 다른 사람들의 추천서가 중요합니다. 다양한 분야의 구성원들로부터 추천서를 받는 것이 좋습니다.</p>
<h3>2.2 멤버십 특전</h3>
<ul>
<li><a href="https://ubuntu.com/community/membership/perks" target="_blank" rel="noopener noreferrer">Membership Perks</a></li>
</ul>
<p>우분투 커뮤니티를 더 좋게 만드는 것 외에도, 공식 회원이 되는 것은 많은 이점이 있다. 이러한 특전은 다음과 같습니다:</p>
<ul>
<li>잠재적인 고용주와 함께 사용할 수 있는 담론 게시물 형태의 우분투 이력서.</li>
<li>우분투 커뮤니티 위원회 지명을 확인하기 위한 투표 권한.</li>
<li>당신의 실제 이메일 주소로 전달하는 @ubuntu.com 이메일 별칭.</li>
<li>An ubuntu/member/your_nick cloak on Libera.Chat.</li>
<li>우분투 로고가 있는 명함을 인쇄할 권리</li>
<li>우분투 블로그의 행성 우분투 신디케이션.</li>
<li>우분투 포럼의 우분투 회원 타이틀.</li>
<li>people.ubuntu.com의 웹 액세스 가능한 디렉토리에 대한 SFTP 액세스</li>
<li>ESM 및 커널 라이브 패치에 액세스하기 위한 최대 50개의 시스템을 위한 우분투 프로</li>
<li>Canonical CEO와 sabdfl, Mark Shuttleworth가 서명한 인증서.</li>
<li>리눅스 주간 뉴스 구독.</li>
<li>레딧의 우분투 멤버 플레어.</li>
<li>Gandi.net에서 호스팅을 위한 할인된 도메인 등록 가격 및 파트너 요금.</li>
</ul>
<h2>3. Dockerfile 없이도 컨테이너 앱 빌드할 수 있어요 (feat .NET Aspire) (11:00)</h2>
<blockquote>
<p>일반적으로 컨테이너 이미지를 빌드하기 위해서는 Dockerfile이 필요합니다. 하지만, 과연 그것이 필수적으로 필요하다고 생각하시나요? 만약 Dockerfile 없이도 컨테이너 앱을 빌드할 수 있다면 어떨까요?</p>
<p>이번 세션에서는 MSBuild의 옵션 조정만으로 다양한 우분투 기반의 컨테이너 이미지를 만들 수 있는 방법을 차근차근 알아봅니다. 특히 최근에 마이크로소프트와 캐노니컬이 협업하여 제공하는 치즐드 컨테이너 이미지로 경량화할 수 있는 방법에 대해서도 알아봅니다.</p>
<p>더불어 .NET Aspire 라는 클라우드 네이티브 기반의 애플리케이션 오케스트레이션 프레임워크를 통해 앞서 Dockerfile 없이 빌드한 컨테이너 이미지를 곧바로 클라우드로 배포하는 과정에 대해서도 다뤄보겠습니다.</p>
</blockquote>
<blockquote>
<p>Speaker : Justin Yoo</p>
</blockquote>
<blockquote>
<p>Slide : <a href="https://1drv.ms/b/s!ArWHNGHxF7lBhJon5HmBTqHtGrnn2A?e=ZKNQO3" target="_blank" rel="noopener noreferrer">https://1drv.ms/b/s!ArWHNGHxF7lBhJon5HmBTqHtGrnn2A?e=ZKNQO3</a></p>
</blockquote>
<p>링크드인에서 가끔 뵈던 분인데, 그 사진이 뒤로 묶은 상태였어서 알아보질 못했다;</p>
<h3>3.1  <code>Dockerfile</code> 작성의 부담</h3>
<p>일반적으로 애플리케이션 컨테이너를 빌드한다고 하면 <code>DockerFile</code>을 떠올리게 된다. 하지만 <code>DockerFile</code>을 생성하고 관리하는 것도 하나의 코딩이라고 본다면 이또한 개발자에게 부담이 될 수 있다.</p>
<ul>
<li>기본 이미지</li>
<li>작업 디렉토리</li>
<li>추가 명령어 / 환경 변수</li>
<li>시작 명령어</li>
</ul>
<div class="language-docker" data-highlighter="prismjs" data-ext="docker" data-title="docker"><pre class="language-docker"><code><span class="line"><span class="token instruction"><span class="token keyword">FROM</span> mcr.microsoft.com/dotnet/sdk:8.0@sha256:35792ea4ad1db051981f62b313f1be3b46b1f45cadbaa3c288cd0d3056eefb83 <span class="token keyword">AS</span> build-env</span></span>
<span class="line"><span class="token instruction"><span class="token keyword">WORKDIR</span> /App</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># Copy everything</span></span>
<span class="line"><span class="token instruction"><span class="token keyword">COPY</span> . ./</span></span>
<span class="line"><span class="token comment"># Restore as distinct layers</span></span>
<span class="line"><span class="token instruction"><span class="token keyword">RUN</span> dotnet restore</span></span>
<span class="line"><span class="token comment"># Build and publish a release</span></span>
<span class="line"><span class="token instruction"><span class="token keyword">RUN</span> dotnet publish -c Release -o out</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># Build runtime image</span></span>
<span class="line"><span class="token instruction"><span class="token keyword">FROM</span> mcr.microsoft.com/dotnet/aspnet:8.0@sha256:6c4df091e4e531bb93bdbfe7e7f0998e7ced344f54426b7e874116a3dc3233ff</span></span>
<span class="line"><span class="token instruction"><span class="token keyword">WORKDIR</span> /App</span></span>
<span class="line"><span class="token instruction"><span class="token keyword">COPY</span> <span class="token options"><span class="token property">--from</span><span class="token punctuation">=</span><span class="token string">build-env</span></span> /App/out .</span></span>
<span class="line"><span class="token instruction"><span class="token keyword">ENTRYPOINT</span> [<span class="token string">"dotnet"</span>, <span class="token string">"DotNet.Docker.dll"</span>]</span></span>
<span class="line"></span></code></pre></div><h3>3.2 <code>docker init</code> 사용해보기</h3>
<p><code>Docker Destop 4.19.0</code> 에 포함된 명령으로, <code>Dockerfile</code>을 생성하는데 도움을 주는 기능이다.</p>
<p>예를 들어 Python 애플리케이션이 있는 디렉터리에서 다음과 같이 명령을 수행하면,</p>
<div class="language-bash" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="line"><span class="token function">docker</span> init python</span>
<span class="line"></span></code></pre></div><p>다음과 같은 상호작용을 통해 <code>Dockerfile</code>이 생성된다.</p>
<div class="language-bash" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="line">? What application platform does your project use? Python</span>
<span class="line">? What version of Python <span class="token keyword">do</span> you want to use? <span class="token number">3.8</span></span>
<span class="line">? What port <span class="token keyword">do</span> you want your app to listen on? <span class="token number">8000</span></span>
<span class="line">? What is the <span class="token builtin class-name">command</span> to run your app <span class="token punctuation">(</span>e.g., gunicorn <span class="token string">'myapp.example:app'</span> <span class="token parameter variable">--bind</span><span class="token operator">=</span><span class="token number">0.0</span>.0.0:8000<span class="token punctuation">)</span>? python ./app.py</span>
<span class="line"></span>
<span class="line">CREATED: .dockerignore</span>
<span class="line">CREATED: Dockerfile</span>
<span class="line">CREATED: compose.yaml</span>
<span class="line">CREATED: README.Docker.md</span>
<span class="line"></span>
<span class="line">✔ Your Docker files are ready<span class="token operator">!</span></span>
<span class="line"></span>
<span class="line">Take a moment to review them and tailor them to your application.</span>
<span class="line"></span>
<span class="line">When you're ready, start your application by running: <span class="token function">docker</span> compose up <span class="token parameter variable">--build</span></span>
<span class="line"></span>
<span class="line">Your application will be available at http://localhost:8000</span>
<span class="line"></span>
<span class="line">Consult README.Docker.md <span class="token keyword">for</span> <span class="token function">more</span> information about using the generated files.</span>
<span class="line"></span></code></pre></div><h3>3.3  <code>Dockerfile</code> 없이 빌드하기</h3>
<p><code>docker init</code> 명령은 Docker Desktop이 필요하며, 모두에게 해당되는 사항은 아니므로, 벙용적이지 않을 수 있고, 결국 <code>Dockerfile</code>을 수정하거나 관리하는 절차는 여전히 존재한다.</p>
<p>따라서 이번 세션에서는 애플리케이션의 패키지 도구에서 직접 <code>Dockerfile</code>없이도 컨테이너를 빌드하는 기능이 소개되었다.따지고 보면 없다기 보다는 애플리케이션 빌드 도구의 정의로 <code>Dockerfile</code>의 정의를 대신하는 방식이다. 예시에서는 <code>dotnet</code>이 사용되었지만 <code>gradle</code>에서도 유사한 과정을 지원하였다.</p>
<div class="language-bash" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="line">dotnet publish <span class="token parameter variable">-t:PubilshContainer</span></span>
<span class="line"></span></code></pre></div><ul>
<li>관련 공식 문서 : <a href="https://learn.microsoft.com/ko-kr/dotnet/core/docker/publish-as-container?pivots=dotnet-8-0" target="_blank" rel="noopener noreferrer">https://learn.microsoft.com/ko-kr/dotnet/core/docker/publish-as-container?pivots=dotnet-8-0</a></li>
</ul>
<details class="hint-container details"><summary>gradle의 예</summary>
<p>샘플 예시 : <a href="https://github.com/gorohoroh/getting-started-building-docker-images-with-gradle" target="_blank" rel="noopener noreferrer">https://github.com/gorohoroh/getting-started-building-docker-images-with-gradle</a></p>
<p>Java의 Gradle에서는 task로 <code>Dockerfile</code>을 정의하고 빌드하는 과정을 구성하도록 되어있었다. 마치 파이프라인을 구성하는 느낌이다.</p>
<div class="language-gradle" data-highlighter="prismjs" data-ext="gradle" data-title="gradle"><pre class="language-gradle"><code><span class="line">task <span class="token function">createDockerFile</span><span class="token punctuation">(</span>type<span class="token punctuation">:</span> Dockerfile<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    from <span class="token string">'openjdk:8-jre-alpine'</span></span>
<span class="line">    copyFile jar<span class="token punctuation">.</span>archiveFileName<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'/app/test_service.jar'</span></span>
<span class="line">    entryPoint <span class="token string">'java'</span></span>
<span class="line">    defaultCommand <span class="token string">'-jar'</span><span class="token punctuation">,</span> <span class="token string">'/app/test_service.jar'</span></span>
<span class="line">    exposePort <span class="token number">8080</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">task <span class="token function">syncJar</span><span class="token punctuation">(</span>type<span class="token punctuation">:</span> Copy<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    dependsOn assemble</span>
<span class="line">    from jar<span class="token punctuation">.</span>destinationDirectory</span>
<span class="line">    into <span class="token interpolation-string"><span class="token string">"</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">buildDir</span></span><span class="token string">/docker"</span></span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">task <span class="token function">buildImage</span><span class="token punctuation">(</span>type<span class="token punctuation">:</span> DockerBuildImage<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    dependsOn createDockerFile<span class="token punctuation">,</span> syncJar</span>
<span class="line">    inputDir <span class="token operator">=</span> createDockerFile<span class="token punctuation">.</span><span class="token function">getDestDir</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    images <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token interpolation-string"><span class="token string">"yourdockerhubusername/tuneit-gradle-docker:1.0"</span></span><span class="token punctuation">]</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre></div><div class="language-bash" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="line">gradlew buildImage</span>
<span class="line"></span></code></pre></div></details>
<h3>3.4 여러 앱을 동시에 자동으로 빌드하고 실행하기 - .NET Aspire</h3>
<p>Java, Python, JavaScript 앱을 배포할 수 있고, Kubernetes로 배포할 수 있는 도구이다. 관측용이성과 회복탄력성을 제공하고, 서비스 디스커버리를 위한 커넥션 스트링을 자동생성 해준다.</p>
<p>세션간 데모와 유사한 설명이 <code>.NetDev</code>에 올라와 있었다.</p>
<ul>
<li><a href="https://forum.dotnetdev.kr/t/net-aspire-net-8/8949" target="_blank" rel="noopener noreferrer">.NET Aspire: .NET 8을 통한 클라우드 네이티브 개발 간소화</a></li>
</ul>
<p><code>Open Telemetry</code>가 기본 제공되어 내부 API 설계에 유용해보였다.</p>
<figure><img src="https://learn.microsoft.com/en-us/dotnet/aspire/docs/fundamentals/dashboard/media/explore/trace.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<p>Kubernetes같은 컨테이너 플랫폼이 알려지면서 컨테이너의 필요성과 관심은 증가했지만, 컨테이너를 지원하는 플랫폼이 시장에 나온 시기에 비해 실제 앱이 컨테이너 화 되는 과정이 늦다보니 플랫폼과 애플리케이션간의 간극이 컷던것 같다. 이같은 현상은 필요에 의한 플랫폼 이기보다는, 플랫폼의 도입을 위한 개발 환경의 변화를 요구하다보니 생기는 갈등을 초래했다고 보여진다.</p>
<p>지금은 컨테이너에 대한 인식이 일반화되고 있는 추세라 보여진다. 개발자 플랫폼이나 도구들도 컨테이너화를 위한 편의성을 제공하면서, 점차 개발자가 앱을 컨테이너화 하는데의 장애물을 낮추는 작업들이 반복되면, 언젠가는 컨테이너가 일반적인 배포 형태의 하나로 자리잡게될 것으로 보여진다.</p>
<h2>4. NHN Cloud 오픈스택, CentOS에서 Ubuntu로 이사하기 (11:30)</h2>
<blockquote>
<p>2014년 NHN Cloud IaaS가 세상에 처음 나올 때는 CentOS기반의 OpenStack으로 구축하였습니다.<br>
그리고 2019년 NHN Cloud IaaS는 새로운 환경 대응을 위해 CentOS 기반의 환경에서 Ubuntu로 이전하는 작업을 완료하였습니다.<br>
Ubuntu로 전환 후 4년 동안 우리는 어떤 경험을 하였을까요? CentOS에서 Ubuntu로 전환하면서 어떤 도전과제들이 있었을까요?</p>
<p>이 발표에서는 OpenStack 환경을 CentOS에서 Ubuntu로 전환하며 겪은 모든 이야기를 다룹니다.</p>
<ul>
<li>운영환경을 Ubuntu로 전환한 이유</li>
<li>Ubuntu private repository 구축 및 운영</li>
<li>OpenStack 컴포넌트 자체 패키징 전략</li>
<li>Ubuntu 환경 운영 중 발생한 문제 공유</li>
<li>Ubuntu 저장소를 직접 구축하고 관리하고 싶으신 분, 파이썬 소스코드를 데비안 패키징을 통해 apt 로 설치하도록 만들어보고 싶으신 분이라면 이 발표가 많은 도움이 될 것입니다.</li>
</ul>
</blockquote>
<blockquote>
<p>Speaker : Seongsoo Cho, Wonkyu Choi</p>
</blockquote>
<h3>4.1 내부 패키지 저장소</h3>
<p>2019년 CentOS를 기반으로 구축되었던 초기 NHN 클라우드는, <code>CentOS 7.x</code>에서 <code>Ubuntu 18.0.4</code>로 의 전환과정을 수행하였다. Ubuntu로의 전환 이유 몇가지는 다음과 같다.</p>
<ul>
<li>CentOS의 EOL</li>
<li>OpenStack과의 호환성</li>
<li>기존 Yum Package와 Pip 관리 이원화를 개선</li>
</ul>
<p>추후 <code>Ubuntu 20.0.4</code>가 출시되면서 추가적으로 검토 및 마이그레이션이 필요했던 작업 중에서 일부 리스트로 관리되던 구성이 yaml로 변경되는 상황도 있었다.</p>
<ol>
<li>
<p>Netplan의 네트워크 설정 파일 - <code>Ubuntu 18.04</code>에서는 네트워크 인터페이스를 설정하는 데 <code>Netplan</code>이 도입되었으며, 이전의 방식인 /etc/network/interfaces 파일을 사용하는 경우도 있었다. <code>Ubuntu 20.04</code>에서도 Netplan이 계속 사용되며, 설정 파일은 <code>/etc/netplan/</code> 디렉토리에 <code>YAML</code> 형식으로 저장된다.</p>
</li>
<li>
<p>APT 패키지 관리 - 일부 경우에 특정 패키지나 설정에 대해 YAML 형식의 파일이 필요할 수 있다.</p>
</li>
<li>
<p>Snap 패키지 - <code>Ubuntu 20.04</code>에서는 Snap 패키지 시스템이 더욱 강조되며, Snap 패키지의 메타데이터와 설정 파일 YAML 형식을 사용한다.</p>
</li>
</ol>
<p>개발 패키지를 공개된 패키지들과 분리하기 위해 내부에 별도 미러 저장소를 사용하였는데, 기존 <code>Pulp</code>를 사용하였으나 신규 버전인 <code>Pulp3</code>에서는 당시 CLI를 지원하지 않아 <code>Aptly</code> 를 선택했다고 했다.</p>
<ul>
<li><a href="https://www.aptly.info/" target="_blank" rel="noopener noreferrer">aptly.info</a></li>
<li><a href="https://pulpproject.org/pulp-cli/" target="_blank" rel="noopener noreferrer">Pulp3 CLI</a></li>
</ul>
<h3>4.2 unattended-upgrades</h3>
<p>내부 저장소에 대해 강조한 이유는 내부에 수많은 서버를 관리하는데 있어 패키지 버전이 다른경우 운영상 부담이 커지는 것이 있었고, 패키지 관리 미흡으로 인해 장애가 발생한 경험이 있어 계속 강조되었다.</p>
<figure><img src="https://raw.githubusercontent.com/Great-Stone/images/master/picgo/Monosnap Untitled | onemodel 2024-08-11 11-55-11.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<p>장애가 발생한 상황을 간단히 정리하면,</p>
<ol>
<li>의도하지 않게 내부 패키지 저장소가 외부 저장소의 새로운 패키지로 업데이트 되었고,</li>
<li>Ubuntu에는 자동으로 패키지를 업그레이드 해주는 기능이 켜져 있었다.</li>
<li>이런 장애는 꼭 새벽에 발생하더라...</li>
</ol>
<p>이건 마치 이전에 윈도우 서버의 자동 업그레이드가 켜져있어서 재부팅되면서 장애났던 순간을 상기시켜줬다.</p>
<ul>
<li><a href="https://ly.lv/128" target="_blank" rel="noopener noreferrer">Unattended upgrade 비활성화</a></li>
</ul>
<h2>5. 쉬운 오케스트레이터, 노마드 경험하기 (13:30)</h2>
<blockquote>
<p>BM, VM, Cloud, IoT, Edge에 이르기까지 쉽게 적용할 수 있는 HashiCorp Nomad를 경험해 보세요.</p>
<ul>
<li>Nomad 소개</li>
<li>Nomad 컨셉과 구조</li>
<li>Nomad 아키텍처</li>
<li>Nomad 스케줄러 동작</li>
<li>Nomad 상호작용 확인</li>
<li>Nomad Job &amp; Driver</li>
<li>Nomad Cluster</li>
<li>Nomad HA</li>
<li>Job 예제</li>
<li>실습 참여자 간 클러스터 구성</li>
</ul>
</blockquote>
<blockquote>
<p>Speaker : GyuSeok Lee</p>
</blockquote>
<blockquote>
<p>Slide : <a href="https://docs.google.com/presentation/d/18H1j4kEqBd-9eYHx0jfbgG4v_plWy0_QkZpS8_wksDE/edit?usp=sharing" target="_blank" rel="noopener noreferrer">https://docs.google.com/presentation/d/18H1j4kEqBd-9eYHx0jfbgG4v_plWy0_QkZpS8_wksDE/edit?usp=sharing</a></p>
</blockquote>
<p>Ubuntu 리눅스도 서버환경으로 사용하면, 목적은 그위에 실행되는 애플리케이션을 실행하는것 또한 하나의 목적이므로 쉽게 사용할 수 있는 Nomad의 실습을 포함한 워크샵을 진행하였다.</p>
<p>Nomad를 사용하는 사례를 보면 이미 오케스트레이터를 이해하고 사용해본 경험치가 있는 사용자들이 좀더 쉽고 관리하기 용이한 오케스트레이터로서 Nomad를 찾고 있다는 공통점이 있다.</p>
<p>Nomad의 장점은 다음과 같다.</p>
<ul>
<li>간단한 구성</li>
<li>다양한 애플리케이션 실행 형태를 지원
<ul>
<li>Docker / Podman</li>
<li>Java</li>
<li>Exec(실행 스크립트)</li>
</ul>
</li>
<li>스케줄링 지원
<ul>
<li>Service : 지속 실행되는 형태</li>
<li>System : 모든 서버에서 하나씩 실행</li>
<li>Batch : 실행 후 종료, AWS Lambda 처럼 실행</li>
<li>SysBatch : 모든 서버에서 배치를 실행</li>
</ul>
</li>
<li>대량의 서버 규모 지원 : 6000대 이상의 테스트된 노드 수</li>
<li>Edge : 네트워크 단절 상황 지원</li>
<li>IoT : 가장 적은 오케스트레이션 리소스</li>
</ul>
<h2>6. 로봇 소프트웨어 배포 사례 (16:20)</h2>
<blockquote>
<p>현업에서 다양한 로봇 프로젝트들을 수행하면서 개발자로서 겪었던 소프트웨어 업데이트 경험담을 공유합니다. 로봇 통합 시스템을 구축하는데 발생했던 의존성 문제와 최신 버전의 소프트웨어를 배포하고자 할 때 겪었던 문제점을 이야기하고, 이로서 Ubuntu Snap 을 활용하면서 얻을 수 있는 장점에 대해 발표합니다.</p>
</blockquote>
<blockquote>
<p>Speakers: Jihyeon Kwon (robot software engineer), Sung Hoon Kim</p>
</blockquote>
<p><a href="https://clobot.co.kr" target="_blank" rel="noopener noreferrer">클로봇</a> 에서 로봇에 탑재되는 Ubuntu가 탑재된 로봇의 소프트웨어를 관리하기 위한 방안에 대해 설명해주었다.</p>
<h3>6.1 로봇 소프트웨어 업데이트 방식</h3>
<h4>6.1.1	설치자가 직접 로봇 소프트웨어를 업데이트</h4>
<p>소스코드를 로봇에서 직접 빌드했던, 가장 단순한 방식이지만 휴먼 에러 발생 가능성이 높고, 현장에 가서 작업하는 상황으로 인력, 시간, 비용측면의 리소스 소모가 심하다.</p>
<h4>6.1.2	Debian 패키지로 소스코드를 빌드 및 설치</h4>
<p>로봇에서 빌드하지 않고 패키지화하면 설치가 단순해지고 휴먼에러는 줄일 수 있지만 다른 패키지들간의 의존성 문제가 발생하는 상황이 잦다.</p>
<h4>6.1.3	로봇 기동 시 OTA(Over-the-air) 서버에 연동하여 업데이트</h4>
<p>안정된 업데이트를 제공하지만 소규모인 경우 OTA 서버를 따로 구성하는 비용에 대한 문제가 발생한다. 시스템 사양이 변경되어야 하는 경우에는 새로 개발 및 빌드해야 하는 이슈는 여전히 존재했다.</p>
<h4>6.1.4 컨테이너로 구성하여 소프트웨어를 업데이트</h4>
<p>현재 가장 많이 활용하고 있는 방식으로, 소프트웨어 의존성 문제를 해결하고 업데이트 소요 시간을 줄일 수 있었다. 하지만 컨테이너의 용량이 커지면서 경량화에 대한 과제가 있다.</p>
<h4>6.1.5 Ubuntu Snap 활용 계획</h4>
<p>Ubuntu Snap 을 활용하여 로봇 기동 시 자동 업데이트하는 방법을 테스트 하고 있다. Snap은 쉬운 설치 방법과 자동 업데이트를 제공하고 종속성을 관리해준다.</p>
<h3>6.2 Snap</h3>
<figure><img src="https://res.cloudinary.com/canonical/image/fetch/f_auto,q_auto,fl_sanitize,c_fill,w_5444,h_3062/https://design.canonical.com/wp-content/uploads/3124/snapcraft_db_brandmark@4x.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<ul>
<li><a href="https://ubuntu.com/core/services/guide/snaps-intro" target="_blank" rel="noopener noreferrer">Introduction to snaps</a></li>
</ul>
<p>Ubuntu Snap은 Canonical이 개발한 소프트웨어 패키지 형식이자, 애플리케이션 배포 시스템이다. Snap은 주로 Ubuntu에서 사용되지만, 다른 여러 리눅스 배포판에서도 지원된다. Snap Store는 마치 스마트폰의 앱스토어 같아, Snap으로 설치된 애플리케이션을 관리할 수 있다.</p>
<ul>
<li>
<p>자급자족 패키지 (Self-contained Packages) : Snap 패키지는 모든 필요한 종속성을 포함하고 있어, 각 Snap이 독립적으로 실행될 수 있다. 이를 통해 시스템 라이브러리의 버전 충돌 없이 소프트웨어를 실행할 수 있다.</p>
</li>
<li>
<p>샌드박싱 및 보안 : Snap 애플리케이션은 샌드박스 환경에서 실행되며, 필요한 권한이 명시적으로 부여되지 않으면 시스템의 다른 부분에 접근할 수 없다.</p>
</li>
<li>
<p>롤링 업데이트 : Snap 패키지는 자동으로 최신 버전으로 업데이트된다. 개발자는 새로운 버전을 릴리스하면 사용자의 시스템에서 자동으로 업데이트되며, 사용자는 필요에 따라 특정 버전을 고정하거나, 롤백할 수 있다.</p>
</li>
<li>
<p>독립적인 시스템 파일 구조<br>
Snap 애플리케이션은 일반적으로 /snap 디렉토리에 설치되며, 독립된 파일 시스템을 가진다.</p>
</li>
</ul>
<h2>7. Ubuntu Frame &amp; Ubuntu Core 기반 체크인 키오스크 개발기 (16:20)</h2>
<blockquote>
<p>UbuCon Korea 2023의 체크인 키오스크 개발 뒷이야기에 대해 이야기 해 봅니다. 키오스크를 개발을 시작한 계기를 이야기 해 보고, 개발에 활용한 도구인 Ubuntu Frame, Ubuntu Core 그리고 Flutter 등에 대해 이야기 해 보고자 합니다.</p>
<p>개발 과정과 함께 Ubuntu Core 환경에 배포하기 위해 Snap 패키징을 하는 과정에 대해서도 이야기 하고, 데스크탑 앱 Snap 패키징과 어떤점이 다른지도 이야기 해 봅니다.</p>
</blockquote>
<blockquote>
<p>Speaker: Youngbin Han (Ubuntu Korea Community)</p>
</blockquote>
<p>컨퍼런스나 세미나에서 참석자등록을 체크하는 일을 수동으로 한다면 매우 힘든 일일 것이다. Ubuntu core와 Ubuntu Frame을 사용하여 터치 패널이 있는 키오스크를 개발한 이야기가 흥미로웠다.</p>
<h3>7.1 Ubuntu Core</h3>
<ul>
<li><a href="https://ubuntu.com/core" target="_blank" rel="noopener noreferrer">Ubuntu Core</a></li>
</ul>
<p>Ubuntu Core는 Canonical에서 개발한 경량화된 버전의 Ubuntu 운영체제로, 주로 IoT(사물인터넷) 장치와 임베디드 시스템을 위해 설계되었다. Ubuntu Core는 전통적인 Ubuntu와는 달리, 모든 소프트웨어가 Snap 패키지로 배포되고 관리되는 것이 특징입니다. 이를 통해 보다 안정적이고 보안이 강화된 시스템을 제공한다.</p>
<p>기존 Ubuntu와 달리 경량화된 OS이기 때문에 기존 소프트웨어를 사용하지 못하거나 드라이버 호환이 안되는 경우가 있었다고 했다. 또한 활용했던 라즈베리파이 상에서의 디버깅도 네트워크 연결에 제한이 있을 수 있어 방법을 고려해야 한다고 했다.</p>
<ul>
<li><a href="https://ubuntu.com/download/raspberry-pi-core" target="_blank" rel="noopener noreferrer">Install Ubuntu Core on a Raspberry Pi</a></li>
</ul>
<h3>7.2 Ubuntu Frame</h3>
<ul>
<li><a href="https://ubuntu.com/blog/tag/ubuntu-frame" target="_blank" rel="noopener noreferrer">Ubuntu Frame</a></li>
</ul>
<p>Ubuntu Frame에 대해서는 김광연님이 커뮤니티에 기고한 글에 잘 정리되어있다.</p>
<ul>
<li><a href="https://blog.ubuntu-kr.org/2023/02/07/ubuntuframe-recap/" target="_blank" rel="noopener noreferrer">Ubuntu Frame 처음 만나보기</a></li>
</ul>
<p>Ubuntu Frame은 Canonical에서 개발한 그래픽 서버로, 임베디드 장치와 IoT 디스플레이를 위한 경량화된 디스플레이 서버 솔루션이다. Ubuntu Frame은 특히 키오스크, 디지털 사이니지, 정보 단말기 등의 그래픽 애플리케이션을 구동하는 데 최적화되어 있다.</p>
<h2>UbuCon Korea 2024 후기</h2>
<p>오래간만의 커뮤니티 행사가 반가울 뿐이다. 여타 상업적인 세미나 행사에 길들여진 터라 미숙한 진행과 문제들이 거슬릴 수는 있으나, 커뮤니티 운영진과 자원봉사자들이 본업 이외의 시간을 쪼개어 이같은 행사를 기획하고 진행한다는 것을 고려한다면 그저 감사할 따름이다.</p>
<p>트랙이 나눠져 있기도 했고 워크샵을 진행하는 역할로도 참여하여 많은 세션을 듣지는 못했지만, 개발과 배포에 대한 여러 고민들과 나름의 해결책을 찾아가는 과정들이 도움이 되었다.</p>
<p>마지막 추첨시간에도 담첨되어 책을 받았는데, 읽어야 할 책이 넘처나는 상황에서 그저 이 상황을 받아들일 수 밖에 없었다.</p>
<figure><img src="https://raw.githubusercontent.com/Great-Stone/images/master/picgo/image-20240811124726739.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
]]></content:encoded>
      <enclosure url="https://eventusstorage.blob.core.windows.net/evs/Image/ubuntukr/81549/ProjectInfo/Cover/f16d8e1dd7af46cfb910dfaf9574dd60.png" type="image/png"/>
    </item>
    <item>
      <title>하버드 비즈니스 스쿨에서 내가 배운 것들</title>
      <link>https://docmoa.github.io/06-etc/book-memo/what-i-learn-at-HBS.html</link>
      <guid>https://docmoa.github.io/06-etc/book-memo/what-i-learn-at-HBS.html</guid>
      <source url="https://docmoa.github.io/rss.xml">하버드 비즈니스 스쿨에서 내가 배운 것들</source>
      <description>내일의 세상에 ‘다름’을 던지는 젊은 리더들의 성장 수업</description>
      <pubDate>Thu, 18 Jul 2024 13:23:05 GMT</pubDate>
      <content:encoded><![CDATA[
<h2>책 정보</h2>
<blockquote>
<ul>
<li>저자 : 최다혜</li>
<li>출간일 : 2023-4-13</li>
<li>페이지 : 252쪽</li>
<li>출판사 링크 : <a href="https://www.instagram.com/tornadobooks/p/CrQJMUdL5bX/?img_index=1" target="_blank" rel="noopener noreferrer">https://www.instagram.com/tornadobooks/p/CrQJMUdL5bX/?img_index=1</a></li>
<li>책소개 : 내일의 세상에 ‘다름’을 던지는 젊은 리더들의 성장 수업<br>
<img src="https://image.yes24.com/goods/118299749/L" alt="표지" loading="lazy"><br>
우리는 세계를 변화시킬 리더를 양성한다.<br>
We educate leaders who make a differnce in the world.<br>
[하버드 비즈니스 스쿨의 교육이념]</li>
</ul>
</blockquote>
]]></content:encoded>
      <enclosure url="https://image.yes24.com/goods/118299749/L" type="image/"/>
    </item>
    <item>
      <title>EKS Vault auto unseal에 대한 kms ID 변경 시 설정 법</title>
      <link>https://docmoa.github.io/04-HashiCorp/06-Vault/06-Config/Vault-KMS-%EB%B3%80%EA%B2%BD%EB%B2%95.html</link>
      <guid>https://docmoa.github.io/04-HashiCorp/06-Vault/06-Config/Vault-KMS-%EB%B3%80%EA%B2%BD%EB%B2%95.html</guid>
      <source url="https://docmoa.github.io/rss.xml">EKS Vault auto unseal에 대한 kms ID 변경 시 설정 법</source>
      <description>vault container KMS</description>
      <pubDate>Mon, 15 Jul 2024 05:44:59 GMT</pubDate>
      <content:encoded><![CDATA[
<h2>1. 사전 요구조건 및 KMS ID 정보 확인</h2>
<h3>1.1 config.hcl 파일</h3>
<div class="language-text" data-highlighter="prismjs" data-ext="text" data-title="text"><pre class="language-text"><code><span class="line">seal "awskms" {</span>
<span class="line">  region     = "ap-northeast-2"</span>
<span class="line">  kms_key_id = "[kms_key_id]"</span>
<span class="line">}</span>
<span class="line"></span></code></pre></div><h3>1.2 초기 vault helm 배포 시 kms ID 설정은 secret으로 관리</h3>
<div class="language-yaml" data-highlighter="prismjs" data-ext="yml" data-title="values.yaml"><pre class="language-yaml"><code><span class="line"><span class="token comment"># 중략</span></span>
<span class="line">    <span class="token key atrule">extraArgs</span><span class="token punctuation">:</span> <span class="token string">"-config=/vault/userconfig/vault-seal-config/config.hcl"</span></span>
<span class="line">    <span class="token key atrule">volumes</span><span class="token punctuation">:</span></span>
<span class="line">      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> userconfig<span class="token punctuation">-</span>vault<span class="token punctuation">-</span>seal<span class="token punctuation">-</span>config</span>
<span class="line">        <span class="token key atrule">secret</span><span class="token punctuation">:</span></span>
<span class="line">          <span class="token key atrule">defaultMode</span><span class="token punctuation">:</span> <span class="token number">420</span></span>
<span class="line">          <span class="token key atrule">secretName</span><span class="token punctuation">:</span> vault<span class="token punctuation">-</span>seal<span class="token punctuation">-</span>config</span>
<span class="line">    <span class="token key atrule">volumeMounts</span><span class="token punctuation">:</span></span>
<span class="line">      <span class="token punctuation">-</span> <span class="token key atrule">mountPath</span><span class="token punctuation">:</span> /vault/userconfig/vault<span class="token punctuation">-</span>seal<span class="token punctuation">-</span>config</span>
<span class="line">        <span class="token key atrule">name</span><span class="token punctuation">:</span> userconfig<span class="token punctuation">-</span>vault<span class="token punctuation">-</span>seal<span class="token punctuation">-</span>config</span>
<span class="line">        <span class="token key atrule">readOnly</span><span class="token punctuation">:</span> <span class="token boolean important">true</span></span>
<span class="line"></span></code></pre></div><h3>1.3 kms ID secret</h3>
<figure><figcaption></figcaption></figure>
<h2>2. KMS ID 변경</h2>
<h3>2.1 초기 KMS ID 확인</h3>
<div class="language-hcl" data-highlighter="prismjs" data-ext="hcl" data-title="hcl"><pre class="language-hcl"><code><span class="line">seal <span class="token string">"awskms"</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token property">region</span>     <span class="token punctuation">=</span> <span class="token string">"ap-northeast-2"</span></span>
<span class="line">  <span class="token property">kms_key_id</span> <span class="token punctuation">=</span> <span class="token string">"[kms_key_id]"</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre></div><h3>2.2 kubernetes에 올라간 config.hcl 정보를 base64 인코딩한 secret 값</h3>

<h3>2.3 암호화 정보 복호화</h3>
<figure><figcaption></figcaption></figure>
<h3>2.3 vault 배포 시 Container 내부 KMS ID 값 확인</h3>
<figure><figcaption></figcaption></figure>
<h3>2.3 변경 되는 KMS ID 변경</h3>
<ul>
<li><code>d62b42cc-03e1-4950-9364-8830143f5c70</code> =&gt; <code>8dc36bf2-c2f8-4686-bba1-f8ef143a2715</code> KMS ID 변경</li>
</ul>
<div class="language-text" data-highlighter="prismjs" data-ext="text" data-title="text"><pre class="language-text"><code><span class="line">seal "awskms" {</span>
<span class="line">  region     = "ap-northeast-2"</span>
<span class="line">  kms_key_id = "8dc36bf2-c2f8-4686-bba1-f8ef143a2715"</span>
<span class="line">}</span>
<span class="line"></span></code></pre></div><h3>2.4 변경 된 config.hcl 파일 secret update</h3>
<div class="language-bash" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="line">kubectl create secret generic vault-seal-config <span class="token punctuation">\</span></span>
<span class="line">  <span class="token parameter variable">--namespace</span><span class="token operator">=</span>default <span class="token punctuation">\</span></span>
<span class="line">  --from-file<span class="token operator">=</span>./config.hcl <span class="token punctuation">\</span></span>
<span class="line">  --dry-run <span class="token parameter variable">-o</span> yaml <span class="token operator">|</span> kubectl apply <span class="token parameter variable">-f</span> -</span>
<span class="line"></span></code></pre></div><h3>2.5 변경 된 kubernetes에 올라간 config.hcl 정보가 암호화 된 secret 값</h3>

<h3>2.6 변경 된 암호화 정보 복호화</h3>
<figure><figcaption></figcaption></figure>
<h3>2.7 변경 된 secret 정보가 실제 pod 내 적용 되어 있는 확인</h3>
<figure><figcaption></figcaption></figure>
<h3>2.8 KMS ID 변경 이후 auto-unseal 정상 작동 확인</h3>
<figure><figcaption></figcaption></figure>
<h2>3. values.yaml</h2>
<div class="language-yaml" data-highlighter="prismjs" data-ext="yml" data-title="values.yaml"><pre class="language-yaml"><code><span class="line"><span class="token key atrule">server</span><span class="token punctuation">:</span></span>
<span class="line">  <span class="token key atrule">enterpriseLicense</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token key atrule">secretName</span><span class="token punctuation">:</span> vault<span class="token punctuation">-</span>ent<span class="token punctuation">-</span>license</span>
<span class="line">  <span class="token key atrule">ha</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token key atrule">enabled</span><span class="token punctuation">:</span> <span class="token boolean important">true</span></span>
<span class="line">    <span class="token key atrule">replicas</span><span class="token punctuation">:</span> <span class="token number">1</span></span>
<span class="line">    <span class="token key atrule">raft</span><span class="token punctuation">:</span></span>
<span class="line">      <span class="token key atrule">enabled</span><span class="token punctuation">:</span> <span class="token boolean important">true</span></span>
<span class="line">      <span class="token key atrule">config</span><span class="token punctuation">:</span> <span class="token punctuation">|</span><span class="token scalar string"></span>
<span class="line">        ui = true</span></span>
<span class="line"></span>
<span class="line">        listener "tcp" <span class="token punctuation">{</span></span>
<span class="line">          tls_disable = 1</span>
<span class="line">          address = "<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">:</span>8200"</span>
<span class="line">          cluster_address = "<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">:</span>8201"</span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">        <span class="token comment">#seal "awskms" {</span></span>
<span class="line">        <span class="token comment">#  region     = "ap-northeast-2"</span></span>
<span class="line">        <span class="token comment">#  kms_key_id = "d62b42cc-03e1-4950-9364-8830143f5c70"</span></span>
<span class="line">        <span class="token comment">#}</span></span>
<span class="line">        storage "raft" <span class="token punctuation">{</span></span>
<span class="line">          path = "/vault/data"</span>
<span class="line">          retry_join <span class="token punctuation">{</span></span>
<span class="line">            leader_api_addr = "https<span class="token punctuation">:</span>//vault<span class="token punctuation">-</span>0.vault<span class="token punctuation">-</span>internal<span class="token punctuation">:</span>8200"</span>
<span class="line">          <span class="token punctuation">}</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">        service_registration "kubernetes" <span class="token punctuation">{</span><span class="token punctuation">}</span></span>
<span class="line">  <span class="token key atrule">image</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token key atrule">repository</span><span class="token punctuation">:</span> hashicorp/vault<span class="token punctuation">-</span>enterprise</span>
<span class="line">    <span class="token key atrule">tag</span><span class="token punctuation">:</span> 1.12.1<span class="token punctuation">-</span>ent</span>
<span class="line">  <span class="token key atrule">extraArgs</span><span class="token punctuation">:</span> <span class="token string">"-config=/vault/userconfig/vault-seal-config/config.hcl"</span></span>
<span class="line">  <span class="token key atrule">extraSecretEnvironmentVars</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token punctuation">-</span> <span class="token key atrule">envName</span><span class="token punctuation">:</span> AWS_ACCESS_KEY_ID</span>
<span class="line">      <span class="token key atrule">secretName</span><span class="token punctuation">:</span> eks<span class="token punctuation">-</span>creds</span>
<span class="line">      <span class="token key atrule">secretKey</span><span class="token punctuation">:</span> AWS_ACCESS_KEY_ID</span>
<span class="line">    <span class="token punctuation">-</span> <span class="token key atrule">envName</span><span class="token punctuation">:</span> AWS_SECRET_ACCESS_KEY</span>
<span class="line">      <span class="token key atrule">secretName</span><span class="token punctuation">:</span> eks<span class="token punctuation">-</span>creds</span>
<span class="line">      <span class="token key atrule">secretKey</span><span class="token punctuation">:</span> AWS_SECRET_ACCESS_KEY</span>
<span class="line">  <span class="token key atrule">volumes</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> userconfig<span class="token punctuation">-</span>vault<span class="token punctuation">-</span>seal<span class="token punctuation">-</span>config</span>
<span class="line">      <span class="token key atrule">secret</span><span class="token punctuation">:</span></span>
<span class="line">        <span class="token key atrule">defaultMode</span><span class="token punctuation">:</span> <span class="token number">420</span></span>
<span class="line">        <span class="token key atrule">secretName</span><span class="token punctuation">:</span> vault<span class="token punctuation">-</span>seal<span class="token punctuation">-</span>config</span>
<span class="line">  <span class="token key atrule">volumeMounts</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token punctuation">-</span> <span class="token key atrule">mountPath</span><span class="token punctuation">:</span> /vault/userconfig/vault<span class="token punctuation">-</span>seal<span class="token punctuation">-</span>config</span>
<span class="line">      <span class="token key atrule">name</span><span class="token punctuation">:</span> userconfig<span class="token punctuation">-</span>vault<span class="token punctuation">-</span>seal<span class="token punctuation">-</span>config</span>
<span class="line">      <span class="token key atrule">readOnly</span><span class="token punctuation">:</span> <span class="token boolean important">true</span></span>
<span class="line">  <span class="token key atrule">service</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token key atrule">type</span><span class="token punctuation">:</span> LoadBalancer</span>
<span class="line">    <span class="token key atrule">loadBalancerClass</span><span class="token punctuation">:</span> service.k8s.aws/nlb</span>
<span class="line">    <span class="token key atrule">annotations</span><span class="token punctuation">:</span></span>
<span class="line">  <span class="token key atrule">dataStorage</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token key atrule">enabled</span><span class="token punctuation">:</span> <span class="token boolean important">true</span></span>
<span class="line">    <span class="token comment">#storageClass: efs-sc</span></span>
<span class="line">    <span class="token key atrule">size</span><span class="token punctuation">:</span> 10Gi</span>
<span class="line"></span></code></pre></div>]]></content:encoded>
    </item>
    <item>
      <title>EKS Vault sidecar를 활용한 logrotate 설정</title>
      <link>https://docmoa.github.io/04-HashiCorp/06-Vault/06-Config/vault-sidecat-logrotate.html</link>
      <guid>https://docmoa.github.io/04-HashiCorp/06-Vault/06-Config/vault-sidecat-logrotate.html</guid>
      <source url="https://docmoa.github.io/rss.xml">EKS Vault sidecar를 활용한 logrotate 설정</source>
      <description>vault container logrotate</description>
      <pubDate>Mon, 15 Jul 2024 05:44:59 GMT</pubDate>
      <content:encoded><![CDATA[
<blockquote>
<ul>
<li><a href="#eksvaultsidecar%EB%A5%BC%ED%99%9C%EC%9A%A9%ED%95%9Clogrotate%EC%84%A4%EC%A0%95-%EC%B0%B8%EA%B3%A0:https://github.com/hansemerkur/vault-logrotate">참고: https://github.com/HanseMerkur/vault-logrotate</a></li>
<li><a href="#eksvaultsidecar%EB%A5%BC%ED%99%9C%EC%9A%A9%ED%95%9Clogrotate%EC%84%A4%EC%A0%95-%EC%B0%B8%EA%B3%A0:%EB%B2%84%EC%A0%84%ED%99%95%EC%9D%B8">참고: 버전 확인</a></li>
</ul>
</blockquote>
<table>
<thead>
<tr>
<th style="text-align:center"></th>
<th style="text-align:center">확인 버전</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">eks cluster</td>
<td style="text-align:center">v1.24</td>
</tr>
<tr>
<td style="text-align:center">aws cli</td>
<td style="text-align:center">v2.10.1</td>
</tr>
<tr>
<td style="text-align:center">eks ctl</td>
<td style="text-align:center">v0.130.0</td>
</tr>
<tr>
<td style="text-align:center">helm</td>
<td style="text-align:center">v3.10.3</td>
</tr>
</tbody>
</table>
<h2>1. EFS CSI Driver 설치</h2>
<h3>1.1 IAM 정책을 만들 json 파일 가져오기 iam-policy-example.json</h3>
<div class="language-bash" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="line"><span class="token function">curl</span> <span class="token parameter variable">-O</span> https://raw.githubusercontent.com/kubernetes-sigs/aws-efs-csi-driver/master/docs/iam-policy-example.json</span>
<span class="line"></span></code></pre></div><div class="language-json" data-highlighter="prismjs" data-ext="json" data-title="iam-policy-example.json"><pre class="language-json"><code><span class="line"><span class="token punctuation">{</span></span>
<span class="line">  <span class="token property">"Version"</span><span class="token operator">:</span> <span class="token string">"2012-10-17"</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token property">"Statement"</span><span class="token operator">:</span> <span class="token punctuation">[</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">      <span class="token property">"Effect"</span><span class="token operator">:</span> <span class="token string">"Allow"</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token property">"Action"</span><span class="token operator">:</span> <span class="token punctuation">[</span></span>
<span class="line">        <span class="token string">"elasticfilesystem:DescribeAccessPoints"</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token string">"elasticfilesystem:DescribeFileSystems"</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token string">"elasticfilesystem:DescribeMountTargets"</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token string">"ec2:DescribeAvailabilityZones"</span></span>
<span class="line">      <span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token property">"Resource"</span><span class="token operator">:</span> <span class="token string">"\*"</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">      <span class="token property">"Effect"</span><span class="token operator">:</span> <span class="token string">"Allow"</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token property">"Action"</span><span class="token operator">:</span> <span class="token punctuation">[</span></span>
<span class="line">        <span class="token string">"elasticfilesystem:CreateAccessPoint"</span></span>
<span class="line">      <span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token property">"Resource"</span><span class="token operator">:</span> <span class="token string">"\*"</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token property">"Condition"</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token property">"StringLike"</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">          <span class="token property">"aws:RequestTag/efs.csi.aws.com/cluster"</span><span class="token operator">:</span> <span class="token string">"true"</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">      <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">      <span class="token property">"Effect"</span><span class="token operator">:</span> <span class="token string">"Allow"</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token property">"Action"</span><span class="token operator">:</span> <span class="token string">"elasticfilesystem:DeleteAccessPoint"</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token property">"Resource"</span><span class="token operator">:</span> <span class="token string">"\*"</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token property">"Condition"</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token property">"StringEquals"</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">          <span class="token property">"aws:ResourceTag/efs.csi.aws.com/cluster"</span><span class="token operator">:</span> <span class="token string">"true"</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">      <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">  <span class="token punctuation">]</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre></div><h3>1.2 IAM 정책</h3>
<div class="language-bash" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="line">aws iam create-policy <span class="token punctuation">\</span></span>
<span class="line">  --policy-name AmazonEKS<span class="token punctuation">\</span>_EFS_CSI_Driver_Policy <span class="token punctuation">\</span></span>
<span class="line">  --policy-document file://iam-policy-example.json</span>
<span class="line"></span></code></pre></div><h3>1.3 클러스터의 OIDC 공급자 URL</h3>
<div class="language-bash" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="line">aws eks describe-cluster <span class="token punctuation">\</span></span>
<span class="line">  <span class="token parameter variable">--name</span> my-cluster <span class="token punctuation">\</span></span>
<span class="line">  <span class="token parameter variable">--query</span> <span class="token string">"cluster.identity.oidc.issuer"</span> <span class="token punctuation">\</span></span>
<span class="line">  <span class="token parameter variable">--output</span> text <span class="token punctuation">\</span></span>
<span class="line">  https://oidc.eks.region-code.amazonaws.com/id/EXAMPLED539D4633E53DE1B71EXAMPLE</span>
<span class="line"></span></code></pre></div><h3>1.4 trust-policy</h3>
<div class="language-json" data-highlighter="prismjs" data-ext="json" data-title="trust-policy.json"><pre class="language-json"><code><span class="line"><span class="token punctuation">{</span></span>
<span class="line">  <span class="token property">"Version"</span><span class="token operator">:</span> <span class="token string">"2012-10-17"</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token property">"Statement"</span><span class="token operator">:</span> <span class="token punctuation">[</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">      <span class="token property">"Effect"</span><span class="token operator">:</span> <span class="token string">"Allow"</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token property">"Principal"</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token property">"Federated"</span><span class="token operator">:</span> <span class="token string">"arn:aws:iam::111122223333:oidc-provider/oidc.eks.region-code.amazonaws.com/id/EXAMPLED539D4633E53DE1B71EXAMPLE"</span></span>
<span class="line">      <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token property">"Action"</span><span class="token operator">:</span> <span class="token string">"sts:AssumeRoleWithWebIdentity"</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token property">"Condition"</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token property">"StringEquals"</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">          <span class="token property">"oidc.eks.region-code.amazonaws.com/id/EXAMPLED539D4633E53DE1B71EXAMPLE:sub"</span><span class="token operator">:</span><span class="token string">"system:serviceaccount:kube-system:efs-csi-controller-sa"</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">      <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">  <span class="token punctuation">]</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre></div><h3>1.4 역할 생성</h3>
<div class="language-bash" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="line">aws iam create-role <span class="token punctuation">\</span></span>
<span class="line">  --role-name AmazonEKS<span class="token punctuation">\</span>_EFS<span class="token punctuation">\</span>_CSI<span class="token punctuation">\</span>_DriverRole <span class="token punctuation">\</span></span>
<span class="line">  --assume-role-policy-document file://<span class="token string">"trust-policy.json"</span></span>
<span class="line"></span></code></pre></div><h3>1.5 IAM 정책을 역할에 연결</h3>
<div class="language-bash" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="line">aws iam attach-role-policy <span class="token punctuation">\</span></span>
<span class="line">  --policy-arn arn:aws:iam::111122223333:policy/AmazonEKS<span class="token punctuation">\</span>_EFS<span class="token punctuation">\</span>_CSI<span class="token punctuation">\</span>_Driver<span class="token punctuation">\</span>_Policy <span class="token punctuation">\</span></span>
<span class="line">  --role-name AmazonEKS<span class="token punctuation">\</span>_EFS<span class="token punctuation">\</span>_CSI<span class="token punctuation">\</span>_DriverRole</span>
<span class="line"></span></code></pre></div><h3>1.6 생성한 IAM 역할의 ARN이 추가된 Kubernetes SA을 생성</h3>
<div class="language-yaml" data-highlighter="prismjs" data-ext="yml" data-title="yml"><pre class="language-yaml"><code><span class="line"><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> v1</span>
<span class="line"><span class="token key atrule">kind</span><span class="token punctuation">:</span> ServiceAccount</span>
<span class="line"><span class="token key atrule">metadata</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token key atrule">labels</span><span class="token punctuation">:</span></span>
<span class="line">      <span class="token key atrule">app.kubernetes.io/name</span><span class="token punctuation">:</span> aws<span class="token punctuation">-</span>efs<span class="token punctuation">-</span>csi<span class="token punctuation">-</span>driver</span>
<span class="line">    <span class="token key atrule">name</span><span class="token punctuation">:</span> efs<span class="token punctuation">-</span>csi<span class="token punctuation">-</span>controller<span class="token punctuation">-</span>sa</span>
<span class="line">    <span class="token key atrule">namespace</span><span class="token punctuation">:</span> kube<span class="token punctuation">-</span>system</span>
<span class="line">    <span class="token key atrule">annotations</span><span class="token punctuation">:</span> </span>
<span class="line">    <span class="token key atrule">eks.amazonaws.com/role-arn</span><span class="token punctuation">:</span> arn<span class="token punctuation">:</span>aws<span class="token punctuation">:</span>iam<span class="token punctuation">:</span><span class="token punctuation">:</span>111122223333<span class="token punctuation">:</span>role/AmazonEKS\_EFS\_CSI\_DriverRole</span>
<span class="line">kubectl apply <span class="token punctuation">-</span>f efs<span class="token punctuation">-</span>service<span class="token punctuation">-</span>account.yaml</span>
<span class="line"></span></code></pre></div><h2>2. Amazon EFS 드라이버 설치</h2>
<h3>2.1 Helm 리포지토리를 추가</h3>
<div class="language-bash" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="line">helm repo <span class="token function">add</span> aws-efs-csi-driver https://kubernetes-sigs.github.io/aws-efs-csi-driver/</span>
<span class="line"></span></code></pre></div><h3>2.2 리포지토리를 업데이트</h3>
<div class="language-bash" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="line">helm repo update</span>
<span class="line"></span></code></pre></div><h3>2.3 Helm 차트를 사용하여 드라이버 릴리스를 설치</h3>
<div class="language-bash" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="line">helm upgrade <span class="token parameter variable">-i</span> aws-efs-csi-driver aws-efs-csi-driver/aws-efs-csi-driver <span class="token punctuation">\</span></span>
<span class="line">  <span class="token parameter variable">--namespace</span> kube-system <span class="token punctuation">\</span></span>
<span class="line">  <span class="token parameter variable">--set</span> <span class="token assign-left variable">image.repository</span><span class="token operator">=</span><span class="token number">602401143452</span>.dkr.ecr.region-code.amazonaws.com/eks/aws-efs-csi-driver <span class="token punctuation">\</span></span>
<span class="line">  <span class="token parameter variable">--set</span> <span class="token assign-left variable">controller.serviceAccount.create</span><span class="token operator">=</span>false <span class="token punctuation">\</span></span>
<span class="line">  <span class="token parameter variable">--set</span> <span class="token assign-left variable">controller.serviceAccount.name</span><span class="token operator">=</span>efs-csi-controller-sa</span>
<span class="line"></span></code></pre></div><h3>2.4 EFS 생성</h3>
<figure><figcaption></figcaption></figure>
<h3>2.4 EFS SG 생성 후 설정</h3>
<figure><figcaption></figcaption></figure>
<h3>2.5 storageclass.yaml로 배포</h3>
<div class="language-yaml" data-highlighter="prismjs" data-ext="yml" data-title="sc.yaml"><pre class="language-yaml"><code><span class="line"><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> v1</span>
<span class="line"><span class="token key atrule">kind</span><span class="token punctuation">:</span> StorageClass</span>
<span class="line"><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> storage.k8s.io/v1</span>
<span class="line"><span class="token key atrule">metadata</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token key atrule">name</span><span class="token punctuation">:</span> efs<span class="token punctuation">-</span>sc</span>
<span class="line"><span class="token key atrule">provisioner</span><span class="token punctuation">:</span> efs.csi.aws.com</span>
<span class="line"><span class="token key atrule">reclaimPolicy</span><span class="token punctuation">:</span> Retain</span>
<span class="line"><span class="token key atrule">parameters</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token key atrule">provisioningMode</span><span class="token punctuation">:</span> efs<span class="token punctuation">-</span>ap</span>
<span class="line">    <span class="token key atrule">fileSystemId</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>생성한 EFS ID 기입<span class="token punctuation">}</span></span>
<span class="line">    <span class="token key atrule">directoryPerms</span><span class="token punctuation">:</span> <span class="token string">"700"</span></span>
<span class="line">    <span class="token key atrule">gidRangeStart</span><span class="token punctuation">:</span> <span class="token string">"1000"</span></span>
<span class="line">    <span class="token key atrule">gidRangeEnd</span><span class="token punctuation">:</span> <span class="token string">"2000"</span></span>
<span class="line"></span></code></pre></div><div class="language-bash" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="line">kubectl apply sc.yaml</span>
<span class="line"></span></code></pre></div><h2>3. helm으로 Vault sidecar를 활용한 logrotate yaml 파일 준비</h2>
<div class="language-yaml" data-highlighter="prismjs" data-ext="yml" data-title="cm-logrotate.yaml"><pre class="language-yaml"><code><span class="line"><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> v1</span>
<span class="line"><span class="token key atrule">kind</span><span class="token punctuation">:</span> ConfigMap</span>
<span class="line"><span class="token key atrule">metadata</span><span class="token punctuation">:</span></span>
<span class="line">  <span class="token key atrule">name</span><span class="token punctuation">:</span> logrotate<span class="token punctuation">-</span>config</span>
<span class="line"><span class="token key atrule">data</span><span class="token punctuation">:</span></span>
<span class="line">  <span class="token key atrule">logrotate.conf</span><span class="token punctuation">:</span> <span class="token punctuation">|</span><span class="token scalar string">    </span>
<span class="line">     /vault/audit/*.txt {       </span>
<span class="line">     missingok              </span>
<span class="line">     compress               </span>
<span class="line">     maxsize 1M             </span>
<span class="line">     crate                  </span>
<span class="line">     dateext                </span>
<span class="line">     dateformat -%Y-%m-%d_%H</span>
<span class="line">     postrotate             </span>
<span class="line">         pkill -HUP vault   </span>
<span class="line">     endscript              </span></span>
<span class="line"> <span class="token punctuation">}</span></span>
<span class="line"></span></code></pre></div><h3>3.1 vault helm으로 배포</h3>
<h4>3.1.1 license secret 생성</h4>
<div class="language-bash" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="line"><span class="token function">touch</span> vault.hclic <span class="token comment"># vault 라이센스 내용 첨부</span></span>
<span class="line"></span>
<span class="line"><span class="token assign-left variable">vaultsecret</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$(</span><span class="token function">cat</span> vault.hclic<span class="token variable">)</span></span></span>
<span class="line"></span>
<span class="line">kubectl create secret generic vault-ent-license --from-literal<span class="token operator">=</span><span class="token string">"license=<span class="token variable">${vaultsecret}</span>"</span></span>
<span class="line"></span></code></pre></div><h4>3.1.2 eks 자격증명 secret 생성</h4>
<div class="language-bash" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="line">kubectl create secret generic eks-creds <span class="token punctuation">\</span></span>
<span class="line">  --from-literal<span class="token operator">=</span>AWS_ACCESS_KEY_ID<span class="token operator">=</span><span class="token string">"[AWS_ACCESS_KEY_ID]"</span> <span class="token punctuation">\</span></span>
<span class="line">  --from-literal<span class="token operator">=</span>AWS_SECRET_ACCESS_KEY<span class="token operator">=</span><span class="token string">"[AWS_SECRET_ACCESS_KEY]"</span></span>
<span class="line"></span></code></pre></div><h4>3.1.3 vault helm values.yaml 배포</h4>
<div class="language-yaml" data-highlighter="prismjs" data-ext="yml" data-title="values.yaml"><pre class="language-yaml"><code><span class="line"><span class="token key atrule">server</span><span class="token punctuation">:</span></span>
<span class="line">  <span class="token comment"># HUP signal for logrotate</span></span>
<span class="line">  <span class="token key atrule">shareProcessNamespace</span><span class="token punctuation">:</span> <span class="token boolean important">true</span></span>
<span class="line">  <span class="token comment"># Add the lograte config from a config map</span></span>
<span class="line">  <span class="token key atrule">volumes</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> logrotate<span class="token punctuation">-</span>config</span>
<span class="line">      <span class="token key atrule">configMap</span><span class="token punctuation">:</span></span>
<span class="line">        <span class="token key atrule">name</span><span class="token punctuation">:</span> logrotate<span class="token punctuation">-</span>config</span>
<span class="line">  <span class="token comment"># And finally the container</span></span>
<span class="line">  <span class="token key atrule">extraContainers</span><span class="token punctuation">:</span></span>
<span class="line">   <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> auditlog<span class="token punctuation">-</span>rotator</span>
<span class="line">     <span class="token key atrule">image</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>aws account ID<span class="token punctuation">]</span>.dkr.ecr.ap<span class="token punctuation">-</span>northeast<span class="token punctuation">-</span>2.amazonaws.com/hasicorp<span class="token punctuation">-</span>repo<span class="token punctuation">:</span>logrotate </span>
<span class="line">     <span class="token key atrule">imagePullPolicy</span><span class="token punctuation">:</span> Always</span>
<span class="line">     <span class="token key atrule">env</span><span class="token punctuation">:</span></span>
<span class="line">       <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> CRONTAB</span>
<span class="line">         <span class="token key atrule">value</span><span class="token punctuation">:</span> <span class="token string">"*/3 * * * *"</span></span>
<span class="line">     <span class="token key atrule">volumeMounts</span><span class="token punctuation">:</span></span>
<span class="line">     <span class="token punctuation">-</span> <span class="token key atrule">mountPath</span><span class="token punctuation">:</span> /etc/logrotate.conf</span>
<span class="line">       <span class="token key atrule">name</span><span class="token punctuation">:</span> logrotate<span class="token punctuation">-</span>config</span>
<span class="line">       <span class="token key atrule">subPath</span><span class="token punctuation">:</span> logrotate.conf</span>
<span class="line">       <span class="token key atrule">readOnly</span><span class="token punctuation">:</span> <span class="token boolean important">true</span></span>
<span class="line">     <span class="token punctuation">-</span> <span class="token key atrule">mountPath</span><span class="token punctuation">:</span> /vault/audit</span>
<span class="line">       <span class="token key atrule">name</span><span class="token punctuation">:</span> audit</span>
<span class="line">  <span class="token key atrule">enterpriseLicense</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token key atrule">secretName</span><span class="token punctuation">:</span> vault<span class="token punctuation">-</span>ent<span class="token punctuation">-</span>license</span>
<span class="line">  <span class="token key atrule">ha</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token key atrule">enabled</span><span class="token punctuation">:</span> <span class="token boolean important">true</span></span>
<span class="line">    <span class="token key atrule">raft</span><span class="token punctuation">:</span></span>
<span class="line">      <span class="token key atrule">enabled</span><span class="token punctuation">:</span> <span class="token boolean important">true</span></span>
<span class="line">      <span class="token key atrule">config</span><span class="token punctuation">:</span> <span class="token punctuation">|</span><span class="token scalar string"></span>
<span class="line">        ui = true</span></span>
<span class="line"></span>
<span class="line">        listener "tcp" <span class="token punctuation">{</span></span>
<span class="line">          tls_disable = 1</span>
<span class="line">          address = "<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">:</span>8200"</span>
<span class="line">          cluster_address = "<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">:</span>8201"</span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">        seal "awskms" <span class="token punctuation">{</span></span>
<span class="line">           region     = "ap<span class="token punctuation">-</span>northeast<span class="token punctuation">-</span>2"</span>
<span class="line">           kms_key_id = "<span class="token punctuation">[</span>kms_key_id<span class="token punctuation">]</span>"</span>
<span class="line">         <span class="token punctuation">}</span></span>
<span class="line">        storage "raft" <span class="token punctuation">{</span></span>
<span class="line">          path = "/vault/data"</span>
<span class="line">          retry_join <span class="token punctuation">{</span></span>
<span class="line">            leader_api_addr = "https<span class="token punctuation">:</span>//vault<span class="token punctuation">-</span>0.vault<span class="token punctuation">-</span>internal<span class="token punctuation">:</span>8200"</span>
<span class="line">          <span class="token punctuation">}</span></span>
<span class="line">          retry_join <span class="token punctuation">{</span></span>
<span class="line">            leader_api_addr = "https<span class="token punctuation">:</span>//vault<span class="token punctuation">-</span>1.vault<span class="token punctuation">-</span>internal<span class="token punctuation">:</span>8200"</span>
<span class="line">          <span class="token punctuation">}</span></span>
<span class="line">          retry_join <span class="token punctuation">{</span></span>
<span class="line">            leader_api_addr = "https<span class="token punctuation">:</span>//vault<span class="token punctuation">-</span>2.vault<span class="token punctuation">-</span>internal<span class="token punctuation">:</span>8200"</span>
<span class="line">          <span class="token punctuation">}</span></span>
<span class="line">         <span class="token punctuation">}</span></span>
<span class="line">        service_registration "kubernetes" <span class="token punctuation">{</span><span class="token punctuation">}</span></span>
<span class="line">  <span class="token key atrule">image</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token key atrule">repository</span><span class="token punctuation">:</span> hashicorp/vault<span class="token punctuation">-</span>enterprise</span>
<span class="line">    <span class="token key atrule">tag</span><span class="token punctuation">:</span> 1.12.1<span class="token punctuation">-</span>ent</span>
<span class="line">  <span class="token key atrule">extraSecretEnvironmentVars</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token punctuation">-</span> <span class="token key atrule">envName</span><span class="token punctuation">:</span> AWS_ACCESS_KEY_ID</span>
<span class="line">      <span class="token key atrule">secretName</span><span class="token punctuation">:</span> eks<span class="token punctuation">-</span>creds</span>
<span class="line">      <span class="token key atrule">secretKey</span><span class="token punctuation">:</span> AWS_ACCESS_KEY_ID</span>
<span class="line">    <span class="token punctuation">-</span> <span class="token key atrule">envName</span><span class="token punctuation">:</span> AWS_SECRET_ACCESS_KEY</span>
<span class="line">      <span class="token key atrule">secretName</span><span class="token punctuation">:</span> eks<span class="token punctuation">-</span>creds</span>
<span class="line">      <span class="token key atrule">secretKey</span><span class="token punctuation">:</span> AWS_SECRET_ACCESS_KEY</span>
<span class="line">  <span class="token key atrule">service</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token key atrule">type</span><span class="token punctuation">:</span> LoadBalancer</span>
<span class="line">    <span class="token key atrule">loadBalancerClass</span><span class="token punctuation">:</span> service.k8s.aws/nlb</span>
<span class="line">    <span class="token key atrule">annotations</span><span class="token punctuation">:</span></span>
<span class="line">  <span class="token key atrule">dataStorage</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token key atrule">enabled</span><span class="token punctuation">:</span> <span class="token boolean important">true</span></span>
<span class="line">    <span class="token key atrule">storageClass</span><span class="token punctuation">:</span> efs<span class="token punctuation">-</span>sc</span>
<span class="line">    <span class="token key atrule">size</span><span class="token punctuation">:</span> 100Gi</span>
<span class="line">  <span class="token key atrule">auditStorage</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token key atrule">enabled</span><span class="token punctuation">:</span> <span class="token boolean important">true</span> </span>
<span class="line">    <span class="token comment"># Size of the PVC created</span></span>
<span class="line">    <span class="token key atrule">size</span><span class="token punctuation">:</span> 100Gi</span>
<span class="line">    <span class="token comment"># Location where the PVC will be mounted.</span></span>
<span class="line">    <span class="token key atrule">mountPath</span><span class="token punctuation">:</span> <span class="token string">"/vault/audit"</span></span>
<span class="line">    <span class="token comment"># Name of the storage class to use.  If null it will use the</span></span>
<span class="line">    <span class="token comment"># configured default Storage Class.</span></span>
<span class="line">    <span class="token key atrule">storageClass</span><span class="token punctuation">:</span> efs<span class="token punctuation">-</span>sc </span>
<span class="line">    <span class="token comment"># Access Mode of the storage device being used for the PVC</span></span>
<span class="line">    <span class="token key atrule">accessMode</span><span class="token punctuation">:</span> ReadWriteOnce</span>
<span class="line">    <span class="token comment"># Annotations to apply to the PVC</span></span>
<span class="line">    <span class="token key atrule">annotations</span><span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre></div><h4>3.1.3 helm repo 등록 및 values.yaml 기반으로 vault 배포</h4>
<div class="language-bash" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="line">helm repo <span class="token function">add</span> hashicorp https://helm.releases.hashicorp.com</span>
<span class="line"></span>
<span class="line">helm repo list</span>
<span class="line"></span>
<span class="line"><span class="token comment"># 설치</span></span>
<span class="line">helm <span class="token function">install</span> vault hashicorp/vault <span class="token parameter variable">-f</span> values.yaml</span>
<span class="line"></span>
<span class="line"><span class="token comment"># 삭제</span></span>
<span class="line">helm uninstall vault hashicorp/vault <span class="token parameter variable">-f</span> values.yaml</span>
<span class="line"></span></code></pre></div><h4>3.1.4 logrotate 적용 확인</h4>
<figure><figcaption></figcaption></figure>
<h4>3.1.5 auditlog-logrotate 설정 확인</h4>
<figure><figcaption></figcaption></figure>
<ul>
<li>1M가 넘어가면 새로 생성 된 파일들은 압축파일로 변환 설정</li>
</ul>
<figure><figcaption></figcaption></figure>
]]></content:encoded>
    </item>
    <item>
      <title>Vault Secret Engine 조회 스크립트</title>
      <link>https://docmoa.github.io/04-HashiCorp/06-Vault/04-UseCase/get-all-secret-engine.html</link>
      <guid>https://docmoa.github.io/04-HashiCorp/06-Vault/04-UseCase/get-all-secret-engine.html</guid>
      <source url="https://docmoa.github.io/rss.xml">Vault Secret Engine 조회 스크립트</source>
      <description>Vault Secret Engine 조회 스크립트 1. Policy namespace 하위 목록을 조회할 수 있는 권한이 필요합니다. sys/namespaces/*: 모든 네임스페이스를 나열하고 읽을 수 있는 권한을 부여합니다. 활성화된 Secret Engine을 조회할 수 있는 권한이 필요합니다. sys/mount...</description>
      <pubDate>Fri, 12 Jul 2024 13:36:28 GMT</pubDate>
      <content:encoded><![CDATA[
<h2>1. Policy</h2>
<ul>
<li><code>namespace</code>  하위 목록을 조회할 수 있는 권한이 필요합니다.
<ul>
<li><code>sys/namespaces/*</code>: 모든 네임스페이스를 나열하고 읽을 수 있는 권한을 부여합니다.</li>
</ul>
</li>
<li>활성화된 Secret Engine을 조회할 수 있는 권한이 필요합니다.
<ul>
<li><code>sys/mounts</code>: 루트 레벨의 마운트 포인트(시크릿 엔진)를 읽을 수 있는 권한을 부여합니다.</li>
<li><code>+/sys/mounts</code>: 모든 네임스페이스의 마운트 포인트를 읽을 수 있는 권한을 부여합니다.</li>
<li><code>+/*/metadata/*</code>: 필요한 경우, 모든 네임스페이스의 KV 시크릿 엔진 메타데이터에 접근할 수 있는 권한을 부여합니다.</li>
</ul>
</li>
</ul>
<div class="language-hcl" data-highlighter="prismjs" data-ext="hcl" data-title="hcl"><pre class="language-hcl"><code><span class="line"><span class="token comment"># 모든 네임스페이스에 대한 읽기 권한</span></span>
<span class="line">path <span class="token string">"sys/namespaces/*"</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token property">capabilities</span> <span class="token punctuation">=</span> <span class="token punctuation">[</span><span class="token string">"list"</span>, <span class="token string">"read"</span><span class="token punctuation">]</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># 모든 네임스페이스의 마운트 포인트(시크릿 엔진) 조회 권한</span></span>
<span class="line">path <span class="token string">"sys/mounts"</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token property">capabilities</span> <span class="token punctuation">=</span> <span class="token punctuation">[</span><span class="token string">"read"</span><span class="token punctuation">]</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># 모든 네임스페이스에서 시크릿 엔진 목록 조회 권한</span></span>
<span class="line">path <span class="token string">"+/sys/mounts"</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token property">capabilities</span> <span class="token punctuation">=</span> <span class="token punctuation">[</span><span class="token string">"read"</span><span class="token punctuation">]</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># 필요한 경우, 특정 시크릿 엔진에 대한 메타데이터 읽기 권한</span></span>
<span class="line"><span class="token comment"># 예: KV 시크릿 엔진</span></span>
<span class="line">path <span class="token string">"+/*/metadata/*"</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token property">capabilities</span> <span class="token punctuation">=</span> <span class="token punctuation">[</span><span class="token string">"list"</span>, <span class="token string">"read"</span><span class="token punctuation">]</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre></div><p>정책 생성 :</p>
<div class="language-bash" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="line">vault policy <span class="token function">write</span> secret-list-getter ./policy.hcl</span>
<span class="line"></span></code></pre></div><h2>2. CLI script (list_vault_secrets.sh)</h2>
<ul>
<li><code>list_vault_secrets.sh</code>의 첫번째 Argument가 기준이 됩니다. (e.g. <code>admin</code>)
<ul>
<li>루트부터 시작: <code>./script.sh</code></li>
<li>특정 네임스페이스부터 시작: <code>./script.sh admin</code> 또는 <code>./script.sh admin/subns</code></li>
</ul>
</li>
<li>하위 namespace를 조회하여 반복적으로 Secret Engine을 조회합니다.</li>
</ul>
<div class="language-bash" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="line"><span class="token shebang important">#!/bin/bash</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># 네임스페이스와 시크릿 엔진을 재귀적으로 조회하는 함수</span></span>
<span class="line"><span class="token function-name function">list_secrets</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token builtin class-name">local</span> <span class="token assign-left variable">full_namespace</span><span class="token operator">=</span><span class="token variable">$1</span></span>
<span class="line">    <span class="token builtin class-name">local</span> <span class="token assign-left variable">indent</span><span class="token operator">=</span><span class="token variable">$2</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment"># 현재 네임스페이스 설정</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token parameter variable">-n</span> <span class="token string">"<span class="token variable">$full_namespace</span>"</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span></span>
<span class="line">        <span class="token builtin class-name">export</span> <span class="token assign-left variable">VAULT_NAMESPACE</span><span class="token operator">=</span><span class="token variable">$full_namespace</span></span>
<span class="line">    <span class="token keyword">else</span></span>
<span class="line">        <span class="token builtin class-name">unset</span> VAULT_NAMESPACE</span>
<span class="line">    <span class="token keyword">fi</span></span>
<span class="line"></span>
<span class="line">    <span class="token builtin class-name">echo</span> <span class="token string">"<span class="token variable">${indent}</span>Namespace: <span class="token variable">${VAULT_NAMESPACE<span class="token operator">:-</span>}</span>"</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment"># 시크릿 엔진 목록 조회</span></span>
<span class="line">    vault secrets list <span class="token parameter variable">-format</span><span class="token operator">=</span>json <span class="token operator"><span class="token file-descriptor important">2</span>&gt;</span>/dev/null <span class="token operator">|</span> jq <span class="token parameter variable">-r</span> <span class="token string">'to_entries[] | select(.value.type != "system") | "\(.key)|\(.value.type)"'</span> <span class="token operator">|</span> <span class="token keyword">while</span> <span class="token assign-left variable"><span class="token environment constant">IFS</span></span><span class="token operator">=</span><span class="token string">'|'</span> <span class="token builtin class-name">read</span> <span class="token parameter variable">-r</span> engine <span class="token builtin class-name">type</span><span class="token punctuation">;</span> <span class="token keyword">do</span></span>
<span class="line">        <span class="token builtin class-name">echo</span> <span class="token string">"<span class="token variable">${indent}</span>  Secret Engine: <span class="token variable">$engine</span> (Type: <span class="token variable">$type</span>)"</span></span>
<span class="line">    <span class="token keyword">done</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment"># 하위 네임스페이스 조회</span></span>
<span class="line">    vault namespace list <span class="token parameter variable">-format</span><span class="token operator">=</span>json <span class="token operator"><span class="token file-descriptor important">2</span>&gt;</span>/dev/null <span class="token operator">|</span> jq <span class="token parameter variable">-r</span> <span class="token string">'.[]'</span> <span class="token operator">|</span> <span class="token keyword">while</span> <span class="token builtin class-name">read</span> subns<span class="token punctuation">;</span> <span class="token keyword">do</span></span>
<span class="line">        <span class="token builtin class-name">local</span> new_namespace</span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token parameter variable">-n</span> <span class="token string">"<span class="token variable">$full_namespace</span>"</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span></span>
<span class="line">            <span class="token assign-left variable">new_namespace</span><span class="token operator">=</span><span class="token string">"<span class="token variable">${full_namespace}</span>/<span class="token variable">${subns}</span>"</span></span>
<span class="line">        <span class="token keyword">else</span></span>
<span class="line">            <span class="token assign-left variable">new_namespace</span><span class="token operator">=</span><span class="token string">"<span class="token variable">$subns</span>"</span></span>
<span class="line">        <span class="token keyword">fi</span></span>
<span class="line">        list_secrets <span class="token string">"<span class="token variable">$new_namespace</span>"</span> <span class="token string">"  <span class="token variable">${indent}</span>"</span></span>
<span class="line">    <span class="token keyword">done</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># VAULT_TOKEN 환경변수 확인</span></span>
<span class="line"><span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token parameter variable">-z</span> <span class="token string">"<span class="token variable">$VAULT_TOKEN</span>"</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span></span>
<span class="line">    <span class="token builtin class-name">echo</span> <span class="token string">"Error: VAULT_TOKEN environment variable is not set."</span></span>
<span class="line">    <span class="token builtin class-name">exit</span> <span class="token number">1</span></span>
<span class="line"><span class="token keyword">fi</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># 메인 실행</span></span>
<span class="line"><span class="token builtin class-name">echo</span> <span class="token string">"Listing all secret engines in all namespaces:"</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># 첫 번째 인자가 있으면 해당 네임스페이스부터 시작, 없으면 루트부터 시작</span></span>
<span class="line"><span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token parameter variable">-n</span> <span class="token string">"<span class="token variable">$1</span>"</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span></span>
<span class="line">    list_secrets <span class="token string">"<span class="token variable">$1</span>"</span> <span class="token string">""</span></span>
<span class="line"><span class="token keyword">else</span></span>
<span class="line">    list_secrets <span class="token string">""</span> <span class="token string">""</span></span>
<span class="line"><span class="token keyword">fi</span></span>
<span class="line"></span></code></pre></div><h2>3. Token 생성 및 실행</h2>
<p>실행 예시</p>
<div class="language-bash" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="line"><span class="token assign-left variable">VAULT_TOKEN</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$(</span>vault token create <span class="token parameter variable">-field</span><span class="token operator">=</span>token <span class="token parameter variable">-policy</span><span class="token operator">=</span>secret-list-getter<span class="token variable">)</span></span> <span class="token punctuation">\</span></span>
<span class="line">  ./list_vault_secrets.sh <span class="token punctuation">\</span></span>
<span class="line">  admin</span>
<span class="line"></span></code></pre></div><p>결과 1 (HCP Vault - admin namespace 기준)</p>
<div class="language-bash" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="line">$ <span class="token assign-left variable">VAULT_TOKEN</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$(</span>vault token create <span class="token parameter variable">-field</span><span class="token operator">=</span>token <span class="token parameter variable">-policy</span><span class="token operator">=</span>secret-list-getter<span class="token variable">)</span></span> <span class="token punctuation">\</span></span>
<span class="line">  ./list_vault_secrets.sh <span class="token punctuation">\</span></span>
<span class="line">  admin</span>
<span class="line"></span>
<span class="line">Listing all secret engines <span class="token keyword">in</span> all namespaces:</span>
<span class="line">Namespace: admin</span>
<span class="line">  Secret Engine: alicloud/ <span class="token punctuation">(</span>Type: alicloud<span class="token punctuation">)</span></span>
<span class="line">  Secret Engine: ansible-ssh/ <span class="token punctuation">(</span>Type: <span class="token function">ssh</span><span class="token punctuation">)</span></span>
<span class="line">  Secret Engine: aws-doormat/ <span class="token punctuation">(</span>Type: aws<span class="token punctuation">)</span></span>
<span class="line">  Secret Engine: aws/ <span class="token punctuation">(</span>Type: aws<span class="token punctuation">)</span></span>
<span class="line">  Secret Engine: azure/ <span class="token punctuation">(</span>Type: azure<span class="token punctuation">)</span></span>
<span class="line">  Secret Engine: cubbyhole/ <span class="token punctuation">(</span>Type: ns_cubbyhole<span class="token punctuation">)</span></span>
<span class="line">  Secret Engine: gcp/ <span class="token punctuation">(</span>Type: gcp<span class="token punctuation">)</span></span>
<span class="line">  Secret Engine: identity/ <span class="token punctuation">(</span>Type: ns_identity<span class="token punctuation">)</span></span>
<span class="line">  Secret Engine: kv_v1/ <span class="token punctuation">(</span>Type: kv<span class="token punctuation">)</span></span>
<span class="line">  Secret Engine: my_kv/ <span class="token punctuation">(</span>Type: kv<span class="token punctuation">)</span></span>
<span class="line">  Secret Engine: pki/ <span class="token punctuation">(</span>Type: pki<span class="token punctuation">)</span></span>
<span class="line">  Secret Engine: pki_int/ <span class="token punctuation">(</span>Type: pki<span class="token punctuation">)</span></span>
<span class="line">  Secret Engine: pki_kv/ <span class="token punctuation">(</span>Type: kv<span class="token punctuation">)</span></span>
<span class="line">  Secret Engine: planetscale/ <span class="token punctuation">(</span>Type: database<span class="token punctuation">)</span></span>
<span class="line">  Secret Engine: secret/ <span class="token punctuation">(</span>Type: kv<span class="token punctuation">)</span></span>
<span class="line">  Secret Engine: ssh/ <span class="token punctuation">(</span>Type: <span class="token function">ssh</span><span class="token punctuation">)</span></span>
<span class="line">  Secret Engine: sys/ <span class="token punctuation">(</span>Type: ns_system<span class="token punctuation">)</span></span>
<span class="line">  Secret Engine: totp/ <span class="token punctuation">(</span>Type: totp<span class="token punctuation">)</span></span>
<span class="line">  Secret Engine: transit/ <span class="token punctuation">(</span>Type: transit<span class="token punctuation">)</span></span>
<span class="line">  Namespace: admin/A-Com/</span>
<span class="line">    Secret Engine: cubbyhole/ <span class="token punctuation">(</span>Type: ns_cubbyhole<span class="token punctuation">)</span></span>
<span class="line">    Secret Engine: identity/ <span class="token punctuation">(</span>Type: ns_identity<span class="token punctuation">)</span></span>
<span class="line">    Secret Engine: sys/ <span class="token punctuation">(</span>Type: ns_system<span class="token punctuation">)</span></span>
<span class="line">  Namespace: admin/my-namespace/</span>
<span class="line">    Secret Engine: cubbyhole/ <span class="token punctuation">(</span>Type: ns_cubbyhole<span class="token punctuation">)</span></span>
<span class="line">    Secret Engine: identity/ <span class="token punctuation">(</span>Type: ns_identity<span class="token punctuation">)</span></span>
<span class="line">    Secret Engine: sys/ <span class="token punctuation">(</span>Type: ns_system<span class="token punctuation">)</span></span>
<span class="line">  Namespace: admin/with-okta/</span>
<span class="line">    Secret Engine: cubbyhole/ <span class="token punctuation">(</span>Type: ns_cubbyhole<span class="token punctuation">)</span></span>
<span class="line">    Secret Engine: identity/ <span class="token punctuation">(</span>Type: ns_identity<span class="token punctuation">)</span></span>
<span class="line">    Secret Engine: sample-secret/ <span class="token punctuation">(</span>Type: kv<span class="token punctuation">)</span></span>
<span class="line">    Secret Engine: sys/ <span class="token punctuation">(</span>Type: ns_system<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre></div><p>결과 2 (Vault 설치형 - root(/) namespace 기준)</p>
<div class="language-bash" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="line">$ <span class="token assign-left variable">VAULT_TOKEN</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$(</span>vault token create <span class="token parameter variable">-field</span><span class="token operator">=</span>token <span class="token parameter variable">-policy</span><span class="token operator">=</span>secret-list-getter<span class="token variable">)</span></span> <span class="token punctuation">\</span></span>
<span class="line">  ./list_vault_secrets.sh</span>
<span class="line"></span>
<span class="line">Listing all secret engines <span class="token keyword">in</span> all namespaces:</span>
<span class="line">Namespace:</span>
<span class="line">  Secret Engine: cubbyhole/ <span class="token punctuation">(</span>Type: cubbyhole<span class="token punctuation">)</span></span>
<span class="line">  Secret Engine: identity/ <span class="token punctuation">(</span>Type: identity<span class="token punctuation">)</span></span>
<span class="line">  Secret Engine: secret/ <span class="token punctuation">(</span>Type: kv<span class="token punctuation">)</span></span>
<span class="line">  Namespace: sub1/</span>
<span class="line">    Secret Engine: aws/ <span class="token punctuation">(</span>Type: aws<span class="token punctuation">)</span></span>
<span class="line">    Secret Engine: cubbyhole/ <span class="token punctuation">(</span>Type: ns_cubbyhole<span class="token punctuation">)</span></span>
<span class="line">    Secret Engine: identity/ <span class="token punctuation">(</span>Type: ns_identity<span class="token punctuation">)</span></span>
<span class="line">    Secret Engine: sys/ <span class="token punctuation">(</span>Type: ns_system<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre></div>]]></content:encoded>
    </item>
    <item>
      <title>Container component deploy</title>
      <link>https://docmoa.github.io/04-HashiCorp/03-Terraform/06-TerraformEnterprise/FDO-only-container.html</link>
      <guid>https://docmoa.github.io/04-HashiCorp/03-Terraform/06-TerraformEnterprise/FDO-only-container.html</guid>
      <source url="https://docmoa.github.io/rss.xml">Container component deploy</source>
      <description>Terraform Enterprise FDO</description>
      <pubDate>Wed, 10 Jul 2024 04:16:31 GMT</pubDate>
      <content:encoded><![CDATA[<figure><figcaption></figcaption></figure>
<p>본 문서는 EKS 환경에 Flexible Deployment Options를 배포 하면서 DB를 aws 서비스를 사용하지 않고 container로 배포하는 테스트 기록을 남긴 문서입니다.</p>
<h1>Container component deploy</h1>
<p>사전 조건</p>
<ol>
<li>FDO 사설 인증서(본 테스트는 openssl로 진행) 및 도메인 준비(tfe.crt,tfe.key)</li>
<li>FDO 용 라이선스</li>
</ol>
<p>시나리오</p>
<ol>
<li>
<p>eks 환경에 terraform(FDO), redis, postgresql, minio helm 배포</p>
</li>
<li>
<p>vcs 연동 및 plan, apply</p>
</li>
<li>
<p>FDO api를 사용한 backup &amp; restore</p>
</li>
<li>
<p>eks cluster를 velero로 사용하여 backup &amp; restore</p>
</li>
</ol>
<table>
<thead>
<tr>
<th style="text-align:center"><strong>Element</strong></th>
<th style="text-align:center"><strong>버전(docker image 경우 tag 명)</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">EKS</td>
<td style="text-align:center">1.26</td>
</tr>
<tr>
<td style="text-align:center">kubectl</td>
<td style="text-align:center">1.23.7</td>
</tr>
<tr>
<td style="text-align:center">Helm</td>
<td style="text-align:center">3.8.2</td>
</tr>
<tr>
<td style="text-align:center">Flexible Deployment Options</td>
<td style="text-align:center">v202311-1</td>
</tr>
<tr>
<td style="text-align:center">Redis</td>
<td style="text-align:center">7.0.11-debian-11-r12</td>
</tr>
<tr>
<td style="text-align:center">Postgres</td>
<td style="text-align:center">14.5.0-debian-11-r35</td>
</tr>
<tr>
<td style="text-align:center">minio</td>
<td style="text-align:center">RELEASE.2023-05-18T00-05-36Z</td>
</tr>
<tr>
<td style="text-align:center">velero</td>
<td style="text-align:center">1.9.2</td>
</tr>
</tbody>
</table>
<p>[주의]</p>
<div class="hint-container caution">
<p class="hint-container-title">위험</p>
<p>FDO docker version image(v202311-1) 기준 Postgres 15.x version 사용 시 아래와 같은 에러로 정상적으로 백업이 이루어 지지 않아 14.5 버전을 사용 하였습니다.</p>
<div class="language-text" data-highlighter="prismjs" data-ext="text" data-title="text"><pre class="language-text"><code><span class="line">pg_dump: error: server version: 15.3; pg_dump version: 14.9 (Ubuntu 14.9-1.pgdg22.04+1)</span>
<span class="line">pg_dump: error: aborting because of server version mismatch</span>
<span class="line"></span></code></pre></div></div>
<h1>1. Redis Helm</h1>
<h2>Redis</h2>
<h3>1.1 helm values.yaml</h3>
<p>참고: 아래 yaml 내용은 첨부 된 redis yaml 파일에서 설정 한 부분만 기입</p>
<div class="language-text" data-highlighter="prismjs" data-ext="text" data-title="text"><pre class="language-text"><code><span class="line">[중략]</span>
<span class="line"></span>
<span class="line">image:</span>
<span class="line">  registry: docker.io</span>
<span class="line">  repository: bitnami/redis</span>
<span class="line">  tag: 7.0.11-debian-11-r12</span>
<span class="line"></span>
<span class="line">[중략]</span>
<span class="line"></span>
<span class="line">tls:</span>
<span class="line">  enabled: false</span>
<span class="line"></span>
<span class="line">[중략]</span>
<span class="line"></span></code></pre></div><h3>1.2 Command</h3>
<h4>1.2.1 helm 배포</h4>
<div class="language-text" data-highlighter="prismjs" data-ext="text" data-title="text"><pre class="language-text"><code><span class="line">helm repo add bitnami https://charts.bitnami.com/bitnami</span>
<span class="line"></span>
<span class="line">kubectl create ns redis</span>
<span class="line"></span>
<span class="line">helm install redis-dev  -n redis --version 17.11.3 . --values values.yaml --debug</span>
<span class="line"></span></code></pre></div><h1>2. Postgresql Helm 배포</h1>
<h2>Postgresql</h2>
<h3>2.1 helm values.yaml</h3>
<p>참고: 아래 yaml 내용은 첨부 된 Postgresql yaml 파일에서 설정 한 부분만<br>
기입</p>
<div class="language-text" data-highlighter="prismjs" data-ext="text" data-title="text"><pre class="language-text"><code><span class="line">[중략]</span>
<span class="line"></span>
<span class="line">image:</span>
<span class="line">  registry: docker.io</span>
<span class="line">  repository: bitnami/postgresql</span>
<span class="line">  tag: 14.5.0-debian-11-r35</span>
<span class="line">  </span>
<span class="line">[중략]</span>
<span class="line"></span>
<span class="line">auth:</span>
<span class="line">  enablePostgresUser: true</span>
<span class="line">  postgresPassword: "[postgresPassword]"</span>
<span class="line">  username: "[postgre username]"</span>
<span class="line">  password: "[password]"</span>
<span class="line">  database: "[database name]"</span>
<span class="line">  </span>
<span class="line">[중략]</span>
<span class="line"></span></code></pre></div><h3>2.2 Command</h3>
<h4>2.2.1 helm 배포</h4>
<div class="language-text" data-highlighter="prismjs" data-ext="text" data-title="text"><pre class="language-text"><code><span class="line">helm repo add bitnami https://charts.bitnami.com/bitnami</span>
<span class="line">helm install postgresql-dev  -n default --version 11.9.13 . --values values.yaml --debug</span>
<span class="line"></span></code></pre></div><h4>2.2.2 posgresql DB 확인</h4>
<div class="language-text" data-highlighter="prismjs" data-ext="text" data-title="text"><pre class="language-text"><code><span class="line"># container 내부 Command</span>
<span class="line">psql --host 127.0.0.1 -U [database 계정] -d tfe -p 5432</span>
<span class="line">select * from pg_tables;</span>
<span class="line"></span></code></pre></div><h1>3. Minio Helm 배포</h1>
<h2>Minio</h2>
<h3>3.1 helm values.yaml</h3>
<p>참고: 아래 yaml 내용은 첨부 된 Minio yaml 파일에서 설정 한 부분만 기입</p>
<div class="language-text" data-highlighter="prismjs" data-ext="text" data-title="text"><pre class="language-text"><code><span class="line">[중략]</span>
<span class="line"></span>
<span class="line">image:</span>
<span class="line">  repository: quay.io/minio/minio</span>
<span class="line">  tag: RELEASE.2023-05-18T00-05-36Z</span>
<span class="line">  pullPolicy: IfNotPresent</span>
<span class="line">[중략]</span>
<span class="line"></span>
<span class="line">rootUser: "[rootUser]"</span>
<span class="line">rootPassword: "[rootPassword]"</span>
<span class="line"></span>
<span class="line">[중략]</span>
<span class="line"></span>
<span class="line">## FDO terraform plan, apply를 파일 적재되는 지 확인 용</span>
<span class="line">consoleService:</span>
<span class="line">  annotations:</span>
<span class="line">    'service.beta.kubernetes.io/aws-load-balancer-subnets': "subnet-03b41598fbe094c5e, subnet-0ec501ba454a8c95e, subnet-0aacc8ce08d63e061"</span>
<span class="line">    'service.beta.kubernetes.io/aws-load-balancer-scheme': "internet-facing"</span>
<span class="line">    'service.beta.kubernetes.io/aws-load-balancer-nlb-target-type': "instance"</span>
<span class="line">  type: LoadBalancer # ClusterIP</span>
<span class="line">  port: 9001</span>
<span class="line">  loadBalancerClass: service.k8s.aws/nlb</span>
<span class="line">  nodePort: 32001</span>
<span class="line">  </span>
<span class="line">[중략]</span>
<span class="line"></span></code></pre></div><h3>3.2 Command</h3>
<h4>3.2.1 helm 배포</h4>
<div class="language-text" data-highlighter="prismjs" data-ext="text" data-title="text"><pre class="language-text"><code><span class="line">helm repo add bitnami https://charts.bitnami.com/bitnami</span>
<span class="line">kubectl create ns minio</span>
<span class="line">helm install minio-dev  -n minio --version 5.0.10 . --values values.yaml --debug</span>
<span class="line"></span></code></pre></div><h4>3.2.2 minio UI 접근 시 ID, Password 확인</h4>
<div class="language-text" data-highlighter="prismjs" data-ext="text" data-title="text"><pre class="language-text"><code><span class="line">kubectl get secret --namespace minio minio-dev -o jsonpath="{.data.root-user}" | base64 -d</span>
<span class="line"></span>
<span class="line">kubectl get secret --namespace minio minio-dev -o jsonpath="{.data.root-password}" | base64 -d</span>
<span class="line"></span></code></pre></div><h4>3.2.2 FDO 연동 후 plan,apply Minio bucket data 확인</h4>
<figure><figcaption></figcaption></figure>
<h1>4. FDO(Flexible Deployment Options) Helm 배포</h1>
<h2>FDO(Flexible Deployment Options)</h2>
<h3>4.1 helm values.yaml</h3>
<p>참고: 아래 yaml 내용은 첨부 된 FDO yaml 파일에서 설정 한 부분만 기입</p>
<div class="language-text" data-highlighter="prismjs" data-ext="text" data-title="text"><pre class="language-text"><code><span class="line">[중략]</span>
<span class="line"></span>
<span class="line">image:</span>
<span class="line">  repository: images.releases.hashicorp.com</span>
<span class="line">  name: hashicorp/terraform-enterprise</span>
<span class="line">  tag: v202311-1</span>
<span class="line">  </span>
<span class="line">[중략]</span>
<span class="line"></span>
<span class="line"></span>
<span class="line">service:</span>
<span class="line">  annotations:</span>
<span class="line">    'service.beta.kubernetes.io/aws-load-balancer-subnets': "[외부 통신 서브넷]"</span>
<span class="line">    ## nlb 외부 통신</span>
<span class="line">    'service.beta.kubernetes.io/aws-load-balancer-scheme': "internet-facing"</span>
<span class="line">    ## target group 지정 type</span>
<span class="line">    'service.beta.kubernetes.io/aws-load-balancer-nlb-target-type': "instance"</span>
<span class="line">    ## 인증서 arn</span>
<span class="line">    'service.beta.kubernetes.io/aws-load-balancer-ssl-cert': "[인증서 arn]"</span>
<span class="line">    ## nlb 프로토콜 annotation</span>
<span class="line">    'service.beta.kubernetes.io/aws-load-balancer-backend-protocol': 'ssl'</span>
<span class="line">  type: LoadBalancer # ClusterIP</span>
<span class="line">  port: 443</span>
<span class="line">  nodePort: 32443</span>
<span class="line">  loadBalancerClass: service.k8s.aws/nlb</span>
<span class="line"></span>
<span class="line">[중략]</span>
<span class="line"></span>
<span class="line">env:</span>
<span class="line">  variables:</span>
<span class="line">    ## terraform 접근 URL </span>
<span class="line">    TFE_HOSTNAME: [terraform 접근 URL] ## ex) xxx.xxx.xyz Protocol 없이 설정</span>
<span class="line"></span>
<span class="line">    ## container로 올리는 postgresql svc dns, headless로 설정 시 접근이 안되는 문제로 postgres 기본 svc로 설정</span>
<span class="line">    ## [helm 배포 시 설정 된 이름].[namespace].svc.cluster.local ==&gt; 포트 지정 없이 설정</span>
<span class="line">    TFE_DATABASE_HOST: "postgresql-dev.default.svc.cluster.local"</span>
<span class="line"></span>
<span class="line">    ## container로 올리는 postgresql database 이름</span>
<span class="line">    ## postgre value.yaml 135 번째 줄 설정</span>
<span class="line">    TFE_DATABASE_NAME: "[TFE_DATABASE_NAME]"</span>
<span class="line">    ## ssl mode</span>
<span class="line">    TFE_DATABASE_PARAMETERS: "sslmode=disable"</span>
<span class="line"></span>
<span class="line">    ## container로 올리는 postgresql 유저 계정</span>
<span class="line">    ## postgre value.yaml 129 번째 줄 설정</span>
<span class="line">    TFE_DATABASE_USER: "[TFE_DATABASE_USER]"</span>
<span class="line"></span>
<span class="line">    ## container로 올리는 redis dns, headless로 설정하면 접근이 안되는 문제로 master로 설정</span>
<span class="line">    ## [helm 배포 시 설정 된 이름].[namespace].svc.cluster.local:6379</span>
<span class="line">    TFE_REDIS_HOST: "redis-dev-master.redis.svc.cluster.local:6379"</span>
<span class="line"></span>
<span class="line">    ## redis AUTH 사용할 경우 에러 발생으로 임시 false</span>
<span class="line">    ## auth 기능 비활성 시 redis value.yaml 123 번째 줄 기능 false 설정</span>
<span class="line">    TFE_REDIS_USE_AUTH: "false"</span>
<span class="line"></span>
<span class="line">    ## container로 올리는 minio type은 s3로 해야함</span>
<span class="line">    TFE_OBJECT_STORAGE_TYPE: s3</span>
<span class="line"></span>
<span class="line">    ## container로 올리는 minio bucket 이름</span>
<span class="line">    TFE_OBJECT_STORAGE_S3_BUCKET: "[minio bucket name]"</span>
<span class="line"></span>
<span class="line">    ## container로 올리는 minio svc dns</span>
<span class="line">    ## [helm 배포 시 설정 된 이름].[namespace].svc.cluster.local:9000</span>
<span class="line">    TFE_OBJECT_STORAGE_S3_ENDPOINT: "http://minio-dev.minio.svc.cluster.local:9000"</span>
<span class="line"></span>
<span class="line">    ## container로 올리는 minio가 올라가는 aws 지역</span>
<span class="line">    TFE_OBJECT_STORAGE_S3_REGION: "ap-northeast-2"</span>
<span class="line"></span>
<span class="line">    TFE_IACT_SUBNETS: "0.0.0.0/0"</span>
<span class="line">    TFE_CAPACITY_CONCURRENCY: 10</span>
<span class="line"></span>
<span class="line">    ## container로 올리는 minio 접근 시 admin 계정 ID,Password</span>
<span class="line">    ## minio vaule.yaml 90 번째 줄 설정</span>
<span class="line">    TFE_OBJECT_STORAGE_S3_ACCESS_KEY_ID: "[admin 계정 ID]"</span>
<span class="line">    TFE_OBJECT_STORAGE_S3_SECRET_ACCESS_KEY: "[admin 계정 Password]"</span>
<span class="line">  secrets:</span>
<span class="line">    ## postgre value.yaml 파일 132 번째 줄 설정</span>
<span class="line">    ## container로 올리는 postgresql 접근 비밀번호</span>
<span class="line">    TFE_DATABASE_PASSWORD: "[postgresql 접근 비밀번호]"</span>
<span class="line"></span>
<span class="line">    ## Terraform FDO Licence</span>
<span class="line">    TFE_LICENSE: "[Terraform FDO Licence]"</span>
<span class="line"></span>
<span class="line">    ## terraform FDO vault 암호, backup &amp; restore 시 필요함</span>
<span class="line">    ## https://developer.hashicorp.com/terraform/enterprise/flexible-deployments/admin/admin-cli/backup-restore</span>
<span class="line">    TFE_ENCRYPTION_PASSWORD: "[TFE_ENCRYPTION_PASSWORD]"</span>
<span class="line"></span></code></pre></div><h4>4.1.1 Command</h4>
<h4>4.1.2 FDO 배포 전 image registry 정책 설정</h4>
<div class="language-text" data-highlighter="prismjs" data-ext="text" data-title="text"><pre class="language-text"><code><span class="line">$ kubectl create secret docker-registry terraform-enterprise --docker-server=images.releases.hashicorp.com --docker-username=terraform --docker-password=$(cat { 라이선스 파일 }) -n tfe</span>
<span class="line"></span>
<span class="line">## 도메인 인증서 설정 한 파일 시크릿으로 배포</span>
<span class="line">$ kubectl create secret tls terraform-enterprise-certificates --cert=tfe.crt --key=tfe.key -n tfe</span>
<span class="line"></span></code></pre></div><h4>4.1.3 helm 배포</h4>
<div class="language-text" data-highlighter="prismjs" data-ext="text" data-title="text"><pre class="language-text"><code><span class="line">helm repo add bitnami https://charts.bitnami.com/bitnami</span>
<span class="line"></span>
<span class="line">kubectl create ns tfe</span>
<span class="line"></span>
<span class="line">helm install terraform -n tfe --version 1.1.0 . --values values.yaml --debug</span>
<span class="line"></span></code></pre></div><h4>4.1.4 supervisorctl 명령어로 하여 FDO 내부 연동 된 부분을 확인(redis, postgresql 같은 경우 외부 연동)</h4>
<figure><figcaption></figcaption></figure>
<h4>4.1.5 정상 helm 배포 이후 FDO container 내부에서 아래 command로 FDO admin 계정 생성을 위한 Token 발행</h4>
<div class="language-text" data-highlighter="prismjs" data-ext="text" data-title="text"><pre class="language-text"><code><span class="line">tfectl admin token </span>
<span class="line"></span></code></pre></div><h4>4.1.6 admin 계정 생성</h4>
<div class="language-text" data-highlighter="prismjs" data-ext="text" data-title="text"><pre class="language-text"><code><span class="line">https://{ 사용하는 도메인 }/admin/account/new?token={ 발급 된 토큰 } </span>
<span class="line"></span></code></pre></div><figure><figcaption></figcaption></figure>
<h1>5. FDO Backup &amp; Restore</h1>
<h3>5.1 백업 시 인증 토큰 필요</h3>
<div class="language-text" data-highlighter="prismjs" data-ext="text" data-title="text"><pre class="language-text"><code><span class="line">/bin/bash -c 'cat /var/run/terraform-enterprise/backup-restore/config.hcl | grep backup_token'</span>
<span class="line"></span></code></pre></div><h3>5.2 FDO container 내부 토큰 발급 command</h3>
<h3>5.3 payload.json 파일 생성</h3>
<div class="language-text" data-highlighter="prismjs" data-ext="text" data-title="text"><pre class="language-text"><code><span class="line">{</span>
<span class="line">  "password": "{ FDO helm 배포 시 설정 했던 TFE_ENCRYPTION_PASSWORD 값 }"</span>
<span class="line">}</span>
<span class="line"></span></code></pre></div><h3>5.4 Backup api</h3>
<div class="language-text" data-highlighter="prismjs" data-ext="text" data-title="text"><pre class="language-text"><code><span class="line">curl \</span>
<span class="line">  --header "Authorization: Bearer { 인증토큰 }" \</span>
<span class="line">  --request POST \</span>
<span class="line">  --data @payload.json \</span>
<span class="line">  --output backup.blob \</span>
<span class="line">  https:// { 설정한 도메인 } /_backup/api/v1/backup</span>
<span class="line"></span></code></pre></div><h3>5.5 백업이 정상적으로 되었는지 확인</h3>
<ul>
<li>FDO container 내부 경로: /var/log/terraform-enterprise</li>
</ul>
<figure><figcaption></figcaption></figure>
<h3>5.6 백업 된 데이터는 curl command를 한 경로에 생성</h3>
<h3>5.7 Terraform oranization, plan, apply 정보가 저장된 FDO와 FDO와 연동 된 container를 삭제 하여 정상적으로 백업이 되는 지 확인</h3>
<h3>5.8 삭제 전</h3>
<figure><figcaption></figcaption></figure>
<h3>5.9 Restore</h3>
<h4>5.9.1 삭제 이후 신규 설치</h4>
<figure><figcaption></figcaption></figure>
<h4>5.9.2 신규 설치 된 FDO에 초기 설치 생성 했던 계정으로 login</h4>
<figure><figcaption></figcaption></figure>
<h4>5.9.3 Restore api</h4>
<div class="language-text" data-highlighter="prismjs" data-ext="text" data-title="text"><pre class="language-text"><code><span class="line">curl \</span>
<span class="line">  --header "Authorization: Bearer { 인증 토큰 }" \</span>
<span class="line">  --request POST \</span>
<span class="line">  --form config=@payload.json \</span>
<span class="line">  --form snapshot=@backup.blob \</span>
<span class="line">  https:// { 설정한 도메인 } /_backup/api/v1/restore</span>
<span class="line"></span></code></pre></div><figure><figcaption></figcaption></figure>
<h4>5.9.4 Restore 이후 초기 생성 했던 계정으로 로그인</h4>
<h4>5.9.5 정상적으로 계정 및 organization, workspace 및 plan,apply 정보 복구</h4>
<figure><figcaption></figcaption></figure>
<h1>6. Velero Cluster Backup &amp; Restore</h1>
<h2>6.1 백업 할 S3 생성</h2>
<div class="language-text" data-highlighter="prismjs" data-ext="text" data-title="text"><pre class="language-text"><code><span class="line">BUCKET=test-gbkim</span>
<span class="line">REGION=ap-northeast-2</span>
<span class="line"></span>
<span class="line">aws s3api create-bucket \</span>
<span class="line">    --bucket $BUCKET \</span>
<span class="line">    --region $REGION \</span>
<span class="line">    --create-bucket-configuration LocationConstraint=$REGION</span>
<span class="line"></span></code></pre></div><h2>6.2 velero 설치</h2>
<div class="language-text" data-highlighter="prismjs" data-ext="text" data-title="text"><pre class="language-text"><code><span class="line">wget https://github.com/vmware-tanzu/velero/releases/download/v1.9.2/velero-v1.9.2-linux-amd64.tar.gz</span>
<span class="line">tar zxvf velero-v1.9.2-linux-amd64.tar.gz</span>
<span class="line">sudo mv velero-v1.9.2-linux-amd64/velero  /usr/local/sbin</span>
<span class="line"></span>
<span class="line">  velero install \</span>
<span class="line">   --provider aws \</span>
<span class="line">   --plugins velero/velero-plugin-for-aws:v1.4.1 \</span>
<span class="line">   --bucket $BUCKET \</span>
<span class="line">   --backup-location-config region=$REGION \</span>
<span class="line">   --snapshot-location-config region=$REGION \</span>
<span class="line">   --secret-file /home/ec2-user/.aws/credentials</span>
<span class="line"></span></code></pre></div><h2>6.3 설치 완료 시 velero container 생성</h2>
<figure><figcaption></figcaption></figure>
<h2>6.4 velero backup</h2>
<ul>
<li>백업 대상 eks 클러스터</li>
</ul>
<div class="language-text" data-highlighter="prismjs" data-ext="text" data-title="text"><pre class="language-text"><code><span class="line">velero backup create gbkim</span>
<span class="line"></span></code></pre></div><ul>
<li>S3 백업 확인</li>
</ul>
<figure><figcaption></figcaption></figure>
<h2>6.5 Restore cluster</h2>
<figure><figcaption></figcaption></figure>
<h2>6.6 velero restore</h2>
<ul>
<li>restore 대상 eks 클러스터에 velero 설치 된 상태에서 restore 대상<br>
클러스터에서 아래 명령어로 restore</li>
</ul>
<div class="language-text" data-highlighter="prismjs" data-ext="text" data-title="text"><pre class="language-text"><code><span class="line">velero restore create --from-backup gbkim</span>
<span class="line"></span></code></pre></div><ul>
<li>restore</li>
</ul>
<figure><figcaption></figcaption></figure>
<h2>6.7 새로운 클러스터에 정상적으로 restore가 되었는지 확인</h2>
<figure><figcaption></figcaption></figure>
]]></content:encoded>
    </item>
    <item>
      <title>Terraform Enterprise SAML (ADFS)</title>
      <link>https://docmoa.github.io/04-HashiCorp/03-Terraform/06-TerraformEnterprise/tfe_saml.html</link>
      <guid>https://docmoa.github.io/04-HashiCorp/03-Terraform/06-TerraformEnterprise/tfe_saml.html</guid>
      <source url="https://docmoa.github.io/rss.xml">Terraform Enterprise SAML (ADFS)</source>
      <description>Terraform Enterprise SAML(ADFS)</description>
      <pubDate>Tue, 09 Jul 2024 05:22:34 GMT</pubDate>
      <content:encoded><![CDATA[
<blockquote>
<p>ADFS의 Group과 User가 생성되어 있으며  Terraform Enterprise가 구축되어 SAML연동이 필요한 상황일 때 본 가이드를 권장합니다.</p>
</blockquote>
<h2>ADFS Management Settings</h2>
<h3>1) Gather ADFS Information</h3>
<p>Terraform Enterpirse SAML Configure 에 필요한 enpoints와 idp인증서 export를 위해 진행.</p>
<figure><img src="https://raw.githubusercontent.com/sibiniiii/my-images/main/img/스크린샷 2024-07-09 오전 10.17.54.png" alt="스크린샷 2024-07-09 오전 10.17.54" tabindex="0" loading="lazy"><figcaption>스크린샷 2024-07-09 오전 10.17.54</figcaption></figure>
<ul>
<li>Server Manager &gt; 오른쪽 상단 Tools &gt; Active Directory Users and Computers 클릭</li>
</ul>
<figure><img src="https://raw.githubusercontent.com/sibiniiii/my-images/main/img/image-20240709102309773.png" alt="image-20240709102309773" tabindex="0" loading="lazy"><figcaption>image-20240709102309773</figcaption></figure>
<ul>
<li>Service &gt; Endpoints &gt; Type이 <code>SAML 2.0/WS-Federation</code>인 URL Path 값은 Terraform Enterprise Single Sign-On URL인 <a href="https://ADFS-HOSTNAME/URL-PATH" target="_blank" rel="noopener noreferrer">https://ADFS-HOSTNAME/URL-PATH</a> 에 필요하기에 기억해둡니다.<br>
default URL Path : <code>/adfs/ls/</code></li>
</ul>
<figure><img src="https://raw.githubusercontent.com/sibiniiii/my-images/main/img/스크린샷 2024-07-09 오전 10.26.48.png" alt="스크린샷 2024-07-09 오전 10.26.48" tabindex="0" loading="lazy"><figcaption>스크린샷 2024-07-09 오전 10.26.48</figcaption></figure>
<ul>
<li>Service &gt; Certificates &gt; Token-signing &gt; 오른쪽 버튼 클릭 &gt; View Certificate 클릭</li>
</ul>
<figure><img src="https://raw.githubusercontent.com/sibiniiii/my-images/main/img/스크린샷 2024-07-09 오전 10.28.23.png" alt="스크린샷 2024-07-09 오전 10.28.23" tabindex="0" loading="lazy"><figcaption>스크린샷 2024-07-09 오전 10.28.23</figcaption></figure>
<ul>
<li>Details &gt; Copy to File.. 클릭</li>
</ul>
<figure><img src="https://raw.githubusercontent.com/sibiniiii/my-images/main/img/스크린샷 2024-07-09 오전 10.29.12.png" alt="스크린샷 2024-07-09 오전 10.29.12" tabindex="0" loading="lazy"><figcaption>스크린샷 2024-07-09 오전 10.29.12</figcaption></figure>
<figure><img src="https://raw.githubusercontent.com/sibiniiii/my-images/main/img/스크린샷 2024-07-09 오전 10.29.28.png" alt="스크린샷 2024-07-09 오전 10.29.28" tabindex="0" loading="lazy"><figcaption>스크린샷 2024-07-09 오전 10.29.28</figcaption></figure>
<ul>
<li>Export File Format &gt;  "Base-64 encoded X.509 (.CER)" 클릭 &gt; Next</li>
</ul>
<figure><img src="https://raw.githubusercontent.com/sibiniiii/my-images/main/img/스크린샷 2024-07-09 오전 10.30.27.png" alt="스크린샷 2024-07-09 오전 10.30.27" tabindex="0" loading="lazy"><figcaption>스크린샷 2024-07-09 오전 10.30.27</figcaption></figure>
<ul>
<li>Terraform Enterprise Identity Provider Settings의 IDP Certificate 값에 쓰이는 cert</li>
</ul>
<h3>2) Configure Terraform Enterprise</h3>
<ul>
<li>접속 : <a href="https://TFE-HOSTNAME/app/admin/saml" target="_blank" rel="noopener noreferrer">https://TFE-HOSTNAME/app/admin/saml</a></li>
</ul>
<figure><img src="https://raw.githubusercontent.com/sibiniiii/my-images/main/img/image-20240709103411478.png" alt="image-20240709103411478" tabindex="0" loading="lazy"><figcaption>image-20240709103411478</figcaption></figure>
<ul>
<li>SAML SEttings의 Enable SAML single sign-on 체크<br>
SAML single sign-on 확인란을 활성화해야 합니다.</li>
</ul>
<figure><img src="https://raw.githubusercontent.com/sibiniiii/my-images/main/img/image-20240709103737289.png" alt="image-20240709103737289" tabindex="0" loading="lazy"><figcaption>image-20240709103737289</figcaption></figure>
<h5>[Identity Provider Settings]</h5>
<ul>
<li>
<p>Single Sign-On URL : Single-Sign-On 요청을 위한 Idp의 HTTP(S) 엔드포인트입니다.<br>
<a href="https://ADFS-HOSTNAME/URL-Path" target="_blank" rel="noopener noreferrer">https://ADFS-HOSTNAME/URL-Path</a></p>
</li>
<li>
<p>Single Log-Out URL : 단일 로그아웃 요청에 대한 Idp의 HTTP(S) 엔드포인트입니다.</p>
<p>단일 로그아웃은 아직 지원되지 않습니다.<br>
<a href="https://ADFS-HOSTNAME/URL-Path?wa=wsignout1.0" target="_blank" rel="noopener noreferrer">https://ADFS-HOSTNAME/URL-Path?wa=wsignout1.0</a></p>
</li>
<li>
<p>IDP Certificate : IdP 구성에서 제공되는 PEM 인코딩된 X.509 인증서입니다.<br>
export한 idpcert.txt 값 입력</p>
</li>
</ul>
<figure><img src="https://raw.githubusercontent.com/sibiniiii/my-images/main/img/스크린샷 2024-07-09 오전 10.47.44.png" alt="스크린샷 2024-07-09 오전 10.47.44" tabindex="0" loading="lazy"><figcaption>스크린샷 2024-07-09 오전 10.47.44</figcaption></figure>
<h5>[Attributes]</h5>
<ul>
<li>Username Attribute Name : SSO를 통해 로그인하는 사용자의 Terraform Enterprise 사용자 이름을 결정하는 SAML 속성의 이름입니다.</li>
<li>Site Admin Attribute Name : 사용자에게 사이트 관리자 권한이 있는지 여부를 결정하는 SAML 속성의 이름입니다.<br>
사이트 관리자는 전체 Terraform Enterprise 인스턴스에 대한 설정 및 리소스를 관리할 수 있습니다.</li>
</ul>
<h5>[Team Membership Management]</h5>
<ul>
<li>Use SAML to manage team memberships 활성화</li>
<li>Team Attribute Name : 팀 멤버십을 결정하는 SAML 속성의 이름입니다. 대소문자를 구분합니다.</li>
<li>Site Admin Role : (기본값 : site-admins 비활성화하려면 비워 둡니다.) 사이트 관리자 권한을 관리하는 또 다른 방법입니다. 이 이름을 가진 역할이 팀 속성 이름 특성 값에 있으면 사용자는 관리자입니다.<br>
'Site admin attribute name'  설정을 사용하는 것을 권장하며 이 설정을 사용하는 경우 값을 삭제하여 'Site Admin Role'을 비활성화할 수 있습니다.</li>
</ul>
<h5>[User Session]</h5>
<ul>
<li>API 토큰 세션 시간 초과 : Terraform Enterprise가 사용자에게 다시 로그인하도록 요구하기 전에 수락하는 시간(초) 입니다.</li>
</ul>
<p>Save SAML settings 클릭.</p>
<h3>3) Terraform Enterprise 인증서 &gt; Windows에 등록</h3>
<figure><img src="https://raw.githubusercontent.com/sibiniiii/my-images/main/img/스크린샷 2024-07-09 오전 11.07.23.png" alt="스크린샷 2024-07-09 오전 11.07.23" tabindex="0" loading="lazy"><figcaption>스크린샷 2024-07-09 오전 11.07.23</figcaption></figure>
<ul>
<li>MMC &gt; Trusted Root Certification... &gt; Certificates &gt; All Tasks &gt; import</li>
</ul>
<figure><img src="https://raw.githubusercontent.com/sibiniiii/my-images/main/img/스크린샷 2024-07-09 오전 11.09.00.png" alt="스크린샷 2024-07-09 오전 11.09.00" tabindex="0" loading="lazy"><figcaption>스크린샷 2024-07-09 오전 11.09.00</figcaption></figure>
<h3>4) Configure ADFS</h3>
<p>Configure the Relying Party(RP) Trust</p>
<figure><img src="https://raw.githubusercontent.com/sibiniiii/my-images/main/img/image-20240709111515462.png" alt="image-20240709111515462" tabindex="0" loading="lazy"><figcaption>image-20240709111515462</figcaption></figure>
<ul>
<li>ADFS Management &gt; Relying Party Trusts 클릭</li>
</ul>
<figure><img src="https://raw.githubusercontent.com/sibiniiii/my-images/main/img/스크린샷 2024-07-09 오전 11.15.56.png" alt="스크린샷 2024-07-09 오전 11.15.56" tabindex="0" loading="lazy"><figcaption>스크린샷 2024-07-09 오전 11.15.56</figcaption></figure>
<ul>
<li>Start 클릭 &gt; Import data about the relying party published online or on a local network<br>
Federation metadata address (host name or URL): <code>https://TFE-HOSTNAME/users/saml/metadata</code><br>
(Terraform Enterprise의 Identity Provider Configuration의 Metadata(Audience)URL)</li>
</ul>
<figure><img src="https://raw.githubusercontent.com/sibiniiii/my-images/main/img/스크린샷 2024-07-09 오전 11.19.34.png" alt="스크린샷 2024-07-09 오전 11.19.34" tabindex="0" loading="lazy"><figcaption>스크린샷 2024-07-09 오전 11.19.34</figcaption></figure>
<ul>
<li>RP 신뢰를 식별하는 데 사용되는 이름을 입력한 후 Next 클릭</li>
</ul>
<figure><img src="https://raw.githubusercontent.com/sibiniiii/my-images/main/img/스크린샷 2024-07-09 오전 11.20.16.png" alt="스크린샷 2024-07-09 오전 11.20.16" tabindex="0" loading="lazy"><figcaption>스크린샷 2024-07-09 오전 11.20.16</figcaption></figure>
<ul>
<li>엑세스 제어 정책 선택 화면에서 보안 정책과 일치하는 정책을 선택하고 Next 클릭</li>
</ul>
<figure><img src="https://raw.githubusercontent.com/sibiniiii/my-images/main/img/스크린샷 2024-07-09 오전 11.21.07.png" alt="스크린샷 2024-07-09 오전 11.21.07" tabindex="0" loading="lazy"><figcaption>스크린샷 2024-07-09 오전 11.21.07</figcaption></figure>
<ul>
<li>Next 클릭</li>
</ul>
<figure><img src="https://raw.githubusercontent.com/sibiniiii/my-images/main/img/스크린샷 2024-07-09 오전 11.21.30.png" alt="스크린샷 2024-07-09 오전 11.21.30" tabindex="0" loading="lazy"><figcaption>스크린샷 2024-07-09 오전 11.21.30</figcaption></figure>
<h3>5) Configure Claim Issuance</h3>
<h5>5-1) Send LDAP Attributes as Claims</h5>
<p>TFE-HOSTNAME 을 위한 Claim Issuance Policy 추가</p>
<figure><img src="https://raw.githubusercontent.com/sibiniiii/my-images/main/img/스크린샷 2024-07-09 오전 11.24.39.png" alt="스크린샷 2024-07-09 오전 11.24.39" tabindex="0" loading="lazy"><figcaption>스크린샷 2024-07-09 오전 11.24.39</figcaption></figure>
<ul>
<li>Add Rule 클릭</li>
</ul>
<figure><img src="https://raw.githubusercontent.com/sibiniiii/my-images/main/img/스크린샷 2024-07-09 오전 11.25.43.png" alt="스크린샷 2024-07-09 오전 11.25.43" tabindex="0" loading="lazy"><figcaption>스크린샷 2024-07-09 오전 11.25.43</figcaption></figure>
<ul>
<li>Claim rule template : Send LDAP Attributes as Claims</li>
</ul>
<figure><img src="https://raw.githubusercontent.com/sibiniiii/my-images/main/img/스크린샷 2024-07-09 오전 11.27.16.png" alt="스크린샷 2024-07-09 오전 11.27.16" tabindex="0" loading="lazy"><figcaption>스크린샷 2024-07-09 오전 11.27.16</figcaption></figure>
<ul>
<li>Claim rule name : 클레임 규칙을 식별하는 데 사용되는 이름으로 설정</li>
<li>Attribute store : Active Directory</li>
<li>LDAP Attribute : E-Mail-Addresses</li>
<li>Outgoing Claim Type : E-Mail Address</li>
</ul>
<h5>5-2) Transform an Incoming Claim</h5>
<figure><img src="https://raw.githubusercontent.com/sibiniiii/my-images/main/img/스크린샷 2024-07-09 오전 11.29.07.png" alt="스크린샷 2024-07-09 오전 11.29.07" tabindex="0" loading="lazy"><figcaption>스크린샷 2024-07-09 오전 11.29.07</figcaption></figure>
<ul>
<li>Add Rule 클릭</li>
<li>Claim rule template : Transform an Incoming Claim</li>
</ul>
<figure><img src="https://raw.githubusercontent.com/sibiniiii/my-images/main/img/스크린샷 2024-07-09 오전 11.30.38.png" alt="스크린샷 2024-07-09 오전 11.30.38" tabindex="0" loading="lazy"><figcaption>스크린샷 2024-07-09 오전 11.30.38</figcaption></figure>
<ul>
<li>Claim rule name : 클레임 규칙을 식별하는 데 사용되는 이름으로 설정</li>
<li>Incoming Claim type  : E-Mail Address<br>
Imcoming Claim type은 사용자가 인증 시 ADFS에 전달되는 클레임 중 이메일 주소를 나타냅니다.<br>
일반적으로 이는 사용자의 이메일 주소를 포함하는 클레임 유형을 의미합니다.</li>
<li>Outgoing Claim type  : Name ID<br>
Outgoing Claim type은 ADFS가 Relying Party에 전달할 때 클레임을 식별하는 데 사용되는 속성으로 각 시스템 간의 클레임 공유 및 상호 운용성을 위한 것이며 NameID는 이를 식별하는 데 사용되는 주요 속성 중 하나입니다.</li>
<li>Outgoing name ID format : Email</li>
</ul>
<h5>5-3) Send Group Membership as a Calim</h5>
<figure><img src="https://raw.githubusercontent.com/sibiniiii/my-images/main/img/스크린샷 2024-07-09 오후 1.28.31.png" alt="스크린샷 2024-07-09 오후 1.28.31" tabindex="0" loading="lazy"><figcaption>스크린샷 2024-07-09 오후 1.28.31</figcaption></figure>
<figure><img src="https://raw.githubusercontent.com/sibiniiii/my-images/main/img/image-20240709133746608.png" alt="image-20240709133746608" tabindex="0" loading="lazy"><figcaption>image-20240709133746608</figcaption></figure>
<ul>
<li>
<p>Claim rule name : 클레임 규칙을 식별하는 데 사용되는 이름으로 설정</p>
</li>
<li>
<p>User's group :  Terraform Enterprise 관리자가 모두 포함된 AD 사용자 그룹</p>
</li>
<li>
<p>Outgoing claim type : Relying Party에 보낼 클레임의 유형 지정</p>
<p>MemberOf</p>
<figure><img src="https://raw.githubusercontent.com/sibiniiii/my-images/main/img/스크린샷 2024-07-09 오후 1.31.40.png" alt="스크린샷 2024-07-09 오후 1.31.40" tabindex="0" loading="lazy"><figcaption>스크린샷 2024-07-09 오후 1.31.40</figcaption></figure>
</li>
<li>
<p>Outgoing Claim Value : 해당 그룹에 대한 클레임 값을 지정<br>
Admin 또는 특정 그룹의 식별자(GUID)를 지정할 수 있습니다.<br>
Outgoing Claim value와 관련하여<br>
Terraform Enterprise Team 생성<br>
<img src="https://raw.githubusercontent.com/sibiniiii/my-images/main/img/image-20240709133907002.png" alt="image-20240709133907002" loading="lazy"></p>
<ul>
<li>SSO team ID란 IdP에서 정의된 특정 그룹의 멤버들이 Terraform Enterprise에 로그인할 때, 해당 그룹의 식별자를 통해 자동으로 팀에 할당되도록 합니다.</li>
<li>팀 권한 및 엑세스를 중앙에서 관리할 수 있으며 사용자들이 IdP 그룹에 속함으로써 자동으로 적절한 권한이 부여됩니다.</li>
</ul>
</li>
</ul>
<h1>Trouble Shooting</h1>
<h5><a class="header-anchor" href="#_1-adfs-구축-후-https-adfs-hostname-adfs-ls-idpinitiatedsignon-aspx-들어가지지-않는-경우"><span>1) ADFS 구축 후 </span></a><a href="https://ADFS-HOSTNAME/adfs/ls/idpinitiatedsignon.aspx" target="_blank" rel="noopener noreferrer">https://ADFS-HOSTNAME/adfs/ls/idpinitiatedsignon.aspx</a> 들어가지지 않는 경우</h5>
<p>Windows Powershell 을 통해 다음 명령어 입력</p>
<div class="language-bash" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="line">Set-AdfsProperties <span class="token parameter variable">-EnableIdpInitiatedSignonPage</span> <span class="token variable">$true</span></span>
<span class="line"></span></code></pre></div><h5>2) Time Zone Error<img src="https://raw.githubusercontent.com/sibiniiii/my-images/main/img/스크린샷 2024-07-09 오후 1.45.36.png" alt="스크린샷 2024-07-09 오후 1.45.36" loading="lazy"></h5>
<p>Time Zone이 맞지않아 발생하는 에러로 Terraform Enterprise의 Docker-compose.yaml에 TZ 추가</p>
<div class="language-bash" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="line">TZ: <span class="token string">"Asia/Seoul"</span></span>
<span class="line"></span></code></pre></div><p>Windows Date &amp; time 에서 Time zone 동일하게 설정</p>
<h5>3) Relying Party Meatadata error</h5>
<figure><img src="https://raw.githubusercontent.com/sibiniiii/my-images/main/img/스크린샷 2024-07-09 오후 1.50.06.png" alt="스크린샷 2024-07-09 오후 1.50.06" tabindex="0" loading="lazy"><figcaption>스크린샷 2024-07-09 오후 1.50.06</figcaption></figure>
<p>ADFS &gt; Service &gt; Device Registration Refresh</p>
]]></content:encoded>
      <enclosure url="https://raw.githubusercontent.com/sibiniiii/my-images/main/img/%E1%84%89%E1%85%B3%E1%84%8F%E1%85%B3%E1%84%85%E1%85%B5%E1%86%AB%E1%84%89%E1%85%A3%E1%86%BA%202024-07-09%20%E1%84%8B%E1%85%A9%E1%84%8C%E1%85%A5%E1%86%AB%2010.17.54.png" type="image/png"/>
    </item>
    <item>
      <title>MongoDB 소개</title>
      <link>https://docmoa.github.io/05-Software/MongoDB/mongodb-introduction-by-cto.html</link>
      <guid>https://docmoa.github.io/05-Software/MongoDB/mongodb-introduction-by-cto.html</guid>
      <source url="https://docmoa.github.io/rss.xml">MongoDB 소개</source>
      <description>MongoDB의 CTO이자 공동 창립자(2007~2010년)인 Eliot Horowitz가 MongoDB에 대한 포괄적인 소개와 함께 문서 모델이 관계형 데이터베이스와 어떻게 다른지 안내합니다.</description>
      <pubDate>Sat, 06 Jul 2024 08:39:50 GMT</pubDate>
      <content:encoded><![CDATA[
<blockquote>
<p>MongoDB in 5 Minutes with Eliot Horowitz</p>
</blockquote>
]]></content:encoded>
      <enclosure url="https://raw.githubusercontent.com/Great-Stone/images/master/picgo/image-20240706154229548.png" type="image/png"/>
    </item>
    <item>
      <title>NoSQL 데이터베이스 - MongoDB</title>
      <link>https://docmoa.github.io/05-Software/MongoDB/nosql-explained.html</link>
      <guid>https://docmoa.github.io/05-Software/MongoDB/nosql-explained.html</guid>
      <source url="https://docmoa.github.io/rss.xml">NoSQL 데이터베이스 - MongoDB</source>
      <description>NoSQL이란 무엇인가요? NoSQL 데이터베이스 설명</description>
      <pubDate>Sat, 06 Jul 2024 08:39:50 GMT</pubDate>
      <content:encoded><![CDATA[
<blockquote>
<p>원문 : <a href="https://www.mongodb.com/resources/basics/databases/nosql-explained" target="_blank" rel="noopener noreferrer">https://www.mongodb.com/resources/basics/databases/nosql-explained</a><br>
NoSQL 데이터베이스인 MongoDB를 통해 NoSQL의 다양한 유형과 활용에 대해 설명하는 내용입니다. 문서 지향형, 키-값, 와이드-칼럼, 그래프 등 다양한 NoSQL 데이터베이스의 특징과 역사를 다루고 있습니다. 또한 MongoDB를 활용한 NoSQL 쿼리 튜토리얼을 제공하며 Multi-record Transactions에 대한 내용도 다룹니다.</p>
</blockquote>
<h2>1.️ NoSQL 데이터베이스</h2>
<ul>
<li>NoSQL 데이터베이스는 일반적으로 비 관계형 데이터베이스를 나타냅니다.</li>
<li>NoSQL 데이터베이스는 자료를 <code>자연스럽고 유연하게</code> 저장한다는 특징을 갖습니다.</li>
<li>SQL은 <code>쿼리 언어</code>이고, <code>NoSQL</code>은 데이터베이스 관리 방법을 의미합니다.</li>
</ul>
<h2>2. NoSQL 데이터베이스 유형</h2>
<ul>
<li>시간이 흐름에 따라 네 가지 주요 NoSQL 데이터베이스 유형이 나타났습니다.
<ul>
<li>Document databases : MongoDB, Couchbase</li>
<li>Key-Value stores : Redis, Amazon DynamoDB</li>
<li>Wide-Column stores : HBase, Cassandra, Scylla, Excel, Google Sheet</li>
<li>Graph databases : Neo4J, Amazon Neptune, AllegroGraph</li>
<li>Multi-model databases : CosmosDB, ArangoDB</li>
</ul>
</li>
</ul>
<h3>2.1 문서(Document) 지향형 데이터베이스</h3>
<ul>
<li>문서 지향형 데이터베이스는 JSON (JavaScript Object Notation) 객체와 유사한 형태의 문서에 데이터를 저장합니다.
<ul>
<li>각 문서는 필드와 값의 쌍을 포함</li>
<li>값은 문자열, 숫자, 부울린, 배열 또는 다른 객체와 같이 다양한 유형</li>
<li>데이터 모델이 반구조화되거나 비구조화된 데이터 세트에 적합</li>
<li>중첩 구조를 지원하여 복잡한 관계나 계층적 데이터를 표현에 유리</li>
</ul>
</li>
</ul>
<div class="language-json" data-highlighter="prismjs" data-ext="json" data-title="json"><pre class="language-json"><code><span class="line"><span class="token punctuation">{</span></span>
<span class="line">  <span class="token property">"_id"</span><span class="token operator">:</span> <span class="token string">"12345"</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"foo bar"</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token property">"email"</span><span class="token operator">:</span> <span class="token string">"foo@bar.com"</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token property">"address"</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token property">"street"</span><span class="token operator">:</span> <span class="token string">"123 foo street"</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token property">"city"</span><span class="token operator">:</span> <span class="token string">"some city"</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token property">"state"</span><span class="token operator">:</span> <span class="token string">"some state"</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token property">"zip"</span><span class="token operator">:</span> <span class="token number">123456</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token property">"hobbies"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"music"</span><span class="token punctuation">,</span> <span class="token string">"guitar"</span><span class="token punctuation">,</span> <span class="token string">"reading"</span><span class="token punctuation">]</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre></div><h3>2.2 Key-Value(K/V) 저장소</h3>
<ul>
<li>K/V 저장소는 단순하게 각 항목을 <em>키</em>와 <em>값</em>으로 표현합니다.</li>
<li>캐싱 및 세션 관리에 사용되며 인메모리에 데이터를 저장하여 <em>높은 성능</em>의 읽기와 쓰기를 제공합니다.</li>
</ul>
<div class="language-ini" data-highlighter="prismjs" data-ext="ini" data-title="ini"><pre class="language-ini"><code><span class="line"><span class="token key attr-name">user-12345</span> <span class="token punctuation">=</span> <span class="token value attr-value">{"name": "foo bar", "email": "foo@bar.com", "designation": "software developer"}</span></span>
<span class="line"></span></code></pre></div><h3>2.3 wide-column 저장소</h3>
<ul>
<li>wide-column 저장소는 테이블, 행, 컬럼에 데이터를 저장합니다.</li>
<li>전통적인 SQL 데이터베이스와 달리, wide-column 저장소는 유연하여 다른 행이 다른 컬럼 집합을 갖을 수 있습니다.</li>
<li>컬럼 압축 기술을 사용하여 저장 공간을 줄이고 성능을 향상시킬 수 있습니다.</li>
<li>희소하고 넓은 데이터를 효율적으로 검색할 수 있습니다.</li>
</ul>
<table>
<thead>
<tr>
<th>name</th>
<th>id</th>
<th>email</th>
<th>dob</th>
<th>city</th>
</tr>
</thead>
<tbody>
<tr>
<td>Foo bar</td>
<td>12345</td>
<td><a href="mailto:foo@bar.com" target="_blank" rel="noopener noreferrer">foo@bar.com</a></td>
<td></td>
<td>Some city</td>
</tr>
<tr>
<td>Carn Yale</td>
<td>34521</td>
<td><a href="mailto:bar@foo.com" target="_blank" rel="noopener noreferrer">bar@foo.com</a></td>
<td>12-05-1972</td>
<td></td>
</tr>
</tbody>
</table>
<h3>2.4 Graph 데이터베이스</h3>
<ul>
<li>노드와 엣지 형태로로 데이터 저장합니다.</li>
<li>노드는 일반적으로 사람, 장소, 물건(명사)과 같은 정보를 저장하며, 엣지는 노드 간 관계에 대한 정보를 저장합니다.</li>
<li>관계나 패턴이 처음에는 명확하지 않은 경우에 사용됩니다. (Social networks, Network diagrams 등에 사용)</li>
<li>MongoDB는 집계 파이프라인의 $graphLookup 단계를 사용하여 그래프 데이터를 다루기도 합니다.</li>
</ul>
<figure><img src="https://raw.githubusercontent.com/Great-Stone/images/master/picgo/image-20240706165500563.png" alt="Graph 데이터베이스 노드와 엣지" tabindex="0" loading="lazy"><figcaption>Graph 데이터베이스 노드와 엣지</figcaption></figure>
<h3>2.5 Multi-model(다중 모델) 데이터베이스</h3>
<ul>
<li>둘 이상의 유형의 NoSQL 데이터 모델을 지원하는 데이터베이스를 지칭합니다.</li>
</ul>
<h2>3. NoSQL 유형의 비교</h2>
<p>| Feature | Key-Value Store | Document Database | Wide-Column Store | Graph Database |<br>
|</p>
]]></content:encoded>
      <enclosure url="https://raw.githubusercontent.com/Great-Stone/images/master/picgo/image-20240706165500563.png" type="image/png"/>
    </item>
    <item>
      <title>필립 코틀러 마켓 6.0</title>
      <link>https://docmoa.github.io/06-etc/book-memo/market-6.html</link>
      <guid>https://docmoa.github.io/06-etc/book-memo/market-6.html</guid>
      <source url="https://docmoa.github.io/rss.xml">필립 코틀러 마켓 6.0</source>
      <description>세계적인 비즈니스 구루 필립 코틀러가 통찰한 AI시대 마케팅의 새로운 법칙</description>
      <pubDate>Sat, 29 Jun 2024 05:46:34 GMT</pubDate>
      <content:encoded><![CDATA[
<h2>책 정보</h2>
<blockquote>
<ul>
<li>저자 : 필립 코틀러,허마원 카타자야,이완 세티아완</li>
<li>역자 : 방영호</li>
<li>출간일 : 2024-5-16</li>
<li>페이지 : 296쪽</li>
<li>출판사 링크 : <a href="https://www.gilbut.co.kr/book/view?bookcode=BN004085" target="_blank" rel="noopener noreferrer">https://www.gilbut.co.kr/book/view?bookcode=BN004085</a></li>
<li>책소개 : 마케팅 패러다임을 제시하는 독보적인 미래 전략서 ‘마켓 시리즈’ 완전판<br>
<img src="https://gimg.gilbut.co.kr/book/BN004085/rn_view_BN004085.jpg" alt="표지" loading="lazy"><br>
한층 더 진화한 AI와 공간 컴퓨팅, AR·VR·XR, 메타버스 등 새로운 기술이 점점 더 일상으로 침투하고 있다. 현실 세계와 가상세계를 오가고, AI를 도구로 활용하면서 더 많은 일들을 할 수 있게 됐다. 오늘날의 고객은 브랜드와 더욱 몰입감 있게 상호작용하며, 매력적인 경험을 할 수 있다. 고객 여정 역시 한층 더 다양한 경로로 진화하고 있다. 미래 시장을 장악하기 위해 기업은 무엇을 해야 할까? 빠르게 변모하는 고객들에게 대응하기 위해 마케팅은 어떻게 달라져야 할까?<br>
마케팅의 아버지, 비즈니스계의 구루로 불리는 필립 코틀러 박사와 독보적인 마케팅 인사이트를 전하기로 유명한 허마원 카타자야, 이완 세티아완 저자가 다시 뭉쳐 《필립 코틀러 마켓 6.0》을 출간했다. 저자들은 디지털 공간과 물리적 공간의 경계를 뛰어넘어, 완전히 몰입 가능한 고객 경험을 창조해야 한다고 말한다. 끊임없이 복잡하게 진화하는 기술과 시장, 비즈니스 환경 속에서 앞서가고자 하는 사람이라면 이 책에서 새롭게 태동한 마케팅 패러다임과 그 전략에 관한 인사이트를 얻을 수 있을 것이다.</li>
</ul>
</blockquote>
<h2>마케팅 트랜드</h2>
<ul>
<li>마켓 1.0 : 제품 중심 마케팅 - 1950년대엔 제품만 잘 만들면 잘 팔렸고, 제품 경쟁력이 곧 마케팅이었다.</li>
<li>마켓 2.0 : 시장의 중심이 소비자에게로 옮겨갔다. 브랜드와 제품이 늘어났으니, 선택받기 위해선 소비자의 목소리에 귀 기울여야 했다. 소비자를 어떻게 분류하고, 타깃팅하느냐가 관건이었다.</li>
<li>마켓 3.0 : 인간 중심. 소비자 중심과는 달리 2000년대 후반에 들어서며 사람들이 기업의 사회적 책임을 중요시하기 시작했다. 글로벌 금융 위기를 겪으며 기업에 대한 신뢰를 잃었기 때문이다. (필립 코틀러는 2010년 시리즈 첫 책인 『마켓 3.0』을 냈다. 마켓 1.0과 2.0 다음의 시대를 인간 중심 시대엔 ‘가치와 스토리텔링’이 효과적인 마케팅 전략이 될 거라 예상했다.)</li>
<li>마켓 4.0 : 디지털 마케팅으로의 전환이다. 스마트폰, 소셜미디어, e-커머스가 등장했고, 마케팅 활동이 디지털로 넘어갔다.</li>
<li>마켓 5.0 : 인간 휴머니즘과 기술의 융합으로 기술을 고객과 인간적으로 소통하는 데 활용한다.</li>
<li>마켓 6.0 : AI와 몰입형 마케팅의 시대이다.</li>
</ul>
<p>![Monosnap 마켓 6.0 : 브랜드의 생존은 ‘몰입 마케팅’에 달렸다 2024-06-28 17-25-48](<a href="https://raw.githubusercontent.com/Great-Stone/images/master/picgo/Monosnap" target="_blank" rel="noopener noreferrer">https://raw.githubusercontent.com/Great-Stone/images/master/picgo/Monosnap</a> 마켓 6.0 : 브랜드의 생존은 ‘몰입 마케팅’에 달렸다 2024-06-28 17-25-48.png)</p>
<h2>마켓 6.0</h2>
<ul>
<li>그 무기는 메타버스라고 말한다. 메타버스가 기업의 관심 밖으로 밀려난 건, 사람들이 메타버스를 잘 모르거나 오해하고 있기 때문이다. 주로 투기나 사기 소식을 더 많이 접했다.</li>
<li>지금(2024년)은 메타버스 기반 기술이 준비되었고, 콘텐츠를 공급할 AI 기술이 급속도로 발달했고, 비전프로 같은 웨어러블 기기도 나왔다.</li>
<li>2020년 등장한 소셜미디어가 새로운 미디어 였듯 메타버스는 새로운 미디어다. 포트나이트와 로블록스는 게임이라기 보다는 알파 세대가 어릴적부터 사용한 SNS 플랫폼이다.</li>
<li>피지털(Physital) 네이티브는 메타버스에 산다. 인터넷과 함께 태어난 세대는 물리적 세계와 디지털 세계를 구분하지 않을 것이다. (기성세대는 온라인과 오프라인을 분리해서 생각한다.)
<ul>
<li>예를들어 오프라인매장에 가도 앱이나 인터넷으로 물건을 검색하고 리뷰와 가격을 비교한다.</li>
<li>팝업스토어에 몰리는 Z세대(1990~2010)는 온라인과 동시에 물리적 경험을 중요하게 생각하는 예다.</li>
</ul>
</li>
<li>터치포인트(Touch point)설계가 중요하다. - 물리적 경험과 디지털 경험을 어떻게 하나의 터치 포인트(사용 경험, 입소문, 광고, 제품 포장, 웹사이트 등)에 두느냐가 관건이다.
<ul>
<li>멀티채널 마케팅 - TV에는 기성층을 대상으로한 건강의 이야기, 인스타그램으로는 청년을 대상으로 유행하는 맛 알리기</li>
<li>옴니채널 마케팅 - 온라인에서 둘러보고 오프라인 매장으로 이동하도록 유도</li>
<li>메타마케팅 - 옴니채널의 진화로, 온오프라인 고객 경험을 통합하는데, 터치포인트가 하나이다. 물리적 매장에서 디지털 경험이 연결되어 있다.</li>
</ul>
</li>
<li>브랜드 경험을 콘서트처럼 기획해야 한다. (애플의 예)
<ul>
<li>오감을 자극하며 상호작용하라 : 애플은 탁 트인 공간에 제품들이 한눈에 들어오고, 체험을 권유하고, 맥북의 스크린과 바닥을 76도 기울이는 전시 각도는 일부러 사람의 각도를 조정하는 촉감을 유도한다.</li>
<li>거슬리는 모든 걸 없애라 : 경험을 즐기는 데 방해가 되는 요소는 최대한 없애야 한다. 애플은 매장 어디서나 결제할 수 있고, 이메일로 영수증을 보내준다.</li>
<li>경험을 하나로 묶는 스토리 텔링 : 브랜드의 경험과 가치가 일치한다. 하나의 주제인 콘서트 처럼.</li>
</ul>
</li>
<li>오프라인에 온라인을, 온라인에 오프라인을 : 몰입형 경험을 구현하는데 두가지 접근법이 있다. 하나는 물리적인 공간에 디지털 경험을 심는 것, 다른 하나는 디지털 공간에 물리적인 경험을 구현하는 것
<ul>
<li>오프라인에서만 가능한 디지털 경험 : 스타벅스 사이렌오더, 버버리의 몰입형 매장의 옷의 QR로 제품정보와 소셜 화폐 제공, 디즈니랜드의 VR이나 홀로그램으로 캐릭터와 상호작용</li>
<li>온라인 공간에서 물리적 활동을 하게 하라  : 로블록스나 포트나이트에서 콘서트를, 제페토에서 구찌 매장을 방문하여 물건을 구매.</li>
</ul>
</li>
<li>분석보다 통찰이 필요한 시대 (마케터는 기술과 친해야 한다고 말합니다.)
<ul>
<li>"기술이 사용되는 사례를 충분히 알아야 합니다. AI가 무엇을 하는지, 블록체인이 무엇을 하는지, 확장현실이 어떻게 쓰이는지를 보세요. 거기서 내 브랜드, 내 비즈니스와의 연결점을 찾으면 됩니다."</li>
<li>"숫자 이면을 들여다보고 인사이트를 찾는 일은 인공지능이 할 수 없는 일입니다. 기술의 시대에 성공하려면, 인사이트를 도출할 줄 알아야 해요. 분석은 AI에게 맡기세요."</li>
</ul>
</li>
</ul>
]]></content:encoded>
      <enclosure url="https://gimg.gilbut.co.kr/book/BN004085/rn_view_BN004085.jpg" type="image/jpeg"/>
    </item>
    <item>
      <title>Node.js package version update tool NCU</title>
      <link>https://docmoa.github.io/05-Software/NodeJS/package-update-tool.html</link>
      <guid>https://docmoa.github.io/05-Software/NodeJS/package-update-tool.html</guid>
      <source url="https://docmoa.github.io/rss.xml">Node.js package version update tool NCU</source>
      <description>Node.js의 필요 패키지의 최신 버전으로 package.json을 업데이트하는 툴</description>
      <pubDate>Thu, 27 Jun 2024 02:09:20 GMT</pubDate>
      <content:encoded><![CDATA[
<blockquote>
<p>npm-check-updates - <a href="https://www.npmjs.com/package/npm-check-updates" target="_blank" rel="noopener noreferrer">https://www.npmjs.com/package/npm-check-updates</a></p>
</blockquote>
<h2>1. 배경</h2>
<p><code>npm install</code>을 사용하여 패키지 설치를 하는 경우 <code>package.json</code>에는 보통 패치버전을 허용하는 형태로 저장된다.</p>
<div class="language-json" data-highlighter="prismjs" data-ext="json" data-title="package.json"><pre class="language-json"><code><span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token property">"..."</span> <span class="token operator">:</span> <span class="token string">"..."</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token property">"devDependencies"</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token property">"@vue/repl"</span><span class="token operator">:</span> <span class="token string">"^3.4.0"</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token property">"..."</span><span class="token operator">:</span> <span class="token string">"..."</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre></div><p><code>^3.4.0</code>의 경우 <code>3.4</code> 버전 기준 패치버전인 <code>3.4.x</code>로만 업데이트 되기 때문에 매이저 또는 마이너가 변경되는 경우 개별적으로 업데이트 해줘야하는 불편함이 있었다.</p>
<div class="hint-container tip">
<p class="hint-container-title">팁</p>
<p>업데이트가 필요한 패키지는 <code>npm outdated</code>로 확인할 수 있다.</p>
</div>
<h2>2. npm-check-updates</h2>
<p>검색을 해보니 많은 사람들이 <code>npm-check-updates</code> 패키지로 최신 버전으로 업데이트하는 것을 확인할 수 있었다. 이 툴은 전역으로 설치하여 사용한다.</p>
<div class="language-bash" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="line"><span class="token function">npm</span> <span class="token function">install</span> <span class="token parameter variable">-g</span> npm-check-updates</span>
<span class="line"></span></code></pre></div><p>이후 <code>ncu</code>라는 명령어로 업데이트 될 패키지와 변경될 버전을 확인할 수 있다.</p>
<div class="language-bash" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="line">$ ncu</span>
<span class="line"></span>
<span class="line">Checking /Users/gs/workspaces/docs/docmoa/package.json</span>
<span class="line"><span class="token punctuation">[</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token punctuation">]</span> <span class="token number">19</span>/19 <span class="token number">100</span>%</span>
<span class="line"></span>
<span class="line"> @vue/repl                         ^3.4.0  →        ^4.2.1</span>
<span class="line"> chart.js                          ^4.4.1  →        ^4.4.3</span>
<span class="line"> echarts                           ^5.4.3  →        ^5.5.0</span>
<span class="line"> katex                            ^0.16.9  →      ^0.16.10</span>
<span class="line"> mermaid                          ^10.8.0  →       ^10.9.1</span>
<span class="line"> vue                              ^3.4.19  →       ^3.4.30</span>
<span class="line"> vuepress-plugin-search-pro  ^2.0.0-rc.31  →  ^2.0.0-rc.50</span>
<span class="line"></span>
<span class="line">Run ncu <span class="token parameter variable">-u</span> to upgrade package.json</span>
<span class="line"></span></code></pre></div><p>명령의 결과로 표기되는것 처럼 <code>package.json</code>의 내용을 자동으로 수정하려면 <code>ncu -u</code>로 옵션을 추가하여 실행시켜야 한다.</p>
<div class="hint-container caution">
<p class="hint-container-title">위험</p>
<p>자동업데이트는 편하지만 영향도를 알 수 없는 경우 최신버전이 무엇인지 확인하는 용도로만도 사용할 수 있다.</p>
</div>
<p>이후, <code>ncu -u</code>를 수행하면 <code>package.json</code> 내용을 자동으로 업데이트 해준다. 업데이트된 <code>package.json</code>을 기준으로 <code>npm install</code>을 수행하여 패키지 업그레이드 작업을 완료한다.</p>
<div class="language-text" data-highlighter="prismjs" data-ext="text" data-title="text"><pre class="language-text"><code><span class="line">$ ncu -u</span>
<span class="line"></span>
<span class="line">Upgrading /Users/gs/workspaces/docs/docmoa/package.json</span>
<span class="line">[====================] 19/19 100%</span>
<span class="line"></span>
<span class="line"> @vue/repl                         ^3.4.0  →        ^4.2.1</span>
<span class="line"> chart.js                          ^4.4.1  →        ^4.4.3</span>
<span class="line"> echarts                           ^5.4.3  →        ^5.5.0</span>
<span class="line"> katex                            ^0.16.9  →      ^0.16.10</span>
<span class="line"> mermaid                          ^10.8.0  →       ^10.9.1</span>
<span class="line"> vue                              ^3.4.19  →       ^3.4.30</span>
<span class="line"> vuepress-plugin-search-pro  ^2.0.0-rc.31  →  ^2.0.0-rc.50</span>
<span class="line"></span>
<span class="line">Run npm install to install new versions.</span>
<span class="line"></span></code></pre></div><h2>3. 선택적 업데이트</h2>
<p>일괄 버전 업데이트가 아니라 선택적으로 하려는 경우 <code>ncu -i --format group</code> 명령을 사용할 수 있다.</p>
<ul>
<li>위아래 키보드를 눌러 패키지를 선택한다.</li>
<li>스페이스바로 선택/미선택 을 조절할 수 있다.</li>
<li><code>a</code>를 누르면 모든 것에 대해 선택/미선택을 조절할 수 있다.</li>
<li>원하는 패키지를 선택 후 <code>엔터</code>키로 선택을 저장한다.</li>
</ul>
<div class="language-bash" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="line">$ ncu <span class="token parameter variable">-i</span> <span class="token parameter variable">--format</span> group</span>
<span class="line">Upgrading /Users/gs/workspaces/docs/docmoa/package.json</span>
<span class="line"><span class="token punctuation">[</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token punctuation">]</span> <span class="token number">19</span>/19 <span class="token number">100</span>%</span>
<span class="line"></span>
<span class="line">? Choose <span class="token function">which</span> packages to update › </span>
<span class="line">  ↑/↓: Select a package</span>
<span class="line">  Space: Toggle selection</span>
<span class="line">  a: Toggle all</span>
<span class="line">  Enter: Upgrade </span>
<span class="line"></span>
<span class="line">Patch   Backwards-compatible bug fixes</span>
<span class="line">❯ ◉ chart.js                          ^4.4.1  →        ^4.4.3</span>
<span class="line">  ◉ vue                              ^3.4.19  →       ^3.4.30</span>
<span class="line">  ◉ vuepress-plugin-search-pro  ^2.0.0-rc.31  →  ^2.0.0-rc.50</span>
<span class="line">  ◉ vuepress-theme-hope         ^2.0.0-rc.30  →  ^2.0.0-rc.50</span>
<span class="line"></span>
<span class="line">Minor   Backwards-compatible features</span>
<span class="line">  ◉ echarts                           ^5.4.3  →        ^5.5.0</span>
<span class="line">  ◉ mermaid                          ^10.8.0  →       ^10.9.1</span>
<span class="line"></span>
<span class="line">Major   Potentially breaking API changes</span>
<span class="line">  ◯ @vue/repl                         ^3.4.0  →        ^4.2.1</span>
<span class="line"></span>
<span class="line">Major version zero   Anything may change</span>
<span class="line">  ◯ katex                            ^0.16.9  →      ^0.16.10</span>
<span class="line"></span></code></pre></div><p><code>엔터</code>키를 누르면 <code>npm install</code> 여부를 물어본다.</p>
<div class="language-bash" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="line">✔ Choose <span class="token function">which</span> packages to update › </span>
<span class="line"></span>
<span class="line"> chart.js                          ^4.4.1  →        ^4.4.3</span>
<span class="line"> echarts                           ^5.4.3  →        ^5.5.0</span>
<span class="line"> mermaid                          ^10.8.0  →       ^10.9.1</span>
<span class="line"> vue                              ^3.4.19  →       ^3.4.30</span>
<span class="line"> vuepress-plugin-search-pro  ^2.0.0-rc.31  →  ^2.0.0-rc.50</span>
<span class="line"> vuepress-theme-hope         ^2.0.0-rc.30  →  ^2.0.0-rc.50</span>
<span class="line"></span>
<span class="line">? Run <span class="token function">npm</span> <span class="token function">install</span> to <span class="token function">install</span> new versions? › <span class="token punctuation">(</span>Y/n<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre></div>]]></content:encoded>
    </item>
    <item>
      <title>Required Node.js engine version</title>
      <link>https://docmoa.github.io/05-Software/NodeJS/required-node-version.html</link>
      <guid>https://docmoa.github.io/05-Software/NodeJS/required-node-version.html</guid>
      <source url="https://docmoa.github.io/rss.xml">Required Node.js engine version</source>
      <description>Node.js의 버전 요구사항을 package.js에 추가하기</description>
      <pubDate>Thu, 27 Jun 2024 02:09:20 GMT</pubDate>
      <content:encoded><![CDATA[
<p><code>Docmoa</code>에서 사용하는 패키지를 업데이트 하던 중 다음과 같은 오류가 발생하였다.</p>
<h2>1. 배경</h2>
<div class="language-log" data-highlighter="prismjs" data-ext="log" data-title="log"><pre class="language-log"><code><span class="line"><span class="token operator">$</span> npm run dev</span>
<span class="line"></span>
<span class="line"><span class="token url">file:///Users/gs/workspaces/docs/docmoa/node_modules/execa/lib/utils/max-listeners.js:1</span></span>
<span class="line">import <span class="token operator">{</span>addAbortListener<span class="token operator">}</span> from <span class="token string">'node:events'</span><span class="token operator">;</span></span>
<span class="line">        <span class="token operator">^</span><span class="token operator">^</span><span class="token operator">^</span><span class="token operator">^</span><span class="token operator">^</span><span class="token operator">^</span><span class="token operator">^</span><span class="token operator">^</span><span class="token operator">^</span><span class="token operator">^</span><span class="token operator">^</span><span class="token operator">^</span><span class="token operator">^</span><span class="token operator">^</span><span class="token operator">^</span><span class="token operator">^</span></span>
<span class="line"><span class="token property">SyntaxError:</span> The requested module <span class="token string">'node:events'</span> does not provide an export named <span class="token string">'addAbortListener'</span></span>
<span class="line">    at ModuleJob<span class="token punctuation">.</span>_instantiate <span class="token operator">(</span>node<span class="token operator">:</span>internal<span class="token operator">/</span>modules<span class="token operator">/</span>esm<span class="token operator">/</span>module_job<span class="token operator">:</span><span class="token number">123</span><span class="token operator">:</span><span class="token number">21</span><span class="token operator">)</span></span>
<span class="line">    at async ModuleJob<span class="token punctuation">.</span>run <span class="token operator">(</span>node<span class="token operator">:</span>internal<span class="token operator">/</span>modules<span class="token operator">/</span>esm<span class="token operator">/</span>module_job<span class="token operator">:</span><span class="token number">189</span><span class="token operator">:</span><span class="token number">5</span><span class="token operator">)</span></span>
<span class="line">    at async Promise<span class="token punctuation">.</span>all <span class="token operator">(</span>index <span class="token number">0</span><span class="token operator">)</span></span>
<span class="line">    at async ESMLoader<span class="token punctuation">.</span>import <span class="token operator">(</span>node<span class="token operator">:</span>internal<span class="token operator">/</span>modules<span class="token operator">/</span>esm<span class="token operator">/</span>loader<span class="token operator">:</span><span class="token number">530</span><span class="token operator">:</span><span class="token number">24</span><span class="token operator">)</span></span>
<span class="line">    at async loadUserConfig <span class="token operator">(</span><span class="token url">file:///Users/gs/workspaces/docs/docmoa/node_modules/@vuepress/cli/dist/index.js:77:18)</span></span>
<span class="line">    at async CAC<span class="token punctuation">.</span>dev <span class="token operator">(</span><span class="token url">file:///Users/gs/workspaces/docs/docmoa/node_modules/@vuepress/cli/dist/index.js:443:52)</span></span>
<span class="line"></span></code></pre></div><p>업데이트 된 패키지에서 <code>addAbortListener</code>라는걸 사용하는 것 같은데, 이를 찾을 수 없어 오류가 발생하였다.</p>
<p>Node.js의 <a href="https://nodejs.org/en/blog/release/v20.5.0" target="_blank" rel="noopener noreferrer">CHANGELOG</a>를 찾아보니 <code>addAbortListener</code>는 v20.5.0 부터 언급되는것으로 보아 이때부터 추가된 api인 것으로 추측된다.</p>
<ul>
<li>Node.js events 설명 - <a href="https://runebook.dev/ko/docs/node/events" target="_blank" rel="noopener noreferrer">https://runebook.dev/ko/docs/node/events</a></li>
</ul>
<p>현재 Docmoa를 빌드하는 버전은 <code>v18.x</code>였으므로 앞으로는 빌드하기 위해 <code>v20.5.x</code> 이상으로 필요 버전에 대한 명시가 필요해졌다.</p>
<h2>2. 필요 버전 명시하기</h2>
<p><code>package.json</code>에서 <code>engine</code> 필드를 설정하고 <code>node</code>와 <code>npm</code>버전에 대한 요구 사항을 설정할 수 있다.</p>
<div class="language-json" data-highlighter="prismjs" data-ext="json" data-title="package.json"><pre class="language-json"><code><span class="line"><span class="token punctuation">{</span></span>
<span class="line">  <span class="token property">"..."</span> <span class="token operator">:</span> <span class="token string">"..."</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token property">"engines"</span> <span class="token operator">:</span> <span class="token punctuation">{</span> </span>
<span class="line">    <span class="token property">"npm"</span> <span class="token operator">:</span> <span class="token string">"&gt;=10.0.0 &lt;20.0.0"</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token property">"node"</span> <span class="token operator">:</span> <span class="token string">"&gt;=20.5.0"</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre></div><p>추가로 npm을 통해 이를 적용하려면 <code>.npmrc</code> 파일을 만들고 <code>engine-strict</code> 옵션을 <code>true</code>로 설정해야 한다.</p>
<div class="language-ini" data-highlighter="prismjs" data-ext="ini" data-title=".npmrc"><pre class="language-ini"><code><span class="line"><span class="token comment"># .npmrc</span></span>
<span class="line"><span class="token key attr-name">engine-strict</span><span class="token punctuation">=</span><span class="token value attr-value">true</span></span>
<span class="line"></span></code></pre></div><p>설정이 완료되면 필요한 엔진 버전이 일치하지 않는 경우 <code>npm install</code> 같은 npm 명령이 실패하게 된다.</p>
<p><code>.npmrc</code> 적용 전에는 WARN 메시지만 나오지만</p>
<div class="language-log" data-highlighter="prismjs" data-ext="log" data-title="log"><pre class="language-log"><code><span class="line"><span class="token operator">$</span> node <span class="token operator">-</span><span class="token operator">-</span>version</span>
<span class="line"><span class="token number">v18.18.0</span></span>
<span class="line"></span>
<span class="line"><span class="token operator">$</span> npm install</span>
<span class="line">npm <span class="token level warning important">WARN</span> EBADENGINE Unsupported engine <span class="token operator">{</span></span>
<span class="line">npm <span class="token level warning important">WARN</span> EBADENGINE   package<span class="token operator">:</span> <span class="token string">'docmoa@2.3.0'</span><span class="token punctuation">,</span></span>
<span class="line">npm <span class="token level warning important">WARN</span> EBADENGINE   required<span class="token operator">:</span> <span class="token operator">{</span> node<span class="token operator">:</span> <span class="token string">'&gt;=20.5.0'</span> <span class="token operator">}</span><span class="token punctuation">,</span></span>
<span class="line">npm <span class="token level warning important">WARN</span> EBADENGINE   current<span class="token operator">:</span> <span class="token operator">{</span> node<span class="token operator">:</span> <span class="token string">'v18.18.0'</span><span class="token punctuation">,</span> npm<span class="token operator">:</span> <span class="token string">'9.8.1'</span> <span class="token operator">}</span></span>
<span class="line"><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>생략<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span></span>
<span class="line"></span></code></pre></div><p>적용 후에는 <code>ERR!</code>를 출력하며 실행되지 않는다.</p>
<div class="language-log" data-highlighter="prismjs" data-ext="log" data-title="log"><pre class="language-log"><code><span class="line"><span class="token operator">$</span> node <span class="token operator">-</span><span class="token operator">-</span>version</span>
<span class="line"><span class="token number">v18.18.0</span></span>
<span class="line"></span>
<span class="line"><span class="token operator">$</span> npm install</span>
<span class="line">npm <span class="token level error important">ERR</span><span class="token operator">!</span> code EBADENGINE</span>
<span class="line">npm <span class="token level error important">ERR</span><span class="token operator">!</span> engine Unsupported engine</span>
<span class="line">npm <span class="token level error important">ERR</span><span class="token operator">!</span> engine Not compatible with your version of node<span class="token operator">/</span>npm<span class="token operator">:</span> docmoa<span class="token operator">@</span><span class="token number">2.3.0</span></span>
<span class="line">npm <span class="token level error important">ERR</span><span class="token operator">!</span> notsup Not compatible with your version of node<span class="token operator">/</span>npm<span class="token operator">:</span> docmoa<span class="token operator">@</span><span class="token number">2.3.0</span></span>
<span class="line">npm <span class="token level error important">ERR</span><span class="token operator">!</span> notsup Required<span class="token operator">:</span> <span class="token operator">{</span><span class="token string">"node"</span><span class="token operator">:</span><span class="token string">"&gt;=20.5.0"</span><span class="token operator">}</span></span>
<span class="line">npm <span class="token level error important">ERR</span><span class="token operator">!</span> notsup Actual<span class="token operator">:</span>   <span class="token operator">{</span><span class="token string">"npm"</span><span class="token operator">:</span><span class="token string">"9.8.1"</span><span class="token punctuation">,</span><span class="token string">"node"</span><span class="token operator">:</span><span class="token string">"v18.18.0"</span><span class="token operator">}</span></span>
<span class="line"></span>
<span class="line">npm <span class="token level error important">ERR</span><span class="token operator">!</span> A complete log of this run can be found in<span class="token operator">:</span> <span class="token file-path string">/Users/gs/.npm/_logs/2024-06-27T00_34_26_004Z-debug-0.log</span></span>
<span class="line"></span></code></pre></div>]]></content:encoded>
    </item>
    <item>
      <title>Terraform Enterprise Requirements - Flexible Deployment</title>
      <link>https://docmoa.github.io/04-HashiCorp/03-Terraform/06-TerraformEnterprise/tfe-requirement-flex.html</link>
      <guid>https://docmoa.github.io/04-HashiCorp/03-Terraform/06-TerraformEnterprise/tfe-requirement-flex.html</guid>
      <source url="https://docmoa.github.io/rss.xml">Terraform Enterprise Requirements - Flexible Deployment</source>
      <description>Terraform Enterprise 설치 요구사항 정리</description>
      <pubDate>Wed, 26 Jun 2024 00:58:39 GMT</pubDate>
      <content:encoded><![CDATA[
<blockquote>
<p><a href="https://developer.hashicorp.com/terraform/enterprise/flexible-deployments/install" target="_blank" rel="noopener noreferrer">https://developer.hashicorp.com/terraform/enterprise/flexible-deployments/install</a></p>
</blockquote>
<blockquote>
<p>v202406-1 기준</p>
</blockquote>
<h2>1. License File</h2>
<ul>
<li>Terraform Enterprise Image 다운받기위한 인증용도로 사용
<ul>
<li><a href="http://images.registry.hashicorp.com" target="_blank" rel="noopener noreferrer">images.registry.hashicorp.com</a></li>
</ul>
</li>
<li>Terraform Enterprise 프로세스(컨테이너)를 실행할 때 사용</li>
<li>환경변수로 선언하는 경우
<ul>
<li>옵션1) <code>TFE_LICENSE</code>에 라이선스의 평문 내용을 설정</li>
<li>옵션2) <code>TFE_LICENSE_PATH</code>에 라이선스 파일 경로를 설정</li>
</ul>
</li>
</ul>
<h2>2. TLS Certification</h2>
<p>Terraform Enterprise는 TLS 인증서와 Private key가 필요합니다.</p>
<ul>
<li>인증서는 X.509 형식</li>
<li>인증서와 키는 PEM(base64) 인코딩 형태</li>
<li>Terraform Enteprise를 위한 FQDN (<a href="http://tfe.example.com" target="_blank" rel="noopener noreferrer">tfe.example.com</a>)에 대해 발생되거나, 와일드카드(*.example.com)로 발급되어야 하며, Terraform Enterprise가 설치되는 호스트 이름과 일치해야 합니다.</li>
<li>인증서는 공인, 사설 모두 사용할 수 있지만 Terraform Enterprise와 연계될 것으로 예상되는 모든 서비스에서 신뢰여부를 확인하게 됩니다.
<ul>
<li>VCS, CICD, API 호출 도구, Slack 등</li>
</ul>
</li>
<li>CN(Common Name), DN(Domain Names) 모두에서 SAN(Subject Alternative Name)을 사용하는지 확인</li>
</ul>
<h2>3. 실행 환경</h2>
<ul>
<li>Docker
<ul>
<li>Any Linux</li>
<li>23.0.x ~ 26.1.x</li>
</ul>
</li>
<li>Podman
<ul>
<li>RHEL 8+</li>
<li>4.3.0 ~</li>
</ul>
</li>
<li>Kubernetes
<ul>
<li>EKS, AKS, GKE, OpenShift(beta)</li>
</ul>
</li>
<li>Nomad
<ul>
<li>Any OS + Docker/Podman</li>
<li>1.5.0 ~</li>
</ul>
</li>
</ul>
<h2>4. Data Store</h2>
<h3>4.1 Disk</h3>
<p>설치 환경을 위한 최소 40GB이상의 디스크를 요구합니다.</p>
<ul>
<li>물리 디스크</li>
<li>AWS EBS</li>
<li>GCP Zonal Persistent Disk</li>
<li>Azure Disk Storage</li>
<li>iSCSI</li>
<li>SAN</li>
</ul>
<h3>4.2 PostgreSQL</h3>
<p>Active/Active 또는 외부 저장소로서 연결에 사용됩니다.</p>
<p>Terraform Enterprise의 애플리케이션 데이터, 워크스페이스 설정, 사용자 및 그룹 설정, Run 실행 정보가 저장됩니다.</p>
<ul>
<li>설치형 PostgreSQL 및 AWS RDS, Azure DB, GCP SQL의 관리형 PostgreSQL을 지원</li>
<li>12.x, 13.x, 14.4+, 15.x</li>
</ul>
<h3>4.3 Object Storage</h3>
<p>Active/Active 또는 외부 저장소로서 연결에 사용됩니다.</p>
<p>State 파일, 실행 계획 파일, 실행 로그, 구성 버전의 내용이 저장됩니다.</p>
<ul>
<li>AWS S3, Azure Blob Storage, Google Cloud Storage, MinIO 등과 같은 S3 호환 Object Storage를 지원</li>
</ul>
<h3>4.4 Redis</h3>
<p>Active/Active 또는 외부 저장소로서 연결에 사용됩니다.</p>
<p>데이터 캐싱용으로 사용됩니다.</p>
<ul>
<li>설치형 Redis, AWs ElastiCache, Azure Cache, Google cloud Memorystore 같은 관리형 Redis를 지원</li>
<li>6.x, 7.x(권장)</li>
<li>Redis 클러스터 모드는 미지원</li>
</ul>
<h3>4.5 HashiCorp Vault (옵션)</h3>
<p><code>Object Storage</code>내의 파일 객체를 암호화하고 해독하는 암호화 키를 관리합니다. Vault가 없는 경우 키는 PostgreSQL에 저장됩니다.</p>
<h2>5. Network</h2>
<h3>5.1 Ingress</h3>
<p>| 정의                   | 기본 포트 | 용도                                            |<br>
|</p>
]]></content:encoded>
    </item>
    <item>
      <title>Terraform Enterprise Backup &amp; Restore</title>
      <link>https://docmoa.github.io/04-HashiCorp/03-Terraform/06-TerraformEnterprise/tfe-backup-restore.html</link>
      <guid>https://docmoa.github.io/04-HashiCorp/03-Terraform/06-TerraformEnterprise/tfe-backup-restore.html</guid>
      <source url="https://docmoa.github.io/rss.xml">Terraform Enterprise Backup &amp; Restore</source>
      <description>Terraform Enterprise Backup &amp; Restore</description>
      <pubDate>Tue, 25 Jun 2024 08:03:30 GMT</pubDate>
      <content:encoded><![CDATA[
<h2>1. Backup &amp; Restore 개요</h2>
<p>Backup은 Object Storage와 PostgreSQL을 포함한 모든 데이터를 대상으로 이루어진다. 다만, 설치 구성요소들에 대한 Backup이 되는 것은 아니기 때문에 Restore시 새로운 Terraform Enterprise의 설치가 필요하다.</p>
<p>아래와 같은 주의 사항이 존재</p>
<ul>
<li>Backup된 Terraform Enterprise와 Restore된 Terraform Enterprise 사이에 버전 차이가 있어서는 안된다. 즉, Backup을 진행한 버전 그대로 Restore 과정을 진행해야 한다.</li>
<li>Backup된 PostgreSQL과 Restore된 PostgreSQL 사이에 버전 차이가 있어서는 안된다. 즉, Backup을 진행한 버전 그대로 Restore 과정을 진행해야 한다.</li>
<li>Restore 과정 진행 시 Terraform Enterprise는 application data가 없는 상태로 새로 설치되어야 한다.</li>
<li>Restore 과정이 완료된 후 Terraform Enterprise는 재시작이 필요하다.</li>
</ul>
<h2>2. 인증 및 보안</h2>
<p>Terraform Enterprise의 Backup과 Restore를 위한 별도의 인증 토큰이 존재하며 아래 명령어를 이용하여 해당 Token을 취득할 수 있다.</p>
<div class="language-bash" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="line"><span class="token function">docker</span> <span class="token builtin class-name">exec</span> <span class="token parameter variable">-t</span> terraform-enterprise-tfe-1 /bin/bash <span class="token parameter variable">-c</span> <span class="token string">'cat /var/run/terraform-enterprise/backup-restore/config.hcl | grep backup_token'</span></span>
<span class="line"></span></code></pre></div><p>Terraform Enterprise는 내부에 자체 내장된 Vault의 일부 기능을 이용해 데이터를 암/복호화한다. 다만, Backup 과정에서는 해당 데이터를 암/복호화하기 위한 Vault 암호키가 제공되지 않기 때문에 기존 저장된 암호화 데이터를 먼저 Vault가 복호화한 뒤 사용자가 임의 지정한 Password를 통해 재암호화하여 Backup 과정을 진행한다. Restore 과정에서는 Backup 과정에서 사용된 것과 동일한 Password를 이용하여 데이터를 복호화한 뒤 새로운 Terraform Enterprise가 설치되고 나면 자체 내장된 Vault의 암호화키를 이용하여 데이터를 재암호화한 뒤 Restore 과정이 마무리된다.</p>
<div class="language-bash" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="line"><span class="token function">vi</span> payload.json</span>
<span class="line"></span></code></pre></div><div class="language-json" data-highlighter="prismjs" data-ext="json" data-title="json"><pre class="language-json"><code><span class="line"><span class="token punctuation">{</span></span>
<span class="line">  <span class="token property">"password"</span><span class="token operator">:</span> <span class="token string">"temporary-password"</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre></div><ul>
<li>Backup과 Restore 시 반드시 같은 Password가 제공되어야 한다.</li>
<li>Backup 과정 시 <code>"skip_object_storage": "true"</code> 항목을 추가해 Object Storage의 용량이 너무 클 경우 Object Storage만 생략하여 Backup을 진행할 수 있다. (Default: <code>false</code>)</li>
</ul>
<h2>3. Mounted Disk 배포 시 Backup &amp; Restore</h2>
<div class="hint-container warning">
<p class="hint-container-title">주의</p>
<p>하기 aux 폴더 누락 이슈로 bind 경로를 추가한 내용은 'Terraform Enterprise Releases v202402-2'에서 진행된 내용이며 '최신 Releases v202406-1'에서는 따로 bind 경로를 추가 설정하지 않아도 잘 실행됨을 확인하였습니다.</p>
</div>
<p>Mounted disk 배포 모델은, Failover 또는 Active/Active 기능 없이 단일 컴퓨팅 환경에 Terraform Enterprise를 배포한다. 본 가이드는 Mounted disk 배포 모델인 <strong>TFE1</strong>서버에서 backup 진행 이후, 동일한 Mounted disk 배포 모델 <strong>TFE2</strong> 서버로 restore 과정을 진행한다.</p>
<h3>3.1. docker-compose.yaml bind 경로 추가</h3>
<p><strong>TFE1</strong> 서버에서 Backup 이후 <strong>TFE2</strong> 서버에서 Restore 과정 진행 시 state 파일 경로인 <strong>/var/lib/terraform-enterprise/aux</strong> 폴더가 누락되는 이슈로 aux 디렉토리를 생성해준 후 volumes에 bind를 추가한다.<br>
<code>docker-compose.yaml</code> 파일 변경은 TFE1 서버와 TFE2 서버에서 동일하게 진행한다.<br>
단 Restore하고자 하는 <strong>TFE2</strong> 서버는 Terraform Enterprise는 application data가 없는 상태에서 Restore가 진행되어야 한다.</p>
<div class="language-bash" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="line"><span class="token function">mkdir</span> ~/aux</span>
<span class="line"></span></code></pre></div><p><code>TFE1 서버, TFE2 서버 - docker-compose.yaml</code>의 volumes</p>
<div class="language-bash" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="line">    volumes:</span>
<span class="line">      - type: <span class="token builtin class-name">bind</span></span>
<span class="line">        source: /var/run/docker.sock</span>
<span class="line">        target: /run/docker.sock</span>
<span class="line">      - type: <span class="token builtin class-name">bind</span></span>
<span class="line">        source: ./cert</span>
<span class="line">        target: /etc/ssl/private/terraform-enterprise</span>
<span class="line">      - type: <span class="token builtin class-name">bind</span></span>
<span class="line">        source: ./aux</span>
<span class="line">        target: /var/lib/terraform-enterprise/aux</span>
<span class="line">      - type: volume</span>
<span class="line">        source: terraform-enterprise</span>
<span class="line">        target: /var/lib/terraform-enterprise</span>
<span class="line">      - type: volume</span>
<span class="line">        source: terraform-enterprise-cache</span>
<span class="line">        target: /var/cache/tfe-task-worker/terraform</span>
<span class="line">    extra_hosts:</span>
<span class="line">      - <span class="token string">"&lt;TFE1 HOSTNAME&gt;:&lt;TFE1 IP&gt;"</span></span>
<span class="line">volumes:</span>
<span class="line">  terraform-enterprise:</span>
<span class="line">  terraform-enterprise-cache:</span>
<span class="line"></span></code></pre></div><div class="language-bash" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="line"><span class="token function">docker-compose</span> up <span class="token parameter variable">--detach</span></span>
<span class="line"></span></code></pre></div><h3>3.2. aux 폴더 내용 전송</h3>
<p><strong>TFE1</strong> 서버의 <strong>/home/user/aux/archivist/terraform</strong> 경로를 통해 states 파일이 들어가 있는 것을 확인할 수 있다. Restore 하고자 하는 <strong>TFE2</strong> 서버에 <strong>TFE1</strong> 서버의 aux 폴더의 내용을 복사해서 넣어준다.</p>
<p><code>TFE1 서버에서 진행</code></p>
<div class="language-bash" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="line"><span class="token function">scp</span> <span class="token parameter variable">-r</span> <span class="token parameter variable">-i</span> <span class="token operator">&lt;</span>key.pem<span class="token operator">&gt;</span> ~/aux <span class="token operator">&lt;</span>TFE2 <span class="token environment constant">USER</span><span class="token operator">&gt;</span>@<span class="token operator">&lt;</span>TFE2 IP<span class="token operator">&gt;</span>:/home/user/</span>
<span class="line"></span></code></pre></div><p><code>POST /_backup/api/v1/backup</code></p>
<div class="language-bash" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="line"><span class="token function">curl</span> <span class="token punctuation">\</span></span>
<span class="line">  <span class="token parameter variable">--header</span> <span class="token string">"Authorization: Bearer &lt;TOKEN&gt;"</span> <span class="token punctuation">\</span></span>
<span class="line">  <span class="token parameter variable">--request</span> POST <span class="token punctuation">\</span></span>
<span class="line">  <span class="token parameter variable">--data</span> @payload.json <span class="token punctuation">\</span></span>
<span class="line">  <span class="token parameter variable">--output</span> backup.blob <span class="token punctuation">\</span></span>
<span class="line">  https://<span class="token operator">&lt;</span>TFE1 <span class="token environment constant">HOSTNAME</span><span class="token operator">&gt;</span>/_backup/api/v1/backup</span>
<span class="line"></span></code></pre></div><ul>
<li><code>--header</code>: 앞선 과정에서 취득한 Token 값 입력</li>
<li><code>--data</code>: 앞선 과정에서 생성한 <code>.json</code> 파일 지정</li>
<li><code>--output</code>: Backup된 내용을 추출할 파일명 지정</li>
</ul>
<p><strong>TFE1</strong> 서버에 backup.blob 파일이 생성된 것을 볼 수 있다.</p>
<h3>3.3. Restore</h3>
<p><code>POST /_backup/api/v1/restore</code></p>
<p>Restore하기 전 반드시 Terraform Enterprise를 새로 설치해야 한다.(application data가 쌓이지 않은 초기 상태여야 한다.)<br>
Restore 하고자 하는 TFE2 서버의 Terraform Enterprise 서비스 시작 후 TFE1에서 Restore curl 진행한다.</p>
<div class="language-bash" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="line"><span class="token function">curl</span> <span class="token punctuation">\</span></span>
<span class="line">  <span class="token parameter variable">--header</span> <span class="token string">"Authorization: Bearer &lt;TOKEN&gt;"</span> <span class="token punctuation">\</span></span>
<span class="line">  <span class="token parameter variable">--request</span> POST <span class="token punctuation">\</span></span>
<span class="line">  <span class="token parameter variable">--form</span> <span class="token assign-left variable">config</span><span class="token operator">=</span>@payload.json <span class="token punctuation">\</span></span>
<span class="line">  <span class="token parameter variable">--form</span> <span class="token assign-left variable">snapshot</span><span class="token operator">=</span>@backup.blob <span class="token punctuation">\</span></span>
<span class="line">  https://<span class="token operator">&lt;</span>TFE2 <span class="token environment constant">HOSTNAME</span><span class="token operator">&gt;</span>/_backup/api/v1/restore</span>
<span class="line"></span></code></pre></div><ul>
<li><code>--header</code>: 앞선 과정에서 취득한 Token 값 입력</li>
<li><code>--form config</code>: 앞선 과정에서 생성한 <code>.json</code> 파일 지정</li>
<li><code>--form snapshot</code>: Backup 과정에서 생성된 <code>.blob</code> 파일 지정</li>
</ul>
]]></content:encoded>
    </item>
    <item>
      <title>AWS Cognito를 사용하여 Vault의 OIDC 인증 설정하기</title>
      <link>https://docmoa.github.io/04-HashiCorp/06-Vault/03-Auth_Method/oidc-aws-cognito.html</link>
      <guid>https://docmoa.github.io/04-HashiCorp/06-Vault/03-Auth_Method/oidc-aws-cognito.html</guid>
      <source url="https://docmoa.github.io/rss.xml">AWS Cognito를 사용하여 Vault의 OIDC 인증 설정하기</source>
      <description>AWS Cognito를 사용하여 Vault의 OIDC 인증 설정하기</description>
      <pubDate>Wed, 12 Jun 2024 02:17:33 GMT</pubDate>
      <content:encoded><![CDATA[
<h2>소개</h2>
<p>이 Terraform 코드는 AWS Cognito를 사용하여 Vault의 OIDC(Authentication Method)를 설정하는 방법을 안내합니다. AWS의 인프라 및 보안 서비스와 함께 사용하는 사람들을 위해 만들어졌으며, AWS Cognito를 Identity Provider(IDP)로 사용하여 Vault에 대한 강력한 인증을 설정하는 것을 목표로 합니다.</p>
<h2>AWS Cognito 및 Vault 설정</h2>
<p>아래의 Terraform 코드는 AWS Cognito 및 Vault에서 필요한 설정을 포함하고 있습니다. 코드를 사용하기 전에 아래의 요구사항을 충족해야 합니다.</p>
<h3>요구사항</h3>
<ul>
<li>AWS 계정 및 액세스 권한</li>
<li>AWS CLI 및 Terraform 설치</li>
<li>Vault 서버 액세스 및 관리 권한</li>
</ul>
<h3>설정 방법</h3>
<ol>
<li><code>env.sh</code> 파일을 생성하여 Vault 서버의 주소, 네임스페이스 및 토큰을 설정합니다.</li>
</ol>
<ul>
<li>VAULT_ADDR</li>
<li>VAULT_NAMESPACE (엔터프라이즈/HCP 인 경우)</li>
<li>VAULT_TOKEN</li>
</ul>
<ol start="2">
<li>아래의 Terraform 코드를 사용하여 AWS Cognito 및 Vault를 설정합니다.</li>
<li>Terraform을 사용하여 코드를 적용하여 설정을 배포합니다.</li>
</ol>
<h3>Terraform 코드</h3>
<p><a href="https://github.com/Great-Stone/terraform-vault-oidc-aws-cognito" target="_blank" rel="noopener noreferrer">https://github.com/Great-Stone/terraform-vault-oidc-aws-cognito</a></p>
<h3>코드 설명</h3>
<ul>
<li><code>aws_cognito_user_pool</code>: Vault 인증에 사용될 AWS Cognito 사용자 풀을 생성합니다.</li>
<li><code>aws_cognito_user_pool_client</code>: Vault에 대한 클라이언트를 생성하고 필요한 OAuth 플로우, 스코프 및 콜백 URL을 설정합니다.</li>
<li><code>aws_cognito_user_pool_domain</code>: 사용자 풀에 대한 도메인을 생성합니다.</li>
<li><code>aws_cognito_user</code>: AWS Cognito에 사용자를 추가합니다.</li>
<li><code>vault_jwt_auth_backend</code>: Vault에서 OIDC(Authentication Method) 백엔드를 설정하여 AWS Cognito를 IDP로 사용합니다.</li>
<li><code>vault_policy</code>: Vault에서 사용될 정책을 설정합니다.</li>
<li><code>vault_jwt_auth_backend_role</code>: Vault에서 OIDC(Authentication Method) 역할을 설정하여 AWS Cognito를 사용하여 인증을 관리합니다.</li>
</ul>
<h3>참고사항</h3>
<ul>
<li>코드를 적용하기 전에 Terraform 초기화 및 계획 단계를 수행합니다.</li>
<li>코드를 적용하기 전에 <code>env.sh</code> 파일을 수정하여 Vault 서버의 주소, 네임스페이스 및 토큰을 설정합니다.</li>
<li>코드를 적용하기 전에 AWS Cognito 사용자 풀 및 클라이언트 설정을 확인합니다.</li>
<li>코드를 적용한 후에는 Vault 및 AWS Cognito에서 설정을 확인하고 테스트합니다.</li>
</ul>
<h2>AWS Cognito를 사용하는 경우의 장점</h2>
<ul>
<li><strong>통합된 보안</strong>: AWS Cognito를 사용하여 Vault에 대한 강력한 인증을 설정하면 AWS 계정의 사용자 및 그룹 관리 시스템과 연동되므로 보안을 강화할 수 있습니다.</li>
<li><strong>사용자 관리 간소화</strong>: AWS Cognito의 사용자 관리 및 인증 시스템을 통해 사용자 관리를 간소화하고 사용자 경험을 향상시킬 수 있습니다.</li>
<li><strong>관리 용이성</strong>: AWS에서 호스팅되는 Cognito 서비스를 사용하여 관리 및 운영을 간소화하고 AWS의 다양한 보안 기능을 활용할 수 있습니다.</li>
</ul>
<h2>Vault 인증 스크린샷</h2>
<figure><figcaption></figcaption></figure>
<ul>
<li>Type: OIDC</li>
<li>Path: cognito</li>
</ul>
<figure><figcaption></figcaption></figure>
<figure><figcaption></figcaption></figure>
<ul>
<li>Check the <code>sub</code> ID</li>
</ul>
<figure><figcaption></figcaption></figure>
<ul>
<li>Vault entity alias ID mapped to OIDC sub ID</li>
</ul>
]]></content:encoded>
    </item>
    <item>
      <title>데이터 익명화를 위한 파이프라인</title>
      <link>https://docmoa.github.io/06-etc/book-memo/building-an-anonymization-pipeline.html</link>
      <guid>https://docmoa.github.io/06-etc/book-memo/building-an-anonymization-pipeline.html</guid>
      <source url="https://docmoa.github.io/rss.xml">데이터 익명화를 위한 파이프라인</source>
      <description>데이터 익명화를 위한 파이프라인 - 데이터를 안전하고 책임감 있게 사용하는 비식별화 방법</description>
      <pubDate>Thu, 09 May 2024 13:31:07 GMT</pubDate>
      <content:encoded><![CDATA[
<h2>책 정보</h2>
<blockquote>
<ul>
<li>저자 : 루크 아버클 , 칼리드 엘 에맘</li>
<li>역자 : 이창현</li>
<li>출간일 : 2022-04-11</li>
<li>페이지 : 164쪽</li>
<li>출판사 링크 : <a href="https://m.hanbit.co.kr/store/books/book_view.html?p_code=B7550382130" target="_blank" rel="noopener noreferrer">https://m.hanbit.co.kr/store/books/book_view.html?p_code=B7550382130</a></li>
<li>책소개 : 꼭꼭 숨겨라 개인 정보 보일라! 데이터 속에는 유용하면서도 의미 있는 정보가 넘쳐나지만, 사용에 앞서 개인 정보 보호가 선행되어야 한다. 이 책은 데이터를 안전하게 보호하고 익명화 프로세스를 구축하는 과정을 설명한다. 안전한 익명화 프로세스를 구축하기 위해 데이터의 흐름을 이해하고 그 과정을 분석 탐구한다. 또한 다루기 까다로운 의료 데이터를 기반으로 실제 비즈니스 요구사항을 해결하는 사용 사례를 학습하고, 각종 장치와 IoT가 수집한 데이터를 다루는 익명화 솔루션을 처음부터 끝까지 살펴본다.<br>
</li>
</ul>
</blockquote>
<h2>옮긴이의 말</h2>
<p>넘쳐나는 데이터를 안전하게 운용하는 익명화 전략</p>
<p>AI 분야를 연구하는 가운데 다량의 데이터를 다루게 되면 데이터 활용과 개인 정보 보호 기술에 대한 관심이 높아지게 된다. 특히 저는 의료 AI 플랫폼을 개발하면서 기술 연구와 더불어 데이터 제공을 통해 개인 식별화에 대한 우려와 데이터 익명화 방법, 사회적 법률과 규정 등을 고려하지 않을 수 없다.</p>
<p>이 책은 전반적으로 개인 정보를 보호하는 관점에서 데이터를 어떻게 활용할지 체계적이고 실용적으로 설명하고 있다. 먼저 데이터에서 개인 정보의 노출 위험에 대한 가능성을 제기하고 이에 대한 실제적인 위험 관리 프레임워크를 활용한다. 그리고 식별된 데이터가 있다면 어떻게 처리하는지 데이터 익명화 방법에 대해 설명하고 있다. 마지막으로 데이터 사용에 있어 안정성 확보에 대한 원칙과 기술적 과제를 제시하고 있다.</p>
<h2>정부 가이드라인</h2>
<p><a href="https://www.korea.kr/archive/expDocView.do?docId=37095" target="_blank" rel="noopener noreferrer">https://www.korea.kr/archive/expDocView.do?docId=37095</a></p>
<h3>취지</h3>
<ul>
<li>개인정보 유출 사고로 인한 개인정보 보호 정책 강화 취지</li>
<li>데이터 활용을 필요로하는 새로운 산업과 기술발전으로 개인정보 침해 위험도 증가 추세</li>
</ul>
<h3>단계</h3>
<ol>
<li>사전 검토 : 개인정보 여부 판단</li>
<li>비식별 조치 : 개인을 식별할 수 있는 요소를 전부 또는 일부 삭제하거나 대체</li>
<li>적정성 평가 : 다른 정보와 쉽게 결합하여 개인을 식별할 수 있는지 평가</li>
<li>사후 관리 : 비식별 정보 안전조치, 재식별 가능성 모니터링등 비식별 정보 활용 과정에서 재식별 방지를 위한 조치 수행</li>
</ol>
<h3>단계별 조치 기준</h3>
<h4>사전 검토 단계</h4>
<ul>
<li>개인정보란 : 살아있는 개인에 관한 정보로 개인을 알수 있는 정보이며, 해당 정보로 특정 개인을 알아볼 수 없더라도 다른 정보와 쉽게 결합하여 알아볼 수 있는 정보를 포함</li>
</ul>
<h4>비식별 조치 단계</h4>
<ul>
<li>
<p>식별자 조치 기준 : 원칙적으로 삭제 조치, 데이터 이용 목적상 반드시 필요한 식별자는 비식별 조치 후 활용</p>
</li>
<li>
<p>식별자 대상 예시 (미국 HIPAA 프라이버시 규칙 참고)</p>
<ul>
<li>고유식별정보(주민등록번호, 여권번호, 외국인등록번호, 운전면허번호)</li>
<li>성명(한자, 영문, 필명 포함)</li>
<li>상세 주소(구 단위 미만까지 포함된 주소)</li>
<li>날짜 정보(생일, 기념일, 자격증 취득일 등)</li>
<li>전화번호(휴대전화번호, 집전화, 회사전화, 팩스번호)</li>
<li>의료기록번호, 건강보험번호, 복지 수급자 번호</li>
<li>통장 계좌번호, 신용카드 번호</li>
<li>각종 자격증 및 면허 번호</li>
<li>자동차 번호, 각종 기기의 등록번호 &amp; 일련번호</li>
<li>사진(정지사진, 동영상, CCTV 영상 등)</li>
<li>신체 식별정보(지문, 음성, 홍채 등)</li>
<li>이메일 주소, IP 주소, Mac 주소, 홈페이지 URL 등</li>
<li>식별코드(아이디, 사원번호, 고객번호 등)</li>
<li>기카 유일 식별번호 : 군번, 개인사업자 사업자 등록번호 등</li>
</ul>
</li>
<li>
<p>속성자 조치 기준 : 정보집합물에 포함된 속성자도 데이터 이용 목적과 관련이 없는 경우에는 원칙적으로 삭제 조치, 데이터 이용 목적과 관련이 잇는 속성자 중 식별요소가 있는 경우에는 가명/총계처리 등의 기법을 활용하여 비식별 조치</p>
</li>
<li>
<p>속성자 : 개인과 관련된 정보로서 다른 정보와 결합되는 경우 쉽게 특정 개인을 알아볼 수도 있는 정보, 희귀병명과 희귀경력 등의 속성자는 구체적인 상황에 따라 개인식별 가능성이 매우 높으므로 엄격한 비식별 조치 필요</p>
</li>
<li>
<p>속성자 대상 예시</p>
<ul>
<li>개인 특성
<ul>
<li>성별, 연령, 국정, 고향, 시/군/구명, 우편번호, 병역여부, 결혼여부, 종교, 취미, 동호회, 클럽 등</li>
<li>흡연여부, 음주여부, 채식여부, 관심사항 등</li>
</ul>
</li>
<li>신체 특성
<ul>
<li>혈액형, 신장, 몸무게, 허리둘레, 혈압, 눈동자 색깔 등</li>
<li>신체검사 결과, 장애유형, 장애등급 등</li>
<li>병명, 상병코드, 투약코드, 진료내역 등</li>
</ul>
</li>
<li>신용 특성
<ul>
<li>세금 납부액, 신용등급, 기부금 등</li>
<li>건강보험료 납부액, 소득분위, 의료 급여자 등</li>
</ul>
</li>
<li>경력 특성
<ul>
<li>학교명, 학과명, 학년, 성적, 학력 등</li>
<li>경력, 직업, 직종, 직장명, 부서명, 직금, 전직장명 등</li>
</ul>
</li>
<li>전자적 특성
<ul>
<li>쿠키정보, 접속일시, 방문일시, 서비스 이용 기록, 접속로그 등</li>
<li>인터넷 접속기록, 휴대전화 사용기록, GPS 데이터 등</li>
</ul>
</li>
<li>가족 특성
<ul>
<li>배우자, 자녀, 부모, 형제 등 가족 정보, 법정대리인 정보 등</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2>비식별 조치 방법</h2>
<p>가명처리, 총계처리, 데이터 삭제, 데이터 범주화, 데이터 마스킹 등의 기법을 단독 또는 복합적으로 활용</p>
<h3>비식별 처리 기법 예시</h3>
<p>| 처리기법      | 예시                                                         | 세부기술                                                  |<br>
|</p>
]]></content:encoded>
    </item>
    <item>
      <title>Failed to start (failed to create nomad cgroup memory)</title>
      <link>https://docmoa.github.io/04-HashiCorp/07-Nomad/03-TroubleShooting/failed-to-create-nomad-cgroup-memory.html</link>
      <guid>https://docmoa.github.io/04-HashiCorp/07-Nomad/03-TroubleShooting/failed-to-create-nomad-cgroup-memory.html</guid>
      <source url="https://docmoa.github.io/rss.xml">Failed to start (failed to create nomad cgroup memory)</source>
      <description>failed to create nomad cgroup memory</description>
      <pubDate>Thu, 25 Apr 2024 10:38:17 GMT</pubDate>
      <content:encoded><![CDATA[
<p>오류 메시지는 파일 시스템이 읽기 전용으로 마운트된 Linux 시스템에서 <code>cgroup</code>을 수정하려고 할 때 문제가 있음을 나타냅니다. 이 문제는 컨테이너 및 컨테이너화되지 않은 애플리케이션을 오케스트레이션하는 클러스터 관리자 및 스케줄러인 Nomad가 관리하는 환경에서 발생할 수 있습니다.</p>
<h2>Error log</h2>
<div class="language-log" data-highlighter="prismjs" data-ext="log" data-title="log"><pre class="language-log"><code><span class="line"><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span></span>
<span class="line"><span class="token date number">Apr 25</span> <span class="token time number">11:27:31</span> raspberrypi nomad<span class="token punctuation">[</span><span class="token number">20120</span><span class="token punctuation">]</span><span class="token operator">:</span>     <span class="token date number">2024-04-25T</span><span class="token time number">11:27:31.007+0100</span> <span class="token punctuation">[</span><span class="token level info keyword">INFO</span><span class="token punctuation">]</span>  <span class="token property">client.proclib.cg1:</span> <span class="token property">initializing nomad cgroups:</span> cores<span class="token operator">=</span><span class="token number">0</span><span class="token operator">-</span><span class="token number">3</span></span>
<span class="line"><span class="token date number">Apr 25</span> <span class="token time number">11:27:31</span> raspberrypi nomad<span class="token punctuation">[</span><span class="token number">20120</span><span class="token punctuation">]</span><span class="token operator">:</span>     <span class="token date number">2024-04-25T</span><span class="token time number">11:27:31.008+0100</span> <span class="token punctuation">[</span><span class="token level error important">ERROR</span><span class="token punctuation">]</span> <span class="token property">agent:</span> <span class="token property">error starting agent:</span> error<span class="token operator">=</span><span class="token string">"client setup failed: failed to initialize process manager: failed to create nomad cgroup memory: mkdir /sys/fs/cgroup/memory: read-only file system"</span></span>
<span class="line"><span class="token date number">Apr 25</span> <span class="token time number">11:27:31</span> raspberrypi systemd<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">:</span> nomad<span class="token punctuation">.</span>service<span class="token operator">:</span> Service RestartSec<span class="token operator">=</span><span class="token number">100ms</span> expired<span class="token punctuation">,</span> scheduling restart<span class="token punctuation">.</span></span>
<span class="line"></span></code></pre></div><h2>Check Filesystem Mount Options</h2>
<p>파일 시스템이 읽기 전용으로 마운트되지 않았는지 확인합니다. 마운트 또는 findmnt 명령을 사용하여 마운트 옵션을 확인할 수 있습니다:</p>
<div class="language-bash" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="line"><span class="token function">mount</span> <span class="token operator">|</span> <span class="token function">grep</span> cgroup</span>
<span class="line"></span></code></pre></div><div class="language-log" data-highlighter="prismjs" data-ext="log" data-title="log"><pre class="language-log"><code><span class="line"><span class="token operator">#</span>Current cgroup</span>
<span class="line">tmpfs on <span class="token file-path string">/sys/fs/cgroup</span> type tmpfs <span class="token operator">(</span>ro<span class="token punctuation">,</span>nosuid<span class="token punctuation">,</span>nodev<span class="token punctuation">,</span>noexec<span class="token punctuation">,</span>mode<span class="token operator">=</span><span class="token number">755</span><span class="token operator">)</span></span>
<span class="line">cgroup2 on <span class="token file-path string">/sys/fs/cgroup/unified</span> type cgroup2 <span class="token operator">(</span>rw<span class="token punctuation">,</span>nosuid<span class="token punctuation">,</span>nodev<span class="token punctuation">,</span>noexec<span class="token punctuation">,</span>relatime<span class="token punctuation">,</span>nsdelegate<span class="token operator">)</span></span>
<span class="line">cgroup on <span class="token file-path string">/sys/fs/cgroup/systemd</span> type cgroup <span class="token operator">(</span>rw<span class="token punctuation">,</span>nosuid<span class="token punctuation">,</span>nodev<span class="token punctuation">,</span>noexec<span class="token punctuation">,</span>relatime<span class="token punctuation">,</span>xattr<span class="token punctuation">,</span>name<span class="token operator">=</span>systemd<span class="token operator">)</span></span>
<span class="line">cgroup on <span class="token file-path string">/sys/fs/cgroup/devices</span> type cgroup <span class="token operator">(</span>rw<span class="token punctuation">,</span>nosuid<span class="token punctuation">,</span>nodev<span class="token punctuation">,</span>noexec<span class="token punctuation">,</span>relatime<span class="token punctuation">,</span>devices<span class="token operator">)</span></span>
<span class="line">cgroup on <span class="token file-path string">/sys/fs/cgroup/net_cls</span><span class="token punctuation">,</span>net_prio type cgroup <span class="token operator">(</span>rw<span class="token punctuation">,</span>nosuid<span class="token punctuation">,</span>nodev<span class="token punctuation">,</span>noexec<span class="token punctuation">,</span>relatime<span class="token punctuation">,</span>net_cls<span class="token punctuation">,</span>net_prio<span class="token operator">)</span></span>
<span class="line">cgroup on <span class="token file-path string">/sys/fs/cgroup/cpu</span><span class="token punctuation">,</span>cpuacct type cgroup <span class="token operator">(</span>rw<span class="token punctuation">,</span>nosuid<span class="token punctuation">,</span>nodev<span class="token punctuation">,</span>noexec<span class="token punctuation">,</span>relatime<span class="token punctuation">,</span>cpu<span class="token punctuation">,</span>cpuacct<span class="token operator">)</span></span>
<span class="line">cgroup on <span class="token file-path string">/sys/fs/cgroup/pids</span> type cgroup <span class="token operator">(</span>rw<span class="token punctuation">,</span>nosuid<span class="token punctuation">,</span>nodev<span class="token punctuation">,</span>noexec<span class="token punctuation">,</span>relatime<span class="token punctuation">,</span>pids<span class="token operator">)</span></span>
<span class="line">cgroup on <span class="token file-path string">/sys/fs/cgroup/freezer</span> type cgroup <span class="token operator">(</span>rw<span class="token punctuation">,</span>nosuid<span class="token punctuation">,</span>nodev<span class="token punctuation">,</span>noexec<span class="token punctuation">,</span>relatime<span class="token punctuation">,</span>freezer<span class="token operator">)</span></span>
<span class="line">cgroup on <span class="token file-path string">/sys/fs/cgroup/cpuset</span> type cgroup <span class="token operator">(</span>rw<span class="token punctuation">,</span>nosuid<span class="token punctuation">,</span>nodev<span class="token punctuation">,</span>noexec<span class="token punctuation">,</span>relatime<span class="token punctuation">,</span>cpuset<span class="token operator">)</span></span>
<span class="line">cgroup on <span class="token file-path string">/sys/fs/cgroup/blkio</span> type cgroup <span class="token operator">(</span>rw<span class="token punctuation">,</span>nosuid<span class="token punctuation">,</span>nodev<span class="token punctuation">,</span>noexec<span class="token punctuation">,</span>relatime<span class="token punctuation">,</span>blkio<span class="token operator">)</span></span>
<span class="line">cgroup on <span class="token file-path string">/sys/fs/cgroup/perf_event</span> type cgroup <span class="token operator">(</span>rw<span class="token punctuation">,</span>nosuid<span class="token punctuation">,</span>nodev<span class="token punctuation">,</span>noexec<span class="token punctuation">,</span>relatime<span class="token punctuation">,</span>perf_event<span class="token operator">)</span></span>
<span class="line"></span></code></pre></div><h2>Add read-write to cgroup</h2>
<p><code>ro</code>옵션을 찾습니다. 실제로 읽기 전용인 <code>ro</code>(Read-Only)으로 마운트된 경우 가능하면 <code>rw</code>(Read-Write : 읽기-쓰기)로 마운트 해야 변경 가능합니다.</p>
<div class="language-bash" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="line"><span class="token function">sudo</span> <span class="token function">mount</span> <span class="token parameter variable">-o</span> remount,rw /sys/fs/cgroup</span>
<span class="line"></span></code></pre></div><h2>Verify Kernel Support and Parameters</h2>
<p>커널이 cgroups를 지원하고 필요한 모든 cgroup 하위 시스템이 활성화되어 있는지 확인하세요. cgroups와 관련된 커널 매개변수를 조정하거나 활성화해야 할 수도 있습니다. 현재 설정을 확인합니다:</p>
<div class="language-bash" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="line"><span class="token function">cat</span> /proc/cgroups</span>
<span class="line"></span></code></pre></div><div class="language-ini" data-highlighter="prismjs" data-ext="ini" data-title="ini"><pre class="language-ini"><code><span class="line"><span class="token comment">#subsys_name    hierarchy       num_cgroups     enabled</span></span>
<span class="line">cpuset  7       6       1</span>
<span class="line">cpu     4       77      1</span>
<span class="line">cpuacct 4       77      1</span>
<span class="line">blkio   8       76      1</span>
<span class="line">memory  0       85      0</span>
<span class="line">devices 2       76      1</span>
<span class="line">freezer 6       2       1</span>
<span class="line">net_cls 3       1       1</span>
<span class="line">perf_event      9       1       1</span>
<span class="line">net_prio        3       1       1</span>
<span class="line">pids    5       83      1</span>
<span class="line"></span></code></pre></div>]]></content:encoded>
    </item>
    <item>
      <title>DevOps Korea 좌담회 2024.4.15.</title>
      <link>https://docmoa.github.io/06-etc/class/devops-discussion-20240415.html</link>
      <guid>https://docmoa.github.io/06-etc/class/devops-discussion-20240415.html</guid>
      <source url="https://docmoa.github.io/rss.xml">DevOps Korea 좌담회 2024.4.15.</source>
      <description>DevOps Korea 좌담회 - DevXOps로의 확장에 따른 이해와 토론</description>
      <pubDate>Wed, 17 Apr 2024 06:28:05 GMT</pubDate>
      <content:encoded><![CDATA[<figure><img src="https://raw.githubusercontent.com/Great-Stone/images/master/picgo/Monosnap Image 2024-04-17 11-15-58.png" alt="당근마켓&amp;당근이" tabindex="0" loading="lazy"><figcaption>당근마켓&amp;당근이</figcaption></figure>
<h1>DevOps Korea 좌담회 2024.4.15.</h1>
<ul>
<li>
<p>일시 : 2024년 4월 15일 (월) 19:00</p>
</li>
<li>
<p>안내 :</p>
<ul>
<li>Facebook : <a href="https://www.facebook.com/groups/TeAnE/permalink/3019729564829401/" target="_blank" rel="noopener noreferrer">DevOps Korea</a> - DevXOps로의 확장에 따른 이해와 토론</li>
<li>GitHub : <a href="https://github.com/ralfyang/DevOps_Korea_sitting_talking/tree/main/20240415" target="_blank" rel="noopener noreferrer">https://github.com/ralfyang/DevOps_Korea_sitting_talking/tree/main/20240415</a></li>
</ul>
</li>
<li>
<p>장소 : 교보타워 - 당근마켓</p>
</li>
<li>
<p>주요 아젠다</p>
<ul>
<li>DevXOps란?</li>
<li>DevOps engineering 역할의 확장</li>
<li>개발/검증/운영에 관련한 자동화 영역의 확장</li>
<li>기술 방법론을 넘어 산업의 Needs로의 확장 → XXOps</li>
</ul>
</li>
</ul>
<h2>🚀 DevOps를 한다는 것은?</h2>
<h3>🤝🏻 내부 고객의 만족</h3>
<blockquote>
<p>A: DevOps는 "잡부" 죠.</p>
<p>B: 그래서 저는 "스티브 잡부"라고 말합니다.</p>
</blockquote>
<p>DevOps가 지향하거나, 그 효과가 무엇이냐고 묻는다면 요구하는 '내부 고객'의 요구사항을 대응하는 활동에 대한 전달이 빨라지는 것 이라고 볼 수 있다. 최종적으로는 비즈니스와 맞닿은 요구사항의 전달이 빨라지는 것을 기대할 수 있다.</p>
<h3>⚙️ XXOps</h3>
<p>DevOps, BizOps, AIOps, DevSecOps 등 수많은 XXOps 용어들이 있다. 특이한건 모두 Ops로 끝난다는 점이다. <code>DevOps</code>가 개발(Development)과 운영(Operations)의 합성어라고 하지만 <code>Ops</code>가 기존에 우리가 알던 그 운영은 아닌것 같다. 요구사항을 실행하는 것이라는 표현 하에, <code>XXOps</code>는 그 XX를 위한 엔지니어링에 가깝다고 보여진다. XX의 요구사항을 실행하는 행위 또는 조직 같은 설명에 더 가깝다.</p>
<ul>
<li>DevOps : 개발을 위한 무엇인가의 요구사항을 실행하는 것</li>
<li>BizOps : 비즈니스를 위한 무엇인가의 요구사항을 실행하는 것</li>
<li>AIOps : AI를 위한 무엇인가의 요구사항을 실행하는 것</li>
</ul>
<p>XXOps를 하기위해서는 XX에 대한 이해도가 필요하다. XX가 요청하는 바를 이해할 수 있어야 하고, 그들이 추상적으로 생각하는 요구사항을 구체화할 수 있는 지식이 필요하다. 이것은 XXOps 이전에도 중요한 역량이라고 알려진 <a href="https://ko.wikipedia.org/wiki/%EB%8F%84%EB%A9%94%EC%9D%B8_%EC%A7%80%EC%8B%9D" target="_blank" rel="noopener noreferrer">도메인 지식</a>과 <a href="https://ko.wikipedia.org/wiki/%EB%A9%94%ED%83%80%EC%9D%B8%EC%A7%80" target="_blank" rel="noopener noreferrer">메타 인지</a>에 해당된다 보여진다.</p>
<h3>🤖 자동화와 AI의 일자리 위협에 대해</h3>
<p>DevOps하면 자동화 이야기가 빠질 수 없고, AI에 대한 이야기도 지난 좌담회에 이어 언급되었다. 이런 발전이 일자리에 대해 위협이 되는 분야도 있고, 이미 그 영향을 받는 영역도 생기고 있다.</p>
<blockquote>
<p>Stable Diffusion 을 활용하여 기존 일러스트레이터의 업무가 생산에서 평가로 변경된 사례가 언급됨</p>
<p>비슷한 내용의 기사 : <a href="https://www.gameple.co.kr/news/articleView.html?idxno=205872" target="_blank" rel="noopener noreferrer">블리자드, 인공지능 활용해 게임 개발한다</a></p>
</blockquote>
<p>하지만 반면 자동화와 AI가 일을 줄일것인가에 대한 이야기에서는 일이 줄어드는게 아니라 일을 할 수 있는 범위와 처리 능력이 증가한다는 관점으로 볼 수 있다고도 했다.</p>
<div class="hint-container tip">
<p class="hint-container-title">팁</p>
<p>자동화는, AI는, DevOps는 <s>우리를 더 많이</s> 우리가 더 많은 일하게 합니다.</p>
</div>
<h2>🔮 구슬이 서 말이라도 꿰어서 팔아야 보배</h2>
<blockquote>
<p>구슬이 서 말이라도 꿰어야 보배</p>
</blockquote>
<p>구슬이 많아 봐야 실에 꿰지 않으면 쓸모없다는 표현인. 아무리 좋은 것이라도 쓰기 좋게 다듬어 놓지 않으면 소용없다는 의미인 속담이 있지만, 좌담회에서 언급되었듯, 이제는 보기에만 좋은게 아닌 팔리는 것 까지에도 신경을 써야 한다. 운영, 보안 등을 위한 활동은 기업 내에서 잘해야 본전 정도로 취급받는 경우가 있다. 실제 수익을 발생시키는 행위(영업, 개발)에 비해 그 효과를 측정하기가 어려운 부분이기도 하다. 국내에서는 인건비와 소프트웨어 개발 활동에 대해 인색한 편이기도 하다.</p>
<ul>
<li><a href="https://www.etnews.com/20240405000170" target="_blank" rel="noopener noreferrer">SW개발 단가 인상 속도내야 - 전자신문</a></li>
<li><a href="https://zdnet.co.kr/view/?no=20231214164555" target="_blank" rel="noopener noreferrer">공공 전산망 오류, 공공SW사업 낮은 예산 원인 - ZDNet Korea</a></li>
</ul>
<p>XXOps를 해서 얼마가 줄었는지, 어느정도의 비용 효과가 있는지 증명하기도 어렵거니와, 증명 하더라도 비즈니스와 맞닿아있는 조직에서 XXOps의 성과를 평가절하 할 수도 있다. 😢</p>
<h3>📊 DevOps의 수준</h3>
<p>DevOps를 기준으로, 우리 조직이 얼마나 잘 DevOps를 하고 있는지 안다면 그 가치를 입증할 수 있을까? 조직 내에서 DevOps를 해야 하는것이라고 설득할 수 있을까?</p>
<p>DevOps를 정의하는 방식과 행위는 다양하다. 이전 <a href="https://docmoa.github.io/06-etc/class/devops-discussion-20240213.html#%F0%9F%91%B7%E2%80%8D%E2%99%80%EF%B8%8F-%E1%84%80%E1%85%A9%E1%84%86%E1%85%B5%E1%86%AB-1-%E1%84%82%E1%85%A1%E1%84%8B%E1%85%B4-%E1%84%8C%E1%85%A1%E1%84%85%E1%85%B5%E1%84%85%E1%85%B3%E1%86%AF-%E1%84%8B%E1%85%B1%E1%84%92%E1%85%A7%E1%86%B8%E1%84%92%E1%85%A1%E1%84%82%E1%85%B3%E1%86%AB%E1%84%80%E1%85%A1" target="_blank" rel="noopener noreferrer">좌담회</a>에서 언급했듯, DevOps란 대상간의 간극을 줄이는 행위라고도 할 수 있고, CI/CT/CD의 수준, 혹은 문화라고도 정의할 수 있다.</p>
<p>Google Cloud에서 발행한 <a href="https://services.google.com/fh/files/misc/whitepaper_roi_of_devops_transformation_2020_google_cloud.pdf" target="_blank" rel="noopener noreferrer">The ROI of DevOps Transformation</a>에서도 언급된것 처럼 전통적으로 IT는 비용을 '쓰는' 조직으로 여겨져 왔다. DevOps에 투자 대비 수익을 계산하는데 그 조직이 수익에 대한 영역을 어디까지 확장할 수 있는가가 DevOps의 가치에 큰 영향을 끼칠 것으로 예상된다. (관련 리포트를 정리한 글(한글)도 좋은 참고가 된다. : <a href="https://medium.com/proofer-blog/%EB%B2%88%EC%97%AD-devops-%EB%A1%9C-%EC%A0%84%ED%99%98-%EC%8B%9C%EC%9D%98-roi-the-roi-of-devops-transformation-9105b240247b" target="_blank" rel="noopener noreferrer">DevOps 로 전환 시의 ROI (The ROI of DevOps Transformation)</a>)</p>
<ul>
<li>ROI는 <code>투자</code>와 <code>수익</code>에 기반한다.</li>
<li>투자에는 교육, 학습, 통합, 그리고 과정상 발생하는 생산성 저하, 유지보수, 교체에 따른 소요 시간 등이 포함된다.</li>
<li>수익은 가치 중심 접근(서비스 전달 속도)과 비용 중심 접근(비용 절감과 업무 효율성)으로 나뉜다.</li>
</ul>
<p>좌담회 자리에서 측정 방식과 관련하여 DevOps 수준을 평가하는데 있어 <code>Flow framework</code>에 대해서도 언급해주셨다.</p>
<blockquote>
<p>Flow Framework ®이란?</p>
<p>Flow Framework는 병목 현상을 해결할 수 있도록 제품 가치 스트림 전체에서 작업이 흐르고 느려지는 위치를 식별합니다. 이 프레임 워크는 또한 기술 리더에게 비 기술적 (및 비 민첩한) 언어를 제공하여 우선 순위를 설정하고 결과를 측정 할 때 비즈니스 이해 관계자와 효과적으로 의사 소통 할 수 있도록합니다.</p>
<p><a href="https://flowframework.org/" target="_blank" rel="noopener noreferrer">https://flowframework.org/</a></p>
</blockquote>
<figure><img src="https://raw.githubusercontent.com/Great-Stone/images/master/picgo/Flow-Framework-poster-v.313.png" alt="Flow Framework" tabindex="0" loading="lazy"><figcaption>Flow Framework</figcaption></figure>
<h3>💰 DevOps의 가치는 입증되었는가?</h3>
<p>DevOps를 시작하는 이유는 다양할 수 있고, 현실적인 문제로 인해 아직 방법론을 적용하지 못한 사례도 있다. 좌담회 중에서는 게임 쪽의 특수성에 대한 이야기도 있었다.</p>
<p><a href="https://www.facebook.com/groups/TeAnE/permalink/3020893821379642/" target="_blank" rel="noopener noreferrer">게임에서의 DevOps의 한계 및 어려움 - SanAh Kang</a></p>
<p>반면에 DevOps로 논의되는 범위와 방법이 너무 많고 다양하다보니 어떤식으로 시작해야 하는지에 대한 질문도 있었다. 여기에 대해서는 "불편함을 제거하고 위험을 최소화" 할수있는 것부터 시작해보는것에 대해 조언을 주시기도 했다.</p>
<p>DevOps가 시작되고 언급된지 국내에서도 꽤 오랜 시간이 흘렀지만 그 수준과 정도에 대한 차이는 여전히 크다 보여진다. 문득, 자동차 정비업을 하는 친구 이야기가 떠올랐다.</p>
<blockquote>
<p>... 아직까지도 종이에다가 부품 재고를 관리하고 있더라고, 내가 엑셀로 정리해서 딱 보여줬더니 사장이 깜짝 놀라는거야. 내가 거기선 컴퓨터 제일 잘하는 녀석이 됐더라고. - 2023년 겨울 어느날</p>
</blockquote>
<p>아직은 국내 많은 기업의 정서상, 앞선 ROI이야기에서처럼 IT에 대한 투자는 곧 비용인것 처럼 보인다. 그나마 강력한 브랜드가 있는 기술 기업에서 지속적으로 기술에 대한 중요성과 나아가야할 방향에 대해 언급해주는 것이 인식의 변화에 도움이 된다 생각된다.</p>
<blockquote>
<p>DevOps가 중요한 이유 - 소프트웨어와 인터넷은 쇼핑에서 엔터테인먼트 그리고 뱅킹에 이르기까지 전 세계와 산업을 변화시켰습니다. 이제 소프트웨어는 비즈니스를 지원하는 것에 그치지 않고, 비즈니스의 모든 부분에서 핵심적인 구성 요소가 되었습니다. 기업은 온라인 서비스 또는 애플리케이션으로 제공되는 소프트웨어를 통해 온갖 종류의 디바이스에서 고객과 상호 작용합니다. 또한, 소프트웨어를 사용하여 물류, 통신, 운영 등과 같은 가치 체인의 모든 부분을 혁신함으로써 운영 효율성을 향상합니다. 20세기에 실제 상품을 제조하는 기업이 산업 자동화를 통해 제품의 설계, 생산 및 전달 방법을 혁신한 것과 마찬가지로, 오늘날의 기업은 소프트웨어를 구축하고 제공하는 방법을 혁신해야 합니다. - <a href="https://aws.amazon.com/ko/devops/what-is-devops/" target="_blank" rel="noopener noreferrer">AWS - DevOps란 무엇입니까?</a></p>
</blockquote>
<p>기술 혁신이 기업의 차별화를 가져오고, 속도가 보장되어야 변화하는 시장에서 앞서 나가고, 곧 돈을 만들어낸다는 연결고리가 만들지는 것도 '문화'의 일부일 것으로 보인다.</p>
<figure><img src="https://raw.githubusercontent.com/Great-Stone/images/master/picgo/DevOps_feedback-diagram.ff668bfc299abada00b2dcbdc9ce2389bd3dce3f.png" alt="AWS - DevOps란 무엇입니까?" tabindex="0" loading="lazy"><figcaption>AWS - DevOps란 무엇입니까?</figcaption></figure>
<h2>🪑 좌담회를 다녀와서</h2>
<p>월요일이라 그런지, 좌담회가 길어져서 그런지 아쉽게도 그날은 뒷풀이할 분위기는 아니였던것 같아 아쉬웠지만, 이런저런 현실적인 이야기들을 들을 수 있어 좋았다. 아쉬운건 DevOps Korea 공간이 더 널리 퍼지지 못했다는 아쉬움도 있다. 주변에 젊은(?) 엔지니어 분들은 요샌 커뮤니티 활동도 거의 안하는듯 한데, 어떻게 하면 이런 모임에서 같이 생각을 나눌 수 있을지 고민이다.</p>
<p>서버 없이, 개발 없이 필요한 대시보드와 데이터 스토어를 만들어나가는 이야기와, Kubernetes를 검토하다가 '왜'에대한 물음을 다시금 던지면서 보류했다고 하는 이야기를 들으면서, 어느때보다 도구가 넘쳐나는 때에 어떤 것이 요구사항의 만족에 적합한지에 대해 한번더 생각해봐야할 필요가 있다고 생각되었다.</p>
<figure><img src="https://raw.githubusercontent.com/Great-Stone/images/master/picgo/image-20240417150044868.png" alt="Google Looker를 사용하면 굳이 개발안해도 적절한 대시보드를 얻을 수 있다." tabindex="0" loading="lazy"><figcaption>Google Looker를 사용하면 굳이 개발안해도 적절한 대시보드를 얻을 수 있다.</figcaption></figure>
<p>DevOps는 진행중이고, XXOps를 뒷받침하는 Engineering 영역과 이를 뒷받침하는 역량도 끊임 없이 배움과 확장의 연속 '그만 배우고 싶다...놀고 싶다...그럼 더 배워야 하나?'</p>
<details class="hint-container details"><summary>📋 별첨 - Nomad Case Study (Game)</summary>
<p>게임 산업쪽 이야기가 많이 나온김에, 이전에 WEB/WAS, 게임 서버 개발, OpenShift 때문에 Kubernetes(K8s)를 반강제적으로 학습 해보면서 범용적인 오케스트레이션 툴은 없나 찾다 지금의 일을 하게 된 일이 다시금 생각났다. 모든걸 만족할 수는 없겠지만, 다양한 분야의 다양한 사람들의 애플리케이션 실행 요구사항을 만족할만한게 있으면 좋겠다고 생각했다. 여전히 Windows만의 강점이 있고, 누군가는 웹앱이 중요하고, Java 앱이, Python이, 또 누군가는 빌드된 바이너리를 실행해야 하는 등, 그래서 난 <code>Nomad</code>의 장점을 느꼈다고 생각된다. <code>Terraform</code>도 모르고 <code>Vault</code>도 몰랐지만 어디에나 잘 실행되고, 쉽고, 아무거나 올려도 되는 유들유들한 오케스트레이터. (K8s가 워낙 유명해서 잘 안알려졌다는게 단점이랄까.) Nomad를 사용하는 사례들을 보면 현실적인 이야기들이라 더 그정도까지의 플랫폼은 필요 없거나 아직 컨테이너까지 안해도 되는, 그리고 Windows, ARM Cpu를 사용하는 사례들을 만난다. 특히나 게임 이야기는 더 재미있고 즐겁다.</p>
</details>
]]></content:encoded>
      <enclosure url="https://raw.githubusercontent.com/Great-Stone/images/master/picgo/Monosnap%20Image%202024-04-17%2011-15-58.png" type="image/png"/>
    </item>
    <item>
      <title>Terraform Apply Aborted - Tainted</title>
      <link>https://docmoa.github.io/04-HashiCorp/03-Terraform/04-TroubleShooting/apply-aborted.html</link>
      <guid>https://docmoa.github.io/04-HashiCorp/03-Terraform/04-TroubleShooting/apply-aborted.html</guid>
      <source url="https://docmoa.github.io/rss.xml">Terraform Apply Aborted - Tainted</source>
      <description>Terraform Apply 도중 중단되는 상황</description>
      <pubDate>Fri, 12 Apr 2024 05:22:33 GMT</pubDate>
      <content:encoded><![CDATA[
<h2>정상 동작의 예</h2>
<h2>Terraform Apply 도중 네트워크가 끊긴다면?</h2>
<p>클라우드들의 API의 경우 대부분 Sync로 동작하므로, Terraform이 생성 요청을 하면 그에 대한 응답을 받습니다. AWS의 경우 네트워크가 단절 되더라도, 이미 요청한 API 대한 응답을 AWS에서 반환하므로 timeout으로 인한 에러가발생 한 이후 응답을 기준으로 State가 작성됩니다. 다만 정상적인 완료 응답을 받지 못했으므로 Terraform State에는 해당 리소스는 <code>tainted</code>(불확실한) 상태로 기록됩니다.</p>
<p>Apply 후 Creating되는 도중 네트워크 절체하면 발생하는 에러 메시지는 다음과 같습니다.</p>
<div class="language-bash" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="line">Plan: <span class="token number">1</span> to add, <span class="token number">0</span> to change, <span class="token number">0</span> to destroy.</span>
<span class="line">aws_instance.web: Creating<span class="token punctuation">..</span>.</span>
<span class="line">aws_instance.web: Still creating<span class="token punctuation">..</span>. <span class="token punctuation">[</span>10s elapsed<span class="token punctuation">]</span></span>
<span class="line">aws_instance.web: Still creating<span class="token punctuation">..</span>. <span class="token punctuation">[</span>20s elapsed<span class="token punctuation">]</span></span>
<span class="line">aws_instance.web: Still creating<span class="token punctuation">..</span>. <span class="token punctuation">[</span>30s elapsed<span class="token punctuation">]</span></span>
<span class="line">aws_instance.web: Still creating<span class="token punctuation">..</span>. <span class="token punctuation">[</span>40s elapsed<span class="token punctuation">]</span></span>
<span class="line">aws_instance.web: Still creating<span class="token punctuation">..</span>. <span class="token punctuation">[</span>50s elapsed<span class="token punctuation">]</span></span>
<span class="line">╷</span>
<span class="line">│ Error: getting attribute <span class="token punctuation">(</span>userData<span class="token punctuation">)</span>: RequestError: send request failed</span>
<span class="line">│ caused by: Post <span class="token string">"https://ec2.ap-northeast-2.amazonaws.com/"</span><span class="token builtin class-name">:</span> dial tcp: lookup ec2.ap-northeast-2.amazonaws.com: no such <span class="token function">host</span></span>
<span class="line">│ </span>
<span class="line">│   with aws_instance.web,</span>
<span class="line">│   on main.tf line <span class="token number">21</span>, <span class="token keyword">in</span> resource <span class="token string">"aws_instance"</span> <span class="token string">"web"</span><span class="token builtin class-name">:</span></span>
<span class="line">│   <span class="token number">21</span>: resource <span class="token string">"aws_instance"</span> <span class="token string">"web"</span> <span class="token punctuation">{</span></span>
<span class="line"></span></code></pre></div><p>오류 이후 작성되는 State 및 <code>tainted</code>상태의 리소스(aws_instance) 정보는 다음과 같습니다.</p>
<div class="language-json" data-highlighter="prismjs" data-ext="json" data-title="json"><pre class="language-json"><code><span class="line"><span class="token punctuation">{</span></span>
<span class="line">  <span class="token property">"version"</span><span class="token operator">:</span> <span class="token number">4</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token property">"terraform_version"</span><span class="token operator">:</span> <span class="token string">"1.8.0"</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token property">"serial"</span><span class="token operator">:</span> <span class="token number">6</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token property">"lineage"</span><span class="token operator">:</span> <span class="token string">"2c770c35-18c5-035d-b7f2-b569d6b326d6"</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token property">"outputs"</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token property">"resources"</span><span class="token operator">:</span> <span class="token punctuation">[</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">      <span class="token property">"mode"</span><span class="token operator">:</span> <span class="token string">"managed"</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"aws_instance"</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"web"</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token property">"provider"</span><span class="token operator">:</span> <span class="token string">"provider[\"registry.terraform.io/hashicorp/aws\"]"</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token property">"instances"</span><span class="token operator">:</span> <span class="token punctuation">[</span></span>
<span class="line">        <span class="token punctuation">{</span></span>
<span class="line highlighted">          <span class="token property">"status"</span><span class="token operator">:</span> <span class="token string">"tainted"</span><span class="token punctuation">,</span></span>
<span class="line">          <span class="token property">"schema_version"</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span></span>
<span class="line">          <span class="token property">"attributes"</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token property">"ami"</span><span class="token operator">:</span> <span class="token string">"ami-01ed8ade75d4eee2f"</span><span class="token punctuation">,</span></span>
<span class="line">            <span class="token property">"arn"</span><span class="token operator">:</span> <span class="token string">"arn:aws:ec2:ap-northeast-2:467567795630:instance/i-09e9cd90c86d46ecc"</span><span class="token punctuation">,</span></span>
<span class="line">            <span class="token property">"associate_public_ip_address"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span></span>
<span class="line">            <span class="token property">"availability_zone"</span><span class="token operator">:</span> <span class="token string">"ap-northeast-2a"</span><span class="token punctuation">,</span></span>
<span class="line">       ...</span>
<span class="line">            <span class="token property">"id"</span><span class="token operator">:</span> <span class="token string">"i-09e9cd90c86d46ecc"</span><span class="token punctuation">,</span></span>
<span class="line">       ...</span>
<span class="line">      <span class="token punctuation">]</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">  <span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token property">"check_results"</span><span class="token operator">:</span> <span class="token null keyword">null</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre></div><p>이미 AWS에 EC2 인스턴스 생성을 요청한 상태에서 네트워크 단절이 발생하였기 때문에 AWS상에는 EC2의 생성이 진행됩니다.</p>
<figure><figcaption>AWS Console</figcaption></figure>
<h2>복구 방안</h2>
<blockquote>
<p>untaint : <a href="https://developer.hashicorp.com/terraform/cli/commands/untaint" target="_blank" rel="noopener noreferrer">https://developer.hashicorp.com/terraform/cli/commands/untaint</a><br>
import : <a href="https://developer.hashicorp.com/terraform/cli/commands/import" target="_blank" rel="noopener noreferrer">https://developer.hashicorp.com/terraform/cli/commands/import</a></p>
</blockquote>
<p>정상적으로 동기화되지 않은 경우(tainted)라 <code>terraform plan</code> 실행 시 replace가 발생합니다.</p>
<div class="language-bash" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="line">$ terraform plan</span>
<span class="line">aws_instance.web: Refreshing state<span class="token punctuation">..</span>. <span class="token punctuation">[</span>id<span class="token operator">=</span>i-09e9cd90c86d46ecc<span class="token punctuation">]</span></span>
<span class="line"></span>
<span class="line">Terraform used the selected providers to generate the following execution plan.</span>
<span class="line">Resource actions are indicated with the following symbols:</span>
<span class="line">-/+ destroy and <span class="token keyword">then</span> create replacement</span>
<span class="line"></span>
<span class="line">Terraform will perform the following actions:</span>
<span class="line"></span>
<span class="line">  <span class="token comment"># aws_instance.web is tainted, so must be replaced</span></span>
<span class="line">-/+ resource <span class="token string">"aws_instance"</span> <span class="token string">"web"</span> <span class="token punctuation">{</span></span>
<span class="line">      ~ arn                                  <span class="token operator">=</span> <span class="token string">"arn:aws:ec2:ap-northeast-2:467567795630:instance/i-09e9cd90c86d46ecc"</span> -<span class="token operator">&gt;</span> <span class="token punctuation">(</span>known after apply<span class="token punctuation">)</span></span>
<span class="line">      ~ associate_public_ip_address          <span class="token operator">=</span> <span class="token boolean">true</span> -<span class="token operator">&gt;</span> <span class="token punctuation">(</span>known after apply<span class="token punctuation">)</span></span>
<span class="line">      ~ availability_zone                    <span class="token operator">=</span> <span class="token string">"ap-northeast-2a"</span> -<span class="token operator">&gt;</span> <span class="token punctuation">(</span>known after apply<span class="token punctuation">)</span></span>
<span class="line">      ~ cpu_core_count                       <span class="token operator">=</span> <span class="token number">1</span> -<span class="token operator">&gt;</span> <span class="token punctuation">(</span>known after apply<span class="token punctuation">)</span></span>
<span class="line">      ~ cpu_threads_per_core                 <span class="token operator">=</span> <span class="token number">2</span> -<span class="token operator">&gt;</span> <span class="token punctuation">(</span>known after apply<span class="token punctuation">)</span></span>
<span class="line">      ~ disable_api_stop                     <span class="token operator">=</span> <span class="token boolean">false</span> -<span class="token operator">&gt;</span> <span class="token punctuation">(</span>known after apply<span class="token punctuation">)</span></span>
<span class="line">      ~ disable_api_termination              <span class="token operator">=</span> <span class="token boolean">false</span> -<span class="token operator">&gt;</span> <span class="token punctuation">(</span>known after apply<span class="token punctuation">)</span></span>
<span class="line">      ~ ebs_optimized                        <span class="token operator">=</span> <span class="token boolean">false</span> -<span class="token operator">&gt;</span> <span class="token punctuation">(</span>known after apply<span class="token punctuation">)</span></span>
<span class="line">      - hibernation                          <span class="token operator">=</span> <span class="token boolean">false</span> -<span class="token operator">&gt;</span> null</span>
<span class="line">      <span class="token punctuation">..</span>.</span>
<span class="line"></span></code></pre></div><p>리소스가 의도한 경우로 생성된 경우 tainted된 리소스를 <code>untaint</code> 하여 State 기준으로 <code>tainted</code> 상태를 복구하거나 <code>terraform import</code>를 사용하여 State를 생성된 형상 기준으로 맞춰주는 작업이 필요합니다.</p>
]]></content:encoded>
    </item>
    <item>
      <title>SSH returns - no matching host key type found</title>
      <link>https://docmoa.github.io/01-Infrastructure/Linux/TroubleShooting/ssh-no-matching-host-key-type-found.html</link>
      <guid>https://docmoa.github.io/01-Infrastructure/Linux/TroubleShooting/ssh-no-matching-host-key-type-found.html</guid>
      <source url="https://docmoa.github.io/rss.xml">SSH returns - no matching host key type found</source>
      <description>SSH returns - no matching host key type found.</description>
      <pubDate>Tue, 09 Apr 2024 01:23:44 GMT</pubDate>
      <content:encoded><![CDATA[
<h2>Issue</h2>
<div class="language-bash" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="line">$ <span class="token function">ssh</span> root@192.168.1.1</span>
<span class="line"></span>
<span class="line">Unable to negotiate with <span class="token number">192.168</span>.1.1 port <span class="token number">22</span>: no matching <span class="token function">host</span> key <span class="token builtin class-name">type</span> found. Their offer: ssh-rsa</span>
<span class="line"></span></code></pre></div><p>일부 환경 설정 및 SSH 버전에 따라 SSH에 사용되는 특정 키가 비활성화되어있는 경우 이같은 오류 메시지가 발생합니다. 이것은 <a href="https://www.openssh.com/legacy.html" target="_blank" rel="noopener noreferrer">OpenSSH Legacy Options</a>에 개시된 글의 내용을 확인해볼 수 있습니다.</p>
<blockquote>
<p>OpenSSH는 표준을 준수하는 SSH 구현과의 호환성에 필요한 모든 암호화 알고리즘을 구현하지만, 일부 구형 알고리즘이 취약한 것으로 밝혀졌기 때문에 모든 알고리즘이 기본적으로 사용하도록 설정되어 있지는 않습니다.</p>
</blockquote>
<p>위 메시지는 <code>ssh-rsa</code> 타입에 대해 비활성화 된 상태 입니다.</p>
<h2>해결 방법 1</h2>
<p>접속 시 옵션에 추가</p>
<div class="language-bash" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="line"><span class="token function">ssh</span> <span class="token parameter variable">-oHostKeyAlgorithms</span><span class="token operator">=</span>+ssh-rsa root@192.168.1.1</span>
<span class="line"></span></code></pre></div><h2>해결 방법 2</h2>
<p>매번 키 알고리즘을 지정할 필요가 없도록 호스트 패턴을 <code>~/.ssh/config</code>에 추가</p>
<div class="language-ini" data-highlighter="prismjs" data-ext="ini" data-title="~/.ssh/config"><pre class="language-ini"><code><span class="line">...</span>
<span class="line"></span>
<span class="line">Host 192.168.1.1</span>
<span class="line">  <span class="token key attr-name">HostKeyAlgorithms</span><span class="token punctuation">=</span><span class="token value attr-value">+ssh-rsa</span></span>
<span class="line"></span></code></pre></div>]]></content:encoded>
    </item>
    <item>
      <title>API 보안을 위한 Vault 활용 (API Key)</title>
      <link>https://docmoa.github.io/04-HashiCorp/06-Vault/04-UseCase/API-security.html</link>
      <guid>https://docmoa.github.io/04-HashiCorp/06-Vault/04-UseCase/API-security.html</guid>
      <source url="https://docmoa.github.io/rss.xml">API 보안을 위한 Vault 활용 (API Key)</source>
      <description>API 보안을 위한 Vault 활용</description>
      <pubDate>Tue, 19 Mar 2024 14:41:45 GMT</pubDate>
      <content:encoded><![CDATA[
<blockquote>
<p>참고 1: <a href="https://owasp.org/API-Security/editions/2023/en/0x11-t10/" target="_blank" rel="noopener noreferrer">OWASP Top 10 API Securit Risks - 2023</a><br>
참고 2: <a href="https://cf-assets.www.cloudflare.com/slt3lc6tev37/5zfIEoxvRDHLRbkBaLJqsT/c712b0273971194774fc7326b3b1da34/Whitepaper_A-Guide-to-API-Security_Korean_20220622.pdf" target="_blank" rel="noopener noreferrer">Cloudflare API 보안 가이드</a></p>
</blockquote>
<p>API는 서로 다른 앱 간 통신을 가능하게 하여 서로 다른 앱, 서로 다른 기업 및 조직 간 데이터 교환으로 더큰 서비스와 다양한 비즈니스를 구성하도록 합니다. 이는 개별 앱이 보유한 다양한 기능과 데이터가 결합되기 때문입니다. API 전략은 엔드유저와 대면하는 서비스와 별개로 앱과 앱 간의 소비하는 모델을 만들기도 합니다.</p>
<p>데이터와 기능이 호출되면 여기에 비용이 발생함은 물론 데이터의 보안과 접근에 대한 보호가 필요해집니다. 내외부의 API에 대한 공격은 지속적으로 증가하고 있고, 공격자는 API의 취약점을 지속적으로, 그리고 이전보다 더 많이 공격합니다. API의 보안이 설계단계에서 취약하거나 보안을 고려하지 않고 개발하는 경우에는 이후 수많은 API간 통신이 발생하는 중이라 수정에 대한 영향도가 커질 수 있습니다.</p>
<p>API 보안으로 인해 데이터가 누출되는 사건은 국내외로 지속적으로 발생하고 있습니다.</p>
<ul>
<li><a href="https://www.joongang.co.kr/article/25158501#home" target="_blank" rel="noopener noreferrer">(기사)초기 비번 그대로 쓴 LG유플</a></li>
<li><a href="https://www.businesspost.co.kr/BP?command=article_view&amp;num=333412" target="_blank" rel="noopener noreferrer">(기사)삼성전자 영국 온라인 스토어 고객 정보 유출</a></li>
<li><a href="https://threatpost.com/facebook-accounts-leaked-check-exposed/165245/" target="_blank" rel="noopener noreferrer">(기사)Facebook Accounts Leaked Online</a></li>
<li><a href="https://www.vice.com/en/article/wjx3e4/t-mobile-website-allowed-hackers-to-access-your-account-data-with-just-your-phone-number" target="_blank" rel="noopener noreferrer">(기사)T-Mobile Website Allowed Hackers to Access Your Account Data</a></li>
</ul>
<p>OWASP에서는 API의 보안위험 상위 10가지를 다음과 같이 정의합니다.</p>
<table>
<thead>
<tr>
<th>위협</th>
<th>설명</th>
</tr>
</thead>
<tbody>
<tr>
<td>손상된 객체 수준의 권한 부여</td>
<td>API는 종종 객체 식별자를 처리하는 엔드포인트를 노출시키며, 객체 수준의 액세스 제어 문제의 넓은 공격 표면을 만듭니다. 사용자 ID를 사용하여 데이터 소스에 액세스하는 모든 함수에 권한 확인을 구현하는 것이 중요합니다.</td>
</tr>
<tr>
<td>손상된 인증</td>
<td>인증 메커니즘을 잘못 구현하면 공격자가 인증 토큰을 침해하거나 다른 사용자의 신원을 일시적 또는 영구적으로 가로챌 수 있습니다. 이는 API 보안을 저해할 수 있습니다.</td>
</tr>
<tr>
<td>손상된 객체 속성 수준의 권한 부여</td>
<td>이는 과도한 데이터 노출과 대량 할당과 관련된 문제를 결합하며, 객체 속성 수준에서의 권한 검증 부재로 인해 권한이 없는 당사자에 의한 정보 노출 또는 조작이 발생합니다.</td>
</tr>
<tr>
<td>제한 없는 리소스 소비</td>
<td>API에 대한 성공적인 공격은 네트워크 대역폭, CPU, 메모리 및 저장소와 같은 리소스를 소비하거나, 이메일이나 생체 인증과 같은 기타 리소스를 소비하여 서비스 공급 업체를 통해 제공됩니다. 이는 서비스 거부 또는 운영 비용 증가로 이어질 수 있습니다.</td>
</tr>
<tr>
<td>손상된 함수 수준의 권한 부여</td>
<td>복잡한 액세스 제어 정책과 관리 및 일반 기능 사이의 명확한 분리 부재로 인해 권한 결함이 발생할 수 있으며, 공격자가 다른 사용자의 리소스 또는 관리 기능에 액세스할 수 있습니다.</td>
</tr>
<tr>
<td>민감한 비즈니스 흐름에 대한 제한 없는 액세스</td>
<td>이 위험이 있는 API는 비즈니스 흐름을 노출시키며, 자동화된 방식으로 과도하게 사용될 경우 비즈니스에 해를 끼칠 수 있는 기능을 보완하지 않습니다.</td>
</tr>
<tr>
<td>서버 측 요청 위조</td>
<td>SSRF 결함은 사용자 제공 URI를 유효성 검사하지 않고 원격 리소스를 가져올 때 발생하며, 이를 통해 공격자는 응용 프로그램이 예상치 못한 대상으로 조작된 요청을 보내도록 강제할 수 있습니다.</td>
</tr>
<tr>
<td>보안 구성 오류</td>
<td>API 및 이를 지원하는 시스템의 복잡한 구성은 종종 무시되거나 안전한 방식으로 구성되지 않을 수 있으며, 이는 다양한 유형의 공격으로 이어질 수 있습니다.</td>
</tr>
<tr>
<td>부적절한 인벤토리 관리</td>
<td>API는 종종 더 많은 엔드포인트를 노출시키며, 적절하고 최신의 문서 및 호스트 및 배포된 API 버전의 인벤토리 관리가 중요합니다.</td>
</tr>
<tr>
<td>API의 안전하지 않은 사용</td>
<td>개발자는 사용자 입력보다 제3자 API에서 받은 데이터를 더 신뢰하며, 더 약한 보안 표준을 채택합니다. 공격자는 목표 API를 직접 공격하는 대신 통합된 제3자 서비스를 대상으로하기 때문에 API를 손상시킬 수 있습니다.</td>
</tr>
</tbody>
</table>
<p>보안 위협에 대해 HashiCorp의 솔루션들이 지원하는 방식은 다음과 같습니다.</p>
<table>
<thead>
<tr>
<th>솔루션</th>
<th>설명</th>
</tr>
</thead>
<tbody>
<tr>
<td>Vault</td>
<td>1) API에서 사용되는 인증 메커니즘을 제공하고, 인가에 대한 데이터를 함께 관리하여 통합된 인증/인가를 설계합니다. 2) 발행된 인증 정보는 수명이 짧고 자동화된 갱신 프로세스를 제공합니다. 3) 인증된 앱, 장비간 통신을 위한 인증서 서비스를 제공합니다. 4) 데이터의 암호화 복호화 서비스를 제공합니다.</td>
</tr>
<tr>
<td>Consul</td>
<td>1) 비즈니스 흐름 및 인벤토리 관리를 정의하여 의도된 API 흐름을 정의합니다. 2) 서비스 메시를 통해 신뢰관계인 서비스 간에 통신할 수 있도록 정의합니다. 3) 서비스 마다 요청에 대한 제한을 적용합니다.</td>
</tr>
<tr>
<td>Terraform</td>
<td>인프라 보안 구성을 표준화 하고, 보안 정책을 준수하는 인프라 구성을 하도록 돕습니다.</td>
</tr>
<tr>
<td>Nomad</td>
<td>앱 배포 자동화와 더불어 Consul 연계한 서비스 메시, Vault 연계된 시크릿 자동화를 플랫폼 수준에서 지원 합니다.</td>
</tr>
</tbody>
</table>
<p>여기서는 Vault의 API 보안에 대한 인증 메커니즘을 설명 합니다.</p>
<blockquote>
<p>기타 참고</p>
<ul>
<li><a href="https://youtu.be/eFdwlCNLL8s?si=oocJgV8HTXai1gcX" target="_blank" rel="noopener noreferrer">(Consul) 서비스 메시로 트래픽 제어(영상)</a></li>
<li><a href="https://youtu.be/_TbhKFp2sd4?si=PFh7_SekV40UL7Ax" target="_blank" rel="noopener noreferrer">(Terraform) 센티널, 코드화된 정책 적용 익히기(영상)</a></li>
<li><a href="https://docmoa.github.io/04-HashiCorp/06-Vault/04-UseCase/mtls.html" target="_blank" rel="noopener noreferrer">(Vault) PKI를 사용하여 mTLS 구성의 인증서 자동화</a></li>
<li><a href="https://docmoa.github.io/04-HashiCorp/06-Vault/04-UseCase/nomad-integration.html" target="_blank" rel="noopener noreferrer">(Nomad) 플랫폼 수준의 시크릿 자동화 지원</a></li>
</ul>
</blockquote>
<h2>1. API를 위한 인증과 인가, API Key</h2>
<p>API로 서비스를 기획하는 경우 요청을 식별하고 적절한 권한을 부여하기 위해 API 키 또는 API 토큰을 사용할 수 있습니다(API Key로 설명합니다). 우리가 이야기하는 클라우드 또한 API로 구성된 인프라와 서비스 덩어리 입니다. 서비스를 사용하고 외부 서비스와 연계하기 위해 클라우드를 비롯 수많은 API 서비스는 식별가능한 인증과 사용에 대한 권한 용도로 <code>API Key</code>을 제공 합니다.</p>
<figure><figcaption>AWS API 인증을 위한 Key 관리 화면</figcaption></figure>
<p><a href="https://aws.amazon.com/ko/what-is/api-key/" target="_blank" rel="noopener noreferrer">API 키란 무엇인가요?</a> 라는 AWS 문서에 보면 API 키 모범 사례에서 인증과 인가를 위한 <mark>중요한</mark> API 키/토큰에 대해 어떻게 관리해야 하는지 알려줍니다.</p>
<ul>
<li>사용자 인증에 API 키를 사용하지 마세요. API 키는 사용자 액세스를 규제하기 위한 것이 아닙니다. 마찬가지로 전송 중에 표시될 수 있으므로 기밀 정보를 API 키에 포함하지 마세요.</li>
<li>API 키를 소스 코드나 리포지토리에 직접 임베드하지 마세요. 삭제하지 않으면 애플리케이션을 게시할 때 일반에 노출될 수 있습니다.</li>
<li>API 키를 더 이상 사용하지 않을 때는 삭제하세요. 보다 강력한 API 보안을 위해 키에 만료 시간을 추가하는 것을 고려해 보세요.</li>
</ul>
<div class="hint-container tip">
<p class="hint-container-title">모범 사례를 정리해보면</p>
<ol>
<li>사용자(사람)보다는 앱 인증에 사용하고</li>
<li>평문의 고정된 값으로 기록하지 않기를 권장하고</li>
<li>사용하지 않는 경우 삭제하고 만료 시간을 정의해야 합니다.</li>
</ol>
</div>
<p>API 키/토큰이 제공하는 인증 및 인가에 더불어, 위의 모범 사례를 적용하면 OWASP에서 지적한 위협중 다음을 해결할 수 있습니다.</p>
<ul>
<li>손상된 객체 수준의 권한 부여</li>
<li>손상된 인증</li>
<li>손상된 객체 속성 수준의 권한 부여</li>
<li>손상된 함수 수준의 권한 부여</li>
</ul>
<div class="hint-container caution">
<p class="hint-container-title">하지만 다음과 같은 이유로 이같은 모범사례를 직접 구현하기란 어렵습니다.</p>
<ul>
<li>기록하지 않는다면 누군가 대신 넣어주거나(Injection) 별도 API 키/토큰 저장소를 두어 가져올 수 있어야 한다. (이때 또 저장소에 대한 인증이 필요하다.)</li>
<li>삭제에 대한 훈련이 부족하고, 서비스의 끊김 없이 교체할 수 있는 자동화 방안이 필요하다.</li>
</ul>
</div>
<p>API 서비스를 위한 API 키/토큰 발급 및 관리 시스템을 제공하고, 모범사례를 구현하기위해 Vault를 활용할 수 있습니다.</p>
<h2>2. API Key를 위한 Vault 요소</h2>
<p>Vault에는 플랫폼 및 소프트웨어와 인터페이싱하기위해 요구되는 인증 정보를 모범사례에 따라 관리하고 자동화할 수 있도록 다양한 <a href="https://developer.hashicorp.com/vault/docs/secrets" target="_blank" rel="noopener noreferrer">Secret Engine</a>이 준비되어있습니다. 이들 시크릿 요소는 평문으로 저장하지 않고 짧은 수명주기를 갖으며 관리되도록 하는데 중점을 두며, 각각의 플랫폼과 소프트웨어의 특성에 맞춰 정의할 수 있습니다.</p>
<p>여기서는 준비된 <code>Secret Engine</code>외에 자체 개발되는 API 기반 서비스를 위해 Vault가 갖는 특성을 통해 모범사례를 달성하여 API 보안을 달성하는데 도움이 될만한 요소를 설명합니다.</p>
<h3>2.1 Vault Token</h3>
<blockquote>
<p><a href="https://docmoa.github.io/04-HashiCorp/06-Vault/01-Information/vault-token.html" target="_blank" rel="noopener noreferrer">Vault Token의 이해</a></p>
</blockquote>
<p><code>Vault Token</code>은 Vault 내에서는 인증 이후의 API 인증/인가를 담당하는 요소입니다. API 키/토큰 요소 및 발급 서비스로서 다음의 특징을 갖습니다.</p>
<ul>
<li>영구적이지 않고 생생 시 마다 고유한 값을 갖습니다</li>
<li>메타 데이터 정의를 통해 사용자가 API 앱을 개발함에 있어 필요한 데이터를 담아 사용자와 권한을 구분하는 용도로도 활용가능합니다.</li>
<li>Vault Audit Log를 통해 생성 요청을 감사할 수 있습니다.</li>
<li>손상된 API 키/토큰으로 확인 된 경우 강제 만료(Revoke)</li>
<li><code>token_bound_cidrs</code> 옵션을 통해 Vault Token에 대해 검증 요청이 가능하(사용) 네트워크 CIDR 대역을 지장할 수 있습니다.</li>
<li>Vault Sentinel 기능을 통해 발급 요청에 대한 옵션값 정책을 정의할 수 있습니다.</li>
<li>Vault Rate Limit 기능과 Quota를 사용하여 Vault Token 발급 및 검증에 호출 건수를 제한할 수 있습니다.</li>
<li>Vault Performance Replication 기능을 사용하여 다수의 클러스터 환경에서 동일한 구성을 중앙 관리합니다.</li>
<li>Vault Disaster Recovery 기능을 사용하여 Vault 장애시 전환을 통해 기존 발급된 Vault Token 내역을 복구할 수 있습니다.</li>
</ul>
<p><code>API 키 관리 서비스</code>로서의 Vault는 분산 및 클라우드 환경에서 관리를 담당하는 요소를 격리 및 가용성을 확보할 수 있습니다.</p>
<figure><figcaption>Vault API Key as a Service</figcaption></figure>
<p>Token을 생성하는 CLI를 다음과 같이 실행하여 출력된 결과를 확인해봅니다.</p>
<details class="hint-container details"><summary>Vault Dev 모드로 실행</summary>
<p><a href="https://developer.hashicorp.com/vault/install?product_intent=vault" target="_blank" rel="noopener noreferrer">Vault Download 안내 링크</a></p>
<div class="language-bash" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="line"><span class="token comment"># 서버 실행</span></span>
<span class="line">vault server <span class="token parameter variable">-dev</span> -dev-root-token-id<span class="token operator">=</span>root</span>
<span class="line"></span></code></pre></div><div class="language-bash" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="line"><span class="token comment"># Dev용 ROOT Token</span></span>
<span class="line"><span class="token assign-left variable">VAULT_TOKEN</span><span class="token operator">=</span>root</span>
<span class="line"></span></code></pre></div></details>
<div class="language-json" data-highlighter="prismjs" data-ext="json" data-title="json"><pre class="language-json"><code><span class="line">$ vault token create -format=json \</span>
<span class="line">  -policy=default \</span>
<span class="line">  -ttl=<span class="token number">30</span> \</span>
<span class="line">  -metadata=type=api-admin \</span>
<span class="line">  -orphan=<span class="token boolean">true</span></span>
<span class="line"></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">  <span class="token property">"request_id"</span><span class="token operator">:</span> <span class="token string">"8e2a416d-5587-90d1-68bd-d930a2005442"</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token property">"lease_id"</span><span class="token operator">:</span> <span class="token string">""</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token property">"lease_duration"</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token property">"renewable"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token property">"data"</span><span class="token operator">:</span> <span class="token null keyword">null</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token property">"warnings"</span><span class="token operator">:</span> <span class="token null keyword">null</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token property">"auth"</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line highlighted">    <span class="token property">"client_token"</span><span class="token operator">:</span> <span class="token string">"hvs.CAESIJz-I42G1S4nWalCu3yrKwV63FW-3wKV4H****"</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token property">"accessor"</span><span class="token operator">:</span> <span class="token string">"JOmunQGBUBgC4gaYzOt3gL8k"</span><span class="token punctuation">,</span></span>
<span class="line highlighted">    <span class="token property">"policies"</span><span class="token operator">:</span> <span class="token punctuation">[</span></span>
<span class="line">      <span class="token string">"default"</span></span>
<span class="line">    <span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token property">"token_policies"</span><span class="token operator">:</span> <span class="token punctuation">[</span></span>
<span class="line">      <span class="token string">"default"</span></span>
<span class="line">    <span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token property">"identity_policies"</span><span class="token operator">:</span> <span class="token null keyword">null</span><span class="token punctuation">,</span></span>
<span class="line highlighted">    <span class="token property">"metadata"</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line highlighted">      <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"api-admin"</span></span>
<span class="line highlighted">    <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token property">"orphan"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token property">"entity_id"</span><span class="token operator">:</span> <span class="token string">""</span><span class="token punctuation">,</span></span>
<span class="line highlighted">    <span class="token property">"lease_duration"</span><span class="token operator">:</span> <span class="token number">30</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token property">"renewable"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token property">"mfa_requirement"</span><span class="token operator">:</span> <span class="token null keyword">null</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre></div><p>API 키/토큰 요소로 활용되는 Vault Token의 요소와 특성은 다음과 같습니다.</p>
<table>
<thead>
<tr>
<th>요소</th>
<th>특성</th>
</tr>
</thead>
<tbody>
<tr>
<td>auth.client_token</td>
<td>발생된 고유 API 키/토큰으로 활용합니다. 발급 시마다 고유한 값을 갖습니다.</td>
</tr>
<tr>
<td>auth.policies</td>
<td><code>default</code> 정책은 해당 토큰으로 Vault내에서 자기 자신의 상태 및 정보를 확인할 수 있는 권한을 부여 합니다.</td>
</tr>
<tr>
<td>auth.metadata</td>
<td>API 키/토큰을 구분할 메타데이터로 활용됩니다. 사용자 식별 데이터를 저장하거나 권한에 대해 정의할 수 있습니다.</td>
</tr>
<tr>
<td>auth.lease_duration</td>
<td>발생된 토큰의 유효 기간을 나타냅니다.</td>
</tr>
</tbody>
</table>
<p>검증을 위한 절차로 Token(auth.client_token 값)을 조회한 경우 정상인 경우 다음의 결과를 확인할 수 있습니다.</p>
<div class="language-json" data-highlighter="prismjs" data-ext="json" data-title="json"><pre class="language-json"><code><span class="line">$ vault token lookup -format=json hvs.CAESIFIvewF8ayV-6Qe_YYtrYjnFRUJaMXHOOHNuo23****</span>
<span class="line"></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">  <span class="token property">"request_id"</span><span class="token operator">:</span> <span class="token string">"8d7af9d6-5af4-8f30-da8d-3bcfd3f10d44"</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token property">"lease_id"</span><span class="token operator">:</span> <span class="token string">""</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token property">"lease_duration"</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token property">"renewable"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token property">"data"</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token property">"accessor"</span><span class="token operator">:</span> <span class="token string">"1tn5yr9Ybadum7I1EIirgaBN"</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token property">"creation_time"</span><span class="token operator">:</span> <span class="token number">1710836854</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token property">"creation_ttl"</span><span class="token operator">:</span> <span class="token number">30</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token property">"display_name"</span><span class="token operator">:</span> <span class="token string">"token"</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token property">"entity_id"</span><span class="token operator">:</span> <span class="token string">""</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token property">"expire_time"</span><span class="token operator">:</span> <span class="token string">"2024-03-19T17:28:04.530353+09:00"</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token property">"explicit_max_ttl"</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token property">"id"</span><span class="token operator">:</span> <span class="token string">"hvs.CAESIFIvewF8ayV-6Qe_YYtrYjnFRUJaMXHOOHNuo23****"</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token property">"issue_time"</span><span class="token operator">:</span> <span class="token string">"2024-03-19T17:27:34.530355+09:00"</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token property">"meta"</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"api-admin"</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token property">"num_uses"</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token property">"orphan"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token property">"path"</span><span class="token operator">:</span> <span class="token string">"auth/token/create"</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token property">"policies"</span><span class="token operator">:</span> <span class="token punctuation">[</span></span>
<span class="line">      <span class="token string">"default"</span></span>
<span class="line">    <span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token property">"renewable"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token property">"ttl"</span><span class="token operator">:</span> <span class="token number">26</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"service"</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token property">"warnings"</span><span class="token operator">:</span> <span class="token null keyword">null</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre></div><p>Vault Token의 TTL이 만료된 경우 Vault 내에서 이미 Token이 만료처리(Revoke) 되므로 권한없음의 에러를 반환 합니다.</p>
<div class="language-bash" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="line">$ vault token lookup <span class="token parameter variable">-format</span><span class="token operator">=</span>json hvs.CAESIFIvewF8ayV-6Qe_YYtrYjnFRUJaMXHOOHNuo23****</span>
<span class="line">Error looking up token: Error making API request.</span>
<span class="line"></span>
<span class="line">URL: POST http://127.0.0.1:8200/v1/auth/token/lookup</span>
<span class="line">Code: <span class="token number">403</span>. Errors:</span>
<span class="line"></span>
<span class="line">* bad token</span>
<span class="line"></span></code></pre></div><h3>2.2 Vault Token Role</h3>
<p>Cloud 서비스, IAM, 인증 서비스 등을 다뤄본 사용자라면 정책(policy)과 역할(role)에 대한 개념을 지속적으로 접하게 됩니다. 역할은 다수의 정책이 부여된 권한 템플릿이라 볼 수도 있습니다.</p>
<table>
<thead>
<tr>
<th>용어</th>
<th>설명</th>
</tr>
</thead>
<tbody>
<tr>
<td>정책(Policy)</td>
<td>리소스에 대한 사용 권한을 정의합니다.</td>
</tr>
<tr>
<td>역할(Role)</td>
<td>Identity 요소로, 정책이 부여된 대상으로, 다수의 정책을 갖습니다.</td>
</tr>
</tbody>
</table>
<p>앞서 <a href="#21-vault-token">2.1 Vault Token</a>에서 정의되는 Vault Token은 발급 할 때마다 수명(TTL)과 메타데이터 등의 옵션을 항상 지정해야 하는 반면, Vault Token Role을 정의하면 미리 설정된 값으로 매번 같은 조건의 Vault Token이 생성되게 됩니다.</p>
<p>다음과 같이 역할을 정의할 수 있습니다.</p>
<div class="language-bash" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="line">vault <span class="token function">write</span> /auth/token/roles/api-admin <span class="token punctuation">\</span></span>
<span class="line">  <span class="token assign-left variable">orphan</span><span class="token operator">=</span>true <span class="token punctuation">\</span></span>
<span class="line">  <span class="token assign-left variable">token_explicit_max_ttl</span><span class="token operator">=</span><span class="token number">30</span> <span class="token punctuation">\</span></span>
<span class="line">  <span class="token assign-left variable">token_period</span><span class="token operator">=</span><span class="token number">30</span> <span class="token punctuation">\</span></span>
<span class="line">  <span class="token assign-left variable">token_type</span><span class="token operator">=</span>service <span class="token punctuation">\</span></span>
<span class="line">  <span class="token assign-left variable">allowed_policies</span><span class="token operator">=</span>default <span class="token punctuation">\</span></span>
<span class="line">  <span class="token assign-left variable">disallowed_policies</span><span class="token operator">=</span>root</span>
<span class="line"></span></code></pre></div><p>정의된 <code>api-admin</code> 역할을 지정하여 Vault Token을 생성합니다. (<code>metadata</code>는 생성시 넣어주는 값으로 미리 역할에 지정할 수는 없습니다.)</p>
<div class="language-json" data-highlighter="prismjs" data-ext="json" data-title="json"><pre class="language-json"><code><span class="line">$ vault token create -format=json -role=api-admin -metadata=foo=bar</span>
<span class="line"></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">  <span class="token property">"request_id"</span><span class="token operator">:</span> <span class="token string">"f09c2ed5-00d9-50d1-125d-c11422aa688f"</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token property">"lease_id"</span><span class="token operator">:</span> <span class="token string">""</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token property">"lease_duration"</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token property">"renewable"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token property">"data"</span><span class="token operator">:</span> <span class="token null keyword">null</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token property">"warnings"</span><span class="token operator">:</span> <span class="token null keyword">null</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token property">"auth"</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token property">"client_token"</span><span class="token operator">:</span> <span class="token string">"hvs.CAESIKuBuHgqkFZ3IIuY80JzQq5kGci-9Jd2Xix****"</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token property">"accessor"</span><span class="token operator">:</span> <span class="token string">"asIKCp1Wtyb0VdzjPHEvN4EE"</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token property">"policies"</span><span class="token operator">:</span> <span class="token punctuation">[</span></span>
<span class="line">      <span class="token string">"default"</span></span>
<span class="line">    <span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token property">"token_policies"</span><span class="token operator">:</span> <span class="token punctuation">[</span></span>
<span class="line">      <span class="token string">"default"</span></span>
<span class="line">    <span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token property">"identity_policies"</span><span class="token operator">:</span> <span class="token null keyword">null</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token property">"metadata"</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token property">"foo"</span><span class="token operator">:</span> <span class="token string">"bar"</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token property">"orphan"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token property">"entity_id"</span><span class="token operator">:</span> <span class="token string">""</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token property">"lease_duration"</span><span class="token operator">:</span> <span class="token number">30</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token property">"renewable"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token property">"mfa_requirement"</span><span class="token operator">:</span> <span class="token null keyword">null</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre></div><p>앞서 Vault Token을 직접 생성하는 것과의 차이는 대부분의 옵션(수명주기, 독립된 Token 여부, 불필요한 Vault의 정책 부여 막기)이 미리 선언 되었다는 점과, 역할 고유의 값이 조회시 확인됩니다.</p>
<div class="language-json" data-highlighter="prismjs" data-ext="json" data-title="json"><pre class="language-json"><code><span class="line">$ vault token lookup -format=json hvs.CAESIKuBuHgqkFZ3IIuY80JzQq5kGci-9Jd2X****</span>
<span class="line"></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">  <span class="token property">"request_id"</span><span class="token operator">:</span> <span class="token string">"809a0395-b33c-ebf1-9ff4-f98a984d2ba8"</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token property">"lease_id"</span><span class="token operator">:</span> <span class="token string">""</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token property">"lease_duration"</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token property">"renewable"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token property">"data"</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token property">"accessor"</span><span class="token operator">:</span> <span class="token string">"asIKCp1Wtyb0VdzjPHEvN4EE"</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token property">"creation_time"</span><span class="token operator">:</span> <span class="token number">1710837749</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token property">"creation_ttl"</span><span class="token operator">:</span> <span class="token number">30</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token property">"display_name"</span><span class="token operator">:</span> <span class="token string">"token"</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token property">"entity_id"</span><span class="token operator">:</span> <span class="token string">""</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token property">"expire_time"</span><span class="token operator">:</span> <span class="token string">"2024-03-19T17:42:59.684424+09:00"</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token property">"explicit_max_ttl"</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token property">"id"</span><span class="token operator">:</span> <span class="token string">"hvs.CAESIKuBuHgqkFZ3IIuY80JzQq5kGci-9Jd2Xix2****"</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token property">"issue_time"</span><span class="token operator">:</span> <span class="token string">"2024-03-19T17:42:29.684426+09:00"</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token property">"meta"</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token property">"foo"</span><span class="token operator">:</span> <span class="token string">"bar"</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token property">"num_uses"</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token property">"orphan"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span></span>
<span class="line highlighted">    <span class="token property">"path"</span><span class="token operator">:</span> <span class="token string">"auth/token/create/api-admin"</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token property">"policies"</span><span class="token operator">:</span> <span class="token punctuation">[</span></span>
<span class="line">      <span class="token string">"default"</span></span>
<span class="line">    <span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token property">"renewable"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span></span>
<span class="line highlighted">    <span class="token property">"role"</span><span class="token operator">:</span> <span class="token string">"api-admin"</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token property">"ttl"</span><span class="token operator">:</span> <span class="token number">26</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"service"</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token property">"warnings"</span><span class="token operator">:</span> <span class="token null keyword">null</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre></div><p><code>role</code> 항목이 추가되어 해당 토큰이 어떤 역할로 부터 생성되었는지 확인 가능합니다. 앱에서는 이런 역할 값을 조회하여 내부적으로 권한 부여를 추가할 수 있습니다.</p>
<h3>2.3 자동화</h3>
<p>Vault Token이 제공하는 API Key에 수명주기 기능은 모범사례인 비영구성을 만족하나, 이경우 자동화가 뒷받침되어야 합니다. 앱 및 API를 호출하는 외부 서비스는 API Key를 수명주기 만료 전에 갱신할 수 있어야 합니다. 앱으로 개발되는 경우 개발 로직에 자동화 행위를 추가할 수 있지만, 정적인 파일이나 구성에 존재해야 하는 경우 분산된 서비스 수만큼의 수작업이 발생할 수 있습니다.</p>
<div class="hint-container tip">
<p class="hint-container-title">자동화의 핵심은 인증!</p>
<p>API Key를 요청하는 대상 또한 믿을 수 있는 대상이여야 합니다. 기존 클라우드 서비스 또는 SaaS 서비스에서 API Key를 생성하는 경우, 관리자인 사람이 어떤 방식(ID/PW, OIDC 등)을 통해 믿을 수 있는 사용자인지 인증 한뒤 API Key를 생성하였습니다. 이같은 수동 작업을 자동화하려면 API Key를 사용하려는 대상이 직접 인증 방식을 통해 API Key를 발급 및 갱신할 수 있어야 합니다.</p>
</div>
<p>Vault는 다음의 기전을 사용하여 모범사례를 준수하면서 자동화가능한 방안을 제공합니다. 기본 구조와 행위의 순서는 다음과 같습니다.</p>
<figure><figcaption>API Token Service Default Architecture</figcaption></figure>
<ol>
<li>API Token이 필요한 서비스는 Token을 요청할 수 있는 권한이 있음을 인증받아야 합니다.</li>
<li>Token 발급을 담당하는 Vault로 직접 접속하기 보다 제한된 기능만 수행하는 <code>Vault Proxy</code>를 통해 요청합니다.</li>
<li>인증이 통과하면 <code>Vault Proxy</code>는 Vault 서버로부터 Token을 생성하고, 요청한 서비스로 반환 합니다.</li>
<li>서비스는 Token을 API 요청에 담아 API 서비스로 요청합니다.</li>
<li>API 서비스는 전달받은 API Token을 Vault 서버에 검증하고 부여된 권한을 확인하여 응답합니다.</li>
</ol>
<h4>🚀 [자동화 방안 1] 앱에서 인증과 Token 발급 처리</h4>
<p>개발되는 앱은 Vault의 다양한 인증 방식들을 사용하여 신뢰할 수 있는 앱임을 증명할 수 있습니다. 앱이 독자적으로 Vault에 인증 받는데 가장 많이 사용되는 수단은 AppRole 방식 입니다.</p>
<blockquote>
<p>참고 : <a href="https://docmoa.github.io/04-HashiCorp/06-Vault/04-UseCase/spring-boot.html" target="_blank" rel="noopener noreferrer">Vault로 Spring Boot 구성관리</a></p>
</blockquote>
<ul>
<li>CICD 도구는 Vault와 상호 인증됩니다.</li>
<li>배포 파이프라인상에서 Vault AppRole의 인증 정보(App ID, Secret ID)를 획득합니다.</li>
<li>앱이 배포될 때 AppRole 인증정보로 Vault Proxy에 인증 받습니다.</li>
<li>앱은 Vault Proxy로 API 요청에 필요한 API Key(Token)를 Vault Token Role 기반으로 발급 받습니다.</li>
</ul>
<figure><figcaption>API Key 자동화 - 앱 자체 인증 및 인가</figcaption></figure>
<h4>🚀 [자동화 방안 2] mTLS를 이용하여 네트워크 인증 처리</h4>
<p>mTLS(Mutual TLS)는 네트워크 연결 시 상호간 인증서를 검증하여 신뢰할 수 있는 네트워킹을 가능하게 합니다. Vault Proxy로의 접속이 가능하려면 앱은 인증서를 기반으로 해당 앱/장치가 신뢰할 수 있음을 증명 합니다. 이경우 Vault Proxy가 Vault 서버로 미리 인증을 받기 때문에 API Key를 요청하는 서비스는 요청하는 Vault Token Role 이름만 알면 됩니다. 주로 Public 네트워크를 통해 들어오는 요청을 처리하는 ATM기, POS기, IoT 등 장치에 대한 인증에 활용됩니다.</p>
<p>인증서 또한 유효기간이 있으므로, 인증서 교체를 자동화 하기 위해서는 <a href="#%EC%9E%90%EB%8F%99%ED%99%94-%EB%B0%A9%EC%95%88-3-vault-agent%EB%A5%BC-%EC%9D%B4%EC%9A%A9%ED%95%9C-%EC%9E%90%EB%8F%99%ED%99%94-%EC%9C%84%EC%9E%84">방안 3</a>에서 활용하는 <code>Vault Agent</code>를 활용할 수 있습니다.</p>
<blockquote>
<p>참고 : <a href="https://docmoa.github.io/04-HashiCorp/06-Vault/04-UseCase/mtls.html" target="_blank" rel="noopener noreferrer">mTLS 를 사용한 상호간 인증</a><br>
사례 : <a href="https://www.hashicorp.com/resources/starbucks-secrets-at-the-retail-edge-with-hashicorp-vault" target="_blank" rel="noopener noreferrer">Starbucks</a></p>
</blockquote>
<figure><figcaption>API Key 자동화 - mTLS를 통한 인증</figcaption></figure>
<ul>
<li>최초 배포 시 유효한 인증서를 함께 배포 합니다.</li>
<li>API Key를 요청하는 서비스는 Vault Proxy로의 mTLS로 상호한 보안네트워크를 구성합니다.</li>
<li>API Key를 요청하는 서비스는 Vault Token Role 기반으로 API Key(Token)를 요청합니다.</li>
</ul>
<h4>🚀 [자동화 방안 3] Vault Agent를 이용한 자동화 위임</h4>
<p>API Key를 요구하는 대상 서비스가 외부에 별도 구성되거나, 독립된 시스템, 또는 [방안 1](#자동화-방안-1-앱에서-인증과-token-발급-처리)과 <a href="#%EC%9E%90%EB%8F%99%ED%99%94-%EB%B0%A9%EC%95%88-2-mtls%EB%A5%BC-%EC%9D%B4%EC%9A%A9%ED%95%98%EC%97%AC-%EB%84%A4%ED%8A%B8%EC%9B%8C%ED%81%AC-%EC%9D%B8%EC%A6%9D-%EC%B2%98%EB%A6%AC">방안 2</a>로 해결이 불가능한 경우 대상 시스템에 인증 및 발급 후 처리를 담당하는 <code>Vault Agent</code>를 구성할 수 있습니다. <code>Vault Agent</code>는 앱/사람 대신 1) Vault에 인증하고 2) Token을 발급 및 갱신하고 3) 필요시 파일로 저장히고 4) 추가적인 작업을 실행할 수 있는 도구 입니다.</p>
<blockquote>
<p>참고 : <a href="https://docmoa.github.io/04-HashiCorp/06-Vault/02-Secret_Engine/pki-nginx.html" target="_blank" rel="noopener noreferrer">Vault Agent를 사용한 인증서 교체</a></p>
</blockquote>
<figure><figcaption>API Key 자동화 - Vault Agent 활용</figcaption></figure>
<ul>
<li>API를 요청하는 앱이 구성되어있는 인프라에 Vault Agent를 구성합니다.</li>
<li>Vault Agent가 Vault Proxy(또는 Server) 인증 및 인가 합니다.</li>
<li>API Key를 획득하려는 앱은 Vault Agent를 통해 API Key를 요청하거나, Vault Agent가 생성해주는 파일을 읽어 API Key를 획득 합니다.</li>
</ul>
<details class="hint-container details"><summary>Vault Agent로 Token 발급/갱신 테스트</summary>
<p>Vault Agent의 Token생성 권한을 정의하는 <code>admin-role-token-create.hcl</code> 정책 정의 파일을 생성합니다.</p>
<div class="language-hcl" data-highlighter="prismjs" data-ext="hcl" data-title="admin-role-token-create.hcl"><pre class="language-hcl"><code><span class="line">path <span class="token string">"auth/token/create/api-admin"</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token property">capabilities</span> <span class="token punctuation">=</span> <span class="token punctuation">[</span><span class="token string">"create"</span>, <span class="token string">"update"</span><span class="token punctuation">]</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">path <span class="token string">"auth/token/lookup-self"</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token property">capabilities</span> <span class="token punctuation">=</span> <span class="token punctuation">[</span><span class="token string">"read"</span><span class="token punctuation">]</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre></div><p>정책을 생성합니다.</p>
<div class="language-bash" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="line">vault policy <span class="token function">write</span> admin-role-token-create admin-role-token-create.hcl</span>
<span class="line"></span></code></pre></div><p>Vault Agent는 <code>admin-role-token-create</code> 정책의 권한이 있는 인증 수단이면 됩니다. 다양한 방식을 지원하고, 여기서는 단순하게 Token을 생성하여 권한을 부여합니다.</p>
<div class="language-bash" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="line">vault token create <span class="token parameter variable">-field</span><span class="token operator">=</span>token <span class="token parameter variable">-policy</span><span class="token operator">=</span>admin-role-token-create -no-default-policy <span class="token operator">&gt;</span> vault-token</span>
<span class="line"></span></code></pre></div><p>API Key를 파일로 랜더링하기위한 <code>token.tpl</code> 템플릿 파일의 예는 다음과 같습니다.</p>
<div class="language-hcl" data-highlighter="prismjs" data-ext="hcl" data-title="token.tpl"><pre class="language-hcl"><code><span class="line"><span class="token punctuation">{</span><span class="token punctuation">{</span>- with secret <span class="token string">"auth/token/create/api-admin"</span> <span class="token string">"meta=foo=bar"</span> -<span class="token punctuation">}</span><span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">{</span><span class="token punctuation">{</span> .Auth.ClientToken <span class="token punctuation">}</span><span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">{</span><span class="token punctuation">{</span>- end <span class="token punctuation">}</span><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre></div><p>다음으로 Vault Agent의 동작을 확인하기 위한 <code>config.hcl</code>은 다음과 같습니다.</p>
<div class="language-hcl" data-highlighter="prismjs" data-ext="hcl" data-title="config.hcl"><pre class="language-hcl"><code><span class="line"><span class="token property">pid_file</span> <span class="token punctuation">=</span> <span class="token string">"./pidfile"</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">vault</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token property">address</span> <span class="token punctuation">=</span> <span class="token string">"http://127.0.0.1:8200"</span></span>
<span class="line">  <span class="token keyword">retry</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token property">num_retries</span> <span class="token punctuation">=</span> <span class="token number">3</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">auto_auth</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">method</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token property">type</span> <span class="token punctuation">=</span> <span class="token string">"token_file"</span></span>
<span class="line"></span>
<span class="line">    <span class="token property">config</span> <span class="token punctuation">=</span> <span class="token punctuation">{</span></span>
<span class="line highlighted">      <span class="token property">token_file_path</span> <span class="token punctuation">=</span> <span class="token string">"vault-token"</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line highlighted"><span class="token keyword">template</span> <span class="token punctuation">{</span></span>
<span class="line highlighted">  <span class="token property">source</span> <span class="token punctuation">=</span> <span class="token string">"./token.tpl"</span></span>
<span class="line highlighted">  <span class="token property">destination</span> <span class="token punctuation">=</span> <span class="token string">"./template.txt"</span></span>
<span class="line highlighted">  <span class="token property">command</span> <span class="token punctuation">=</span> <span class="token string">"VAULT_TOKEN=$(cat template.txt) vault token lookup"</span></span>
<span class="line highlighted"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre></div><ul>
<li><code>token_file_path</code>는 앞서 생성한 Vault Agent 인증/인가를 위해 생성한 Token이 저장되어 있습니다.</li>
<li><code>template</code>에 동적으로 생성할 정의가 되어있습니다.
<ul>
<li><code>token.tpl</code>에 정의된 Vault에서 Token 생성 후 저장되는 정보는 <code>template.txt</code>에 저장됩니다.</li>
<li>후속 작업에 대한 정의로 Token을 검증하는 커맨드를 실행합니다.</li>
</ul>
</li>
</ul>
<p>다음의 명령어로 Vault Agent를 실행합니다.</p>
<div class="language-bash" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="line">vault agent <span class="token parameter variable">-config</span><span class="token operator">=</span>./config.hcl</span>
<span class="line"></span></code></pre></div><p>실행 후 Token을 새로 생성한 결과와, 잠시 후 Token의 TTL이 만료되면, 다시 갱신하는 로그를 확인할 수 있습니다.</p>
<div class="language-log" data-highlighter="prismjs" data-ext="log" data-title="log"><pre class="language-log"><code><span class="line"><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">&gt;</span> Vault Agent started<span class="token operator">!</span> Log data will stream in below<span class="token operator">:</span></span>
<span class="line"></span>
<span class="line"><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">&gt;</span> Vault Agent configuration<span class="token operator">:</span></span>
<span class="line"></span>
<span class="line">           <span class="token property">Api Address 1:</span> <span class="token url">http://bufconn</span></span>
<span class="line">                     <span class="token property">Cgo:</span> disabled</span>
<span class="line">               <span class="token property">Log Level:</span> </span>
<span class="line">                 <span class="token property">Version:</span> Vault <span class="token number">v1.15.6</span><span class="token punctuation">,</span> built <span class="token date number">2024-02-28T</span><span class="token time number">17:07:34Z</span></span>
<span class="line">             <span class="token property">Version Sha:</span> <span class="token number">615cf6f1dce9aa91bc2035ce33b9f689952218f0</span></span>
<span class="line"></span>
<span class="line"><span class="token date number">2024-03-19T</span><span class="token time number">21:47:39.977+0900</span> <span class="token punctuation">[</span><span class="token level info keyword">INFO</span><span class="token punctuation">]</span>  <span class="token property">agent.exec.server:</span> starting exec server</span>
<span class="line"><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span></span>
<span class="line"><span class="token date number">2024-03-19T</span><span class="token time number">21:47:39.979+0900</span> <span class="token punctuation">[</span><span class="token level info keyword">INFO</span><span class="token punctuation">]</span>  <span class="token property">agent:</span> <span class="token operator">(</span>runner<span class="token operator">)</span> starting</span>
<span class="line"><span class="token date number">2024-03-19T</span><span class="token time number">21:47:39.986+0900</span> <span class="token punctuation">[</span><span class="token level info keyword">INFO</span><span class="token punctuation">]</span>  <span class="token property">agent:</span> <span class="token operator">(</span>runner<span class="token operator">)</span> rendered <span class="token string">"./token.tpl"</span> <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token string">"./template.txt"</span></span>
<span class="line"><span class="token date number">2024-03-19T</span><span class="token time number">21:47:39.986+0900</span> <span class="token punctuation">[</span><span class="token level info keyword">INFO</span><span class="token punctuation">]</span>  <span class="token property">agent:</span> <span class="token operator">(</span>runner<span class="token operator">)</span> executing command <span class="token string">"[\"VAULT_TOKEN=$(cat template.txt) vault token lookup\"]"</span> from <span class="token string">"./token.tpl"</span> <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token string">"./template.txt"</span></span>
<span class="line"><span class="token date number">2024-03-19T</span><span class="token time number">21:47:39.986+0900</span> <span class="token punctuation">[</span><span class="token level info keyword">INFO</span><span class="token punctuation">]</span>  <span class="token property">agent:</span> <span class="token operator">(</span>child<span class="token operator">)</span> spawning<span class="token operator">:</span> sh <span class="token operator">-</span>c VAULT_TOKEN<span class="token operator">=</span><span class="token operator">$</span><span class="token operator">(</span>cat template<span class="token punctuation">.</span>txt<span class="token operator">)</span> vault token lookup</span>
<span class="line">Key                  Value</span>
<span class="line"></span></code></pre></div></details>
]]></content:encoded>
    </item>
    <item>
      <title>기계의 반칙</title>
      <link>https://docmoa.github.io/06-etc/book-memo/theshortcut.html</link>
      <guid>https://docmoa.github.io/06-etc/book-memo/theshortcut.html</guid>
      <source url="https://docmoa.github.io/rss.xml">기계의 반칙</source>
      <description>기계의 반칙 - 위대한 AI 석학이 해설하는 인공지능에 대한 오해와 진실</description>
      <pubDate>Sat, 16 Mar 2024 02:06:49 GMT</pubDate>
      <content:encoded><![CDATA[
<h2>책 정보</h2>
<blockquote>
<ul>
<li>저자 : 넬로 크리스티아니니</li>
<li>역자 : 김정민</li>
<li>출간일 : 2023-11-30</li>
<li>페이지 : 256쪽</li>
<li>출판사 링크 : <a href="https://m.hanbit.co.kr/store/books/book_view.html?p_code=B5439705429" target="_blank" rel="noopener noreferrer">https://m.hanbit.co.kr/store/books/book_view.html?p_code=B5439705429</a></li>
<li>책소개 : 격동의 인공지능 시대, 지능형 기계와 공존하기 위한 실용적 조언<br>
<br>
25년 이상 인공지능 연구에 기여한 최고의 석학이 집필한 IT 과학교양서다. 현대 인공지능(AI)의 발전사부터 시작해, 주요 사건 사례들을 바탕으로 인공지능의 성장 과정을 살펴보고, 인간의 문화와 사회에 미치는 영향까지 조망한다. 특히 현재 인간의 삶과 인프라에 (치트키를 써서) 빠르고 깊게 침투 중인 지능형 기계의 무분별한 활용이 초래하는 의도치 않은 결과들을 객관적 시선으로 바라보며 강력하게 경고한다. 나아가 인간은 어떤 부분을 어떤 이유로 경계해야 하는지, 인공지능과 안전하게 공존하려면 지금부터 무엇을 해야 할지에 관한 다양한 아이디어를 제시한다.</li>
</ul>
</blockquote>
<h2>옮긴이의 말</h2>
<p>'기계'를 너무 인간중심적으로 생각하지 않았나.</p>
<ul>
<li>'Machine'의 어원은 중에 중세 프랑스어, 또는 라틴어에서 유래한 '정밀한 고안품과 발명품' 이라는 뜻이 있다.</li>
<li>한자어 '기계(機械)'는 각 한자에 모두 나무목(木)변이 들어가 있는 것 같이 '틀, '기구', '장치'라는 뜻을 가진다.</li>
<li>'머신'이나 '기계'라고 하면 금속과 오일 냄새 등을 연상하지만, 어원이나 단어의 의미상 '기계'가 금속으로 이루어져 있을 필요는 없다. (정교하게 구성된 생명체, 소프트웨어, 소셜 플랫폼)</li>
<li>'기계'가 인간의 창조물이라 해도 인간과 닮아 잇어야 할 이유는 없다.
<ul>
<li>'인간이 이해할 수 없는' 방식으로 작동하는 것은 일종의 치트키가 될 만큼 강력한 기술적 돌파구가 된 아이디어였으며 현대 인공지능 기계의 핵심적 특징이 되었다.</li>
</ul>
</li>
</ul>
<h2>1장. 지능의 탐구</h2>
<p>지능(Intelligence)이란 '인간적인 것'에 관한 문제가 아니라, 새로운 상황에서 효과적으로 행동할 수 있는 '능력'에 관한 문제다.</p>
<ul>
<li>이 능력에는 두뇌가 필요하지 않다.</li>
<li>식물, 개미 군체, 소프트웨어에서도 지능을 찾을 수 있다.</li>
<li>서로 다른 에이전트(agent:행위자)들은 이런 능력을 각기 다른 작업에서 다양한 수준으로 발휘한다.</li>
<li>지능을 판단하는 단 하나의 일반적 수단이나 비밀 공식, 테스트 방법은 존재하지 ㅇ낳는다.</li>
<li>모든 지능형 에이전트에서 인간적인 특성을 찾아볼 수는 없다.</li>
</ul>
<h3>기대치 관리</h3>
<p>무엇이 지능적인지 어떻게 알 수 있을까? 지능을 보여주는 요소는 무엇인가?</p>
<ul>
<li>다른 형태의 지능을 연구할 때 중요한 문제 중 하나는 '인간과 근복적으로 다른 것을 정확히 상상하는' 것이다.</li>
<li>지능을 상상하는 방식에 인간 중심적 선입견은 '외계(인간이 아닌 다른것)' 지능을 상상하고 조사하는 일을 더 어렵게 만든다.</li>
<li>필자는 미래 인공지능 분야에서 가장 어려운 질문 중 하나는 '우리가 이해할 수 없는 것을, 우리가 만든 기계는 이해할 가능성'에 관한 것이 되리라 생각한다.</li>
</ul>
<h3>지능 정의</h3>
<p>사람들은 자율 에이전트, 즉 스스로 결정을 내리는 에이전트와, 에이전트의 행동에 의해 부분적으로 영향을 받을 수 있는 환경에 관심이 많다.</p>
<ul>
<li>경험에 따른 행동의 모든 변화가 '학습(learning)'이다.</li>
<li>책에서는 이런 에이전트의 지능을 '새로운 상황을 포함한 다양한 국면에서 효과적으로 행동할 수 있는 능력'으로 정의한다.</li>
<li>1991년 미국 엔지니어인 제임스 앨버스는 지능을 '불확실한 환경에서 적절한 행동이 성공 확률을 높일 경우 적절하게 행동할 수 있는 체계의 능력'이라고 정의했다.</li>
<li>중요한 것은 에이전트를 지능적으로 만드는 단 하나의 '특성(quality)'이 있다고 가정하지 않는 것이다.</li>
</ul>
<p>에이전트의 효과적인 행동은 목표를 달성할 가능성을 높인하고 가정한다.</p>
<ul>
<li>목적 중심(purpose-driven) 또는 목적 지향적(purposeful) 행동이라는 개념 = 과학 철학의 '텔레올로지컬(teleologcal)'</li>
<li>에이전트의 목표와 환경 간 상호작용이 매우 강하게 밀착되어 있고 그 경계도 모호하기 때문에, 이 책에서는 이 두가지를 결합한 '작업 환경'에 관해 이야기하는 경우가 많다.</li>
<li>에이전트가 다양한 환경에서 성공할 수 있는 능력이 있다면 그 에이전트가 강건(robust)하거나, 범용(general)이거나, 문자 그대로 지능형이라고 볼 수 있다.</li>
</ul>
<h3>규칙에 따르는 세계</h3>
<p>목표 지향적 행동은 적어도 부분적으로나마 통제하고 관찰할 수 있는 환경에서만 의미가 있다.</p>
<ul>
<li>에이전트는 오직 '규칙척인' 환경에서만 미래를 예측할 수 있으며, 그런 환경에서만 특정 상황에 대한 적절한 반응의 조함을 기억하는 게 의미가 있다. 이것은 이상적인 조건 표 형태로 상상할 수 있다.</li>
<li>학습과 일반화의 배경이 되는 가정은 '비슷한 행동을 하면 비슷한 결과를 초래할 것'이라는 가정이다.</li>
<li>어떤 질서를 발견하는 것은 목적 지향적 행동의 필수 조건이다.</li>
</ul>
<h3>생존 기법의 깜짝 주머니</h3>
<p>진화는 실용주의자라고 할 수 있다.</p>
<ul>
<li>규칙적인 환경에서 환경 단서를 활용하는 방식에 아주 작은 차이만 있어도 생존력의 차이가 발생한다.</li>
<li>'지능'이라는 단일 특성보다는 지능형 행동 뒤에 여러 생존 기법이 숨어 있으리라 예상해야 한다. (반사/계획/추론/학습 등)</li>
</ul>
<p>예측이 때로는 과거 경험 데이터에서 발견한 패턴을 기반으로 이루어질 수 있다는 사실이다.</p>
<ul>
<li>'유형'으로 구분하거나, 경험을 일반화하고 압축하게 만드는 추상화 등이 포함된다.</li>
<li>통계적 패턴, 신경 경로, 화학 반응 등과 무관하게, 지능형 에이전트가 내리는 결정은 지각(sentience)이나 언어와 관련될 필요도 없다.</li>
<li>인간은 '표준'이라기보다는 '예외'적인 존재인 듯하다.</li>
</ul>
<h3>외계 지능</h3>
<p>앨런 튜링은 '지능을 가진 기계'라는 논문에서 "기계가 지능형 행동을 보여줄 수 있는지 탐구 할 것을 제안" 했다.</p>
<ul>
<li>지능의 부여는 주관적 판단일 수 있다.</li>
<li>인간은 동일한 행동을 기계가 아닌 인간이 수행할 때 '지능'에 의한 결과라고 판단하고 싶은 유혹에 빠질 수 있다.</li>
<li>인간을 지능의 전형적 모델로 내세움으로써 다양한 형태의 지능을 고려하지 않은 듯 했고, 이후 후배 연구자를 잘못된 길로 인도했을 수 있다.</li>
<li>이후, 존 매카시는 1956년 열린 연구회 투자 제안서에서 '인공지능(AI)'라는 용어를 제창했고, "인간이 그렇게 행동한다면 지능적이라고 불릴 만한 행동을 기계가 하도록 만드는 것"이라고 정의했다.</li>
<li>기계 지능에 관한 논의에서 혼란을 초래했던 여러 근거 없는 믿음들이 있다.
<ul>
<li>인간이 일종의 만능형 지능을 '부여받았기' 때문에 인간의 능력을 넘어서는 정신적 능력은 자연적, 이론적으로 존재하지 않는다는 것이다.</li>
<li>다른 모든 진화의 산물보다 인간의 두뇌가 더 우월하다고 가정하는 근거 없는 믿음과 맞물려 있다.</li>
</ul>
</li>
</ul>
<p>인간이 모든 지능의 모델이 나니고, 심지어 모든 지능의 정점도 아니라면, 인간보다 '우월한' 다른 형태의 지능이 있을 수 있을까?</p>
<ul>
<li>위 질문의 문제점은 두 에이전트 간에 사실상 비교할 수 있는 일차원적 특성과 관련해 어느쪽이 높은 점수를 받을지 묻는 질문이라는 점이다.</li>
<li>서로 다른 에이전트틀이 어떤 작업에서는 더 낫지만 또 어떤 작업에서는 더 서툴 것으로 보는게 합리적이다.</li>
<li>이런 오류 때문에 어떤 이들은 '범용 지능', '보편적' 능력으로 풀이되는 지능의 존재를 상상하게 된다. 하지만 두 가지 문제점이 있다.
<ul>
<li>지능은 다차원적이라는 점이다.</li>
<li>지능형 에이전트의 행동은 다양한 범주의 상황에서 효과적일 것이 가대되는 만큼, 범용적이거나 강건하다는 특성이 지능형 에이전트의 정의 그 자체에 포함된다는 점이다.</li>
</ul>
</li>
<li>동물이나 기계 모드를 통틀어 특정 작업에서 인간을 능갛는 초인간적 지능은 많이 발견할 수 있다. 하지만 모든 작업에서 초인간적인 지능은 찾아볼 수 없을 수도 있다.</li>
<li>인간이 만들어낸 지능적 물체에 기대해야 할 것은 인간에 대한 영향과는 무관하게, 단순한 목표를 끈기 있게 추구하고, 인간이 방해하더라도 그에 적응하면서, 경험을 통해 학습하고 수행능력을 향상하는 능력이다.</li>
</ul>
<h3>코페르니쿠스적 전환</h3>
<p>대부분의 생명체는 어떤 형태로든 자율적이면서 목적 지향적인 행동을 보여주며, 생득적이 ㄴ목표와 감각 정보를 기반으로 정보에 입각한 결정을 계속해 내린다.</p>
<ul>
<li>필자는 이 우주가 지능적 주체로 가득 차 있다고 합리적으로 확신한다.</li>
<li>인간이 모든 지능적 주체의 모델 이라는 생각에서 벗어나야 한다.</li>
<li>이런 전환을 통해 자유롭게 사고할 수 있고, 인간이 만든 피조물에 기대하는 바를 완전히 새롭게 재설정할 수 있다.</li>
<li>그 무엇보다도, 이러한 생각의 전환이야말로 우리가 그들과 공존하려면 필수적이다.</li>
</ul>
<h2>2장. 치트키</h2>
<p>사물을 지능적으로 만드는 파악하기 어려운 특성을 정의하고 구현하고자, 연구자들은 다양한 수단으로 '목적 지향적 행동'을 연구하고 생성하는 방법에 정착해다.</p>
<ul>
<li>특정 환경에서 통계적 패턴을 활용하여 새롭고 다양한 상황에서 효과적으로 학습하고 행동하는 수많은 '자율 에이전트'가 개발되었다.</li>
<li>명시적 행동 규칙 대신 대량의 훈련 데이터가 필요해졌다.</li>
<li>일종의 '치트키'는 머신러닝을 기반으로 새로운 기대치, 새로운 도구, 새로운 성공 사례들을 통합하는 인공지는 분야의 새로운 패러다임을 만들어냈다.</li>
<li>인공지능의 새로운 언어는 논리와 형식적 추론의 언어가 아닌, 확률과 수학적 최적화의 언어이다.</li>
</ul>
<h3>언어전문가를 해고하라</h3>
<p>대부분의 연구자는 문법적 규칙을 활용하여 어떤 문장이나 자막이나 번역으로 '쓸 만한지'를 정의하는 방식이였다.</p>
<ul>
<li>문제는 각 규칙마다 또 다른 규칙이 따라오고, 예외도 많았다.</li>
<li>규칙을 아무리 적용해도 충분한 수준에는 절대 도달할 수 없을 듯 보였고, 문법은 점점 거대해졌지만 그 결과물은 엉망이였다.</li>
</ul>
<p>프레더릭 옐리네크는 IBM 연속 음성 인식 (Continuous speech recognition)팀에 합류했다.</p>
<ul>
<li>그의 접근 방식은 이미 작업한 결과물을 개선하여 점진적으로 발전시키는 식이 아니었다.</li>
<li>정보 이론 분야에서 쌓은 경험 덕문에 그는 '노이즈(noise)'로 오염된 메시지 재구축의 전문가였다.</li>
<li>몯느 자연어에는 매우 안정적인 통계적 패턴이 있다.</li>
<li>옐리네크는 통계적 규칙성을 사용해 주어진 문장이 '자연스러운' 설정값 상태에서 발생할 확률을 근사치로 측정하는 방법을 개발했다.</li>
<li>문법을 배제하는 대신 데이터에서 추정한 수백만 개의 매개변수를 이용한다는 아이디어는 당시의 상식을 거스르는 것이였다.</li>
</ul>
<p>언어의 통계적 패턴을 이용하는 방식은 충분히 범용적이였다.</p>
<ul>
<li>문제는 이러한 '패턴'을 학습하려면 수배만 개의 가능한 단어 조합 확률을 나열한 거대한 표로 나타내야 하는데, 이것이 컴퓨터가 잘하는 일이자 목적이었다.</li>
<li>언어 이외의 영역에서도 통계적 패턴으로 발전할 수 있고, 이 패턴은 대량의 데이터에서 확보할 수 있다.</li>
</ul>
<h3>고전적 인공지능</h3>
<p>인공지능(AI)라는 용어는 존매카시가 제안했다.</p>
<ul>
<li>이 문구가 처음 등장한 문서는 1956년 '다트머스 회의'로, 기계 지능이라는 새로운 분야를 연구하는 연구자가 모인 행사였다.</li>
<li>제안에는 지능의 모든 특징은 기계에서 구현될 수 있을 만큰 정확하게 표현하기 쉽다는 가설이 담겨 있다.
<ul>
<li>기존에는 발사체 탄도를 계산하려면 역학을 알아야 하고,</li>
<li>비행기 날개를 설계하려면 공기역학을 이해해야 한다.</li>
<li>전통적으로 공학은 이런 식으로 진행되었고, 초기 언어 처리 컴퓨터를 설계할 때 언어전문가들이 채용된 이유이기도 하다.</li>
</ul>
</li>
<li>직관적 접근 방식은 그럴듯 햇지만, 시각이나 언어 같은 단순한 현상에 대해 인간이 실제로 아는게 얼마나 없는지 잘 보여준다.</li>
</ul>
<p>1980년대 '5세대 컴퓨터 시스템'의 투자에서, '지식 기반' 방식과 '논리적 추론' 규칙을 통해 '전문가 시스템'이라는 제품이 개발되었다.</p>
<ul>
<li>각 전문 분야에 관한 지식은 인간이 읽을 수 있게 표시되었고 논리를 사용해 처리되었다.</li>
<li>전문가 시스템을 미국에서 널리 알린 사람은 에드 파이겐바움 이였다.
<ul>
<li>지능형 기계는 현실에서의 선언적 지식이 없다면 작동할 수 없다는 믿음을 갖은 컴퓨터 과학자다.</li>
<li>인간이 읽을 수 있는 사실과 규칙에 의존하는 이 방법을 인공지능의 '지식 기반 패러다임' 이라고 불렀고, 또는 '기호식 인공지능'이라고 부르기도 했다.</li>
<li>1985년 철학자 존 하우겔란은 '고전적 인공지능(Good Old-Fashioned AI:GOFAI)'라 했다.</li>
<li>전문가 시스템에 대한 과잉 기대와 투자는 기술적 한계로 대부분의 기대에 미치지 못했다.</li>
</ul>
</li>
<li>규칙을 생성할 '지식 엔지니어(knowledge engineer)'라는 직무도 등작했다.</li>
<li>복잡한 규칙과 예외들을 생성했고, 결국 전문가 시스템은 현실 세계의 불확실성을 다루기에는 취약하고 유지 관리에 많은 비용이 든다는 사실이 밝혀졌다.</li>
<li>1988년 3월 '뉴욕 타임스'에 '인공지능의 실패'라는 기사에서 인공지능에 대한 투자에 부정적인 의견을 묘사했다.</li>
</ul>
<h3>주기 순환: 호황, 거품붕괴, 겨울</h3>
<p>인공지능 분야에서의 겨울은 냉전시대의 '핵 겨울'에서 유래했다. 리스프 머신 시장 붕괴이후가 '제2차 인공지능 겨울'로 알려져 있다.</p>
<ul>
<li>저예산 환경에서도 성공할 수 있는 새로운 이론적 아이디어를 위한 시장이 창출되는 시기다.</li>
<li>이 시기에 '머신러닝' 이라는 개념의 관심이 높아졌다. 이후 신경망 훈련,  데이터 분석용 의사 결정 트리 도출, 사례를 통한 논리 규칙을 학습하는 새로운 방법들이 개발되었고, 이는 전문가 시스템의 단점을 보완하려는 시도였다.</li>
</ul>
<h3>시애틀에서의 갈등</h3>
<blockquote>
<p>친애하는 아마봇. 설령 당신에게 우리의 증오를 받아낼 마음이 존재한다 한들, 고마울 일은 전혀 없네요. 이조잡하게 땜질한 깡통 같으니. 결국에는 살과 피로 이루어진 멋진 엉터리가 승리할 겁니다.</p>
</blockquote>
<p>익명의 광고가 '시애틀 위클리' 주간지에 게재되었던 1999년 당시 아마존의 인간 에이터 업무를 대체하는 아마봇을 저격했다.</p>
<ul>
<li>아마존은 고품질 리뷰를 작성했지만 급격한 성장 속도를 따라잡기 어려웠다.</li>
<li>'고객 한 명당 하나의 쇼핑몰'이라는 창업자 제프 베이조스의 아이디어를 따르면서 개인화에 집중하였다.</li>
<li>추천 에이전트는 보통 특정 사용자가 설문을 작성하고 '유사한 고객'이 구매했던 책을 추천해주는 '북매처(bookmatcher)' 기술에 기반을 두었다.</li>
<li>1998년 개인화 팀의 연구원 게리린든과 동료는 새로운 알고리즘을 개발했다.
<ul>
<li>유사한 사용자를 프로파일링하여 찾는 대신 사용자들의 과거 거래 데이터베이스를 분석함으로써 유사한 제품을 찾을 수 있다고 생각했다.</li>
<li>'상품 기반 협업 필터링'이라고 부른다. 웹 시대 이전에 데이브 골드버그가 원치 않는 이메일을 필터링하는 방법을 어떤 사용자들이 그런 이메일에 반응하는지에 고안해낸 것으로, 사용자가 시스템을 사용하는 것만으로도 협력하게 되는 방식을 고안한 것에 대한 찬사의 의미 이다.</li>
<li>이 시스템은 사람들에게 무엇을 원하는지 묻는 대신, 그들을 비롯한 수백만 명의 다른 사람이 실제로 한 행동에 근거하여 작동했다.</li>
<li>결과적으로 인간이 작성한 리뷰를 따르기보다는 개인화된 추천에 따라 더 많은 책을 구입했고, 이 '로봇'의 훌륭한 실적은 그동안의 인간 에디터팀의 운명을 결정지었다.</li>
<li>이러한 에이전트의 행동은 고객 또는 책의 내용에 대해 명시적 규칙이나 이해에 기반하지 않고, 과거의 거래 데이터베이스에서 발견된 통계적 패턴을  이용했다.</li>
</ul>
</li>
<li>아마봇의 핵심 아이디어는 '인간 행동에는 학습하고 이용할 수 있는 신뢰할 만한 패턴이 존재한다'는 것이다.</li>
<li>사용자들에게 질문할 필요가 없어지지만, 한편으로 사용자를 관찰해야 할 필요성이 생긴다.</li>
</ul>
<h3>패러다임 전환</h3>
<p>1990년대 후반 아마존에서 일어난 사건은 웹이 지능적 소프트웨어 에이전트가 상호작용할 수 있는 유용한 환경이 될 수 있음을 보여주었다.</p>
<ul>
<li>사용자 행동에 대한 정보를 수집하고, 정보의 통계적 패턴을 활용하여, 이를 바탕으로 의사 결정을 내리기만 하면 되었다.</li>
<li>새로운 상황에서 효과적인 행동을 취할 수 있는 목표 지향적 행동, 즉 '지능형' 이라고 부를 만한 행동이다.</li>
</ul>
<p>과학과 기술의 역사는 철학자 토머스 쿤이 '패러다임'이라고 불렀던 성공 사례들로 형성된다.</p>
<ul>
<li>과학 분여는 완만하고 지속적인 성장이 아닌, 급격한 가속과 전환에 의해 이루어진다는 사실을 발견했다.</li>
<li>서로 다른 두 가지 '상태'를 발견했는데, '정상과학'과 '패러다임 전환' 상태이다.
<ul>
<li>뉴턴 역학에서 양자역학으로의 전환과 같은 패러다임의 예가 있다.</li>
</ul>
</li>
<li>'정상과학'의 시기에 연구자들은 당시의 패러다임 내에서 성과를 도출하고 다듬지만, 아주 가끔 어떤 일이 발생해 패러다임 자체가 바뀌면, 전체 과학계의 언어와 목표까지 바뀌게 된다.</li>
</ul>
<h3>인공지능 역사에 등작한 세 가지 치트키</h3>
<p>닷컴 버블이 꺼진 시기의 강력한 생존 기업 중 하나는 구글이었다.</p>
<ul>
<li>구글은 이후 '데이터 기반 인공지능'으로 알려진 새로운 패러다임을 이미 통합했다.
<ul>
<li>수십 종의 언어 간 기계 번역, 검색어 자동 완성 및 자동 수정, 으성 검색, 콘텐츠 기반 이미지 검색, 위치 인식 검색, 고도화된 개인화 광고</li>
</ul>
</li>
</ul>
<p>2009년 구글의 한 선임 연구원 그룹은 구글의 사고방식의 선언문이 된 논문을 공개했다. 이론적 모델을 데이터에서 발견한 패턴으로 대체하는 것은 지능형 기계에 도달하는 첫 번째 치트키였다.</p>
<ul>
<li>1960년 유진 위그너가 수학의 힘에 관해 작성한 고전적인 논문의 제목에서 이름을 따온 이 논문의 제목은 '데이터의 비합리적 효율성' 이었다.</li>
<li>지능형 행동에 필요한 정보를 제공하는 데이터의 위력을 칭송하고, 실무에서 이미 상식으로 받아들여진 내용들을 새로운 인공지능의 기본 설계도라 볼 수 있는 코드로 구현했다.</li>
<li>지능형 에이전트의 행동에 필요한 정보를 제공하는 것은 모델이나 규칙이 아니라 데이터여야 한다는 점을 강조하기 위해 다음의 구절을 포함한다.
<ul>
<li>단순한 모델과 대규모 데이터가, 소규모 데이터 기반의 더 정교한 모델보다 우선한다.</li>
<li>우리는 매우 고상한 이론을 만들어내는 것이 목표인 양 행동하는 걸 멈추고, 대신 복잡성을 받아들이고 우리가 가진 최고의 아군인 '데이터의 비하리적 효율성'을 활용해야 한다.</li>
</ul>
</li>
</ul>
<p>두 번째 치트키는 아마존에서 어떤 책들이 서로 유사한지 발견하기 위해 판매 데이터 세트의 용도를 재정의할 때 사용했던 방법으로, 인공지능에 이론적 모델과 고비용 데이터를 한꺼번에 대체했다.</p>
<ul>
<li>이론을 데이터로 대체하는 이 같은 방법의 한가지 분명한 문제는 필요한 데이터를 찾아내는 것인데, 이론을 수립하는 것만틈이나 어렵고 비용이 많이드는 과제가 될 수 있다.</li>
<li>논문의 저자는 해답으로, 이미 '야생'에 존재하는 데이터, 즉 다른 프로세스의 부산물로 생성된 데이터를 사용하는 것이였다.</li>
<li>"우리가 자동화하고자 하는 입출력 조작의 대규모 훈련 세트는 야생에서 구할 수 있다. ... 웹 규모의 학습에서 얻을 수 있었던 첫 번째 교훈은, 실제로 구할 수 없는 주석이 달린 데이터를 찾으려 하기보다는 차라리 구할 수 있는 데이터를 사용하는게 낫다는 것이다."</li>
</ul>
<p>세 번째 치트키는 다음과 같다.</p>
<ul>
<li>" 우리는 사용자가 어떤 검색 결과가 좋았고 어떤 검색 결과가 별로였는지에 관한 명시적 피드백을 우리에게 제공할 필요가 없도록 설계 결정을 내렸다. 대신 그냥 사람들이 어떤 검색 결과를 따르는지를 기록한다. 사용자는 각 검색 결과의 자세한 초록을 볼 수 있기 때문에, 각 사용자가 클릭한 검색 결과는 의미 있을 가능성이 높다고 믿는다."</li>
<li>"사용자가 어던 문서에 대해 답잗ㅇ을 보냈다는 사실과 같은, 사용자들의 암묵적 피드백 역시 활용할 수 있다."</li>
</ul>
<h3>새로운 인공지능으로</h3>
<p>새로운 세대의 연구자들은 데이터를 쉽게 구할 수 있는 세상, '통계적 머신러닝'이 지능형 행동 또는 최소한 한 가지 특정 유형의 행동을 만들어내는 선택지 중 하나가 된 세상에서 성장했다.</p>
<h3>바프닉의 법칙과 새로운 사고방식</h3>
<p>1990년 통계학자인 블라디미르 바프닉의 접근 방식은 이전의 방식(알고리즘이 데이터와 그 규칙성을 생성하는 숨겨진 메커니즘을 얼마나 잘 식별할 수 있는지)에 관해서는 묻지 않고 훈련된 데이터 세트에서 어떤 예측 성능을 기대할 수 있는지 묻는다. 주어진 데이터 세트에서 어떤 규칙성이 발견된다고 가정할 때, 그러한 규칙성이 미래의 데이터 세트에도 존재할 것이라고 언제 신뢰할 수 있을까?<br>
그의 접근 방식은 미래의 고나측 상태를 예측하는 상대적으로 더 단순한 작업에 도움이 되는, '데이터 뒤에 숨겨진 메커니즘을 식별'한다는 전통적인 과제를 포기한 것이였다.</p>
<blockquote>
<p>문제를 풀고자 할 때 준간 단계로 더 일반적인 문제를 풀려고 해서는 안됩니다. 더 일반적인 문제가 아니라, 정말 필요한 문제를 해결하세요.</p>
</blockquote>
<h3>새로운 레시피</h3>
<p>인공지능의 언어는 더 이상 논리적 추론이 아니라 통계 및 최적화 이론의 언어가 되었으며, 주요 관심사는 필요한 데이터를 조달하는 것이 되었다.</p>
<ul>
<li>
<p>머신러닝은 이 분야 전체의 핵심 학문이 되었고, 훈련 데이터는 가장 귀중한 자원이 되었으며, 성능 측정은 강박적 집착의 대상이 되었다.</p>
</li>
<li>
<p>목표는 어떤 진리를 발견하는 것이 아니라 '아마도 대략적으로 정확할' 행동을 생성해내는 것이였다.</p>
</li>
<li>
<p>문제를 해결할 때 중간 단계로 더 일반적인 문제를 풀려고 해서는 안된다.(바프닉)</p>
</li>
<li>
<p>언어 전문가를 해고하라(옐리네크)</p>
</li>
<li>
<p>데이터를 따라가라 (할레비 외 다수)</p>
</li>
<li>
<p>더 나은 알고리즘보다 더 많은 데이터가 중요하다. (에릭 브릴, 옐리네크 인용)</p>
</li>
<li>
<p>단순한 모델과 대규모 데이터가, 소규모 데이터 기반의 더 정교한 모델을 이긴다. (할레비 외)</p>
</li>
<li>
<p>훈련 데이터를 많이 확보했다면 암기가 좋은 정책이다. (할레비 외)</p>
</li>
<li>
<p>실제로 구할 수 없는 주석이 달린 데이터를 기대하기보다는 차라리 구할 수 잇는 야생의 데이터를 사용하는 게 낫다. (할레미 외)</p>
</li>
<li>
<p>사용자가 명시적 피드백을 제공하도록 요구하기보다는, 그저 사람들이 어떤 검색 결과를 따르는지를 기록하라 (보얀 외 다수)</p>
</li>
<li>
<p>어떤 사용자가 문서에 답장을 보냈다는 사실과 같은 사용자들의 암묵적 피드백도 활용할 수 있다. (골드버그)</p>
</li>
</ul>
<p>바프닉과 옐리네크는 동일한 원칙을 우연히 발견했는데, 그 핵심은 '조사 대상이 되는 시스템 자체를 이해하기 보다는, 그 시스템이 앞으로 무슨 일을 할지 예측하기만 해도 충분할 수 있다'로 요약할 수 있다.</p>
<ul>
<li>텍스트에서 다음 단어를 예측하는 일은 문장 하나를 이해하는 일보다 훨씬 쉬울 뿐 아니라, 대부분의 경우 이것만으로 충분하다.</li>
</ul>
<p>생물학적 진화에서는 표현형 행동만을 보고 선택하기 때문에, 생물학적 지능이란 '신의 생각을 이해' 하기 위한 능력 보다는 '잘 행동'하도록 돕는 능력에 의해 형성되었다고 생각해야 하지 않을까?</p>
<h2>3장. 세계의 질서를 찾아서</h2>
<p>환경에서 규칙성을 감지하는 것은 에이전트가 자기 행동 결과를 예측(pradict)하는데 필요한 단계이므로, 규칙적인 환경은 지능형 행동의 전제 조건이다. 하지만 패턴 인식을 위한 모든 방법에는 중요한 한계 사항들이 있기 때문에, 지능형 에이전트에서 기대할 수 있는 바에도 한계가 있다.</p>
<h3>지능, 패턴 그리고 질서 있는 세계</h3>
<p>바다 민달팽이 군소는 아가미 접촉 시 움츠리는 반사행동을 보이는데, 이것은 포식자에 대한 반사 작용이다. 하지만 반복 접촉 시, 반사작용이 서서히 멈추는 행동을 보인다. 하지만 이런 경험에 근거하는 '믿음'이 정당화 될 수 있을까?<br>
비둘기는 훨씬 더 추상적인 연관성을 학습할 수 있다. 예를들면 특정 행동을 취하면 먹이를 주는 방식이다. 특정 행동을 취한 후 보상을 기대하는 것을 정당화 하는 생각은 군소와 마찬가지로 과도한 비약적 믿음에 기반한 것이었다.<br>
스코틀랜드의 사상가 데이비드 흄은 1739년에 이것을 미해결 과제로 분류하고 '귀납의 문제(the problem of induction)'라는 명칙을 붙였다. 그의 결론은 다른 가정을 추가하지 않는 한, 군소의 경험에 근거하는 기대에 대한 논리적 정당화 방법은 존재하지 않으며, 따라서 결국 부당하다는 것이다.<br>
이후로 철학자들은 해당 과제에 대해 끊임없이 논쟁을 벌여왔으며, 1912년 버트런드 러셀은 다은과 같이 설명한다.</p>
<blockquote>
<p>사육되는 가축들은 밥을 주는 사람을 보면 먹이를 기대한다. 우리는 이러한 획일성에 대한 어설픈 기대가 오해로 이어지기 쉽다는 사실을 알고 있다. 매일 닭에게 먹이를 주던 사람이 마침내 닭의 목을 비트는 행동은 자연의 획일성에 대한 더 세심한 관점이 그 닭에게 도움이 되었을 것임을 보여준다.</p>
</blockquote>
<p>지능형 기계를 만들 때 직면하는 두가지 질문은</p>
<ol>
<li>지능형 기계는 단순 암기를 넘어서 새로운 상황에서의 일반화를 할 수 있을 것으로 기대되는데, 과거의 관찰에서 발견한 패턴을 언제 신뢰할 수 있는지를 어떻게 알 수 있을까?</li>
<li>그리고 지능형 기계는 유용한 패턴을 놓친 상태는 아닌지를 어떻게 알 수 있을까?</li>
</ol>
<p>철학자는 이질문을 다음과 같이 바꿀 수 있다. → 어째서 환경은 반드시 그 규칙성을 파악할 수 있고, 내일도 그 규칙성이 존재할 것이라고 믿을 수 있을 만큼 다순하고 안정적이여야만 할까? 이러한 환경에서만 에이전트가 미래를 예상할 수 있고 따라서 합리적으로 행동할 수 있기 때문이다.</p>
<p>과거의 관찰을 지식과 예측으로 변환할 수 있는 기계를 구축하는 과학인 머신러닝은 수 세기 전 과학철학자들이 제기했던 것과 동일한 질문에 맞닥뜨린다.</p>
<ol>
<li>인간이 만든 기계가 생성해내는 지식을 인간이 어떻게 신뢰할 수 있을까?</li>
<li>인간으로서 우리는 그 기계를 이해할 수 있으리라 예상해야 할까?</li>
<li>언젠가는 인간이 군소의 입장이 되어, 비둘기에게는 완벽하게 명백한 것들을 이해할 수 없는 상황에 부닥칠 수도 있을까?</li>
</ol>
<p>머신러닝은 데이터에서 패턴을 확인하는 기수리며, 믿을만한 예측을 하기 위해 우연에 속지 않도록 주의하면서 신뢰할 수 있는 관계성을 추출한다. 또한 다른 한계는 기계가 찾아낸 패턴을 인간이 해석하지 못할 수 도 있다는 점이다.</p>
<h3>지식의 한계</h3>
<p>사람이나 기계가 일련의 관찰에서 질서를 찾고자 할 때는 다음과 같은 질문을 던질 수 있다.</p>
<ol>
<li>모든 데이터 세트에서 어떤 패턴을 확인하는 일반적이 방법이 있는가?</li>
<li>데이터에서 발견한 관계성이 우연의 결과가 아니라는 것을 어떻게 신뢰할 수 있는가?</li>
<li>기계가 발견한 관계성을 들여다봄으로써 무엇을 알아낼 수 있는가?</li>
</ol>
<h4>공짜 점심은 없다.</h4>
<p>많은 알고리즘은 입력값이 무엇이든간에 의도한 해답을 찾을 수 있도록 되어있다. 하나의 범용 알고리즘이 데이터의 모든 패턴을 확인할 수 있을 것이라는 기대를 할 수는 있지만, 일반적인 상식으로 이런 것은 존재할 수 없다. 데이터 패턴을 학습하는 알고리즘이라면 항상 그 패턴에서 벗어나는 듯한 무작위 데이터를 만나기 마련인데, 그 데이터는 다른 알고리즘으로 학습할 수 있다.'</p>
<h4>우연의 일치</h4>
<p>데이터 세트에서 관계성을 발견했다면 동일한 출처의 다른 데이터 세트에도 그러한 관계성이 있음을 신뢰할 수 잇는지 확인할 필요가 있다. 우연적 결과로 설명할 수 있는 패턴은 '유의미하지 않은' 것으로 간주외어야 하는데, 통계학, 머신러닝, 과학적 방법 모두 이러한 위험을 연구하고 방지할 엄격한 방식을 고안해냈다. 최근의 지능형 기계를 훈련할 때 사용하는 소프트웨어에는 내장되어있는 이런 점은, 인간 작업자가 원칙을 이해하지 못한 경우 데이터에서 의미 없는 관계 형성의 환상을 내포한 기계가 나올 수 있고, 이것은 우리가 판독할 수 없는 거대한 모델이 생성되는 경우 큰 위협이 될 수 있다.</p>
<h4>외계 구조</h4>
<p>세상을 나누고 기술하는 '객관적인' 방법은 없다. 보르헤스는 에세이에서 '임의적이지 않은 우주의 분류는 존재하지 않는다'라고 강조한다. 또한 두 인공지능 에이전트가 동일한 이론적 추상화에 도달하리라 기대할 근거도 없고, 인간의 언어로 그 이유를 이해하기란 불가능할 수도 있다.</p>
<h3>패턴과 인지 편향</h3>
<p>허위 패턴이 발견되는 사례를 처리하기 어려운 또 다른 이유는 인간이 본능적으로 패턴을 찾으려는 경향이 있기 때문이다. 무작위 입력에 대해서도 해석하려고 하는 인간의 경향을 가리켜 파레이돌리아(pareidolia)라고 하는데, 바위, 달, 토스트 등에서 사람의 얼굴을 보기도 하는 현상이다. 관련성이 없는 대상들 사이에서 의미 있는 연결성을 인식하는 이러한 경향을 더 추상적으로 부르는 상태를 아포페니아(apophenia)라고 한다. 아포페니아는 완전히 독립적이 ㄴ사건 사이에서도 인과 관계를 발견할 수 있는 능력이다.</p>
<h3>기계가 할수 있는 것</h3>
<p>머신러닝 연구자들은 데이터 뒤에 숨겨진 메커니즘을 '식별'하겠다는 야심을 상당 부분 포기하는 대신, 유용한 예측이라는 더 쉬운 목표로 돌아섰다. 이러한 방식으로 그들은 현대 철학에 한 걸음 더 가까이 다가갔지만, 동시에 인간은 인간이 만든 기계와 연관성을 맺을 가능성에서 한 걸음 더 멀어졌다. 인간은 이미 자신들이 이해할 수 없는 패턴을 기계가 발견해내기를 기대하고 있으며, 특정 영역에서는 우리보다 더 나은 예측을 할 것이라 기대해야 한다. 이것이 오늘날의 현실이다.</p>
<p>오픈AI와 그 이전의 구글의 람다같은 경우 수많은 텍스트로 훈련되었고 상당수의 매개변수를 포함한다. 이런 모델의 규모가 유의미한 검토가 가능할 만큼 작다고 가정해도, 그 모델의 내부 추상화 방식이 인간이 사용하는 것과 일치하리라 기대할 근거는 없다.</p>
<h3>인간의 피조물 이해하기</h3>
<p>목표 지향적인 행동에는 자기 행동의 결과를 예측하는 능력이 필요하며, 적응 또는 학습은 이를 달성할 수 있는 신뢰도 높은 방법이다. 이는 지능형 에이전트를 만드는 통상적인 방법이기도 하다. 에이전트를 방대한 양의 데이터로 훈련하고 유용한 패턴을 감지하게 하는 것이다. 이런 에이전트가 항상 제대로 작동하 것이라고 믿을 수 없기 때문에 만들 때 암묵적으로 내리는 가정의 본질에 따라 좌우하게 된다.</p>
<p>인공지능 산업에는 다행스러운 일이지만, 인간의 행동에는 놀라울 만큼 질서가 있는 것처럼 보인다.</p>
<p>최근의 인공지능 모델은 유용한 행동을 만들어 낼 수 있지만, 사람은 이 모델에서 실제로 어떠한 현상이 발생하고 있는지에 관해서는 전혀 알지 못한다. 따라서 우리에게는 우리의 피조물인 기계의 결정을 해석할 방법이 없을 수도 있는데, 만약 있었다면 기계가 길을 잃지는 않았는지 확인할 때 편리했을 것이다.</p>
<p>인간의 가치와 규범을 기계에 가르칠 방법을 생각할 때는 이 점을 잊지 말아야 한다. 우리가 하려는 일은 민달팽이나 영리한 비둘기에게 설명하려는 시도나 마찬가지일 수 있다. 철학자인 루트비히 비트겐슈타인은 다음과 같이 말한 바 있다.</p>
<blockquote>
<p>사자가 말을 할 수 있다고 해도, 우리는 그 말을 이해하지 못할 것이다.</p>
</blockquote>
<h2>4장. 러브레이스는 틀렸다.</h2>
<blockquote>
<p>현 기계는 경험을 통해 자율적으로 학습할 수 있는 능력을 갖춘 덕분에, 인간이 할 수 없거나 심지어 이해할 수조차 없는 일들을 해낼 수 있다. 따라서 기계는 이론이 존재하지 않는 영역에서 작동하기에 적합하며, 바로 이러한 점이 전통적인 기존 방식에 비해 강점을 가지는 부분이다.</p>
</blockquote>
<h3>백작부인와 기계 이야기: 주석 G에서 37번째 수까지</h3>
<p>1843년 런던, 에이다 러브레이스 잭작부인은 루이지 메나브레아가 작성한 기술 논문(찰스 배비지의 제안에 기초한)을 프랑스어에서 영어로 번역하였고, 자신의 아이디어도 덧붙이기로 했다.</p>
<ul>
<li>찰스 배비지는 빅토리아 시대의 전형적인 발명가이자 다재다능한 사람이였다. 우리에게는 기계식 계산기를 발명한 인물로 알려져 있고, 범용 컴퓨터인 '해석 기관(analytical engine)을 발명한 사람이기도 했다.</li>
<li>"해석 기관"이 러브레이스의 논문 주제였다. 러브레이스는 연산 기계의 본질과 잠재력에 대해 책에 덧붙인 주석으로 인해, 이 기계가 온전히 구현되지 않았지만 그녀는 오늘날 최초의 컴퓨터 프로그래머로 기억된다.</li>
<li>주석 G에서 다음과 같이 언급한다.
<ul>
<li>"해석 기관은 어떤 것을 독창적으로 만들어낼 수 있다고 자처하지 않는다. 다만 우리가 그렇게 하도록 명령할 방법을 아는 그 어떤 일이든 수행할 수 있다."</li>
<li>이 주석으로 인해 컴퓨터가 발명된 이후 수십년동안, 컴퓨터는 인간이 프로그래밍한 작업만 수행할 수 있다는 주장이 반복되면서 잠재적인 위험에 대해 회피했다.</li>
<li>하지만 이 주장이 틀렸다(책에서 주장한다.)</li>
</ul>
</li>
</ul>
<p>2016년 서울, 구글의 자회사인 딥마인드는 알파고라는 알고리즘으로 바둑에 도전하였다.</p>
<ul>
<li>바둑은 체스게임처럼 무한 대입법을 쓰기에는 '경우의 수'가 너무 많았다. 따라서 '평가 기능'으로 처리하였다.</li>
<li>수백만 건의 대국을 스스로 치르면서 그때마다 평가 기능을 조정하여 경험을 통해 학습했다.</li>
<li>2번째 대국의 37수는 알파고의 결정이였지만, 아무도 그 목적이 무엇인지 알 수 없었고, 결국 목적이 있었던 수로 밝혀졌다.(아무도 해석하지 못하는 수를 두었다)</li>
<li>알파고의 지식은 제작자에서 온것이 아니라 3천만번의 기록된 대국을 관찰하고 5천만 번 이상의 자체 대국을 둠으로써 얻은 결과다.</li>
<li>러브레이스의 '우리가 그렇게 하도록 명령할 방법을 아는' 것이 아닌 일도 수행할 수 있게 되었다.</li>
</ul>
<h3>학습하는 기계</h3>
<p>'학습'은 새로운 상황에서도 일반화할 수 있도록 사례에서 추론하는 능력이다. '머신러닝'이라고 이야기하는 것은 이미 기계가 인간보다 뛰어난 영역인 단순 데이터 암기 같은 작업을 고려하지 않는다는 것이다. 명시적인 프로그래밍 없이도 새로운 기술을 습득하거나, 기존 기술을 개선할 수 있는 상황에 대한 것이다.</p>
<ul>
<li>현재 사용되는 모든 지능형 에이전트는 어떤 형태로든 머신러닝을 기반으로 한다.
<ul>
<li>체스 게임에서 승리하고, 자전거를 타고, 동영상을 추천하는 방식이다.</li>
</ul>
</li>
<li>요리와 비슷하다
<ul>
<li>레시피는 재료 목록과 일련의 조리법을 포함하고, 세부 정보(분량, 온도, 시간)이 필요하다.</li>
<li>조정할 수 있는 변수를 '매개변수'로 한다. 조율하는 작업을 '매개변수 튜닝(조정)'이라고 표현한다.</li>
<li>'조정'은 기계가 학습하는 표준적인 방법이고 피드백은 최적의 값을 발생시키기 위한 기준으로 활용된다.</li>
</ul>
</li>
<li>에이전트의 행동을 자극-반응 쌍으로 전부 열거하기 보다는, 조정 가능한 매개변수에 따라 달라지는 계산의 형태로 이런 대응 쌍을 암묵적으로 출력하면, 그 결과는 기계 스스로의 행동이 되며, 제작자도 상상하지 못했던 독창적인 행동을 구현할 가능성도 있다.</li>
</ul>
<p>러브레이스의 주석 G는 틀렸는가? 아니면 그저 '우리가 그렇게 하도록 명령할 방법을 아는일'을 하는 것에 불과할까? 철학자들이 고민해볼 만한 문제일 수 있다. 하지만 수배만 개의 상호작용하는 매개변수가 있고, 그 결과 행동에 미치는 영향을 인간이 예측할 수 없다면, 기계는 인간에게 생소한 무언가를 학습하고 있는 것이다.</p>
<h3>학습하는 기계에 관한 아이디어</h3>
<p>알파고가 등장하기 이전에, 아서 새뮤얼은 체커 인공지능 프로그램을 만들었다. 이 알고리즘의 기술적 세부 사항은 "체커 게임을 이용한 머신러닝에 대한 연구"라는 논문으로 공개되었다.</p>
<ul>
<li>논문에서 새뮤얼은 우리가 무엇을 원하는지 정확히 알고 있지만 이를 구하는 수학적 규칙이 없으므로, 기계로 구현하려면 대대적인 수동 조정이 필요한 종류의 컴퓨터 프로그램들이 있다는 사실을 관찰했다.</li>
<li>해결책을 자동화하는 문제에 대해 다음과 같이 기술했다.
<ul>
<li>"문제를 해결하는 방법을 지정할 때는 세밀하고 정확한 세부 사항까지 명시해야 하는데, 이는 시간과 비용이 많이 되는 절차다 컴퓨터가 경험을 통해 학습하도록 프로그래밍 하면 결국에는 이러한 세부사항을 프로그래밍 하는 노력에 대부분을 절약할 수 있다"</li>
</ul>
</li>
<li>기계는 주어진 게임 설정에서 어떤 수의 실현 가능한 결과가 무엇인지 확인하기 위해 앞을 내다 봐야 하지만 결국 어떤 "미래"를 선호 해야 할지 결정할 방법이 필요하다.￼</li>
<li>새뮤얼의 주요 공헌은 매개 변수들을 조정하여 승리 확률을 높이는 방식을 보여주었다.</li>
</ul>
<h3>초인간: 알파고와 그 제국</h3>
<p>새뮤얼의 실험 이후, 하드웨어의 기하급수적 발전와 과대 광고 주기와 극적인 방향 전환을 거치면서 새로운 인공지능 방법론이 발견되고, 개발되고, 폐기되었으며, 재발견되었다.</p>
<h3>창조자를 능가하는 피조물</h3>
<p>프랑스 철학자 클로드 레비스트로스는 "과학에서 중요한 부분은 올바른 질문을 던지는 것이지 정답을 제시하는 것이 아니다."라고 했다.</p>
<h2>5. 의도를 벗어난 행동</h2>
<blockquote>
<p>야생의 데이터로 훈련한 인공지능 에이전트가 문제 없이 기대한 바 대로 동작한다고 믿을 수 있을까? 우리가 만든 기계가 수행하도록 지시받은 일을 근본적인 사회 규범을 위반하지 않게 하려면 어떻게 해야 할까?</p>
</blockquote>
<h3>원숭이 발</h3>
<blockquote>
<p>'원숭이 발' 이야기는 원숭이 발에 소원을 빌면 이루어진다는 미신에, 누군가 2백 파운드를 얻기를 원했고, 이후 아들의 죽음으로 인한 보상으로 2백 파운드가 생긴다는 이야기</p>
</blockquote>
<p>사이버네틱스의 창시자인 노버트 위너는 1902년 윌리엄 위마크 제이콥스가 쓴 '원숭이 발' 이야기를 좋아했다. 그리고 1950년 집필한 예언적 저서 '인간의 인간적 활용'에서 지능형 기계가 가져올 수 있는 위험을 설명하려는 목적으로 이 이야기를 소개한다. 이 책에서 '원숭이 발'이란 자기 행동으로 인해 발생할 수 있는 피해에 무관심하며, '문자 그대로'의 방식으로 주어진 목표달성을 추구하는 장치를 나타낸다.</p>
<h3>개별 위험 평가의 예</h3>
<p>지난 2000년부터 인공지능이 발전할 수 있었던 이유는 머신러닝 알고리즘과 인간 행동의 표본이 있었기에 가능했다. 개별 위험 평가 산업(보험, 대출, 채용, 등)에서는 예측할 수 있는 능력을 중요하게 여긴다. 하지만 개별 위험 평가는 '원숭이 발' 같은 상황이 벌어질 가능성이 가장 높기도 하다. 예측을 수행하는 것은 필요한 작업의 일부일 뿐이며, 표준화하기는 어렵지만 법과 양심에 의해 지킬 것이 요구되는 상당한 수준의 사회적 규범을 존중하면서 작업해야 하기 때문이다.</p>
<h3>규제 영역과 보호받는 특성</h3>
<p>개별 위험 평가가 민감한 영역인 이유는 기회의 접근에 대한 결정을 내리고 대우의 관점에서 규제를 받기 때문이다. 차별을 막으려는 대부분의 국가의 법에 기반했을 때, 데이터 기반 치트키가 내세우는 '무엇을 아는지가 중요하지, 그 이유를 아는 건 중요하지 않다'는 적용되기 어렵다. 분석되는 데이터의 상관관계를 모두 학습시키지 않는것은 그 양을 고려한다면 매우 어려운 일이다.</p>
<h3>민감한 정보 유출</h3>
<p>SNS의 통계적인 데이터(좋아요)만을 가지고도 성별, 인종, 종교, 정치관 등을 분류할 수 있고, 이런 디지털 지문은 민감한 정보가 의도치 않게 유출 될 수 있음을 의미한다.</p>
<h3>아슬아슬한 순간, 오발령 경보, 실제 피해</h3>
<p>지능형 알고리즘을 통해 타인의 과거 행동에 기반하여, 대상 개인의 미래 행동을 통계적으로 예측할 수 있는 가능성이 열렸으며, 이를 통해 다양한 의사 결정에 관한 위험성을 추정할 수 있게 되었다.</p>
<ul>
<li>아마존의 이력서 검토용 소프트웨어 : 성별 편향</li>
<li>일부 미국 법원에서 피고인이 상습범이 될 가능성을 평가하는 소프트웨어 : 인종 편향</li>
<li>알고리즘 번역 : 특정 직업의 성별 편향</li>
<li>네델란드 세무서 : 특정 인종을 사기꾼으로 분류하여 수당 신청 거부</li>
</ul>
<h3>현실에서 온 편향</h3>
<p>2017년 수행된 단어의 표현과 편향에 대한 연구에서도, 사용되고 있는 단어(직업 등)에서 성별에 대한 편향이 있다는 결과가 나왔고, 이것은 현실에서의 일반 인구 분포의 고용 통계와 대략 유사했다.</p>
<h3>다시, 원숭이 발</h3>
<p>에이전트를 신뢰할 수 있는 방법(편향되지 않을)을 개발해야 한다. 사이버네틱스의 창시자인 노버트 위너는 1950년 출간한 예언적 저서 "인간의 인간적 활용"에서 '원숭이 발'이라는 개념을 활용해, 주어진 과제를 '문자 그대로'의 방식으로 달성하려 하고 인간이 생각지도 못한(의도하지 않은) 길을 택하여 명령을 따르는 창치를 표현했다.</p>
<blockquote>
<p>현대인은 기계가 내린 결정의 배경에 숨겨진 동기나 원칙에 대해 별다른 질문을 던지지 않고도 그 결정이 뛰어나다는 사실을 받아들일 것이다. 그렇게 함으로써 인간은 조만간 윌리엄 위마크 제이콥스가 쓴 "원숭이 발"에 나온 아버지의 입장에 놓에게 될 것이다. 이 아버지는 2백 파운드를 소원으로 빌었지만, 그 결과는 공장에서 사망한 아들에 대한 위로금으로 제시받은 2백 파운드였다."</p>
</blockquote>
<h2>6장, 마이크로타기팅과 대중 설득</h2>
<h3>함부르크에서의 하루</h3>
<p>2017년 3월 5일 함부르크에서 '온라인 마케팅 록스타' 세미나가 있었고, 알렉산더 닉스는 '매드맨에서 수학맨으로'의 강연을 진행했다. 내용은 데이터 과학과 행동 경제학이 온라인 광고 비즈니스를 어떻게 변혁했는지에 관한 내용이었다. (하지만 세미나 리플렛에는 닉스의 회사인 케임브리지 애널리티카가 '영리한 마이크로타기팅 캠페인'과 '실행 가능한 설득 모델'을 통해 도널드 트럼프의 대선 승리를 어떻게 도왔는지에 관한 이야기를 할것이라 적혀있었다.)<br>
닉스는 세미나에서 행동 심리학, 데이터 과학, 맞춤형 광고 간의 교차점을 설명했고, 발표 3분만에 "우리는 대상의 성격을 구성하는 특성을 탐지하는 도구를 출시했습니다."라고 밝혔다.</p>
<ul>
<li>실험 심리학 분야의 최첨단 방식인 OCEAN 5요인 성격 모델을 사용한다고 했다.
<ul>
<li>Openness (개방성)</li>
<li>Conscientiousness (성실성)</li>
<li>Extraversion (외향성)</li>
<li>Agreeableness (우호성)</li>
<li>Neuroticism (신경질적 성향)</li>
</ul>
</li>
<li>다양한 성격 유형에 따라 메시지를 타기팅 하지 않으면, 매우 다른 세계관을 가진 사람들에게 동일한 메시지를 보내는 결과가 발생할 수 있다고 했다.
<ul>
<li>예1. 성실한 사람은 합리적인 사실 기반의 주장에 설득될 수 있다.</li>
<li>예2. 외향적인 사람에게는 자동차를 구매함으로써 얻게 될 감정을 불러일으키는 언어와 이미지를 사용해야 한다.</li>
</ul>
</li>
<li>2016년 트럼프 후보의 선거 캠페인에서는 유권자의 투표 의도를 추론하고, 미국 전체 성인에게 다른 이슈를 할당했다고 주장했다.
<ul>
<li>데일리 텔레그래프 : 트럼프가 백악관에 입성할 수 있었던 비결을 제공하는 마음 읽기 소프트웨어</li>
<li>월스트리트 저널 : 이 예상 밖을 승리는 심리학적 접근방식에 기반하여 캠페인 타기팅 관고를 보조한 작은 데이터 회사의 쿠데타</li>
</ul>
</li>
</ul>
<p>닉스는 타기팅 광고에 사용된 심리측정 프로필을 수십만 명에 달하는 대규모의 자원자 그룹을 대상으로 온라인 성격 테스트를 보게 했고, 알고리즘이 그들의 성겨적 특성과 해당 사용자들에게 얻을 수 있었던 다른 데이터 간의 관계성을 발견했다고 설명했다.<br>
하지만, 1년뒤 그는 영국 의회에서 이 모든 내용과 그 이상의 것들을 설명해야 했고, 그의 회사는 파산했다.</p>
<p>우릭에게 중요한 문제는</p>
<ul>
<li>개인 정보를 기반으로 지능형 에이전트가 수행하는 개인화된 대규모 마이크로타기팅이 실제로 가능할까?</li>
<li>알고리즘이 실제 서로 다른 유권자들에게 동일한 선택을 하도록 유도하는 최적의 방법을 찾을 수 있을까?</li>
<li>선거 결과에 영향을 줄 만큼 유권자나 소비자의 행동을 크게 움직일 수 있을까?</li>
<li>이러한 방법은 어떻게 작동하며 누가 발명했을까?</li>
</ul>
<h3>함부르크로 가는 길</h3>
<p>알렉산더 닉스가 설명한 아이디어 중 완전히 독창적인 아이디어는 없었다. 이전의 선거 캠페인에서도 개인화된 타기팅을 활용하여 소비자 행동에 관한 상업적 데이터 세트와 연결했고, 이를 사용하여 유권자들을 동질적인 소그룹으로 세분화하는 마이크로타기팅 방식을 사용했다. 심리 통계학적 세분화는 과학자들에게도 잘 알려져 있었다.</p>
<h3>온라인 행동에서 심리측정 정보 얻기</h3>
<p>2013년 미국국립과학원회보는 페이스북의 '좋아요' 표현에 기반하여 사용자의 개인 속성을 추론할 수 있음을 보여주는 논문을 발표했다. 이 연구에서 제기한 질문은, 사용자의 온라인 행동을 기반으로 표준 성격 테스트의 결과를 예측(통계적으로 추측)할 수 있을지 여부였다. 그리고 놀랍게도, 알렉산더 닉스가 언급한 핵심 요소 중 하나인 이 성격 정보는 실제 공개된 온라인 행동에서 유추할 수 있다는 결론이 나왔다.</p>
<h4>심리측정학</h4>
<p>감정, 기술, 적성, 태도, 성향, 신념, 편향 처럼 직접 관찰할 수 없는 특성을 측정하는 학문이다.</p>
<p>행동 차이는 OCEAN으로 설명할 수 있다. 이 다섯가지 요인의 점수는 '실제 그런 성향이 존재하는지 여부'와 관계 없이 과거의 행동으로부터 추론할 수 있으며, 그 결과 미래의 행동을 예측할 수 있다.</p>
<p>| 표현                        | 성향                                                     |<br>
|</p>
]]></content:encoded>
    </item>
    <item>
      <title>Vault KMIP FAQ</title>
      <link>https://docmoa.github.io/04-HashiCorp/06-Vault/01-Information/kmip-faq.html</link>
      <guid>https://docmoa.github.io/04-HashiCorp/06-Vault/01-Information/kmip-faq.html</guid>
      <source url="https://docmoa.github.io/rss.xml">Vault KMIP FAQ</source>
      <description>Vault KMIP 주요 질문</description>
      <pubDate>Thu, 15 Feb 2024 06:44:32 GMT</pubDate>
      <content:encoded><![CDATA[
<figure><img src="https://raw.githubusercontent.com/Great-Stone/images/master/picgo/20240215150300.png" alt="KMIP 적용 흐름도" tabindex="0" loading="lazy"><figcaption>KMIP 적용 흐름도</figcaption></figure>
<h2>Client 인증서의 유효 기간</h2>
<p>기본 설정시 1,209,600초(2주)의 유효 기간을 갖게 되며, 설정에 따라 긴 유효시간의 적용이 가능합니다. (옵션 : <code>deault_tls_client_ttl</code>)<br>
설정은 상기 도식화한 절차 중 "2. kmip 기본 config" 단계에 적용 가능하며. 이는 <code>KMIP 적용 흐름도</code>의 "4. kmip scope, role 정의" 단계에서 override 할 수 있습니다.</p>
<div class="language-bash" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="line"><span class="token comment"># 예시 - 1년의 유효기간을 설정</span></span>
<span class="line">vault <span class="token function">write</span> kmip/config <span class="token punctuation">\</span></span>
<span class="line">  <span class="token assign-left variable">listen_addrs</span><span class="token operator">=</span><span class="token number">0.0</span>.0.0:5696 <span class="token punctuation">\</span></span>
<span class="line">  <span class="token assign-left variable">tls_ca_key_type</span><span class="token operator">=</span><span class="token string">"rsa"</span> <span class="token punctuation">\</span></span>
<span class="line">  <span class="token assign-left variable">tls_ca_key_bits</span><span class="token operator">=</span><span class="token number">2048</span> <span class="token punctuation">\</span></span>
<span class="line">  <span class="token assign-left variable">server_ips</span><span class="token operator">=</span><span class="token number">192.168</span>.1.101,192.168.1.102 <span class="token punctuation">\</span></span>
<span class="line">  <span class="token assign-left variable">default_tls_client_ttl</span><span class="token operator">=</span><span class="token number">31536000</span></span>
<span class="line"></span></code></pre></div><ul>
<li>옵션 참조(official) : <a href="https://developer.hashicorp.com/vault/api-docs/secret/kmip#parameters" target="_blank" rel="noopener noreferrer">https://developer.hashicorp.com/vault/api-docs/secret/kmip#parameters</a></li>
</ul>
<h2>KMIP 시크릿 엔진의 config 변경시 CA의 변경 여부</h2>
<p>일반적인 설정은 CA가 변경되지 않으나, CA에 직접적인 옵션 즉, 키 강도, 키 길이, 알고리즘 등을 변경하시면 CA가 재발급되므로 이 경우 영향이 있습니다.<br>
<code>server_ip</code>, <code>server_hostnames</code>를 추가하는 것으로는 CA는 변경되지 않습니다. 이는 SAN 인증서 발급에 영향이지만, vault에서 server인증서를 외부로 export 하는 과정이 없기 때문입니다.</p>
<div class="language-bash" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="line"><span class="token comment">#키강도 변경</span></span>
<span class="line">vault <span class="token function">write</span> kmip/config <span class="token punctuation">\</span></span>
<span class="line">  <span class="token assign-left variable">listen_addrs</span><span class="token operator">=</span><span class="token number">0.0</span>.0.0:5696 <span class="token punctuation">\</span></span>
<span class="line">  <span class="token assign-left variable">tls_ca_key_type</span><span class="token operator">=</span><span class="token string">"rsa"</span> <span class="token punctuation">\</span></span>
<span class="line">  <span class="token assign-left variable">tls_ca_key_bits</span><span class="token operator">=</span><span class="token number">4096</span> </span>
<span class="line"></span></code></pre></div><h2>SAN 발급시 <code>server_hostnames</code> 기입 정보</h2>
<p>https 로 호출이 가능한 명칭이면 상관없습니다. dns로 호출시에는 네임서버의 zone의 설정에 따라 다를터 이나 fqdn으로 기입, 혹은 https 프로토콜로 호출만 가능하다면 호스트네임이어도 됩니다.</p>
<p>주의할 점은 http(s) 프로토콜로 호출시에 request/response 헤더에 요청될 host 명과 이것이 인증서의 CN(혹은 SAN 확장 필드)와 매칭되는지의 여부 입니다.</p>
<h2>CA 발급시 <code>servername_hostnames</code>에 기입되어야하는 서버의 리스트 정보</h2>
<p>Vault 서버 정보를 기입해주시면 됩니다. (e.g. <code>vault.mysite.com</code>)</p>
<div class="hint-container warning">
<p class="hint-container-title">주의</p>
<p>vault의 KMIP 통신에 앞서 <code>server-client</code>의 상호 인증인 <code>two way ssl</code> 과정을 거치므로 각자의 cn을 판단하기 위해 개별 대상의 기입이 필요할 것으로 보여지나, operation role 부여시에 해당 권한에 대한 제어가 수행되므로 Client 의 값을 기입할 필요는 없습니다.</p>
</div>
<h2>인증서 재발급시 이전 인증서의 만료 여부</h2>
<p>기존 인증서를 강제로 revoke 시키지 않으면 유효기간(ttl)동안 문제 없습니다.</p>
<h2>Secrets 별 port 바인딩</h2>
<p>KMIP이 활성화된 secrets engine이 다르다면, port는 활성화된 엔진 마다 개별 바인딩이 필요합니다.</p>
<h2>KMIP 프로토콜로 교환되는 key의 라이프사이클</h2>
<p>Vault는 KMIP 으로 발급되는 키의 라이프사이클에 대한 제어권을 클라이언트에 포괄적으로 위임하고 있습니다.</p>
<p>scope 내의 Role을 부여하는 과정 중 Role에 <code>operation_</code> 접두사로 시작되는 권한을 부여하여, 해당 role에서 발급한 credential을 통해 해당 role에 부여된 KMIP에 대한 권한을 행사합니다. 요약하자면, Vault서버에서 KMIP자체의 라이프사이클이 아닌 KMIP의 권한을 부여하는 우회적인 관리책을 제공하고 있습니다.</p>
<p>따라서, 해당 role에서 KMIP 키에 대해 별다른 작업을 요청하지 않는다면, vault 내에서 키를 만료 혹은 수정(rotation)하는 작업을 수행하지 않으며,<br>
해당 키는 지속적으로 사용가능합니다.</p>
<p>현 버전 vault의 KMIP에 대한 지원 정보는 현재 KMIP profile 1.4 표준을 따르고 있음이 퍼블릭 문서로 오픈되어있습니다.</p>
<p>(참고 - vault 가 구현중인 KMIP profile 정보 : <a href="https://developer.hashicorp.com/vault/docs/secrets/kmip-profiles" target="_blank" rel="noopener noreferrer">https://developer.hashicorp.com/vault/docs/secrets/kmip-profiles</a>)</p>
<h2>Vault 로그에서 KMIP에 대한 액세스 로그도 남길 수 있는지</h2>
<p>Vault의 로그는 Vault 플랫폼 자체에 대한 이벤트 기록 만을 수행하여, 세밀한 키 처리에 대한 부분은 <code>audit log</code> 라는 기능을 enable 함으로써 이벤트 처리를 모니터링 할수 있습니다.</p>
<h2>Vault 로그 파일 분리해서 로테이션 설정할 수 있는지</h2>
<p>어떠한 추가 설정이 없다면, 기본적으로 시스템 로그에 기록되도록 되어있습니다. 말씀하신대로 해당 로그 파일을 별도 분리가능하며, 로테이션에 대한 설정도 용량/시간/갯수의 제한을 설정가능합니다.</p>
<p>(참고 : <a href="https://developer.hashicorp.com/vault/docs/configuration#log_rotate_duration" target="_blank" rel="noopener noreferrer">https://developer.hashicorp.com/vault/docs/configuration#log_rotate_duration</a>)</p>
<h2>KMIP 통신 시 클러스터의 모든 요청이 리더로 포워딩 되는지, 아니면 요청 종류에 따라 다른지</h2>
<p>해당 동작은 licence 정책에 따라 분화됩니다. 현재 라이선스로는 Read/Write 모두를 리더 노드가 처리하도록 되어있고. 요청을 처리받은 follwer 노드는 처리를 리더 노드로 포워딩합니다.</p>
<p>Read/Write를 모든 Vault에서 처리하는 동작은 <code>Read Replica</code>라는 동작으로 Vault Enterprise의 Performance 라이선스에 해당됩니다.</p>
<p>만약 KMIP 사용이 가능한 라이선스인 ADP-KM 만 적용 된 경우, R/W가 빈번하지 않지만, 높은 비용의 라이선스 정책에서만 사용가능하던 ADP(Advanced Data Protection)라이선스의 KMIP 기능을 좀 더 비용합리적으로 사용가능하게끔, 해당 기능을 제거하고 좀 더 낮은 비용으로 책정된 라이선스입니다.</p>
<p>(현재 라이선스 정책에 대한 상세 참조 링크 : <a href="https://developer.hashicorp.com/vault/docs/enterprise/license/faq#q-how-can-the-new-adp-modules-be-purchased-and-what-features-are-customer-entitled-to-as-part-of-that-purchase" target="_blank" rel="noopener noreferrer">https://developer.hashicorp.com/vault/docs/enterprise/license/faq#q-how-can-the-new-adp-modules-be-purchased-and-what-features-are-customer-entitled-to-as-part-of-that-purchase</a>)</p>
<h2>매뉴얼하게 Vault 리더를 변경할 수 있는 방법이 있는지</h2>
<p>vault에서 <code>step-down</code> 이라는 작업으로 칭합니다. 이때, 리더를 확인하여 다른 노드로 리더 권한을 이전하는 작업이 필요합니다.</p>
<p>해당 작업이 없이 리더를 shutdown하게 되면 자체적인 리더 선출과정이 발생하여 약 5~10초정도의 순단이 발생가능하기 때문에. maintanance 작업전엔 <code>leader</code>를 확인 후 작업의 선행이 꼭 필요하겠습니다.</p>
<h2>Vault 업그레이드, 라이선스 변경(수동) 같은 작업 절차</h2>
<p>이미 사용중인 경우, 다음과 같이 진행됩니다.</p>
<ol>
<li>오토백업 설정 추가</li>
<li>스텝다운</li>
<li>키 마이그레이션</li>
<li>정상화 모니터링</li>
</ol>
<p>다음은 구성된 Vault 클러스터 예시 이며, health check config는 이해를 돕기위한 설정 입니다.</p>
<figure><img src="https://raw.githubusercontent.com/Great-Stone/images/master/picgo/20240215152435.png" alt="Sample Vault Cluster" tabindex="0" loading="lazy"><figcaption>Sample Vault Cluster</figcaption></figure>
<p>작업간 rolling update 형태로 노드를 순환적 재기동하게되는데, LB의 <code>health check</code> 인터벌 때문에 해당노드가 다운되었음에도 노드를 신뢰하여 포워딩 하는 구간이 발생하게 됩니다.</p>
<ol>
<li>
<p>vault follower node의 확인</p>
</li>
<li>
<p>작업 대상인 follower node를 GSLB 타겟에서 제거<br>
2.1 제거된 follower node를 셧다운 후 키 마이그레이션 작업 후 GSLB의 타겟에 추가</p>
</li>
<li>
<p>다음 follower node에 대해 "2~3"작업 반복<br>
3.1.  follower node 기동 후 정상적인 follower로서 join 되었는지 확인</p>
</li>
<li>
<p>leader node를 GSLB 타겟에서 제거<br>
4-1. 제거된 leader node를 "step-down"하여 leader role을 follower로 마이그레이션<br>
4-2. "3"의 과정을 현재 node에서 수행</p>
</li>
<li>
<p>가능한 경우 KMIP 클라이언트 (e.g.MongoDB)를 재기동 하여 정상적으로 구동됨 확인</p>
</li>
</ol>
<p>4의 과정에서 taget을 먼저 제거하는 이유는, step-down시 ready 상태가 되는 leader노드로 LB가 요청을 보낼시 역시 50X대 서버 에러를 리턴받기 때문입니다.</p>
<p>follower를 통해 유입된 reqeust는 response또한 follower를 통해 회신되므로, 요청처리에는 문제가 없습니다</p>
<h2>Linux 서비스로 등록된 경우 로그 파일 외부 구성</h2>
<p>systemd 상에 등록되어 있는  vault service는 "vault server" command를 사용합니다.</p>
<p>systemd로 등록된 서비스는 따로 설정해 주지 않는다면 Standart Out,Error 모두 syslog에 저장하므로, Vault Service Script에서 vault log가 저장되지 않도록 Standard Error를 null로 처리하고, <code>vault server</code> command에 옵션을 주어 vault log를 외부로 지정할 수 있습니다.</p>
<div class="language-ini" data-highlighter="prismjs" data-ext="ini" data-title="ini"><pre class="language-ini"><code><span class="line"><span class="token comment"># /lib/systemd/system/vault.service 수정</span></span>
<span class="line"><span class="token section"><span class="token punctuation">[</span><span class="token section-name selector">Unit</span><span class="token punctuation">]</span></span></span>
<span class="line">...</span>
<span class="line"></span>
<span class="line"><span class="token section"><span class="token punctuation">[</span><span class="token section-name selector">Service</span><span class="token punctuation">]</span></span></span>
<span class="line">...</span>
<span class="line"><span class="token key attr-name">ExecStart</span><span class="token punctuation">=</span><span class="token value attr-value">/usr/local/bin/vault server -config=/etc/vault.d/vault.hcl -log-file={ Log_path }</span></span>
<span class="line"><span class="token key attr-name">StandardError</span><span class="token punctuation">=</span><span class="token value attr-value">null</span></span>
<span class="line"></span>
<span class="line"><span class="token section"><span class="token punctuation">[</span><span class="token section-name selector">Install</span><span class="token punctuation">]</span></span></span>
<span class="line">...</span>
<span class="line"></span></code></pre></div><ul>
<li><code>ExecStart</code> 항목에 <code>-log-file</code> 항목 추가</li>
<li><code>StandardError=null</code> 항모고 추가</li>
</ul>
<h2>Auto Unseal 설정을 하지 않은 상태에서 <code>pkill -HUP vault</code> 커맨드실행하는 경우에 vault 프로세스가 재시작되면서 Seal(봉인) 상태가 될까요?</h2>
<p>해당 pkill -HUP vault 명령어는 vault 가 재기동되는 명령어가 아닌 설정을 reload하는 명령어로 Vault seal에는 영향이 없습니다.</p>
<p>Vault service 상에서도 명시적으로 Reload 기능이 있으며, <code>Systemctl reload vault.service</code> 명령으로 같은 기능을 수행할 수 있습니다.</p>
<div class="language-ini" data-highlighter="prismjs" data-ext="ini" data-title="ini"><pre class="language-ini"><code><span class="line"><span class="token comment"># /lib/systemd/system/vault.service 수정</span></span>
<span class="line"><span class="token section"><span class="token punctuation">[</span><span class="token section-name selector">Unit</span><span class="token punctuation">]</span></span></span>
<span class="line">...</span>
<span class="line"></span>
<span class="line"><span class="token section"><span class="token punctuation">[</span><span class="token section-name selector">Service</span><span class="token punctuation">]</span></span></span>
<span class="line">...</span>
<span class="line"><span class="token key attr-name">ExecReload</span><span class="token punctuation">=</span><span class="token value attr-value">/bin/kill --signal HUP $MAINPID</span></span>
<span class="line"></span>
<span class="line"><span class="token section"><span class="token punctuation">[</span><span class="token section-name selector">Install</span><span class="token punctuation">]</span></span></span>
<span class="line">...</span>
<span class="line"></span></code></pre></div><h2>KMIP 엔진을 설정하면 KMIP 서비스 포트(5696/TCP)에 서버측 SSL 인증서가 자동으로 세팅되는데, 이 자체 서명된 인증서의 만료일이 1년으로 잡혀있는데 자동으로 갱신되고 서비스에 영향이 없는지</h2>
<p>Vault KMIP Secret Engine에서의 서버측 SSL 인증서의 경우 하단 3가지 상황에서 갱신됩니다</p>
<ul>
<li>Vault 의 리더 변경 시</li>
<li>KMIP Config 변경 시</li>
<li>Vault 재기동 시</li>
</ul>
<figure><img src="https://raw.githubusercontent.com/Great-Stone/images/master/picgo/20240215153819.png" alt="검증 내용" tabindex="0" loading="lazy"><figcaption>검증 내용</figcaption></figure>
<p>(참고 : <a href="https://support.hashicorp.com/hc/en-us/articles/4411836765075-KMIP-Secrets-Engine-server-TLS-certificate-Guide" target="_blank" rel="noopener noreferrer">https://support.hashicorp.com/hc/en-us/articles/4411836765075-KMIP-Secrets-Engine-server-TLS-certificate-Guide</a>)</p>
<h2>PR 기능이 있는 License 에서  PR 기능이 없는 License로 이관 시 이슈</h2>
<p>PR 기능을 포함된 라이선스 사용 시 PR이 없는 (e.g. ADP-KM) Vault License로 교체하면 Performance Standby 상태가 종료되면서 vault 리더 노드의 프로세스 리로드 시 팔로워 노드 프로세스가 재시작되어 seal 상태가 되는 상황이 발생합니다.</p>
<p>이 경우 하단 링크와 같이 vault config 파일에  <code>disable_performance_standby=true</code>를 명시적으로 기입함으로써 해당 문제를 방지할 수 있습니다.</p>
<p>(링크 : <a href="https://support.hashicorp.com/hc/en-us/articles/21909597784211-Vault-Disabling-Performance-Standby-mode-when-not-licensed-for-this-feature" target="_blank" rel="noopener noreferrer">https://support.hashicorp.com/hc/en-us/articles/21909597784211-Vault-Disabling-Performance-Standby-mode-when-not-licensed-for-this-feature</a>)</p>
<h2>MongoDB - Vault KMIP 연동시 <code>--kmipKeyStatePollingSeconds</code> 옵션 동작</h2>
<p>MongoDB의 <code>--kmipKeyStatePollingSeconds</code> 옵션은 MongoDB 에서 Vault Kmip 으로 암호화 Key가 Active 상태인지 확인하는 주기 입니다.</p>
]]></content:encoded>
      <enclosure url="https://raw.githubusercontent.com/Great-Stone/images/master/picgo/20240215150300.png" type="image/png"/>
    </item>
    <item>
      <title>DevOps Korea 좌담회 2024.2.13.</title>
      <link>https://docmoa.github.io/06-etc/class/devops-discussion-20240213.html</link>
      <guid>https://docmoa.github.io/06-etc/class/devops-discussion-20240213.html</guid>
      <source url="https://docmoa.github.io/rss.xml">DevOps Korea 좌담회 2024.2.13.</source>
      <description>DevOps Korea 좌담회 - AI 시대에 DevOps가  나아갈 방향은?</description>
      <pubDate>Wed, 14 Feb 2024 07:39:18 GMT</pubDate>
      <content:encoded><![CDATA[<figure><img src="https://raw.githubusercontent.com/Great-Stone/images/master/picgo/telegram-cloud-photo-size-5-6226272870942751266-y.jpg" alt="torder-townhall" tabindex="0" loading="lazy"><figcaption>torder-townhall</figcaption></figure>
<h1>DevOps Korea 좌담회 2024.2.13.</h1>
<ul>
<li>
<p>일시 : 2024년 2월 13일 (화) 19:00</p>
</li>
<li>
<p>안내 :</p>
<ul>
<li>Facebook : <a href="https://www.facebook.com/groups/TeAnE/permalink/2971918569610501/" target="_blank" rel="noopener noreferrer">DevOps Korea</a> - AI의 시대에서 DevOps가 가야할 방향</li>
<li>GitHub : <a href="https://github.com/ralfyang/DevOps_Korea_sitting_talking/tree/main/20240213" target="_blank" rel="noopener noreferrer">https://github.com/ralfyang/DevOps_Korea_sitting_talking/tree/main/20240213</a></li>
</ul>
</li>
<li>
<p>장소 : 파크원2타워 티오더</p>
</li>
<li>
<p>주요 아젠다</p>
<ul>
<li>AI시대 관련 변화된 시대에 맞게 대응 할 방향</li>
<li>DevOps 업무에 도움이 될만한 AI도구 및 방법론</li>
<li>이미 적용중인 AI를 활용한 엔지니어링 업무소개 등</li>
</ul>
</li>
</ul>
<h2>🧑‍⚖️ 사례 1. 법원 판례</h2>
<p>법원의 판결은 기존 판례에 큰 영향을 받는다. 사건마다 그 배경, 상황, 증거, 정황 등의 정보를 기반으로 이전에 어떤 결과가 나왔는지가 현재의 판결문 작성과 연관성이 있다는 것은 정보들의 분석으로 현재의 사건이 어떤 결과가 나올지 예측할 수 있고, 더불어 생성형 AI를 사용하는 소비자 또한 이런 '법률 서비스'를 받는 효과를 얻을 수 있다는 것이다.</p>
<p><a href="https://zdnet.co.kr/view/?no=20240124110357" target="_blank" rel="noopener noreferrer">관련 뉴스 - 법원도 AI 도입 시작…"판결문 작성 돕는 AI도 필요"</a></p>
<p>법률과 AI는 이전에 미국에서 ChatGPT로 찾은 자료를 법원에 제출하여 벌금형을 받은 사례도 있지만 그것은 잘못 사용된 예시이자 사실 검증을 해야한다는 경종이기도 하다</p>
<blockquote>
<p>패널로 참여하신 <a href="https://paranduru.me/" target="_blank" rel="noopener noreferrer">파란두루미</a>의 이인희 대표님은 AI에 이전 판례들을 적용하여 주변인의 어렵게만 보이는 법률 싸움(?)에 도움을 준 적이 있었다.</p>
</blockquote>
<p>생성형 AI는 전문가적 소견이나 전체 설계는 아직 무리일 수 있지만, 검증, 자료정리, 부분적 구현에 탁월함을 보여준다. (아직이라는 것은 앞으로는 그럴 가능성도 있다는 것이다.) 특히 어떤 정보를 학습시키는가에 따라 원하는 답을 얻을 수 있다.</p>
<h2>🧑‍💻 사례 2. 전문 영역의 교차, 가능성의 확대</h2>
<blockquote>
<p>게임 업계에서는 예술가의 영역이였던 캐릭터 일러스트와 배경 같은 영역에 생성형 AI의 도입이 활발해지고 있다고 했다.</p>
</blockquote>
<p>게임 같은 엔터테인먼트 요소가 강한 소프트웨어 산업에서는 눈으로 보여지는 요소가 흥행에 많은 비중을 차지할 수 밖에 없다. 때문에 아티스트에 많은 비용이 지불되고, 또는 유명한 아티스트를 섭외해야하는 경우도 잦았지만, 생성형 AI가 이를 대체한다면 원하는 원화를 얻을 때까지 반복적으로 요청 할 수 있고, 이것은 이전에 사람이 직접 모든 예술적 작업을 수행했던 상황에 비해 상대적으로 적은 비용으로도 게임 제작을 진행할 수 있다는 장점이 있다.</p>
<blockquote>
<p>눈으로 보여지고 사용자 경험이 요구되는 프론트엔드 개발, 백엔드 개발자도 할 수 있어요.</p>
</blockquote>
<p>전문 영역을 벗어나 다른 영역을 새로 배우기에는 시간과 비용이 필요하지만 생성형 AI를 활용하면, 백엔드 개발자도 스마트폰 앱이나 UI 작업 같은 다른 역량이 필요한 영역에 대해서도 개발 가능한 기회를 얻게 된다.</p>
<blockquote>
<p>생성형 AI는 초급자 개발자를 두는 것 같은 효과가 있어요.</p>
</blockquote>
<p>결국 명령(프롬프팅)을 하는 사람이 원하는 바를 정확히 전달할 수 있다면 생성형 AI는 그 일을 초급자가 할 수 있을 정도의 결과물을 만들고, 이것은 기존의 전문영역을 벗어나 더 많은 가능성을 열어주는 역할을 수행한다.</p>
<h2>🏭 사례 3. 자체 구축 생성형 AI</h2>
<p>생성형 AI를 자체 구축하여 사용하는 경우도 있다. 그 유용성과 업무 효율성을 기대하지만 외부 SaaS 형태를 사용하게 된다면, 기업의 정보가 유출 될 가능성이 있기 때문이다.</p>
<blockquote>
<p>채팅하는 것처럼 사용하면, 그게 다 토큰이고 돈이에요.</p>
</blockquote>
<p>하지만 생성형 AI이 이제 막 활성화 되듯, 사용자도 아직 노하우가 많은편은 아니다. 질문 하나 당 모두 모델로부터의 결과를 도출하기 위한 비용(전기, 프로세싱)이 발생하는 작업인데, 마치 일반 사용자들은 채팅하듯, 아주적은 정보들로 주거니 받거니 하며 사용하는 사례도 있었다.</p>
<p><a href="https://www.hani.co.kr/arti/science/technology/1090180.html" target="_blank" rel="noopener noreferrer">대화 한 번에 ‘생수 한 병씩’…챗GPT의 불편한 진실</a></p>
<p>참석자로 참여하다 패널로 전향(?)하신 삼성SDS의 조남호 프로님의 비용에 대한 언급, 그리고 사용법에 대해 교육했음에도 아직은 제대로 사용하지 못한다는 사실에서 답답함이 느껴지기는 했지만, 한편으로는 기업내부에서 생성형 AI에 대한 올바른 사용법과 활용법에 대해 고민하고 실행하고 있다는 것은 앞으로의 AI와 함께 하는 세상에서 또 다른 기업/개인 경쟁력이 될 것도 같다.</p>
<p>어떻게 하면 올바른 질문을 할 수 있을까에 대한 해법으로는 서로다른 LLM을 사용해보는것도 방안으로 제시되었다. 예를들어, Edge Copilot에게 프롬프트를 만들어달라고 요청하고, 생성된  프롬프트를 ChatGPT에 입력하는 방식이다. 조남호 프로님은 더 나은 사용을 위해서 무료 강의를 들어볼 것을 추천하였다.</p>
<p><a href="https://www.deeplearning.ai/short-courses/" target="_blank" rel="noopener noreferrer">LERAN GENERATIVE AI - Short Courses</a></p>
<ul>
<li>ChatGPT Prompt Engineering for Developers</li>
<li>Building Systems with the ChatGPT API</li>
<li>LangChain for LLM Application Development</li>
</ul>
<h2>👫 사례 4. "우린 생성형 AI 사용하지 않기로 했어요."</h2>
<p>ChatGPT의 발표 이후로 수많은 관련 서적들이 출간되었고, 더불어 개발자 영역에서도 다양한 활용법, 특히 귀찮은 작업을 시키거나, 사용자에게 비 전문적인 영역의 해답(?)을 얻는 방식이 제안되었다.</p>
<blockquote>
<p>Copilot이 생성해준 코드를 붙여넣으면, 설명 할 수 없고 우리의 코드 규칙을 지키기 어려워요.</p>
</blockquote>
<p>참석하신 한 CTO분은 개발에 더이상 생성형 AI를 사용하지 않는 것으로 방향을 정했다고 이야해 해주었다. 앞서 다양한 활용법, 긍정적인 부분이 부각되었다면 이것은 반대적 입장이여서 관심이 가는 부분이였다. 특히 당장의 생산성은 높아질 수 있지만, 작성된 코드를 붙여넣은 사람도 설명할 수 없고 협업을 함에 추가적인 노력과 디버깅이 필수적이 되면서 생산성과 조직 거버넌스를 유지시키기 어려운 것이 그 이유 였다.</p>
<p>생성형 AI의 주요 문제점중 하나는 이미 학습된 데이터에 의존하는 편향적 경향이다. 이 문제는 편견이 완화되기보다는 편향된 결과를 더 확대하거나 지속적으로 출력하기 때문에 공개되어있는 학습모델을 그대로 활용하는 것은 작업자의 의도와는 다르게 흘러할 수 있다. 때문에, B2B 서비스를 개발하는 참여자 분은 자주 변경되고 일관성없는 프론트엔드를 관리하고 통합하기 위해 사내 표준 코드들을 학습시키고 이를 활용할 계획을 고려하고 있었다.</p>
<p>티오더의 하담님도 학교에서 생성형 AI와 관련하여 현 개발에서의 분위기, 그리고 미래에는 많은 부분이 사람을(개발자도) 대체할 것이라는 강의를 했고, 지금의 자녀들에게 코딩을 배우게 하는 것이 옳은지에 대한 질문을 받았다고 했다.</p>
<blockquote>
<p>미래에 모든것을 AI가 대체한다면, 지금 코딩을 배우는게 의미 없는거 아닌가요?</p>
</blockquote>
<p>이런 직업적 위기는 비단 생성형 AI 이전에도 있었다. 산업이 발전하면서 자동화로 인해 로봇이 제조 공정에서 사람이 하던 일, 즉, 물리적 노동력을 대체하는 것에 대한 위기가 있었다. 그리고 이제는 인간의 지식 노동력을 대체하는 것으로 AI가 그 위협으로 다가오고 있다.</p>
<p><a href="https://dbr.donga.com/article/view/1901/article_no/7176/ac/magazine" target="_blank" rel="noopener noreferrer">인간의 지식 노동 대체하는 인공지능, 시장 경제 뿌리부터 흔들 것</a></p>
<p>혹자는 살아남을 직종이 창조적인 일, 예술이나 미술이라 이야기 했지만, 이미 대중적이고 일반적인 일을 대체 할 수 있다는 것은 앞선 게임 업계에서의 일로도 충분히 그렇지만은 아닐 것임을 알려주고 있다. 또한 화제가 되었던 테슬라의 로봇이 빨래를 접는 영상에서도 보이듯, 섬세한 운동능력도 기계와 AI가 결합하면서 그 가능성을 보여주고 있다.</p>
<p><a href="https://www.forbes.com/sites/mattnovak/2024/01/15/elon-musks-latest-robot-video-accidentally-gives-away-the-magic-trick/?sh=323684afee4c" target="_blank" rel="noopener noreferrer">Elon Musk’s Latest Robot Video Accidentally Gives Away The Magic Trick</a></p>
]]></content:encoded>
      <enclosure url="https://raw.githubusercontent.com/Great-Stone/images/master/picgo/telegram-cloud-photo-size-5-6226272870942751266-y.jpg" type="image/jpeg"/>
    </item>
    <item>
      <title>2024년 2월</title>
      <link>https://docmoa.github.io/04-HashiCorp/08-Updates/97-2024/2024-02.html</link>
      <guid>https://docmoa.github.io/04-HashiCorp/08-Updates/97-2024/2024-02.html</guid>
      <source url="https://docmoa.github.io/rss.xml">2024년 2월</source>
      <description>2024년 2월 Update</description>
      <pubDate>Wed, 07 Feb 2024 07:41:40 GMT</pubDate>
      <content:encoded><![CDATA[
<h2>Product 소개</h2>
<ul>
<li>HCP Vault Radar begins limited beta
<ul>
<li><a href="https://www.hashicorp.com/blog/hcp-vault-radar-begins-limited-beta" target="_blank" rel="noopener noreferrer">Hashicorp Blog</a></li>
<li>작년 2023년 10월 Hashiconf 에서 공개된 HCP Vault Radar 가 Alpha 를 거쳐 Beta 가 출시되었습니다. Beta 에서는 RBAC/ABAC 을 지원하며 스캔할 수 있는 새로운 데이터 소스도 선보입니다</li>
</ul>
</li>
</ul>
<h2>Product Update</h2>
<ul>
<li>Terraform
<ul>
<li>CLI
<ul>
<li><a href="https://github.com/hashicorp/terraform/releases/tag/v1.7.2" target="_blank" rel="noopener noreferrer">1.7.2 Release</a>
<ul>
<li>terraform cloud 사용 시 발생하는 module 다운로드 재시도 등 오류 개선</li>
</ul>
</li>
</ul>
</li>
<li><a href="https://developer.hashicorp.com/terraform/enterprise/releases" target="_blank" rel="noopener noreferrer">Enterprise Release</a>
<ul>
<li><a href="https://developer.hashicorp.com/terraform/enterprise/releases/2024/v202401-1" target="_blank" rel="noopener noreferrer">1월 Release</a> 출시 (<code>v202401-1 (751)</code>)</li>
<li>2023년 9월 (v202309-1) 에 출시된 FDO 설치방식과 기존 Replicated 설치방식을 선택할 수 있게 하는 <code>consolidated_services_enabled</code> 설정 지원 종료</li>
<li>Org 내 연결된 VCS 에 대한 Status Check 개선</li>
<li>Private Registry 관련 <a href="https://developer.hashicorp.com/terraform/cloud-docs/registry/publish-modules#branch-based-publishing-considerations" target="_blank" rel="noopener noreferrer">branch-based publishing workflow</a> 와 <a href="https://developer.hashicorp.com/terraform/enterprise/registry/test" target="_blank" rel="noopener noreferrer">automatically run tests for modules</a> 기능 지원</li>
<li>Plan and Apply 수행 시 추가 옵션을 제공하여 선택한 자원에 대해 교체 되도록 지원</li>
<li>Workspace 설정에 Auto-apply run triggers 를 도입하여 연결된 다른 Workspace 에 변경 사항 발생 시 자동 apply 되도록 설정 지원</li>
</ul>
</li>
<li>Provider
<ul>
<li><a href="https://github.com/hashicorp/terraform-provider-aws/releases/tag/v5.35.0" target="_blank" rel="noopener noreferrer">AWS v5.35.0 주요 수정사항</a>
<ul>
<li>신규 resource 추가
<ul>
<li>aws_lexv2models_*</li>
<li>aws_bedrock_*</li>
</ul>
</li>
<li>기능 개선
<ul>
<li>aws_redshift_cluster 에 대해 multi_az 설정 추가</li>
<li>aws_wafv2_rule_group 및 aws_wafv2_web_acl 에 header_order 와 field_to_match 설정 추가</li>
</ul>
</li>
<li>Bug Fix
<ul>
<li>aws_networkmanager_core_network_policy_document 에 대해 core_network_configuration.edge_locations 에 대한 최대 설정 제한 제거</li>
<li>aws_cognito_user_group 에 대해 user group 이름에 <code>/</code> 가 포함되는 것 허용</li>
</ul>
</li>
</ul>
</li>
<li><a href="https://github.com/hashicorp/terraform-provider-azurerm/releases/tag/v3.90.0" target="_blank" rel="noopener noreferrer">Azure v3.90.0 주요 수정사항</a>
<ul>
<li>신규 resource 추가
<ul>
<li>azurerm_nginx_configuration</li>
<li>azurerm_virtual_desktop_workspace</li>
<li>azurerm_kubernetes_fleet_update_strategy</li>
</ul>
</li>
<li>기능 개선
<ul>
<li>Resource Provider  추가: Microsoft.AppConfiguration, Microsoft.DataFactory, Microsoft.SignalRService</li>
</ul>
</li>
<li>Bug Fix
<ul>
<li>azurerm_app_service_managed_certificate 에 대해 app_service_plan_id 가 대소문자 구분없이 파싱되어 발생하는 오류 개선</li>
<li>azurerm_cognitive_deployment 에 대해 version 설정 추가</li>
<li>azurerm_mssql_managed_instance_failover_group 에 대해 다른 subscription 에서 failover group 생성시 발생하는 이슈 해결</li>
</ul>
</li>
</ul>
</li>
<li><a href="https://github.com/hashicorp/terraform-provider-google/releases/tag/v5.15.0" target="_blank" rel="noopener noreferrer">GCP v5.15.0 주요 수정사항</a>
<ul>
<li>신규 resource 추가
<ul>
<li>google_compute_region_network_endpoint</li>
<li>google_netapp_volume_snapshot</li>
<li>google_compute_machine_types</li>
</ul>
</li>
<li>기능 개선
<ul>
<li>google_compute_region_network_endpoint_group 에 대해  INTERNET_IP_PORT 와 INTERNET_FQDN_PORT 설정 추가</li>
<li>google_compute_region_instance_group_manager 와google_compute_instance_group_manager 에 대해 creation_timestamp 설정 추가</li>
<li>google_compute_disk 에 대해 disk_id 설정 추가</li>
</ul>
</li>
<li>Bug Fix
<ul>
<li>google_vmwareengine_private_cloud 에 대해 provider upgrade 시 발생하는 재생성 오류 개선</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li>Vault
<ul>
<li>1.15.5
<ul>
<li>상세 <a href="https://github.com/hashicorp/vault/releases/tag/v1.15.5" target="_blank" rel="noopener noreferrer">Release Note</a></li>
<li>audit log 관련 log_raw 설정 사용 시 발생하는 버그 개선</li>
<li>ui 개선</li>
</ul>
</li>
</ul>
</li>
<li>Consul
<ul>
<li>1.17.2
<ul>
<li>
<p>상세 <a href="https://github.com/hashicorp/consul/releases/tag/v1.17.2" target="_blank" rel="noopener noreferrer">Release Note</a></p>
</li>
<li>
<p>Known Issue: 1.17.2 및 1.16.5 에서 Terminating Gatteway 가 TLS SAN 검증을 엄격하게 수행함으로 인해 Service Mesh 외부 Upstream 서비스 연결 방지</p>
</li>
<li>
<p>sameness-group 기반 failover 수행 시 해당 group이 속해있는 partition 이 아닌 기본 partition 으로 질의 하는 오류 개선</p>
</li>
</ul>
</li>
</ul>
</li>
<li>Nomad
<ul>
<li>1.7.3
<ul>
<li>상세 <a href="https://github.com/hashicorp/nomad/releases/tag/v1.7.3" target="_blank" rel="noopener noreferrer">Release Note</a></li>
<li>exec driver 에 대해 OOM 감지 관련 지원</li>
<li>Consul 에 대해 admin partition 지원</li>
<li>1.5 및 1.6 client 에서 발생하는 template 기반 Variable 및 Service 사용 오류 개선</li>
<li>UI 개선</li>
</ul>
</li>
</ul>
</li>
</ul>
]]></content:encoded>
    </item>
    <item>
      <title>Terraform Cloud Agent 가이드</title>
      <link>https://docmoa.github.io/04-HashiCorp/03-Terraform/02-Config/terraform-cloud-agent-guide-custom.html</link>
      <guid>https://docmoa.github.io/04-HashiCorp/03-Terraform/02-Config/terraform-cloud-agent-guide-custom.html</guid>
      <source url="https://docmoa.github.io/rss.xml">Terraform Cloud Agent 가이드</source>
      <description>TFE/TFC에서 Terraform Cloud Agent 구성</description>
      <pubDate>Mon, 08 Jan 2024 08:27:49 GMT</pubDate>
      <content:encoded><![CDATA[
<p>Terraform Cloud Agent(Agent)는 Terraform Enterprise/Cloud(TFE/C)에서 사용가능한 사용자 정의 Terraform 실행 환경을 제공합니다. 사용자는 Agent를 사용하여 Terraform 실행을 위해 기본 제공되는 이미지 대신 커스텀 패키지가 설치된 별도 이미지를 사용할 수 있고, 이미지 실행 위치를 네트워크 환경에서 자체 호스팅 할 수 있습니다.</p>
<figure><img src="https://raw.githubusercontent.com/Great-Stone/images/master/picgo/Monosnap Terraform Agent | onemodel 2024-01-08 14-40-18.png" alt="Monosnap Terraform Agent | onemodel 2024-01-08 14-40-18" tabindex="0" loading="lazy"><figcaption>Monosnap Terraform Agent | onemodel 2024-01-08 14-40-18</figcaption></figure>
<blockquote>
<p><a href="https://developer.hashicorp.com/terraform/cloud-docs/agents" target="_blank" rel="noopener noreferrer">Terraform Cloud Agents</a></p>
<p><a href="https://developer.hashicorp.com/terraform/enterprise/application-administration/agents-on-tfe" target="_blank" rel="noopener noreferrer">Terraform Cloud Agents on TFE</a></p>
<p><a href="https://developer.hashicorp.com/terraform/tutorials/cloud/cloud-agents" target="_blank" rel="noopener noreferrer">Manage private environments with Terraform Cloud agents</a></p>
</blockquote>
<h2>Terraform Enterprise/Cloud 요구사항</h2>
<p>Agent는 Pull 기반이므로 Agent→ TFE/C 로 네트워크 연결이 발생합니다. 실행되는 모든 Agent는 Terraform 작업 수행을 위해 TFE/C를 폴링하고 해당 작업을 로컬에서 실행합니다.</p>
<p>TFE/C의 제약 및 차이는 다음과 같습니다.</p>
<p>|                        | TFE                       | TFC                   |<br>
|</p>
]]></content:encoded>
      <enclosure url="https://raw.githubusercontent.com/Great-Stone/images/master/picgo/Monosnap%20Terraform%20Agent%20%7C%20onemodel%202024-01-08%2014-40-18.png" type="image/png"/>
    </item>
    <item>
      <title>2024년 1월</title>
      <link>https://docmoa.github.io/04-HashiCorp/08-Updates/97-2024/2024-01.html</link>
      <guid>https://docmoa.github.io/04-HashiCorp/08-Updates/97-2024/2024-01.html</guid>
      <source url="https://docmoa.github.io/rss.xml">2024년 1월</source>
      <description>2024년 1월 Update</description>
      <pubDate>Tue, 02 Jan 2024 23:33:55 GMT</pubDate>
      <content:encoded><![CDATA[
<h2>Product 소개</h2>
<ul>
<li>HashiCorp 2023 year in review: Community
<ul>
<li><a href="https://www.hashicorp.com/blog/hashicorp-2023-year-in-review-community" target="_blank" rel="noopener noreferrer">Hashicorp Blog</a></li>
<li>작년 2023년 한 해동안 있었던 Hashicorp 관련 이야기: 개최된 컨퍼런스 및 이벤트부터 새로 출시된 솔루션 별 트레이닝 및 자격증 관련, 그리고 창업자 Mitchell Hashimoto 의 퇴사 소식 등을 한 번에 확인하실 수 있습니다.</li>
</ul>
</li>
</ul>
<h2>Product Update</h2>
<ul>
<li>
<p>Terraform</p>
<ul>
<li>CLI
<ul>
<li><a href="https://github.com/hashicorp/terraform/releases/tag/v1.6.6" target="_blank" rel="noopener noreferrer">1.6.6 Release</a>
<ul>
<li><code>terraform test</code> 관련 실제 존재하지 않는 자원에 대해 destroy 를 수행하려는 오류에 대한 개선</li>
</ul>
</li>
</ul>
</li>
<li><a href="https://developer.hashicorp.com/terraform/enterprise/releases" target="_blank" rel="noopener noreferrer">Enterprise Release</a>
<ul>
<li><a href="https://developer.hashicorp.com/terraform/enterprise/releases/2023/v202312-1" target="_blank" rel="noopener noreferrer">12월 Release</a> 출시 (<code>v202312-1 (745)</code>)</li>
<li>필수 Upgrade Versison: Release Note 에서 * 표기된 Version 은 필수로 거쳐야 하는 Version (예: v202312-1)</li>
<li><a href="https://developer.hashicorp.com/terraform/enterprise/workspaces/variables/managing-variables#priority-variable-sets" target="_blank" rel="noopener noreferrer">Priorty Variable Set</a> 를 통해 변수에 지정되는 값에 대한 우선순위 설정 지원</li>
<li><code>terraform plan -out &lt;FILE&gt;</code> 또는 API 호출 시 <code>save-plan</code> 을 활용하여 plan 정보를 저장 후 추후 apply 시 활용하도록 지원</li>
<li>Workspace 의 상태 정보를 확인하고 <code>inactive</code> 인 Workspace 에 대해 자동 destroy 수행 지원</li>
<li>Known Issue: working directory 설정 관련하여 <code>Operation failed: failed packing filesystem: illegal slug error: invalid symlink</code> 에러 발생하는 부분에 대해 2024 1월 release 에서 patch 예정</li>
</ul>
</li>
<li>Provider
<ul>
<li><a href="https://github.com/hashicorp/terraform-provider-aws/releases/tag/v5.31.0" target="_blank" rel="noopener noreferrer">AWS v5.31.0 주요 수정사항</a>
<ul>
<li>신규 resource 추가
<ul>
<li>aws_finspace_*</li>
<li>aws_ssoadmin_*</li>
<li>aws_polly_voices</li>
</ul>
</li>
<li>기능 개선
<ul>
<li>aws_lb 에 대해 connection_logs, dns_record_client_routing_policy 설정 추가</li>
<li>aws_lb 에 대해 자원 재생성 과정 없이 subnet_mapping 또는 subnets 변경 지원</li>
<li>aws_db_instance 에 대해 IBM Db2 지원</li>
</ul>
</li>
<li>Bug Fix
<ul>
<li>aws_s3 의 endpoint 관련 no such host 오류 개선 위해 regional endpint 기본값을 <code>us-east-1</code> 로 설정</li>
<li>aws_cloud_watch_log_group 관련 <code>invalid new value for .skip_destroy: was cty.False, but now null</code> 오류 개선</li>
<li>aws_lb 관련 security_groups 에 대한 update 관련 오류 개선</li>
</ul>
</li>
</ul>
</li>
<li><a href="https://github.com/hashicorp/terraform-provider-azurerm/releases/tag/v3.85.0" target="_blank" rel="noopener noreferrer">Azure v3.85.0 주요 수정사항</a>
<ul>
<li>신규 resource 추가
<ul>
<li>azurerm_locations</li>
<li>azurerm_iotcentral_organization</li>
</ul>
</li>
<li>기능 개선
<ul>
<li>azurerm_dns_txt_record 관련 record.value 에 대해 4096 자 허용</li>
<li>azurerm_linux_web_app 및 azurerm_linux_web_app_slot 관련 client_secret_setting_name 과 client_secret_certificate_thumbprint 에 대해 선택사항으로 변경하고 app_settings 설정에 대한 오류 개선</li>
<li>azurerm_windows_web_app 및 azurerm_windows_web_app_slot 관련 client_secret_setting_name 과 client_secret_certificate_thumbprint 에 대해 선택사항으로 변경하고 app_settings 설정에 대한 오류 개선</li>
</ul>
</li>
<li>Bug Fix
<ul>
<li>China region 사용 시 Azure Storage 에 대한 인증 오류 개선</li>
<li>azurerm_virtual_machine 에 대해 additional_capabilities 검증 시 발생하는 패닉 오류 개선</li>
<li>azurerm_storage_share_file 에 대해 source 정보 공란일 시 발생하는 패닉 오류 개선</li>
</ul>
</li>
</ul>
</li>
<li><a href="https://github.com/hashicorp/terraform-provider-google/releases/tag/v5.10.0" target="_blank" rel="noopener noreferrer">GCP v5.10.0 주요 수정사항</a>
<ul>
<li>신규 resource 추가
<ul>
<li>google_compute_region_disk</li>
<li>google_vmwareengine_*</li>
<li>google_workbench_instance_*</li>
</ul>
</li>
<li>기능 개선
<ul>
<li>google_compute_network 에 대해 numeric_id 설정 추가</li>
<li>google_compute_per_instance_config, google_compute_region_per_instance_config 에 대해 remove_instance_on_destroy 설정 추가</li>
<li>google_container_node_pool 에 대해 GKE tier 1 networking 지원되도록 network_performance_config 설정 추가</li>
<li>google_container_node_pool 에 대해 machine_type, disk_type, disk_size_gb 바로 update 가능하도록 개선</li>
</ul>
</li>
<li>Bug Fix
<ul>
<li>google_logging_project_sink 에 대해 unique_writer_identity 설정 변경 시 발생하는 오류 개선</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li>
<p>Vault</p>
<ul>
<li>1.15.4
<ul>
<li>상세 <a href="https://github.com/hashicorp/vault/releases/tag/v1.15.4" target="_blank" rel="noopener noreferrer">Release Note</a></li>
<li><a href="https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2023-6337" target="_blank" rel="noopener noreferrer">CVE-2023-6337</a> &amp; <a href="https://discuss.hashicorp.com/t/hcsec-2023-34-vault-vulnerable-to-denial-of-service-through-memory-exhaustion-when-handling-large-http-requests/60741" target="_blank" rel="noopener noreferrer">HCSEC-2023-34</a> 관련 오류 개선</li>
<li>sys/leader api 호출 시 발생 가능한 deadlock 오류 개ㅓㅅㄴ</li>
<li>ui 관련 버그 개선</li>
</ul>
</li>
</ul>
</li>
<li>
<p>Consul</p>
<ul>
<li>
<p>1.17.1</p>
<ul>
<li>
<p>상세 <a href="https://github.com/hashicorp/consul/releases/tag/v1.17.1" target="_blank" rel="noopener noreferrer">Release Note</a></p>
</li>
<li>
<p>소스코드 Go 1.20.12 기반으로 변경 하여</p>
<p><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-45283" target="_blank" rel="noopener noreferrer">CVE-2023-45283</a>, <a href="https://nvd.nist.gov/vuln/detail/CVE-2023-45285" target="_blank" rel="noopener noreferrer">CVE-2023-45284</a>, <a href="https://nvd.nist.gov/vuln/detail/CVE-2023-39326" target="_blank" rel="noopener noreferrer">CVE-2023-39326</a>, <a href="https://nvd.nist.gov/vuln/detail/CVE-2023-45285" target="_blank" rel="noopener noreferrer">CVE-2023-45285</a> 관련 이슈 해결</p>
</li>
<li>
<p>ACL 관련 nomad client templated policy와  api-gateway templated policy 지원</p>
</li>
<li>
<p><code>peering exported-services</code> 명령어 추가하여 peer cluster 에게 export 한 service 목록 확인 지원</p>
</li>
<li>
<p>Consul Telemetry Collector 의 <code>stats_flush_interval</code> 에 대한 기본값을 60초로 지정</p>
</li>
<li>
<p>Wan Federation 관련 Secondary DC 에 대해 Replication 을 위한 불필요한 쓰기 작업을 방지하기 위해 hash 적용</p>
</li>
</ul>
</li>
</ul>
</li>
<li>
<p>Nomad</p>
<ul>
<li>1.7.2
<ul>
<li>상세 <a href="https://github.com/hashicorp/nomad/releases/tag/v1.7.2" target="_blank" rel="noopener noreferrer">Release Note</a></li>
<li><strong>Reschedule on Lost</strong>: Node Down 등으로 중지된 job 에 대해 <code>nomad job stop</code> 등의 수동 개입이 필요했던 부분에 대해 자동으로 reschedule 방지 되도록 지원</li>
<li>UI 에서 Task 에 대한 예제 template 추가</li>
<li>잘못된 CPU 정보 기반 CPU Topology 작성 시 발생하는 패닉 오류 개선</li>
</ul>
</li>
</ul>
</li>
</ul>
]]></content:encoded>
    </item>
    <item>
      <title>Transit Key Exportable Deny</title>
      <link>https://docmoa.github.io/04-HashiCorp/06-Vault/07-Sentinel-Sample/transit-secrets-key-exportable-deny.html</link>
      <guid>https://docmoa.github.io/04-HashiCorp/06-Vault/07-Sentinel-Sample/transit-secrets-key-exportable-deny.html</guid>
      <source url="https://docmoa.github.io/rss.xml">Transit Key Exportable Deny</source>
      <description>Sentinel - Transit Secrets Key Exportable Option Deny</description>
      <pubDate>Mon, 18 Dec 2023 05:48:39 GMT</pubDate>
      <content:encoded><![CDATA[
<blockquote>
<p>Public Terraform Registry - Policy Library</p>
<p>Src : <a href="https://registry.terraform.io/policies/Great-Stone/vault-transit-exportable-deny" target="_blank" rel="noopener noreferrer">https://registry.terraform.io/policies/Great-Stone/vault-transit-exportable-deny</a></p>
</blockquote>
<h2>1. EGP용 정책 생성 exportable_deny.sentinel</h2>
<div class="language-hcl" data-highlighter="prismjs" data-ext="hcl" data-title="hcl"><pre class="language-hcl"><code><span class="line">import <span class="token string">"strings"</span></span>
<span class="line"></span>
<span class="line"><span class="token property">exportable</span> <span class="token punctuation">=</span> request.data.exportable</span>
<span class="line"></span>
<span class="line"><span class="token property">exportable_check</span> <span class="token punctuation">=</span> <span class="token keyword">rule</span> <span class="token punctuation">{</span></span>
<span class="line">  exportable is <span class="token string">"false"</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token property">main</span> <span class="token punctuation">=</span> <span class="token keyword">rule</span> <span class="token punctuation">{</span></span>
<span class="line">  exportable_check</span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre></div><ul>
<li><code>exportable_check</code> : 요청의 Body에 <code>exportable</code>의 값이 <code>false</code>인 경우에 <mark>TRUE</mark> 반환</li>
</ul>
<h2>2. EGP에 정책 설정</h2>
<p>EGP는 지정된 path에 대해 정책을 적용</p>
<div class="language-bash" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="line">$ vault <span class="token function">write</span> sys/policies/egp/exportable-check <span class="token punctuation">\</span></span>
<span class="line">  <span class="token assign-left variable">policy</span><span class="token operator">=</span><span class="token string">"<span class="token variable"><span class="token variable">$(</span>base64 <span class="token parameter variable">-i</span> exportable-deny.sentinel<span class="token variable">)</span></span>"</span> <span class="token punctuation">\</span></span>
<span class="line">  <span class="token assign-left variable">paths</span><span class="token operator">=</span><span class="token string">"*"</span> <span class="token punctuation">\</span></span>
<span class="line">  <span class="token assign-left variable">enforcement_level</span><span class="token operator">=</span><span class="token string">"hard-mandatory"</span></span>
<span class="line"></span></code></pre></div><ul>
<li><code>paths</code>로 지정된 API 경로에 요청이 들어오면 동작</li>
</ul>
<h2>3. 테스트</h2>
<h3>3.1 Test Policy</h3>
<p><code>transit</code> 경로에 모든 권한이 있는 사용자</p>
<div class="language-hcl" data-highlighter="prismjs" data-ext="hcl" data-title="hcl"><pre class="language-hcl"><code><span class="line">vault policy write transit-admin - &lt;&lt; EOF</span>
<span class="line">path <span class="token string">"transit"</span> <span class="token punctuation">{</span></span>
<span class="line"><span class="token property">capabilities</span> <span class="token punctuation">=</span> <span class="token punctuation">[</span><span class="token string">"create"</span>, <span class="token string">"read"</span>, <span class="token string">"update"</span>, <span class="token string">"delete"</span>, <span class="token string">"list"</span><span class="token punctuation">]</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">path <span class="token string">"transit/*"</span> <span class="token punctuation">{</span></span>
<span class="line"><span class="token property">capabilities</span> <span class="token punctuation">=</span> <span class="token punctuation">[</span><span class="token string">"create"</span>, <span class="token string">"read"</span>, <span class="token string">"update"</span>, <span class="token string">"delete"</span>, <span class="token string">"list"</span><span class="token punctuation">]</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line">EOF</span>
<span class="line"></span></code></pre></div><h3>3.2 Policy Token 생성</h3>
<div class="language-bash" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="line"><span class="token assign-left variable">VAULT_TOKEN</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$(</span>vault token create <span class="token parameter variable">-policy</span><span class="token operator">=</span>transit-admin<span class="token variable">)</span></span></span>
<span class="line"></span></code></pre></div><h3>3.3 Sentinel 테스트</h3>
<p><code>exportable</code> 옵션이 <code>false인</code> 경우 정상적으로 수행</p>
<div class="language-bash" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="line">$ vault <span class="token function">write</span> <span class="token parameter variable">-f</span> transit/keys/my-key-name <span class="token assign-left variable">exportable</span><span class="token operator">=</span>false</span>
<span class="line"></span>
<span class="line">Key                       Value</span>
<span class="line"></span></code></pre></div>]]></content:encoded>
    </item>
    <item>
      <title>Kubernetes에 Vault Agent(Sidecar) 수동 구성</title>
      <link>https://docmoa.github.io/04-HashiCorp/06-Vault/04-UseCase/vault-k8s-manually-using-the-sidecar.html</link>
      <guid>https://docmoa.github.io/04-HashiCorp/06-Vault/04-UseCase/vault-k8s-manually-using-the-sidecar.html</guid>
      <source url="https://docmoa.github.io/rss.xml">Kubernetes에 Vault Agent(Sidecar) 수동 구성</source>
      <description>Vault가 K8s Cluster API에 Inbound가 안되는 경우(보안 정책 때문에) Helm/VSO 구성이 불가능 하므로, 이 경우 수동으로 Sidecar를 붙여주거나 별도 Vault Agent/Proxy를 구성하여 Outbound로 처리하도록 해줘야 하는 경우가 발생한다.</description>
      <pubDate>Mon, 04 Dec 2023 03:02:42 GMT</pubDate>
      <content:encoded><![CDATA[
<p>Kubernetes(K8s)환경에서 외부 Vault(External Vault Server)와 연계하는 경우 일반적으로 <code>kubernetes</code> 인증방식을 활용하여 Vault와 K8s 간 플랫폼 수준에서의 인증을 처리하나, K8s로의 Cluster API에 대한 inbound가 막혀있는 경우 이같은 방식은 사용할 수 없다. 따라서 <code>helm</code>, <code>vso</code> 같은 방식의 사용이 불가능하므로 Vault Agent를 Sidecar로 함께 배포하는 경우 수동으로 구성해주어야 한다.</p>
<figure><img src="https://raw.githubusercontent.com/Great-Stone/images/master/picgo/Monosnap Samsung MX - Multicloud - Vault | onemodel 2023-12-04 11-55-09.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<div class="hint-container tip">
<p class="hint-container-title">팁</p>
<p>구성 과정은 Vault Agent를 BM/VM 환경에 구성하는 방식과 유사하며, 관련 구성 파일과 인증을 위한 정보를 Kubernetes 리소스를 활용한다는 차이가 있다.</p>
</div>
<p>테스트를 위한 Secret Engine은 <code>kv-v2</code> 이며, <code>/secret</code> 경로에 할당하였다.</p>
<details class="hint-container details"><summary>Secret Example</summary>
<div class="language-bash" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="line">vault secrets <span class="token builtin class-name">enable</span> <span class="token parameter variable">-version</span><span class="token operator">=</span><span class="token number">2</span> <span class="token parameter variable">-path</span><span class="token operator">=</span>secret kv</span>
<span class="line"></span>
<span class="line">vault kv put secret/my-k8s-secret <span class="token assign-left variable">foo</span><span class="token operator">=</span>my-k8s-secret-data</span>
<span class="line"></span>
<span class="line">vault policy <span class="token function">write</span> my-secret - <span class="token operator">&lt;&lt;</span><span class="token string">EOF</span>
<span class="line">path "secret/data/my-k8s-secret" {</span>
<span class="line">  capabilities = ["read"]</span>
<span class="line">}</span>
<span class="line">EOF</span></span>
<span class="line"></span></code></pre></div></details>
<h2>1.  Approle 인증 방식</h2>
<p>AppRole 인증방식을 활성화 한다.</p>
<div class="language-bash" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="line">vault auth <span class="token builtin class-name">enable</span> approle</span>
<span class="line"></span></code></pre></div><p>AppRole의 <code>role</code>을 생성한다.</p>
<div class="language-bash" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="line">vault <span class="token function">write</span> auth/approle/role/k8s-role <span class="token punctuation">\</span></span>
<span class="line">    <span class="token assign-left variable">secret_id_ttl</span><span class="token operator">=</span>10m <span class="token punctuation">\</span></span>
<span class="line">    <span class="token assign-left variable">token_ttl</span><span class="token operator">=</span>60m <span class="token punctuation">\</span></span>
<span class="line">    <span class="token assign-left variable">token_max_ttl</span><span class="token operator">=</span>120m <span class="token punctuation">\</span></span>
<span class="line">    <span class="token assign-left variable">policies</span><span class="token operator">=</span>my-secret</span>
<span class="line"></span></code></pre></div><p><code>role_id</code>를 확인한다.</p>
<div class="language-bash" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="line">vault <span class="token builtin class-name">read</span> auth/approle/role/k8s-role/role-id</span>
<span class="line"></span></code></pre></div><p><code>role_id</code>와 <code>secret_id</code>를  K8s의 Secret에 저장한다.</p>
<div class="language-bash" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="line"><span class="token comment"># kubectl create secret generic vault-approle --from-literal=role_id=&lt;role-id-1234&gt; --from-literal=secret_id=&lt;s.1234567890abcdef&gt;</span></span>
<span class="line">kubectl create secret generic vault-approle <span class="token punctuation">\</span></span>
<span class="line">  --from-literal<span class="token operator">=</span>role_id<span class="token operator">=</span><span class="token variable"><span class="token variable">$(</span>vault <span class="token builtin class-name">read</span> <span class="token parameter variable">-field</span><span class="token operator">=</span>role_id auth/approle/role/k8s-role/role-id<span class="token variable">)</span></span> <span class="token punctuation">\</span></span>
<span class="line">  --from-literal<span class="token operator">=</span>secret_id<span class="token operator">=</span><span class="token variable"><span class="token variable">$(</span>vault <span class="token function">write</span> <span class="token parameter variable">-force</span> <span class="token parameter variable">-field</span><span class="token operator">=</span>secret_id auth/approle/role/k8s-role/secret-id<span class="token variable">)</span></span></span>
<span class="line"></span></code></pre></div><p>AppRole로 인증하는 Vault Agent를 위한 구성 파일을 <code>vault-agent-config.hcl</code>에 설정한다. ConfigMap에 저장한다.</p>
<div class="language-bash" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="line"><span class="token function">cat</span> <span class="token operator">&lt;&lt;</span><span class="token string">EOF<span class="token bash punctuation"> <span class="token operator">|</span> kubectl create configmap vault-agent-config --from-file<span class="token operator">=</span>agent-config.hcl<span class="token operator">=</span>/dev/stdin</span></span>
<span class="line">vault {</span>
<span class="line">  address = "http://10.100.11.233:8200"</span>
<span class="line">}</span>
<span class="line"></span>
<span class="line">auto_auth {</span>
<span class="line">  method "approle" {</span>
<span class="line">    config = {</span>
<span class="line">      role_id_file_path = "/etc/vault/approle/role_id"</span>
<span class="line">      secret_id_file_path = "/etc/vault/approle/secret_id"</span>
<span class="line">    }</span>
<span class="line">  }</span>
<span class="line"></span>
<span class="line">  sink "file" {</span>
<span class="line">    config = {</span>
<span class="line">      path = "/etc/vault-agent-token/token"</span>
<span class="line">    }</span>
<span class="line">  }</span>
<span class="line">}</span>
<span class="line"></span>
<span class="line">template_config {</span>
<span class="line">	static_secret_render_interval = "20s"</span>
<span class="line">}</span>
<span class="line"></span>
<span class="line">template {</span>
<span class="line">  destination = "/etc/secrets/index.html"</span>
<span class="line">  contents = &lt;&lt;EOH</span>
<span class="line">  &lt;html&gt;</span>
<span class="line">  &lt;body&gt;</span>
<span class="line">  &lt;p&gt;Secret Value: {{ with secret "secret/data/my-k8s-secret" }}{{ .Data.data.foo }}{{ end }}&lt;/p&gt;</span>
<span class="line">  &lt;/body&gt;</span>
<span class="line">  &lt;/html&gt;</span>
<span class="line">  EOH</span>
<span class="line">}</span>
<span class="line">EOF</span></span>
<span class="line"></span></code></pre></div><p>AppRole ID과 SecretID, Vault Agent Config 를 사용하는 샘플 앱을 실행한다. 다음은 Nginx를 사용한 Deployment Yaml의 예이다.</p>
<div class="language-bash" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="line">kubectl apply <span class="token parameter variable">-f</span> - <span class="token operator">&lt;&lt;</span><span class="token string">EOF</span>
<span class="line">apiVersion: apps/v1</span>
<span class="line">kind: Deployment</span>
<span class="line">metadata:</span>
<span class="line">  name: nginx-vault-demo</span>
<span class="line">spec:</span>
<span class="line">  replicas: 1</span>
<span class="line">  selector:</span>
<span class="line">    matchLabels:</span>
<span class="line">      app: nginx-vault-demo</span>
<span class="line">  template:</span>
<span class="line">    metadata:</span>
<span class="line">      labels:</span>
<span class="line">        app: nginx-vault-demo</span>
<span class="line">    spec:</span>
<span class="line">      containers:</span>
<span class="line">      - name: nginx</span>
<span class="line">        image: nginx:latest</span>
<span class="line">        ports:</span>
<span class="line">        - containerPort: 80</span>
<span class="line">        volumeMounts:</span>
<span class="line">        - name: html-volume</span>
<span class="line">          mountPath: /usr/share/nginx/html</span>
<span class="line">      - name: vault-agent-sidecar</span>
<span class="line">        image: hashicorp/vault:latest</span>
<span class="line">        args:</span>
<span class="line">          - "agent"</span>
<span class="line">          - "-config=/etc/vault/agent-config.hcl"</span>
<span class="line">        volumeMounts:</span>
<span class="line">        - name: vault-agent-config</span>
<span class="line">          mountPath: /etc/vault</span>
<span class="line">        - name: vault-approle</span>
<span class="line">          mountPath: /etc/vault/approle</span>
<span class="line">        - name: vault-token</span>
<span class="line">          mountPath: /etc/vault-agent-token</span>
<span class="line">        - name: html-volume</span>
<span class="line">          mountPath: /etc/secrets</span>
<span class="line">      volumes:</span>
<span class="line">      - name: vault-agent-config</span>
<span class="line">        configMap:</span>
<span class="line">          name: vault-agent-config</span>
<span class="line">      - name: vault-approle</span>
<span class="line">        secret:</span>
<span class="line">          secretName: vault-approle</span>
<span class="line">      - name: vault-token</span>
<span class="line">        emptyDir: {}</span>
<span class="line">      - name: html-volume</span>
<span class="line">        emptyDir: {}</span>
<span class="line">EOF</span></span>
<span class="line"></span></code></pre></div><p>Nginx의 Service를 등록한다.</p>
<div class="language-bash" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="line">kubectl apply <span class="token parameter variable">-f</span> - <span class="token operator">&lt;&lt;</span><span class="token string">EOF</span>
<span class="line">apiVersion: v1</span>
<span class="line">kind: Service</span>
<span class="line">metadata:</span>
<span class="line">  name: nginx-service</span>
<span class="line">spec:</span>
<span class="line">  selector:</span>
<span class="line">    app: nginx-vault-demo</span>
<span class="line">  ports:</span>
<span class="line">    - protocol: TCP</span>
<span class="line">      port: 80</span>
<span class="line">      targetPort: 80</span>
<span class="line">EOF</span></span>
<span class="line"></span></code></pre></div><p><code>port-forward</code>를 이용하여 Nginx에서 정상적으로 랜더링된 vault의 시크릿을 포함한 페이지가 나타나는지 확인한다.</p>
<div class="language-bash" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="line">kubectl port-forward <span class="token variable"><span class="token variable">$(</span>kubectl get pods <span class="token parameter variable">-l</span> <span class="token assign-left variable">app</span><span class="token operator">=</span>nginx-vault-demo <span class="token parameter variable">-o</span> <span class="token assign-left variable">jsonpath</span><span class="token operator">=</span><span class="token string">'{.items[0].metadata.name}'</span><span class="token variable">)</span></span> <span class="token number">8080</span>:80</span>
<span class="line"></span></code></pre></div><figure><img src="https://raw.githubusercontent.com/Great-Stone/images/master/picgo/image-20231204105453607.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<p>Vault Agent 구성파일에서 <code>static_secret_render_interval</code>에 대한 정의가 있으므로, 20s 간격마다 변경된 KV 값으로 랜더링하는지 확인해본다.</p>
<div class="language-bash" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="line">vault kv put secret/my-k8s-secret <span class="token assign-left variable">foo</span><span class="token operator">=</span>my-k8s-secret-data-v2</span>
<span class="line"></span></code></pre></div><p>Pod 내의 <code>vault-agent-sidecar</code> 로그에 <code>rendered</code> 로그가 기록된다.</p>
<div class="language-log" data-highlighter="prismjs" data-ext="log" data-title="log"><pre class="language-log"><code><span class="line">│ <span class="token date number">2023-12-04T</span><span class="token time number">02:01:51.992Z</span> <span class="token punctuation">[</span><span class="token level info keyword">INFO</span><span class="token punctuation">]</span> <span class="token operator">(</span>runner<span class="token operator">)</span> rendered <span class="token string">"(dynamic)"</span> <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token string">"/etc/secrets/index.html"</span></span>
<span class="line"></span></code></pre></div><figure><img src="https://raw.githubusercontent.com/Great-Stone/images/master/picgo/image-20231204110230042.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<h2>2. Cloud Provider 인증 방식(e.g. AWS Auth)</h2>
<p>범용적인 AppRole 대신 Cloud Provider와의 인증 방식(여기서는 AWS 인증 방식)을 사용하여 Vault와 통신하는 구성을 적용할 수 있다.</p>
<p>EKS의 경우, EKS에 배포되는 Vault Agent는 AWS Role을 확인 가능하므로, AWS 인증 방식은 Vault가 AWS의 IAM 자격증명을 사용하여 인증을 수행하게 된다.</p>
<p>Vault AWS 인증 방식을 사용하기 위해서는 사전에 Vault AWS 인증에 사용할 Role이 필요하다.(아래는 Terraform으로의 구성 예제이다.)</p>
<details class="hint-container details"><summary>AWS Role create - Terraform Example</summary>
<div class="language-hcl" data-highlighter="prismjs" data-ext="hcl" data-title="hcl"><pre class="language-hcl"><code><span class="line"><span class="token keyword">provider<span class="token type variable"> "aws" </span></span><span class="token punctuation">{</span></span>
<span class="line">  <span class="token property">region</span> <span class="token punctuation">=</span> <span class="token string">"ap-northeast-2"</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">resource <span class="token type variable">"aws_iam_role"</span></span> <span class="token string">"eks_vault_auth_role"</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token property">name</span> <span class="token punctuation">=</span> <span class="token string">"eks-vault-auth-role"</span></span>
<span class="line"></span>
<span class="line">  <span class="token property">assume_role_policy</span> <span class="token punctuation">=</span> jsonencode(<span class="token punctuation">{</span></span>
<span class="line">    <span class="token property">Version</span> <span class="token punctuation">=</span> <span class="token string">"2012-10-17"</span>,</span>
<span class="line">    <span class="token property">Statement</span> <span class="token punctuation">=</span> <span class="token punctuation">[</span></span>
<span class="line">      <span class="token punctuation">{</span></span>
<span class="line">        <span class="token property">Action</span> <span class="token punctuation">=</span> <span class="token string">"sts:AssumeRole"</span>,</span>
<span class="line">        <span class="token property">Effect</span> <span class="token punctuation">=</span> <span class="token string">"Allow"</span>,</span>
<span class="line">        <span class="token property">Principal</span> <span class="token punctuation">=</span> <span class="token punctuation">{</span></span>
<span class="line">          <span class="token property">Service</span> <span class="token punctuation">=</span> <span class="token string">"ec2.amazonaws.com"</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">      <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">]</span></span>
<span class="line">  <span class="token punctuation">}</span>)</span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># Vault에 접근할 수 있는 역할에 대한 정책 (필요에 따라 수정)</span></span>
<span class="line"><span class="token keyword">resource <span class="token type variable">"aws_iam_role_policy"</span></span> <span class="token string">"vault_access"</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token property">name</span> <span class="token punctuation">=</span> <span class="token string">"VaultAccess"</span></span>
<span class="line">  <span class="token property">role</span> <span class="token punctuation">=</span> aws_iam_role.eks_vault_auth_role.id</span>
<span class="line"></span>
<span class="line">  <span class="token property">policy</span> <span class="token punctuation">=</span> jsonencode(<span class="token punctuation">{</span></span>
<span class="line">    <span class="token property">Version</span> <span class="token punctuation">=</span> <span class="token string">"2012-10-17"</span>,</span>
<span class="line">    <span class="token property">Statement</span> <span class="token punctuation">=</span> <span class="token punctuation">[</span></span>
<span class="line">      <span class="token punctuation">{</span></span>
<span class="line">        <span class="token property">Action</span> <span class="token punctuation">=</span> <span class="token punctuation">[</span></span>
<span class="line">          <span class="token string">"ec2:DescribeInstances"</span>,</span>
<span class="line">          <span class="token string">"ec2:DescribeTags"</span></span>
<span class="line">        <span class="token punctuation">]</span>,</span>
<span class="line">        <span class="token property">Effect</span>   <span class="token punctuation">=</span> <span class="token string">"Allow"</span>,</span>
<span class="line">        <span class="token property">Resource</span> <span class="token punctuation">=</span> <span class="token string">"*"</span></span>
<span class="line">      <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">]</span></span>
<span class="line">  <span class="token punctuation">}</span>)</span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">output<span class="token type variable"> "role_arn" </span></span><span class="token punctuation">{</span></span>
<span class="line">  <span class="token property">value</span> <span class="token punctuation">=</span> aws_iam_role.eks_vault_auth_role.arn</span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre></div></details>
<p>Vault 서버에서 AWS 인증 방식을 활성화한다.</p>
<div class="language-bash" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="line">vault auth <span class="token builtin class-name">enable</span> aws</span>
<span class="line"></span></code></pre></div><p>AWS 역할을 생성하고, 해당 역할에 적절한 정책을 할당한다. 이 역할은 EKS에서 실행되는 서비스나 애플리케이션이 Vault에 인증할 때 사용된다. (terraform으로 생성한 경우 role_arn output에 출력된 결과를 <code>bound_iam_principal_arn</code>에 입력해준다.)</p>
<div class="language-text" data-highlighter="prismjs" data-ext="text" data-title="text"><pre class="language-text"><code><span class="line">vault write auth/aws/role/k8s-role \</span>
<span class="line">    auth_type=iam \</span>
<span class="line">    bound_iam_principal_arn="arn:aws:iam::&lt;AWS_ACCOUNT_ID&gt;:role/&lt;EKS_ROLE_NAME&gt;" \</span>
<span class="line">    policies=my-secret \</span>
<span class="line">    ttl=1h</span>
<span class="line"></span></code></pre></div><p>AWS로 인증하는 Vault Agent를 위한 구성 파일을 <code>vault-agent-config-aws.hcl</code>에 설정한다. ConfigMap에 저장한다.</p>
<div class="language-bash" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="line"><span class="token function">cat</span> <span class="token operator">&lt;&lt;</span><span class="token string">EOF<span class="token bash punctuation"> <span class="token operator">|</span> kubectl create configmap vault-agent-config-aws --from-file<span class="token operator">=</span>agent-config.hcl<span class="token operator">=</span>/dev/stdin</span></span>
<span class="line">vault {</span>
<span class="line">  address = "http://10.100.11.233:8200"</span>
<span class="line">}</span>
<span class="line"></span>
<span class="line">auto_auth {</span>
<span class="line">  method "aws" {</span>
<span class="line">    mount_path = "auth/aws"</span>
<span class="line">    config = {</span>
<span class="line">      type = "iam"</span>
<span class="line">      role = "k8s-role"</span>
<span class="line">    }</span>
<span class="line">  }</span>
<span class="line"></span>
<span class="line">  sink "file" {</span>
<span class="line">    config = {</span>
<span class="line">      path = "/etc/vault-agent-token/token"</span>
<span class="line">    }</span>
<span class="line">  }</span>
<span class="line">}</span>
<span class="line"></span>
<span class="line">template_config {</span>
<span class="line">	static_secret_render_interval = "20s"</span>
<span class="line">}</span>
<span class="line"></span>
<span class="line">template {</span>
<span class="line">  destination = "/etc/secrets/index.html"</span>
<span class="line">  contents = &lt;&lt;EOH</span>
<span class="line">  &lt;html&gt;</span>
<span class="line">  &lt;body&gt;</span>
<span class="line">  &lt;p&gt;Secret Value: {{ with secret "secret/data/my-k8s-secret" }}{{ .Data.data.foo }}{{ end }}&lt;/p&gt;</span>
<span class="line">  &lt;/body&gt;</span>
<span class="line">  &lt;/html&gt;</span>
<span class="line">  EOH</span>
<span class="line">}</span>
<span class="line">EOF</span></span>
<span class="line"></span></code></pre></div><p>Deployment는 다음과 같이 수정하여 적용한다.  AppRole 구성에서의 관련 설정들이 제외된다.</p>
<div class="language-bash" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="line">kubectl apply <span class="token parameter variable">-f</span> - <span class="token operator">&lt;&lt;</span><span class="token string">EOF</span>
<span class="line">apiVersion: apps/v1</span>
<span class="line">kind: Deployment</span>
<span class="line">metadata:</span>
<span class="line">  name: nginx-vault-demo</span>
<span class="line">spec:</span>
<span class="line">  replicas: 1</span>
<span class="line">  selector:</span>
<span class="line">    matchLabels:</span>
<span class="line">      app: nginx-vault-demo</span>
<span class="line">  template:</span>
<span class="line">    metadata:</span>
<span class="line">      labels:</span>
<span class="line">        app: nginx-vault-demo</span>
<span class="line">    spec:</span>
<span class="line">      containers:</span>
<span class="line">      - name: nginx</span>
<span class="line">        image: nginx:latest</span>
<span class="line">        ports:</span>
<span class="line">        - containerPort: 80</span>
<span class="line">        volumeMounts:</span>
<span class="line">        - name: html-volume</span>
<span class="line">          mountPath: /usr/share/nginx/html</span>
<span class="line">      - name: vault-agent-sidecar</span>
<span class="line">        image: hashicorp/vault:latest</span>
<span class="line">        args:</span>
<span class="line">          - "agent"</span>
<span class="line">          - "-config=/etc/vault/agent-config.hcl"</span>
<span class="line">        volumeMounts:</span>
<span class="line">        - name: vault-agent-config-aws</span>
<span class="line">          mountPath: /etc/vault</span>
<span class="line">        - name: vault-token</span>
<span class="line">          mountPath: /etc/vault-agent-token</span>
<span class="line">        - name: html-volume</span>
<span class="line">          mountPath: /etc/secrets</span>
<span class="line">      volumes:</span>
<span class="line">      - name: vault-agent-config</span>
<span class="line">        configMap:</span>
<span class="line">          name: vault-agent-config</span>
<span class="line">      - name: vault-token</span>
<span class="line">        emptyDir: {}</span>
<span class="line">      - name: html-volume</span>
<span class="line">        emptyDir: {}</span>
<span class="line">EOF</span></span>
<span class="line"></span></code></pre></div>]]></content:encoded>
      <enclosure url="https://raw.githubusercontent.com/Great-Stone/images/master/picgo/Monosnap%20Samsung%20MX%20-%20Multicloud%20-%20Vault%20%7C%20onemodel%202023-12-04%2011-55-09.png" type="image/png"/>
    </item>
    <item>
      <title>2023년 11월</title>
      <link>https://docmoa.github.io/04-HashiCorp/08-Updates/98-2023/2023-11.html</link>
      <guid>https://docmoa.github.io/04-HashiCorp/08-Updates/98-2023/2023-11.html</guid>
      <source url="https://docmoa.github.io/rss.xml">2023년 11월</source>
      <description>2023년 11월 Update</description>
      <pubDate>Fri, 03 Nov 2023 05:48:51 GMT</pubDate>
      <content:encoded><![CDATA[
<h2>Product 소개</h2>
<ul>
<li>Infrastructure and security releases open HashiConf 2023
<ul>
<li><a href="https://www.hashicorp.com/blog/infrastructure-security-lifecycle-releases-open-hashiconf-2023" target="_blank" rel="noopener noreferrer">Hashicorp Blog</a></li>
<li>샌프란시스코에서 개최된 Hashiconf 2023 에서 8가지의 솔루션에 대해 그룹을 크게 Infrastructure 와 Security 로 구분지어 앞으로의 솔루션 포트폴리오 및 업데이트를 진행하며, Terraform test framework, Vault Secret Sync, Vault Radar 등 워크플로우 개선을 위한 새로운 기능이 공개했습니다. 자세한 사항은 행사 현장을 직접 다녀온 이들이 전해주는 <a href="https://www.linkedin.com/search/results/content/?fromMember=%5B%22ACoAABFOyc0BZBke7ai9SSnSjeoYufUuYByUFqo%22%5D&amp;heroEntityKey=urn%3Ali%3Afsd_profile%3AACoAABFOyc0BZBke7ai9SSnSjeoYufUuYByUFqo&amp;keywords=jin%20sol%20kim&amp;position=0&amp;searchId=ccb5024f-0353-4b04-a8e3-41e3bace4159&amp;sid=_%40V&amp;update=urn%3Ali%3Afs_updateV2%3A(urn%3Ali%3Aactivity%3A7126034287874699264%2CBLENDED_SEARCH_FEED%2CEMPTY%2CDEFAULT%2Cfalse)" target="_blank" rel="noopener noreferrer">Hashicorp Korea: Hashiconf 2023</a> 에서 확인하세요!</li>
</ul>
</li>
</ul>
<h2>Product Update</h2>
<ul>
<li>Terraform
<ul>
<li>CLI
<ul>
<li><a href="https://github.com/hashicorp/terraform/releases/tag/v1.6.0" target="_blank" rel="noopener noreferrer">1.6 Release</a>
<ul>
<li><code>terraform test</code> 기능 추가 - 작성한 terraform code 에 대해 .tftest.hcl code 를 작성하여 검증 지원</li>
<li>Terraform CLI 설치 대상 OS 최소버전 명시
<ul>
<li>MacOS: 10.15 Catalina 이상</li>
<li>Windows: Windows 10 또는 Windows Server 2016 이상</li>
</ul>
</li>
<li>S3 Remote Backend 설정 시 AWS 서비스 endpoint 지정에 필요한 환경변수 정의 - <code>AWS_ENDPOINT_URL_DYNAMODB</code>, <code>AWS_ENDPOINT_URL_IAM</code>, <code>AWS_ENDPOINT_URL_S3</code>, <code>AWS_ENDPOINT_URL_STS</code></li>
</ul>
</li>
</ul>
</li>
<li><a href="https://developer.hashicorp.com/terraform/enterprise/releases" target="_blank" rel="noopener noreferrer">Enterprise Release</a>
<ul>
<li><a href="https://developer.hashicorp.com/terraform/enterprise/releases/2023/v202310-1" target="_blank" rel="noopener noreferrer">10월 Release</a> 출시 (<code>v202310-1 (741)</code>)</li>
<li>필수 Upgrade Versison: Release Note 에서 * 표기된 Version 은 필수로 거쳐야 하는 Version (예: v202207-2)</li>
<li>v202309-1 release 부터 FDO (<a href="https://developer.hashicorp.com/terraform/enterprise/flexible-deployments" target="_blank" rel="noopener noreferrer">flexible deployment options</a>) 지원하며,<code>consolidated_services_enabled</code> 설정 여부에 따라 기존 replicated 설치 방식 사용 지원.</li>
<li>Known Issue 1. Azure DevOps VCS 연동 시 발생하는 Known Issue 에 대해 Azure DevOps Server 의 버전을 <code>2020 Update 1.2 Patch 7</code> 로 업그레이드 하여 해결</li>
<li>Known Issue 2. GCP 환경에서 <code>consolidated_services_enabled</code> 설정 활성화하고 설치 시 발생하는 Object Storage Issue 는 v202311-1 에서 개선 예정</li>
</ul>
</li>
<li>Provider
<ul>
<li><a href="https://github.com/hashicorp/terraform-provider-aws/releases/tag/v5.23.1" target="_blank" rel="noopener noreferrer">AWS v5.23.1 주요 수정사항</a>
<ul>
<li>Bug Fix
<ul>
<li>data-source/aws_lambda_function 에 대해 vpc_config.ipv6_allowed_for_dual_stack 설정 시 발생하는 오류 개선</li>
</ul>
</li>
</ul>
</li>
<li><a href="https://github.com/hashicorp/terraform-provider-azurerm/releases/tag/v3.78.0" target="_blank" rel="noopener noreferrer">Azure v3.78.0 주요 수정사항</a>
<ul>
<li>신규 resource 추가
<ul>
<li>azurerm_resource_management_private_link_association</li>
</ul>
</li>
<li>기능 개선
<ul>
<li>azurerm_redis_enterprise_cluster 에 대한 Japan East 리전 설정 지원</li>
</ul>
</li>
<li>Bug Fix
<ul>
<li>azurerm_backup_policy_vm 에 대해 현재 시간정보 사용 관련 오류 개선</li>
</ul>
</li>
</ul>
</li>
<li><a href="https://github.com/hashicorp/terraform-provider-google/releases/tag/v5.4.0" target="_blank" rel="noopener noreferrer">GCP v5.4.0 주요 수정사항</a>
<ul>
<li>신규 resource 추가
<ul>
<li>google_cloud_identity_group_lookup</li>
<li>google_network_connectivity_policy_based_route</li>
<li>google_pubsub_schema_iam_</li>
</ul>
</li>
<li>기능 개선
<ul>
<li>google_bigquery_connection 에 대해 cloud_spanner.use_serverless_analytics 설정 대신 cloud_spanner.use_data_boost 설정 지원</li>
<li>google_bigquery_connection 에 대해 cloud_spanner.database_role, cloud_spanner.use_data_boost, cloud_spanner.max_parallelism 설정 지원</li>
<li>google_bigquery_dataset.access 에 대해 iam_member 설정 지원</li>
</ul>
</li>
<li>Bug Fix
<ul>
<li>google_bigquery_capacity_commitment 에 대해 잘못된 capacity_commitment_id 설정으로 인한 자원 재생성 오류 개선</li>
<li>cloudrunv2 에 대해 annotations 그리고 labels 관련 오류 개선</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li>Vault
<ul>
<li>1.15.1
<ul>
<li>상세 <a href="https://github.com/hashicorp/vault/releases/tag/v1.15.1" target="_blank" rel="noopener noreferrer">Release Note</a></li>
<li>Secret Sync 관련 telemetry 추가</li>
<li>UI 개선</li>
<li>Audit Device 설정 관련 <code>file</code> 사용 시 SIGHUP 에서 발생하는 log file 재열기 오류 개선</li>
<li>AWS Auth Method 관련 Client Config 가 존재하지 않는 경우 발생하는 패닉 오류 개선</li>
<li>Transit Engine 관련 managed key 사용 시 sign/verify 과정 추가 key auto rotation 불가하도록 개선</li>
<li>DB Secret Engine 관련 Mongo DB 에 대해 admin 이 아닌 계정에 대한 root rotate 지원</li>
</ul>
</li>
</ul>
</li>
<li>Consul
<ul>
<li>1.16.2
<ul>
<li>상세 <a href="https://github.com/hashicorp/consul/releases/tag/v1.16.2" target="_blank" rel="noopener noreferrer">Release Note</a></li>
<li>Vault 와 연동하여 사용하는 인증서 관련 Leaf Cert 생성 시 발생하는 오류 개선</li>
<li>Snapshot 기반 복원 후 Envoy Endpoint 올바르게 생성되지 않는 이슈 해결</li>
</ul>
</li>
</ul>
</li>
<li>Nomad
<ul>
<li>1.6.2
<ul>
<li>상세 <a href="https://github.com/hashicorp/nomad/releases/tag/v1.6.2" target="_blank" rel="noopener noreferrer">Release Note</a></li>
<li>Service Mesh 위해 Consul 연동 시 upstream 설정 관련 DestinationPeer, DestinationType, LocalBindSocketPath 등 설정 지원</li>
<li>jobspec 관련 여러개의 cron 정의를 위해 crons 지원</li>
<li>UI 개선</li>
</ul>
</li>
</ul>
</li>
</ul>
]]></content:encoded>
    </item>
    <item>
      <title>2023년 10월</title>
      <link>https://docmoa.github.io/04-HashiCorp/08-Updates/98-2023/2023-10.html</link>
      <guid>https://docmoa.github.io/04-HashiCorp/08-Updates/98-2023/2023-10.html</guid>
      <source url="https://docmoa.github.io/rss.xml">2023년 10월</source>
      <description>2023년 10월 Update</description>
      <pubDate>Thu, 05 Oct 2023 03:27:21 GMT</pubDate>
      <content:encoded><![CDATA[
<h2>Product 소개</h2>
<ul>
<li>Creating a multi-cloud golden image pipeline with Terraform Cloud and HCP Packer
<ul>
<li><a href="https://www.hashicorp.com/blog/multicloud-golden-image-pipeline-terraform-cloud-hcp-packer" target="_blank" rel="noopener noreferrer">Hashicorp Blog</a></li>
<li>조직 내 클라우드 사용환경에서 "표준화" 되지 않은 VM OS Image 로 인해 장애 발생 시 케이스를 표준화 하지 못하고 대응에 미진한 경우를 종종 접하곤 합니다. Hashicorp Packer 와 Terraform 을 연동하여 조직 내 사용중인 각 클라우드 환경 마다 Golden OS Image 를 구성하고 이를 활용하여 인스턴스 자원 배포하는 과정까지의 라이프사이클을 "표준화" 함으로써 보다 더 효율적이고 안정적인 시스템 환경을 구성해보세요.</li>
</ul>
</li>
</ul>
<h2>Product Update</h2>
<ul>
<li>Terraform
<ul>
<li>CLI
<ul>
<li><a href="https://github.com/hashicorp/terraform/releases/tag/v1.5.7" target="_blank" rel="noopener noreferrer">1.5.7 Release</a>
<ul>
<li><code>terraform init</code> 수행 시 잘못된 경로로 모듈을 다운로드 하는 경우에 대한 오류 개선</li>
<li><code>terraform remote state</code> 관리 시 발생 가능한 state 간 호환성 불일치에 대한 이슈 방지</li>
</ul>
</li>
</ul>
</li>
<li><a href="https://developer.hashicorp.com/terraform/enterprise/releases" target="_blank" rel="noopener noreferrer">Enterprise Release</a>
<ul>
<li><a href="https://developer.hashicorp.com/terraform/enterprise/releases/2023/v202309-1" target="_blank" rel="noopener noreferrer">9월 Release</a> 출시 (<code>v202309-1 (733)</code>)</li>
<li>필수 Upgrade Versison: Release Note 에서 * 표기된 Version 은 필수로 거쳐야 하는 Version (예: v202207-2)</li>
<li>기존에 수십 가지의 container 로 분산 구성되어 있던 서비스 구성을 단일 container 로 통합 (terraform-enterprise). 이를 기반으로 <a href="https://developer.hashicorp.com/terraform/enterprise/flexible-deployments" target="_blank" rel="noopener noreferrer">flexible deployment options</a> 로써 VM 또는 K8S 등 다양한 플랫폼에 설치 및 구동방식 제공</li>
<li>Azure DevOps VCS 연동 시 발생하는 Known Issue 에 대해 Azure DevOps Server 의 버전을 <code>2020 Update 1.2 Patch 7</code> 로 업그레이드 하여 해결</li>
<li>Terraform Enterprise 로그인 진행 후 발생하는 <code>step-up</code> 추가 인증 이슈에 10월 Release 에서 개선 예정</li>
</ul>
</li>
<li>Provider
<ul>
<li><a href="https://github.com/hashicorp/terraform-provider-aws/releases/tag/v5.19.0" target="_blank" rel="noopener noreferrer">AWS v5.19.0 주요 수정사항</a>
<ul>
<li>기능 개선
<ul>
<li>aws_s3_bucket_object 에 대해 AWS SDK for Go v2 의 정책에 따라 metadata 의 keys 정보는 항상 소문자로 반환</li>
<li>aws_s3_object 에 대해 AWS SDK for Go v2 의 정책에 따라 metadata 의 keys 정보는 항상 소문자로 반환</li>
</ul>
</li>
<li>신규 resource 추가
<ul>
<li>aws_rds_custom_db_engine_version</li>
<li>aws_vpclattice_service_network</li>
</ul>
</li>
<li>Bug Fix
<ul>
<li>aws_cloudfront_distribution 에 대해 aws_cloudfront_continuous_deployment_policy 가 업데이트 됨에 따라 발생하는 오류 개선</li>
<li>aws_iam_* 에 대해 policy 에 존재 하는 중복 키로 인해 발생하는 validation 오류 개선</li>
</ul>
</li>
</ul>
</li>
<li><a href="https://github.com/hashicorp/terraform-provider-azurerm/releases/tag/v3.75.0" target="_blank" rel="noopener noreferrer">Azure v3.75.0 주요 수정사항</a>
<ul>
<li>신규 resource 추가
<ul>
<li>azurerm_application_load_balancer</li>
<li>azurerm_resource_management_private_link</li>
</ul>
</li>
<li>기능 개선
<ul>
<li>azurerm_kubernetes_cluster 에 대해 network_profile.network_policy 를 cilium 으로 migration 하도록 지원</li>
<li>azurerm_log_analytics_workspace 에 대해 data_collection_rule_id 설정 지원</li>
<li>azurerm_mysql_flexible_server 에 대해 io_scaling_enabled 설정 지원</li>
</ul>
</li>
<li>Bug Fix
<ul>
<li>azurerm_api_management_api 에 대해 openapi format 의 파일 import 시 발생하는 오류 개선</li>
<li>azurerm_key_vault_certificate 에 대해 soft-deleted 된 인증서 관련 오류 개선</li>
</ul>
</li>
</ul>
</li>
<li><a href="https://github.com/hashicorp/terraform-provider-google/releases/tag/v5.0.0" target="_blank" rel="noopener noreferrer">GCP v5.0.0 주요 수정사항</a>
<ul>
<li>신규 resource 추가
<ul>
<li>google_scc_folder_custom_module</li>
<li>google_scc_organization_custom_module</li>
</ul>
</li>
<li>기능 개선
<ul>
<li>default labels, terraform_labels, effective_labels 등 label 관련 기능 개선</li>
<li>provider level 의 credentials, access_token, impersonate_service_account 등의 정보 검증</li>
<li>terraform import 시 gcp resource id 에 대한 온전한 매핑 지원</li>
</ul>
</li>
<li>Bug Fix
<ul>
<li>bigquery 에 대해 view 와 materialized view 생성 관련 오류 개선</li>
<li>bigtable 에 대해 클러스터가 업데이트 중이거나 storage 타입 변경 시 발생하는 google_bigtable_instance 재생성 오류 개선</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li>Vault
<ul>
<li>1.15
<ul>
<li>상세 <a href="https://github.com/hashicorp/vault/releases/tag/v1.15.0" target="_blank" rel="noopener noreferrer">Release Note</a></li>
<li>Auth Method (alicloud, azure, cf, gcp, jet, k8s, oci 등) plugin 버전 업그레이드</li>
<li>RGP (Role Governing Policies) 설정 시 Namespace 단위로 적용</li>
<li>System Backend Path에 접근 가능한 Administrative Namespace 도입 (기존에는 root 만 가능)</li>
<li>UI 상에서 KV v2 의 Path 정보에 대한 복사 기능 지원하여 CLI 또는 API 에서의 활용 편의성 증가</li>
<li>UI 첫 페이지에 Dashbaord 도입</li>
<li>SAML Auth Method 지원</li>
</ul>
</li>
</ul>
</li>
<li>Consul
<ul>
<li>1.16.2
<ul>
<li>상세 <a href="https://github.com/hashicorp/consul/releases/tag/v1.16.2" target="_blank" rel="noopener noreferrer">Release Note</a></li>
<li>Vault 와 연동하여 사용하는 인증서 관련 Leaf Cert 생성 시 발생하는 오류 개선</li>
<li>Snapshot 기반 복원 후 Envoy Endpoint 올바르게 생성되지 않는 이슈 해결</li>
</ul>
</li>
</ul>
</li>
<li>Nomad
<ul>
<li>1.6.2
<ul>
<li>상세 <a href="https://github.com/hashicorp/nomad/releases/tag/v1.6.2" target="_blank" rel="noopener noreferrer">Release Note</a></li>
<li>Service Mesh 위해 Consul 연동 시 upstream 설정 관련 DestinationPeer, DestinationType, LocalBindSocketPath 등 설정 지원</li>
<li>jobspec 관련 여러개의 cron 정의를 위해 crons 지원</li>
<li>UI 개선</li>
</ul>
</li>
</ul>
</li>
</ul>
]]></content:encoded>
    </item>
    <item>
      <title>Vault +1.12 라이선스</title>
      <link>https://docmoa.github.io/04-HashiCorp/06-Vault/06-Config/vault-entierprise-license.html</link>
      <guid>https://docmoa.github.io/04-HashiCorp/06-Vault/06-Config/vault-entierprise-license.html</guid>
      <source url="https://docmoa.github.io/rss.xml">Vault +1.12 라이선스</source>
      <description>Vault +1.12 라이선스 관련 URL https://developer.hashicorp.com/vault/docs/enterprise/license/faq#q-how-do-the-license-termination-changes-affect-upgrades License 기한 영향도 expiration : 엔터...</description>
      <pubDate>Tue, 26 Sep 2023 23:02:12 GMT</pubDate>
      <content:encoded><![CDATA[
<div class="hint-container tip">
<p class="hint-container-title">관련 URL</p>
<p><a href="https://developer.hashicorp.com/vault/docs/enterprise/license/faq#q-how-do-the-license-termination-changes-affect-upgrades" target="_blank" rel="noopener noreferrer">https://developer.hashicorp.com/vault/docs/enterprise/license/faq#q-how-do-the-license-termination-changes-affect-upgrades</a></p>
</div>
<h2>License 기한 영향도</h2>
<ul>
<li>expiration : 엔터프라이즈 사용 기간의 만료</li>
<li>termination : 라이선스 사용 종료</li>
<li>expiration ~ termination 기간을 유예기간이라 하며, 이 때 Vault는 잠김(Seal)</li>
<li>라이선스 적용 가이드
<ul>
<li><a href="https://www.hashicorp.com/products/vault/trial" target="_blank" rel="noopener noreferrer">https://www.hashicorp.com/products/vault/trial</a></li>
<li>평가 라이선스는 유예기간이 1일</li>
<li>평가 요청(한국): <a href="mailto:korea@hasihcorp.com" target="_blank" rel="noopener noreferrer">korea@hasihcorp.com</a></li>
</ul>
</li>
</ul>
<h2>라이선스 exprire(기간 만료)</h2>
<ul>
<li>
<p>License</p>
<ul>
<li>Expiration : 2022-6-19</li>
<li>Termination : 2032-6-18</li>
</ul>
</li>
<li>
<p>측정 시점 : 2022-12-9</p>
</li>
<li>
<p>Case 1 : Vault 바이너리가 릴리즈된 시점이 expiration 기간보다 이전인 경우</p>
<ul>
<li>
<p>실행 가능</p>
</li>
<li>
<p>사용은 불가</p>
<div class="language-log" data-highlighter="prismjs" data-ext="log" data-title="log"><pre class="language-log"><code><span class="line"><span class="token date number">2022-12-09T</span><span class="token time number">14:39:09.474+0900</span> <span class="token punctuation">[</span><span class="token level error important">ERROR</span><span class="token punctuation">]</span> <span class="token property">core.licensing:</span> <span class="token property">core:</span> <span class="token property">licensing error:</span> expiration_time<span class="token operator">=</span><span class="token string">"2022-06-19 00:00:00 +0000 UTC"</span> time_left<span class="token operator">=</span><span class="token operator">-</span>4157h39m9s</span>
<span class="line"></span></code></pre></div></li>
</ul>
</li>
<li>
<p>Case 2 : Vault 바이너리가 릴리즈된 시점이 expiration 기간보다 이후인 경우</p>
<ul>
<li>
<p>실행 불가</p>
<div class="language-log" data-highlighter="prismjs" data-ext="log" data-title="log"><pre class="language-log"><code><span class="line"><span class="token property">Error initializing core:</span> <span class="token property">licensing could not be initialized:</span> <span class="token property">license validation failed:</span> <span class="token number">1</span> error occurred<span class="token operator">:</span></span>
<span class="line">	<span class="token operator">*</span> license expiration date is before version build date</span>
<span class="line"></span></code></pre></div></li>
</ul>
</li>
<li>
<p>Case 3 : 평가 라이선스의 Termination 시점 이후</p>
<ul>
<li>실행 불가</li>
</ul>
</li>
<li>
<p>Case 3 : 일반 라이선스의 Termination 시점 이후</p>
<ul>
<li>바이너리 릴리즈 기준으로 expiration 기간과 비교하여 Case1, 2와 같이 동작</li>
</ul>
</li>
</ul>
<h2>라이선스 갱신</h2>
<p>expiration되었지만 실행은 가능한 이유</p>
<ul>
<li>운영중인 경우 프로세스 다운은 발생하지 않음</li>
<li><code>/sys/config/reload/license</code> 로 변경된 환경변수 또는 파일을 다시 읽음
<ul>
<li>내용 : <a href="https://developer.hashicorp.com/vault/docs/enterprise/license/autoloading" target="_blank" rel="noopener noreferrer">https://developer.hashicorp.com/vault/docs/enterprise/license/autoloading</a></li>
<li>구성 파일에서 <code>license_path</code>로 지정된 파일 경로 입력</li>
<li>환경 변수 <code>VAULT_LICENSE</code>에 라이선스 내용 입력</li>
<li>환경 변수 <code>VAULT_LICENSE_PATH</code>에 라이선스 파일 경로 입력</li>
</ul>
</li>
</ul>
]]></content:encoded>
    </item>
    <item>
      <title>Transit (Import)</title>
      <link>https://docmoa.github.io/04-HashiCorp/06-Vault/02-Secret_Engine/transit-import.html</link>
      <guid>https://docmoa.github.io/04-HashiCorp/06-Vault/02-Secret_Engine/transit-import.html</guid>
      <source url="https://docmoa.github.io/rss.xml">Transit (Import)</source>
      <description>Vault Transit - Import (BYOK)</description>
      <pubDate>Thu, 21 Sep 2023 10:38:22 GMT</pubDate>
      <content:encoded><![CDATA[
<p>키 가져오기(Import) 기능은 HSM, 사용자 정의 키, 기타 외부 시스템에서 기존 키를 가져와야 하는 경우를 지원한다. 공개키(Public Key)만을 가져올 수도 있다.</p>
<div class="hint-container info">
<p class="hint-container-title">links</p>
<ul>
<li>
<p>Article : <a href="https://support.hashicorp.com/hc/en-us/articles/9742464723987-Importing-keys-into-transit-secret-engine-BYOK" target="_blank" rel="noopener noreferrer">https://support.hashicorp.com/hc/en-us/articles/9742464723987-Importing-keys-into-transit-secret-engine-BYOK</a></p>
</li>
<li>
<p>CLI : <a href="https://developer.hashicorp.com/vault/docs/commands/transit/import" target="_blank" rel="noopener noreferrer">https://developer.hashicorp.com/vault/docs/commands/transit/import</a></p>
</li>
<li>
<p>API : <a href="https://developer.hashicorp.com/vault/api-docs/secret/transit#import-key" target="_blank" rel="noopener noreferrer">https://developer.hashicorp.com/vault/api-docs/secret/transit#import-key</a></p>
</li>
</ul>
</div>
<h2>1. CLI</h2>
<p><code>transit import</code>와 <code>transit import-version</code>은 <a href="https://developer.hashicorp.com/vault/docs/secrets/transit#bring-your-own-key-byok" target="_blank" rel="noopener noreferrer">BYOK 메커니즘</a>을 통해 사용자가 생성한 키를 Transit 엔진에서 사용할 키로 가져온다.</p>
<ul>
<li><code>transit import</code> : 키를 새 키로 가져오며 이미 존재하는 경우 실패</li>
<li><code>transit import-version</code> : 기존 키를 새 버전의 키로 업데이트</li>
</ul>
<h2>2. OpenSSL을 사용하여 암복호화</h2>
<p><code>openssl</code>을 이용하여 RSA 키를 생성해보고, 데이터를 암호화 및 복호화</p>
<h3>2.1 RSA 키 생성</h3>
<p>먼저 <code>openssl</code>을 이용하여 RSA 키쌍을 생성한다. 이 예에서는 2048비트 키를 생성한다.</p>
<div class="language-bash" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="line"><span class="token comment"># Private 키</span></span>
<span class="line">openssl genrsa <span class="token parameter variable">-out</span> private_key.pem <span class="token number">2048</span></span>
<span class="line"><span class="token comment"># Public 키</span></span>
<span class="line">openssl rsa <span class="token parameter variable">-pubout</span> <span class="token parameter variable">-in</span> private_key.pem <span class="token parameter variable">-out</span> public_key.pem</span>
<span class="line"></span></code></pre></div><p><code>private_key.pem</code>에 개인 키가 저장되고 <code>public_key.pem</code>에 공개 키가 저장된다.</p>
<div class="hint-container note">
<p class="hint-container-title">생성된 PEM 예제</p>

</div>
]]></content:encoded>
    </item>
    <item>
      <title>Error: state snapshot was created by Terraform vX.Y.Z</title>
      <link>https://docmoa.github.io/04-HashiCorp/03-Terraform/04-TroubleShooting/error-state-snapshot-was-created-by-terraform-version.html</link>
      <guid>https://docmoa.github.io/04-HashiCorp/03-Terraform/04-TroubleShooting/error-state-snapshot-was-created-by-terraform-version.html</guid>
      <source url="https://docmoa.github.io/rss.xml">Error: state snapshot was created by Terraform vX.Y.Z</source>
      <description>Terraform Azure AdminUsername Error</description>
      <pubDate>Wed, 20 Sep 2023 02:21:13 GMT</pubDate>
      <content:encoded><![CDATA[
<table>
<thead>
<tr>
<th>Log</th>
</tr>
</thead>
<tbody>
<tr>
<td>Error: state snapshot was created by Terraform v0.13.2, which is newer than current v0.12.26; upgrade to Terraform v0.13.2 or greater to work with this state</td>
</tr>
</tbody>
</table>
<ul>
<li>버전관련 에러 메시지에 대해 몇가지 테스트 해본 결과, 상위버전으로 Terraform State가 생성 된 이후 하위 버전으로  Refresh/Plan/Apply 를 수행하는 경우에 발생하는 것으로 확인</li>
<li><code>terraform_remote_state</code> 는 버전에 관계 없이 워크스페이스 간에 output을 읽어올 수 있음을 확인</li>
</ul>
<h2>Example</h2>
<ul>
<li>0.12.x 로 생성된 state에서 0.13.x로 Refresh/Plan/Apply 수행 시 state의 버전이 업그레이드 됨</li>
<li>0.13.x 로 생성된 state에서 0.12.x로 Refresh/Plan/Apply 수행 시 동일한 에러 발생<br>
</li>
<li>0.13.x로 생성된 state를 "terraform_remote_state"로 다른 0.12.x인 워크스페이스에서 읽어오는 경우 정상적으로 동작</li>
</ul>
<p>따라서, 관련 에러가 발생한 워크스페이스의 설정에서 최종적으로 생서된 state의 버전과 동일한 실행 버전인지 확인이 필요하다. (아래 캡쳐와 같이 State 버전이 설정의 Terraform Version 보다 높은 경우 에러 발생)</p>
<div class="language-json" data-highlighter="prismjs" data-ext="json" data-title="json"><pre class="language-json"><code><span class="line"><span class="token punctuation">{</span></span>
<span class="line highlighted">  <span class="token property">"version"</span><span class="token operator">:</span> <span class="token number">4</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token property">"terraform_version"</span><span class="token operator">:</span> <span class="token string">"0.13.7"</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token property">"serial"</span><span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token property">"lineage"</span><span class="token operator">:</span> <span class="token string">"83b1b4d5-826a-ecc9-ce4a-ea41f06f93af"</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token property">"outputs"</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token property">"uuid_from_0_13"</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token property">"value"</span><span class="token operator">:</span> <span class="token string">"34ee63e3-860b-1a1b-c0fa-1546f922be5a-0.12"</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"string"</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token property">"resources"</span><span class="token operator">:</span> <span class="token punctuation">[</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">      <span class="token property">"mode"</span><span class="token operator">:</span> <span class="token string">"data"</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"terraform_remote_state"</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"v0_13"</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token property">"provider"</span><span class="token operator">:</span> <span class="token string">"provider[\"terraform.io/builtin/terraform\"]"</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token property">"instances"</span><span class="token operator">:</span> <span class="token punctuation">[</span></span>
<span class="line">        </span>
<span class="line">      <span class="token punctuation">]</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">  <span class="token punctuation">]</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre></div>
]]></content:encoded>
    </item>
    <item>
      <title>Private Platform</title>
      <link>https://docmoa.github.io/02-PrivatePlatform/</link>
      <guid>https://docmoa.github.io/02-PrivatePlatform/</guid>
      <source url="https://docmoa.github.io/rss.xml">Private Platform</source>
      <description>Private Platform Recent pages [ {{ (new Date(page.frontmatter.date)).toLocaleString() }} ]</description>
      <pubDate>Mon, 18 Sep 2023 13:12:54 GMT</pubDate>
      <content:encoded><![CDATA[
<h2>Recent pages</h2>
<ul>
  <li v-for="page in pages" :key="page.key">
    <a :to="page.path" href="undefined" target="_blank">{{ page.title }}</a>
    <span v-if="page.frontmatter.date">
      [ {{ (new Date(page.frontmatter.date)).toLocaleString() }} ]
    </span>
  </li>
</ul>]]></content:encoded>
    </item>
    <item>
      <title>Public Cloud</title>
      <link>https://docmoa.github.io/03-PublicCloud/</link>
      <guid>https://docmoa.github.io/03-PublicCloud/</guid>
      <source url="https://docmoa.github.io/rss.xml">Public Cloud</source>
      <description>Public Cloud Recent pages [ {{ (new Date(page.frontmatter.date)).toLocaleString() }} ]</description>
      <pubDate>Mon, 18 Sep 2023 13:12:54 GMT</pubDate>
      <content:encoded><![CDATA[
<h2>Recent pages</h2>
<ul>
  <li v-for="page in pages" :key="page.key">
    <a :to="page.path" href="undefined" target="_blank">{{ page.title }}</a>
    <span v-if="page.frontmatter.date">
      [ {{ (new Date(page.frontmatter.date)).toLocaleString() }} ]
    </span>
  </li>
</ul>
]]></content:encoded>
    </item>
    <item>
      <title>Kubernetes</title>
      <link>https://docmoa.github.io/07-Kubernetes/</link>
      <guid>https://docmoa.github.io/07-Kubernetes/</guid>
      <source url="https://docmoa.github.io/rss.xml">Kubernetes</source>
      <description>Kubernetes Recent pages [ {{ (new Date(page.frontmatter.date)).toLocaleString() }} ]</description>
      <pubDate>Mon, 18 Sep 2023 13:12:54 GMT</pubDate>
      <content:encoded><![CDATA[
<h2>Recent pages</h2>
<ul>
  <li v-for="page in pages" :key="page.key">
    <a :to="page.path" href="undefined" target="_blank">{{ page.title }}</a>
    <span v-if="page.frontmatter.date">
      [ {{ (new Date(page.frontmatter.date)).toLocaleString() }} ]
    </span>
  </li>
</ul>
]]></content:encoded>
    </item>
    <item>
      <title>Guides</title>
      <link>https://docmoa.github.io/00-Howto/02-Guide/</link>
      <guid>https://docmoa.github.io/00-Howto/02-Guide/</guid>
      <source url="https://docmoa.github.io/rss.xml">Guides</source>
      <description>Guides</description>
      <pubDate>Mon, 18 Sep 2023 13:12:54 GMT</pubDate>
      <content:encoded><![CDATA[
]]></content:encoded>
    </item>
    <item>
      <title>Tips</title>
      <link>https://docmoa.github.io/00-Howto/03-Tips/</link>
      <guid>https://docmoa.github.io/00-Howto/03-Tips/</guid>
      <source url="https://docmoa.github.io/rss.xml">Tips</source>
      <description>Tips</description>
      <pubDate>Mon, 18 Sep 2023 13:12:54 GMT</pubDate>
      <content:encoded><![CDATA[
]]></content:encoded>
    </item>
    <item>
      <title>Alibaba Cloud</title>
      <link>https://docmoa.github.io/03-PublicCloud/AlibabaCloud/</link>
      <guid>https://docmoa.github.io/03-PublicCloud/AlibabaCloud/</guid>
      <source url="https://docmoa.github.io/rss.xml">Alibaba Cloud</source>
      <description>Alibaba Cloud</description>
      <pubDate>Mon, 18 Sep 2023 13:12:54 GMT</pubDate>
      <content:encoded><![CDATA[
]]></content:encoded>
    </item>
    <item>
      <title>Azure</title>
      <link>https://docmoa.github.io/03-PublicCloud/Azure/</link>
      <guid>https://docmoa.github.io/03-PublicCloud/Azure/</guid>
      <source url="https://docmoa.github.io/rss.xml">Azure</source>
      <description>Azure</description>
      <pubDate>Mon, 18 Sep 2023 13:12:54 GMT</pubDate>
      <content:encoded><![CDATA[
]]></content:encoded>
    </item>
    <item>
      <title>NCP(Naver Cloud Platform)</title>
      <link>https://docmoa.github.io/03-PublicCloud/NCP/</link>
      <guid>https://docmoa.github.io/03-PublicCloud/NCP/</guid>
      <source url="https://docmoa.github.io/rss.xml">NCP(Naver Cloud Platform)</source>
      <description>NCP(Naver Cloud Platform)</description>
      <pubDate>Mon, 18 Sep 2023 13:12:54 GMT</pubDate>
      <content:encoded><![CDATA[
]]></content:encoded>
    </item>
    <item>
      <title>2023년 9월</title>
      <link>https://docmoa.github.io/04-HashiCorp/08-Updates/98-2023/2023-09.html</link>
      <guid>https://docmoa.github.io/04-HashiCorp/08-Updates/98-2023/2023-09.html</guid>
      <source url="https://docmoa.github.io/rss.xml">2023년 9월</source>
      <description>2023년 9월 Update</description>
      <pubDate>Mon, 04 Sep 2023 03:12:14 GMT</pubDate>
      <content:encoded><![CDATA[
<h2>Product 소개</h2>
<ul>
<li>Terraform ephemeral workspaces public beta now available
<ul>
<li><a href="https://www.hashicorp.com/blog/terraform-ephemeral-workspaces-public-beta-now-available" target="_blank" rel="noopener noreferrer">Hashicorp Blog</a></li>
<li>개발 및 테스트 등을 위해 임시로 사용하는 Workspace 에 대해 사용 완료 후 방치함으로 인해 발생되는 자원 낭비 또는 보안 유출 위험성을 방지하고자 Workspace 사용에 대해 미리 시간 설정을 할 수 있는 기능이 베타로 출시되었습니다. 이제, 정해놓은 타이머가 도래하면 Workspace 와 해당 Workspace 를 통해 생성한 자원을 자동 폐기 및 정리함으로써 자원 관리의 효율성을 높이고 미사용 자원에 대한 보안 유출 등을 방지할 수 있습니다. 베타 버전은 Terraform Cloud (Plus 요금제 이상) 에서 체험 및 사용 가능합니다.</li>
</ul>
</li>
</ul>
<h2>Product Update</h2>
<ul>
<li>Terraform
<ul>
<li>CLI
<ul>
<li><a href="https://github.com/hashicorp/terraform/releases/tag/v1.5.6" target="_blank" rel="noopener noreferrer">1.5.6 Release</a>
<ul>
<li>여러 개의 <code>terraform_remote_state</code> 를 읽어 오는 중 발생 가능한 오류에 대한 개선</li>
</ul>
</li>
</ul>
</li>
<li>
<ul>
<li><a href="https://developer.hashicorp.com/terraform/enterprise/releases/2023/v202308-1" target="_blank" rel="noopener noreferrer">8월 Release</a> 출시 (<code>v202308-1 (725)</code>)</li>
<li>필수 Upgrade Versison: Release Note 에서 * 표기된 Version 은 필수로 거쳐야 하는 Version (예: v202207-2)</li>
<li>Postgres DB v14.0, v14.1, v14.2, v14.3 에 대한 지원 종료</li>
<li>TFE 구동을 위한 Container 구성이  <code>terraform-enterprise</code> 라는 단일 Container 로 통합. <code>terraform plan</code> 또는 <code>terraform apply</code> 는 기존 방식과 동일하게 수행 때마다 agent container 생성 (적용시점: <code>v202309-1</code> 부터 적용)</li>
<li>Docker 19.03, 20.10 지원 종료</li>
<li><code>dynamic provider credentials</code> 에 대해 Workspace 내 Provider 당 설정 지원</li>
<li>UI 출력 및 Cloud Provider 사용 위한 Key 검증 처리 등 성능 개선</li>
</ul>
</li>
<li>Provider
<ul>
<li><a href="https://github.com/hashicorp/terraform-provider-aws/releases/tag/v5.15.0" target="_blank" rel="noopener noreferrer">AWS v5.15.0 주요 수정사항</a>
<ul>
<li>기능 개선
<ul>
<li>aws_efs_file_system 에 대해 name 설정 지원</li>
<li>aws_datasync_location_fsx_openzfs_file_system 에 대해 <code>setting protocol: Invalid address to set</code> 오류 수정</li>
<li>aws_opensearch_domain 에 대해 cluster_config.multi_az_with_standby_enabled 설정 지원</li>
</ul>
</li>
<li>Bug Fix
<ul>
<li>tag 사용 관련 오류 개선</li>
<li>aws_efs_file_system_policy 에 대해 IAM 관련 일관성 오류 개선</li>
<li>aws_kms_key 에 대해 tag 정보가 공란일 때 발생하는 <code>tag propagation: timeout while waiting for state to become 'TRUE'</code> 오류 개선</li>
</ul>
</li>
</ul>
</li>
<li><a href="https://github.com/hashicorp/terraform-provider-azurerm/releases/tag/v3.71.0" target="_blank" rel="noopener noreferrer">Azure v3.71.0 주요 수정사항</a>
<ul>
<li>신규 resource 추가
<ul>
<li>azurerm_databricks_workspace_root_dbfs_customer_managed_key</li>
</ul>
</li>
<li>기능 개선
<ul>
<li>azurerm_kubernetes_cluster 에 대해 sysctl_config 설정 가능 범위 확대</li>
<li>azurerm_linux(windows)_virtual_machine_scale_set 에 대해 자원 삭제 전 rolling upgrade 취소 지원</li>
</ul>
</li>
<li>Bug Fix
<ul>
<li>자동 복구를 위한 win32_status 설정 시 발생하는 오류 관련 azurerm_linux_web_app, azurerm_linux_web_app_slot, azurerm_windows_web_app, azurerm_windows_web_app_slot 자원에 대해 win32_status_code (3.63.0 이후 버전에서는 int로 유지) 로 대체</li>
<li>azurerm_kubernetes_cluster 에 대해 public_network_access_enabled 설정 삭제</li>
</ul>
</li>
</ul>
</li>
<li><a href="https://github.com/hashicorp/terraform-provider-google/releases/tag/v4.80.0" target="_blank" rel="noopener noreferrer">GCP v4.80.0 주요 수정사항</a>
<ul>
<li>신규 resource 추가
<ul>
<li>google_certificate_manager_trust_config</li>
<li>google_compute_region_security_policy_rule</li>
<li>google_sql_database_instance_latest_recovery_time</li>
<li>google_iam_deny_policy</li>
<li>google_bigquery_bi_reservation</li>
</ul>
</li>
<li>기능 개선
<ul>
<li>google_compute_target_instance 에 대해 security_policy 설정 지원</li>
<li>google_compute_target_pool 에 대해 security_policy 설정 지원</li>
<li>google_compute_instance 에 대해 regional disk 지원</li>
<li>google_container_cluster 에 대해 additional_pod_ranges_config 설정 지원</li>
<li>google_dns_response_policy 에 대해 networks 설정 지원 제거</li>
</ul>
</li>
<li>Bug Fix
<ul>
<li>bigquery 에 대해 table schema 대상 policy set 설정 해제 지원</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li>Vault
<ul>
<li>1.14.2
<ul>
<li>상세 <a href="https://github.com/hashicorp/vault/releases/tag/v1.14.2" target="_blank" rel="noopener noreferrer">Release Note</a></li>
<li>Azure Auth Method 에 대해 Auto auth 위한 Azure Workload Identity Federation 설정 지원</li>
<li>KMIP 에 대해 Namespace Lock/Unlock 설정 지원</li>
<li>Replication 관련 Flush 단계에서 쓰기 지원하여 Index 재생성 작업에 영향 주지 않도록 개선</li>
<li>Vault Agent Template 에 대해 VAULT_CACERT_BYTES 환경변수 사용 지원</li>
<li>Transform Engine 관련 Standby Node 에서 발생하는 인코딩 오류 개선</li>
</ul>
</li>
</ul>
</li>
<li>Consul
<ul>
<li>1.16.1
<ul>
<li>상세 <a href="https://github.com/hashicorp/consul/releases/tag/v1.16.1" target="_blank" rel="noopener noreferrer">Release Note</a></li>
<li><code>consul members</code> 명령어에 대해 -filter 설정 추가</li>
<li>operator/usage api 에 대해 node 수 출력 지원 (CLI 사용 시 consul operator usage 명령어 사용)</li>
<li>Service Mesh 관련 Virtual Service 및 Failover 에 대한  Transparent Proxy 성능 개선</li>
<li>Topology 관점 UI 출력 개선</li>
<li>Envoy Proxy 관련 xDS configuration 완료되기 전 구동 되어 발생하는 오류 개선</li>
<li>RSA Key 에 대해 사이즈가 2048 bits 이하여서 발생하는 오류를 검증 단계에서 미리 확인하도록 개선</li>
</ul>
</li>
</ul>
</li>
<li>Nomad
<ul>
<li>1.6.1
<ul>
<li>상세 <a href="https://github.com/hashicorp/nomad/releases/tag/v1.6.1" target="_blank" rel="noopener noreferrer">Release Note</a></li>
<li>Datacenter 내 Client Node 에 대해 논리적 파티션으로 구분지어 Job 배포 시 해당하는 Pool 에만 배포되도록 하는 Node Pool 기능 추가</li>
<li>Namespace 를 생성하고 각 Namespace 별 기본 Node Pool 지정 및 배포 허용 여부를 제어할 수 있는 Node Pool Governance 기능 추가</li>
<li>Job Status 및 Job Deployments 에 대한 UI 개선</li>
<li>Job Spec 소스코드에 대한 기존 Raw JSON 지원했던 부분에 대해 소스코드 원문을 UI 상에서 확인 및 수정할 수 있도록 개선</li>
<li>Podman 정식 지원</li>
<li>Job restart 명령어 지원 (기존에는 stop 후 start)</li>
</ul>
</li>
</ul>
</li>
</ul>
]]></content:encoded>
    </item>
    <item>
      <title>Nomad에서 Ansible로 Docker 설치와 Template 주의사항</title>
      <link>https://docmoa.github.io/04-HashiCorp/07-Nomad/05-SampleJob/install-ansible-docker.html</link>
      <guid>https://docmoa.github.io/04-HashiCorp/07-Nomad/05-SampleJob/install-ansible-docker.html</guid>
      <source url="https://docmoa.github.io/rss.xml">Nomad에서 Ansible로 Docker 설치와 Template 주의사항</source>
      <description>Nomad에서 Aisnble 실행 및 템플릿 주의사항</description>
      <pubDate>Wed, 30 Aug 2023 07:59:20 GMT</pubDate>
      <content:encoded><![CDATA[
<blockquote>
<p>참고 : <a href="https://discuss.hashicorp.com/t/escape-characters-recognized-as-a-variable-in-template-stanza/40525" target="_blank" rel="noopener noreferrer">https://discuss.hashicorp.com/t/escape-characters-recognized-as-a-variable-in-template-stanza/40525</a></p>
</blockquote>
<p>Nomad를 통해 Ops작업을 수행할 때 <code>sysbatch</code> 타입의 Job에 Ansible을 <code>raw_exec</code>로 실행하면 전체 노드에서 일괄로 작업을 수행할 수 있다.</p>
<p>Ansible에서 사용하는 문법 중 <code>{{}}</code>의 부호로 팩트를 사용하는 경우 Nomad에서 사용하는 Template의 <code>{{}}</code>과 겹쳐 오류가 발생한다.</p>
<div class="language-log" data-highlighter="prismjs" data-ext="log" data-title="log"><pre class="language-log"><code><span class="line"><span class="token property">Template failed:</span> <span class="token operator">(</span>dynamic<span class="token operator">)</span><span class="token operator">:</span> parse<span class="token operator">:</span> template<span class="token operator">:</span> <span class="token operator">:</span><span class="token number">23</span><span class="token operator">:</span> function <span class="token string">"ansible_distribution_release"</span> not defined</span>
<span class="line"></span></code></pre></div><p>이경우 Nomad에서 다음과 같이 표기하여 템플릿 문자에 대한 치환이 가능하다.</p>
<div class="language-hcl" data-highlighter="prismjs" data-ext="hcl" data-title="hcl"><pre class="language-hcl"><code><span class="line"> <span class="token punctuation">{</span><span class="token punctuation">{</span> --&gt; <span class="token punctuation">{</span><span class="token punctuation">{</span> <span class="token string">"{{"</span> <span class="token punctuation">}</span><span class="token punctuation">}</span></span>
<span class="line"> <span class="token punctuation">}</span><span class="token punctuation">}</span> --&gt; <span class="token punctuation">{</span><span class="token punctuation">{</span> <span class="token string">"}}"</span> <span class="token punctuation">}</span><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre></div><p>다음은 Ansible에서 <code>apt_repository</code> 수행 시 <code>ansible_architecture</code>와 <code>ansible_distribution_release</code> 같은 팩트 값을 Template으로 Playbook을 작성한 예제 이다.</p>
<div class="language-hcl" data-highlighter="prismjs" data-ext="hcl" data-title="hcl"><pre class="language-hcl"><code><span class="line">job <span class="token string">"install-ansible-docker"</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token property">datacenters</span> <span class="token punctuation">=</span> <span class="token punctuation">[</span><span class="token string">"hashitalks-kr"</span><span class="token punctuation">]</span>  <span class="token comment"># 사용할 데이터 센터 이름으로 수정</span></span>
<span class="line"></span>
<span class="line">  <span class="token property">type</span> <span class="token punctuation">=</span> <span class="token string">"sysbatch"</span>  <span class="token comment"># 배치 작업 유형</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">constraint</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token property">attribute</span> <span class="token punctuation">=</span> <span class="token string">"<span class="token interpolation"><span class="token punctuation">$</span><span class="token punctuation">{</span>attr<span class="token punctuation">.</span>os<span class="token punctuation">.</span>name<span class="token punctuation">}</span></span>"</span></span>
<span class="line">    <span class="token property">value</span>     <span class="token punctuation">=</span> <span class="token string">"ubuntu"</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">parameterized</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token property">payload</span>       <span class="token punctuation">=</span> <span class="token string">"forbidden"</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">  group <span class="token string">"install- group"</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">    task <span class="token string">"install-ansible-task"</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token keyword">lifecycle</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token property">hook</span> <span class="token punctuation">=</span> <span class="token string">"prestart"</span></span>
<span class="line">        <span class="token property">sidecar</span> <span class="token punctuation">=</span> <span class="token boolean">false</span></span>
<span class="line">      <span class="token punctuation">}</span></span>
<span class="line">      </span>
<span class="line">      <span class="token property">driver</span> <span class="token punctuation">=</span> <span class="token string">"raw_exec"</span>  <span class="token comment"># 외부 스크립트를 실행</span></span>
<span class="line"></span>
<span class="line">      <span class="token keyword">config</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token property">command</span> <span class="token punctuation">=</span> <span class="token string">"local/install_ansible.sh"</span></span>
<span class="line">      <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">      <span class="token keyword">template</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token property">destination</span> <span class="token punctuation">=</span> <span class="token string">"local/install_ansible.sh"</span></span>
<span class="line">        <span class="token property">data</span> <span class="token punctuation">=</span> <span class="token heredoc string">&lt;&lt;EOF</span>
<span class="line">#!/bin/bash</span>
<span class="line">sudo apt-get update</span>
<span class="line">sudo apt-get install -y ansible</span>
<span class="line">EOF</span></span>
<span class="line">      <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    task <span class="token string">"install-docker-task"</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token property">driver</span> <span class="token punctuation">=</span> <span class="token string">"raw_exec"</span>  <span class="token comment"># 외부 스크립트를 실행</span></span>
<span class="line"></span>
<span class="line">      <span class="token keyword">config</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token property">command</span> <span class="token punctuation">=</span> <span class="token string">"ansible-playbook"</span></span>
<span class="line">        <span class="token property">args</span> <span class="token punctuation">=</span> <span class="token punctuation">[</span></span>
<span class="line">          <span class="token string">"local/playbook.yml"</span></span>
<span class="line">        <span class="token punctuation">]</span></span>
<span class="line">      <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">      <span class="token keyword">env</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token property">JAVA_VERSION</span> <span class="token punctuation">=</span> <span class="token string">"<span class="token interpolation"><span class="token punctuation">$</span><span class="token punctuation">{</span>NOMAD_META_DesiredJavaVersion<span class="token punctuation">}</span></span>"</span></span>
<span class="line">      <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">      <span class="token keyword">template</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token property">destination</span> <span class="token punctuation">=</span> <span class="token string">"local/playbook.yml"</span></span>
<span class="line">        <span class="token property">data</span> <span class="token punctuation">=</span> &lt;&lt;EOF</span>
<span class="line"></span></code></pre></div>]]></content:encoded>
    </item>
    <item>
      <title>Key Management</title>
      <link>https://docmoa.github.io/04-HashiCorp/06-Vault/02-Secret_Engine/keymgmt.html</link>
      <guid>https://docmoa.github.io/04-HashiCorp/06-Vault/02-Secret_Engine/keymgmt.html</guid>
      <source url="https://docmoa.github.io/rss.xml">Key Management</source>
      <description>Key Management - AWS, Azure, GCP</description>
      <pubDate>Sun, 06 Aug 2023 23:41:33 GMT</pubDate>
      <content:encoded><![CDATA[
<blockquote>
<p>Key Management Secret Engine을 활성화 하기 위해서는 <code>ADP</code> 수준의 라이선스가 필요하다.</p>
</blockquote>
<p>Key Management 시크릿 엔진은 KMS(Key Management Service)를 공급하는 대상의 암호화 키의 배포 및 수명 주기 관리를 위한 워크플로를 제공한다. KMS 공급자 고유의 암호화 기능을 기존처럼 사용하면서도, 볼트에서 키를 중앙 집중식으로 제어할 수 있다.</p>
<p>볼트는 KMS의 구성에 사용되는 Key Meterial 원본을 생성하여 보유한다. 관리가능한 KMS에 대해 키 수명주기를 설정 및 관리하면 Key Meterial의 복사본이 대상에 배포된다. 이 방식으로 볼트는 KMS 서비스의 전체 수명 주기 관리 및 키 복구 수단을 제공한다. 지원되는 KMS는 다음과 같다.</p>
<ul>
<li>AWS KMS</li>
<li>Azure Key Vault</li>
<li>GCP Cloud KMS</li>
<li>PKCS#11 호환</li>
</ul>
<p>Key Management의 구성 및 동작의 순서는 다음과 같다.</p>
<ol>
<li>
<p>Key Management 시크릿 엔진인 <code>keymgmt</code>를 활성화</p>
</li>
<li>
<p>키 생성</p>
<ul>
<li><code>type</code> : 키 유형
<ul>
<li>AWS KMS 지원 유형: <code>aes256-gcm96</code></li>
<li>Azure Key Vault 지원 유형 : <code>rsa-2048</code>, <code>rsa-3072</code>, <code>rsa-4096</code></li>
<li>GCP Cloud KMS 지원 유형 : <code>aes256-gcm96</code>, <code>rsa-2048</code>, <code>rsa-3072</code>, <code>rsa-4096</code>, <code>ecdsa-p256</code>, <code>ecdsa-p384</code></li>
</ul>
</li>
</ul>
</li>
<li>
<p>지원되는 KMS 서비스 지정 및 공급자 별 인증 정보 등록</p>
<ul>
<li><code>awskms</code> : AWS KMS</li>
<li><code>azurekeyvault</code> : Azure Key Vault</li>
<li><code>gcpckms</code> : GCP Cloud KMS</li>
</ul>
</li>
<li>
<p>KMS 서비스에 키 생성</p>
<ul>
<li><code>purpose</code> : 목적
<ul>
<li><code>enctypt</code></li>
<li><code>dectypt</code></li>
<li><code>sign</code></li>
<li><code>verify</code></li>
<li><code>wrap</code></li>
<li><code>unwrap</code></li>
</ul>
</li>
<li><code>protection</code> : 키 보호 지정
<ul>
<li><code>hsm</code></li>
<li><code>software</code></li>
</ul>
</li>
</ul>
</li>
<li>
<p>관리를 위한 키 회전 (선택)</p>
</li>
<li>
<p>키 버전 활성/비활성 (선택)</p>
</li>
<li>
<p>KMS 서비스의 키 제거</p>
<ul>
<li>KMS 서비스의 키가 삭제되지만 키는 볼트에 저장</li>
<li>영구 제거를 위해서는 별도 키 삭제 호출</li>
</ul>
</li>
</ol>
<h3>keymgmt Secret Engine 활성화</h3>
<p><code>keymgmt</code> 시크릿 엔진을 활성화하여, 해당 엔드포인트에서 시크릿에 대한 관리를 수행한다. 관리 목적에 따라 별도의 엔드포인트를 <code>path</code>로 지정한다.</p>
<div class="language-bash" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="line">$ vault secrets <span class="token builtin class-name">enable</span> keymgmt</span>
<span class="line">Success<span class="token operator">!</span> Enabled the keymgmt secrets engine at: keymgmt/</span>
<span class="line"></span></code></pre></div><h2>1. AWS KMS</h2>
<h3>1.1 구성 요소</h3>
<ul>
<li>AWS KMS 관리를 위한 권한
<ul>
<li><code>kms:CreateKey</code></li>
<li><code>kms:GetParametersForImport</code></li>
<li><code>kms:ImportKeyMaterial</code></li>
<li><code>kms:EnableKey</code></li>
<li><code>kms:DisableKey</code></li>
<li><code>kms:ScheduleKeyDeletion</code></li>
<li><code>kms:CreateAlias</code></li>
<li><code>kms:UpdateAlias</code></li>
<li><code>kms:DeleteAlias</code></li>
<li><code>kms:ListAliases</code></li>
<li><code>kms:TagResource</code></li>
</ul>
</li>
<li><code>keymgmt</code> Secret Engine</li>
</ul>
<h3>1.2 Vault 가 대상 AWS KMS 관리 위해 사용할 자격증명</h3>
<p>Secret Engine 에 대한 활성화는 Secret Engine 에 접근하기 위해 사용되는 엔드포인트 정보만 생성되었을 뿐, 연동하고자 하는 대상 AWS 환경에 대한 정보에 대해서는 세부 설정이 필요하다. 이를 위해 Vault 가 대상 AWS 환경에 대해 접근, 자격증명 발급 그리고 생명주기 관리 작업을 수행할 수 있는 권한이 부여된 자격증명 발급이 필요하다.</p>
<ol>
<li>
<p><strong>자격증명 발급 및 생명주기 관리 권한을 위한 정책 생성</strong></p>
<blockquote>
<p>AWS IAM 정책 생성: <a href="https://docs.aws.amazon.com/ko_kr/IAM/latest/UserGuide/access_policies_create-console.html" target="_blank" rel="noopener noreferrer">https://docs.aws.amazon.com/ko_kr/IAM/latest/UserGuide/access_policies_create-console.html</a></p>
</blockquote>
<ol>
<li>
<p><a href="https://console.aws.amazon.com/iam/%EC%97%90%EC%84%9C" target="_blank" rel="noopener noreferrer">https://console.aws.amazon.com/iam/에서</a> IAM 콘솔에 접속.</p>
</li>
<li>
<p>왼쪽의 탐색 창에서 <strong>정책(Policies)</strong> 을 선택.</p>
</li>
<li>
<p><strong>정책 생성(Create policy)</strong> 을 선택.</p>
</li>
<li>
<p><strong>JSON</strong> 탭을 선택.</p>
</li>
<li>
<p>JSON 정책 문서 입력</p>
<ul>
<li>Action 란에 권한 부여를 포함한 자격 증명 발급 및 관리를 위한 IAM 서비스 관련 권한 작성</li>
<li>Resource 란의 <code>ACCOUNT-ID-WITHOUT-HYPHENS</code> 는 AWS 콘솔 우상단에서 확인 가능한 숫자 12자리로 구성된 계정 고유 ID 정보 입력</li>
</ul>
<div class="language-text" data-highlighter="prismjs" data-ext="text" data-title="text"><pre class="language-text"><code><span class="line">{</span>
<span class="line">  "Version": "2012-10-17",</span>
<span class="line">  "Statement": [</span>
<span class="line">    {</span>
<span class="line">      "Effect": "Allow",</span>
<span class="line">      "Action": [</span>
<span class="line">        "kms:CreateKey",</span>
<span class="line">        "kms:GetParametersForImport",</span>
<span class="line">        "kms:ImportKeyMaterial",</span>
<span class="line">        "kms:EnableKey",</span>
<span class="line">        "kms:DisableKey",</span>
<span class="line">        "kms:ScheduleKeyDeletion",</span>
<span class="line">        "kms:CreateAlias",</span>
<span class="line">        "kms:UpdateAlias",</span>
<span class="line">        "kms:DeleteAlias",</span>
<span class="line">        "kms:ListAliases",</span>
<span class="line">        "kms:TagResource"</span>
<span class="line">      ],</span>
<span class="line">      "Resource": ["*"]</span>
<span class="line">    }</span>
<span class="line">  ]</span>
<span class="line">}</span>
<span class="line"></span></code></pre></div></li>
<li>
<p>보안 경고, 오류 또는 일반 경고를 해결한 다음 <strong>정책 검토(Review policy)</strong> 선택.</p>
</li>
<li>
<p>정책 이름 정의 후 <strong>정책 생성(Create Policy)</strong> 선택 하여 생성 완료</p>
</li>
</ol>
</li>
<li>
<p><strong>자격증명 발급</strong></p>
<blockquote>
<p>AWS 계정 및 액세스 키 : <a href="https://docs.aws.amazon.com/ko_kr/powershell/latest/userguide/pstools-appendix-sign-up.html" target="_blank" rel="noopener noreferrer">https://docs.aws.amazon.com/ko_kr/powershell/latest/userguide/pstools-appendix-sign-up.html</a></p>
</blockquote>
<ol>
<li><a href="https://console.aws.amazon.com/iam/" target="_blank" rel="noopener noreferrer">https://console.aws.amazon.com/iam/</a> 에서 IAM 콘솔에 접속.</li>
<li>탐색 메뉴에서 <strong>사용자</strong> 선택.</li>
<li><strong>사용자 추가(Add User)</strong> 선택 하여 사용자 이름 지정</li>
<li><strong>직접 정책 연결(Attach policies directly)</strong> 선택하여 이전 단계에서 생성한 정책 선택</li>
<li><strong>사용자 생성(Create User)</strong> 선택하여 사용자 생성 완료</li>
<li><strong>Security credentials(보안 자격 증명)</strong> 탭을 연 다음 **Create access key(액세스 키 생성)**를 선택.</li>
<li>새 액세스 키를 보려면 [<strong>Show</strong>]를 선택. 키 정보는 아래와 같이 액세스 키 / 보안 액세스 키로 구성.
<ul>
<li>액세스 키 ID: <code>AKIAIOSFODNN7EXAMPLE</code></li>
<li>보안 액세스 키: <code>wJalrXUt******************XAMPLEKEY</code></li>
</ul>
</li>
<li>키 페어 파일을 다운로드하려면 [<strong>Download .csv file</strong>]을 선택</li>
</ol>
</li>
</ol>
<h3>1.3 Vault의 AWS KMS 구성</h3>
<p>AWS KMS에서 호환되는 암호화 키를 생성한다.</p>
<div class="language-text" data-highlighter="prismjs" data-ext="text" data-title="text"><pre class="language-text"><code><span class="line"> vault secrets enable keymgmt</span>
<span class="line"></span>
<span class="line">$ vault write -f keymgmt/key/aes256-gcm96 type="aes256-gcm96"</span>
<span class="line">Success! Data written to: keymgmt/key/aes256-gcm96</span>
<span class="line"></span></code></pre></div><p>생성된 암호화 키의 정보를 확인한다.</p>
<div class="language-bash" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="line">$ vault <span class="token builtin class-name">read</span> keymgmt/key/aes256-gcm96</span>
<span class="line">Key                    Value</span>
<span class="line"></span></code></pre></div>]]></content:encoded>
      <enclosure url="https://raw.githubusercontent.com/Great-Stone/images/master/uPic/KMS%20Console%202023-07-05%2021-15-20.png" type="image/png"/>
    </item>
    <item>
      <title>2023년 8월</title>
      <link>https://docmoa.github.io/04-HashiCorp/08-Updates/98-2023/2023-08.html</link>
      <guid>https://docmoa.github.io/04-HashiCorp/08-Updates/98-2023/2023-08.html</guid>
      <source url="https://docmoa.github.io/rss.xml">2023년 8월</source>
      <description>2023년 8월 Update</description>
      <pubDate>Tue, 01 Aug 2023 04:05:51 GMT</pubDate>
      <content:encoded><![CDATA[
<h2>Product 소개</h2>
<ul>
<li>Using Terraform dynamic provider credentials in your AWS landing zones
<ul>
<li><a href="https://www.hashicorp.com/blog/using-terraform-dynamic-provider-credentials-in-your-aws-landing-zones" target="_blank" rel="noopener noreferrer">Hashicorp Blog</a></li>
<li>지난 4월 소개된 Terraform 사용 시 필요한 대상 환경에 대한 클라우드 자격증명을 Vault 와 연동하여 동적으로 사용 및 관리하는 Dynamic Provider Credentials 기능을 AWS Landing Zone 에서도 사용하실 수 있습니다. Terraform 과 함께 Landing Zone 으로 시작하는 AWS 의 여정에서 더 보안 강화된 IaC 를 경험해보세요!</li>
</ul>
</li>
</ul>
<h2>Product Update</h2>
<ul>
<li>Terraform
<ul>
<li>CLI
<ul>
<li><a href="https://github.com/hashicorp/terraform/releases/tag/v1.5.4" target="_blank" rel="noopener noreferrer">1.5.4 Release</a>
<ul>
<li><a href="https://developer.hashicorp.com/terraform/language/checks" target="_blank" rel="noopener noreferrer"><code>check</code></a> Block 관련 오류 개선</li>
</ul>
</li>
</ul>
</li>
<li><a href="https://developer.hashicorp.com/terraform/enterprise/releases" target="_blank" rel="noopener noreferrer">Enterprise Release</a>
<ul>
<li><a href="https://developer.hashicorp.com/terraform/enterprise/releases/2023/v202307-1" target="_blank" rel="noopener noreferrer">7월 Release</a> 출시 (<code>v202307-1 (722)</code>)</li>
<li>필수 Upgrade Versison: Release Note 에서 * 표기된 Version 은 필수로 거쳐야 하는 Version (예: v202207-2)</li>
<li>TFE 구동을 위한 Container 구성이  <code>terraform-enterprise</code> 라는 단일 Container 로 통합. <code>terraform plan</code> 또는 <code>terraform apply</code> 는 기존 방식과 동일하게 수행 때마다 agent container 생성 (적용시점: <code>v202309-1</code> 부터 적용)</li>
<li>Docker 19.03, 20.10 미지원 (적용시점: <code>v202308-1</code> 부터 적용)</li>
<li>Redis v5 지원 종료</li>
<li><code>Manage Policy Overrides</code> 에 대해 기본 부여된 정책 수정 (기존 Read -&gt; List)</li>
<li>신규 Org 에 대해 Cost Estimation 기본 비활성화</li>
</ul>
</li>
<li>Provider
<ul>
<li><a href="https://github.com/hashicorp/terraform-provider-aws/releases/tag/v5.10.0" target="_blank" rel="noopener noreferrer">AWS v5.10.0 주요 수정사항</a>
<ul>
<li>신규 resoure 추가
<ul>
<li>aws_iam_security_token_service_preferences</li>
</ul>
</li>
<li>기능 개선
<ul>
<li>aws_nat_gateway 에 대해 secondary_allocation_ids, secondary_private_ip_address, secondary_private_ip_count 등 설정 추가</li>
<li>aws_batch_compute_environment 에 대해 compute_resources.allocation_strategy,  compute_resources.bid_percentage 를 포함한 세부 설정 추가</li>
</ul>
</li>
<li>Bug Fix
<ul>
<li>aws_quicksight_* 에 대해 definition.sheets.visuals.pie_chart_visual.chart_configuration.data_labels.measure_label_visibility 설정 시 발생하는 오류 개선</li>
<li>aws_apigatewayv2_authorizer 에 대해 TTL 설정 관련 오류 개선</li>
<li>aws_kms_* 에 대해 tag 전체 삭제 관련 오류 개선</li>
</ul>
</li>
</ul>
</li>
<li><a href="https://github.com/hashicorp/terraform-provider-azurerm/releases/tag/v3.67.0" target="_blank" rel="noopener noreferrer">Azure v3.67.0 주요 수정사항</a>
<ul>
<li>신규 resource 추가
<ul>
<li>azurerm_eventhub_sas</li>
<li>azurerm_kubernetes_cluster_trusted_access_role_binding</li>
<li>azurerm_marketplace_role_assignment</li>
<li>azurerm_network_function_azure_traffic_collector</li>
</ul>
</li>
<li>기능 개선
<ul>
<li>azurerm_image 에 대해 disk_encryption_set_id 설정 추가</li>
<li>azurerm_linux_virtual_machine 에 대해 bypass_platform_safety_checks_on_user_schedule_enabled 와 reboot_setting 설정 추가</li>
<li>azurerm_windows_virtual_machine 에 대해 bypass_platform_safety_checks_on_user_schedule_enabled 와 reboot_setting 설정 추가</li>
</ul>
</li>
<li>Bug Fix
<ul>
<li>azurerm_cosmosdb_account 에 대해 max_age_in_seconds 가 2147483647 초까지 설정할 수 있도록 개선</li>
<li>azurerm_redis_cache 에 대해 patch_schedule 업데이트 조건 설정 관련 오류 개선</li>
<li>azurerm_postgresql_flexible_server 에 대해 storage_mb 설정에 대한 유효성 검사 정보를 3355340 에서 33554432 으로 수정</li>
</ul>
</li>
</ul>
</li>
<li><a href="https://github.com/hashicorp/terraform-provider-google/releases/tag/v4.76.0" target="_blank" rel="noopener noreferrer">GCP v4.76.0 주요 수정사항</a>
<ul>
<li>신규 resource 추가
<ul>
<li>google_compute_region_ssl_policy</li>
<li>google_iap_web_region_backend_service_iam_*</li>
<li>google_dataplex_task</li>
</ul>
</li>
<li>기능 개선
<ul>
<li>compute 에 대해 google_compute_service_attachment를 위한 reconcile_connections 설정 추가</li>
<li>container 에 대해 google_container_cluster 의 addons_config 를 위한 gcs_fuse_csi_driver_config 설정 추가</li>
<li>container 에 대해 google_container_cluster 를 위한 allow_net_admin 설정 추가</li>
<li>networkservices 에 대해 google_network_services_gateway 를 위한 scope 설정 추가</li>
</ul>
</li>
<li>Bug Fix
<ul>
<li>compute 에 대해 google_compute_security_policy 를 위한enforce_on_key_configs 의 트리거 시점 관련 오류 개선</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li>Vault
<ul>
<li>1.14.1
<ul>
<li>상세 <a href="https://github.com/hashicorp/vault/releases/tag/v1.14.1" target="_blank" rel="noopener noreferrer">Release Note</a></li>
<li>Administrative Namespace 도입. 기존 Root Namespace 에서만 접근 가능한 System Backend Path 에 대한 접근 권한 등을 기반으로 Cluster 관리용 Namespace 로 활용</li>
<li>Transform Secrets Engine 사용 시 Encoding 요청에 대한 Max TTL 적용</li>
<li>Performance Standby (Read Replica) Node 에서 발생하는 요청에 대한 Logging 알람 방지</li>
</ul>
</li>
</ul>
</li>
<li>Consul
<ul>
<li>1.16
<ul>
<li>상세 <a href="https://github.com/hashicorp/consul/releases/tag/v1.16.0" target="_blank" rel="noopener noreferrer">Release Note</a></li>
<li><code>/v1/health/connect/</code> 와 <code>/v1/health/ingress/</code> api 에 대해 적절한 권한 없는 token 사용 시 403 오류 출력</li>
<li>cluster peering: 지원 종료된 version 을 사용하는 cluster 에 대한 하위 호환성 제거</li>
<li><code>consul services export</code>: peer cluster 또는 타 partition 에 서비스 노출을 위한 명령어 추가</li>
<li>Permissive mTLS: Service Mesh 에 대해 mTLS 활성화 유무 선택</li>
<li>audit hash: audit log hash function 기반 data hash 값 검증 지원</li>
</ul>
</li>
</ul>
</li>
<li>Nomad
<ul>
<li>1.6.0
<ul>
<li><a href="https://www.hashicorp.com/blog/nomad-1-6-adds-node-pools-ux-updates-and-more" target="_blank" rel="noopener noreferrer">Hashicorp Blog</a></li>
<li>상세 <a href="https://github.com/hashicorp/nomad/releases/tag/v1.6.1" target="_blank" rel="noopener noreferrer">Release Note</a></li>
<li>Datacenter 내 Client Node 에 대해 논리적 파티션으로 구분지어 Job 배포 시 해당하는 Pool 에만 배포되도록 하는 Node Pool 기능 추가</li>
<li>Namespace 를 생성하고 각 Namespace 별 기본 Node Pool 지정 및 배포 허용 여부를 제어할 수 있는 Node Pool Governance 기능 추가</li>
<li>Job Status 및 Job Deployments 에 대한 UI 개선</li>
<li>Job Spec 소스코드에 대한 기존 Raw JSON 지원했던 부분에 대해 소스코드 원문을 UI 상에서 확인 및 수정할 수 있도록 개선</li>
<li>Podman 정식 지원</li>
<li>Job restart 명령어 지원 (기존에는 stop 후 start)</li>
</ul>
</li>
</ul>
</li>
</ul>
]]></content:encoded>
    </item>
    <item>
      <title>Intro to Terraform on Azure</title>
      <link>https://docmoa.github.io/04-HashiCorp/03-Terraform/03-Sample/hashicat-azure.html</link>
      <guid>https://docmoa.github.io/04-HashiCorp/03-Terraform/03-Sample/hashicat-azure.html</guid>
      <source url="https://docmoa.github.io/rss.xml">Intro to Terraform on Azure</source>
      <description>Intro to Terraform on Azure 핸즈온 워크샵 설명 및 코드분석</description>
      <pubDate>Sat, 15 Jul 2023 09:49:00 GMT</pubDate>
      <content:encoded><![CDATA[
<blockquote>
<p>본 글은 HashiCorp의 공식 워크샵인 "Intro to Terraform on Azure" 내용을 발췌하여 작성한 글입니다. <a href="https://hashicorp.github.io/field-workshops-terraform/slides/azure/terraform-oss/#1" target="_blank" rel="noopener noreferrer">참고</a></p>
<p>실습 원본 소스코드는 <a href="https://github.com/hashicorp/hashicat-azure" target="_blank" rel="noopener noreferrer">hashicat-azure 저장소</a>에서 확인할 수 있습니다.</p>
</blockquote>
<figure><img src="https://media.licdn.com/dms/image/C5612AQGhxYMwcjsNSQ/article-cover_image-shrink_600_2000/0/1643170479486?e=2147483647&amp;v=beta&amp;t=yHuifr0mLn3lU1D41ZJ_HvhJ6uDqcfkbxp2GjyRcdYo" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure>
<h2>Azure 자격증명 설정</h2>
<blockquote>
<p>자격증명 설정을 위한 상세 설명은 생략합니다.</p>
</blockquote>
<p>Terraform에서는 해당 CSP에서 리소스를 배포하기 위해 자격증명이 필요합니다. 자신의 Azure 구독정보를 연동하기 위해 credentials를 설정합니다.</p>
<ul>
<li>ARM_SUBSCRIPTION_ID</li>
<li>ARM_CLIENT_ID</li>
<li>ARM_CLIENT_SECRET</li>
<li>ARM_TENANT_ID</li>
<li>ARM_ENVIRONMENT (옵션)</li>
</ul>
<div class="language-bash" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="line"><span class="token function">env</span> <span class="token operator">|</span> <span class="token function">grep</span> ARM</span>
<span class="line"><span class="token assign-left variable">ARM_CLIENT_ID</span><span class="token operator">=</span>xxx</span>
<span class="line"><span class="token assign-left variable">ARM_CLIENT_SECRET</span><span class="token operator">=</span>xxx</span>
<span class="line"><span class="token assign-left variable">ARM_SUBSCRIPTION_ID</span><span class="token operator">=</span>xxx</span>
<span class="line"><span class="token assign-left variable">ARM_TENANT_ID</span><span class="token operator">=</span>xxx</span>
<span class="line"></span></code></pre></div><h2>실습) 시나리오1. azurerm_resource_group 생성</h2>
<p>Azure에서는 기본적으로 리소스를 관리하기 위해 리소스 그룹을 생성해야 합니다. 이번 사니리오에서는 리소스 그룹을 생성해보겠습니다.</p>
<h3>HCL 구성파일</h3>
<ul>
<li><a href="http://main.tf" target="_blank" rel="noopener noreferrer">main.tf</a></li>
</ul>
<p>가장 기본이 되는 <code>main.tf</code> 코드의 구조는 다음과 같습니다.</p>
<div class="language-ruby" data-highlighter="prismjs" data-ext="rb" data-title="rb"><pre class="language-ruby"><code><span class="line">terraform <span class="token punctuation">{</span></span>
<span class="line">  required_providers <span class="token punctuation">{</span></span>
<span class="line">    azurerm <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">      source  <span class="token operator">=</span> <span class="token string-literal"><span class="token string">"hashicorp/azurerm"</span></span></span>
<span class="line">      version <span class="token operator">=</span> <span class="token string-literal"><span class="token string">"=2.60.0"</span></span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">provider <span class="token string-literal"><span class="token string">"azurerm"</span></span> <span class="token punctuation">{</span></span>
<span class="line">  features <span class="token punctuation">{</span><span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">resource <span class="token string-literal"><span class="token string">"azurerm_resource_group"</span></span> <span class="token string-literal"><span class="token string">"myresourcegroup"</span></span> <span class="token punctuation">{</span></span>
<span class="line">  name     <span class="token operator">=</span> <span class="token string-literal"><span class="token string">"${var.prefix}-workshop"</span></span></span>
<span class="line">  location <span class="token operator">=</span> var<span class="token punctuation">.</span>location</span>
<span class="line">  </span>
<span class="line">  tags <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre></div><ul>
<li><a href="http://variables.tf" target="_blank" rel="noopener noreferrer">variables.tf</a></li>
</ul>
<p>해당 샘플코드에서는 <code>prefix</code> 라는 변수만 필요하므로 다음과 같이 선언합니다.</p>
<div class="language-ruby" data-highlighter="prismjs" data-ext="rb" data-title="rb"><pre class="language-ruby"><code><span class="line">variable <span class="token string-literal"><span class="token string">"prefix"</span></span> <span class="token punctuation">{</span></span>
<span class="line">  description <span class="token operator">=</span> <span class="token string-literal"><span class="token string">"This prefix will be included in the name of most resources."</span></span></span>
<span class="line">  default <span class="token operator">=</span> <span class="token string-literal"><span class="token string">"unknown"</span></span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre></div><ul>
<li>terraform.tfvars</li>
</ul>
<p>앞서 <code>variables.tf</code> 에서 <code>default = "unknown"</code> 으로 선언하였습니다. 이때, 사용자화된 값으로 대체하기 위해서 변수의 우선순위를 활용하여 덮어쓸 수 있습니다.</p>
<p>필자는 <code>terraform.tfvars</code> 파일을 사용하여 덮어쓰는 방식을 사용해보겠습니다.</p>
<div class="language-ruby" data-highlighter="prismjs" data-ext="rb" data-title="rb"><pre class="language-ruby"><code><span class="line"><span class="token comment"># prefix에 자신의 이름을 작성하세요</span></span>
<span class="line">prefix <span class="token operator">=</span> <span class="token string-literal"><span class="token string">"hyungwook"</span></span></span>
<span class="line"></span></code></pre></div><h3>테라폼 초기화(init)</h3>
<ul>
<li><code>terraform init</code> 명령을 통해 azurerm 프로바이더를 사용하기 위해 초기화를 진행합니다.</li>
</ul>
<div class="language-bash" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="line">terraform init</span>
<span class="line"></span></code></pre></div><p>초기화 명령 이후에 azurerm 에서 사용할 데이터가 <code>.terraform</code> 디렉토리 하위에 생성되었는지 확인합니다.</p>
<div class="language-bash" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="line"><span class="token function">ls</span> .terraform/providers/registry.terraform.io/hashicorp</span>
<span class="line">azurerm</span>
<span class="line"></span></code></pre></div><h3>테라폼 계획 &amp; 배포(plan &amp; apply)</h3>
<ul>
<li><code>terraform plan</code> 명령을 통해 배포되기 전 계획을 확인합니다. 해당 실습에서는 최초 배포이므로 한 개의 리소스가 create 됩니다.</li>
</ul>
<div class="language-bash" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="line">terraform plan</span>
<span class="line"></span>
<span class="line">Terraform used the selected providers to generate the following execution plan. Resource actions are indicated with the following symbols:</span>
<span class="line">  + create</span>
<span class="line"></span>
<span class="line">Terraform will perform the following actions:</span>
<span class="line"></span>
<span class="line">  <span class="token comment"># azurerm_resource_group.myresourcegroup will be created</span></span>
<span class="line">  + resource <span class="token string">"azurerm_resource_group"</span> <span class="token string">"myresourcegroup"</span> <span class="token punctuation">{</span></span>
<span class="line">      + <span class="token function">id</span>       <span class="token operator">=</span> <span class="token punctuation">(</span>known after apply<span class="token punctuation">)</span></span>
<span class="line">      + location <span class="token operator">=</span> <span class="token string">"koreacentral"</span></span>
<span class="line">      + name     <span class="token operator">=</span> <span class="token string">"hyungwook-workshop"</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">Plan: <span class="token number">1</span> to add, <span class="token number">0</span> to change, <span class="token number">0</span> to destroy.</span>
<span class="line"></span></code></pre></div><ul>
<li><code>terraform apply</code> 명령을 통해 실제 리소스를 배포합니다.</li>
</ul>
<div class="language-bash" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="line">terraform apply</span>
<span class="line"></span>
<span class="line">Terraform used the selected providers to generate the following execution plan. Resource actions are indicated with the following symbols:</span>
<span class="line">  + create</span>
<span class="line"></span>
<span class="line">Terraform will perform the following actions:</span>
<span class="line"></span>
<span class="line">  <span class="token comment"># azurerm_resource_group.myresourcegroup will be created</span></span>
<span class="line">  + resource <span class="token string">"azurerm_resource_group"</span> <span class="token string">"myresourcegroup"</span> <span class="token punctuation">{</span></span>
<span class="line">      + <span class="token function">id</span>       <span class="token operator">=</span> <span class="token punctuation">(</span>known after apply<span class="token punctuation">)</span></span>
<span class="line">      + location <span class="token operator">=</span> <span class="token string">"koreacentral"</span></span>
<span class="line">      + name     <span class="token operator">=</span> <span class="token string">"hyungwook-workshop"</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">Plan: <span class="token number">1</span> to add, <span class="token number">0</span> to change, <span class="token number">0</span> to destroy.</span>
<span class="line"></span>
<span class="line">Do you want to perform these actions?</span>
<span class="line">  Terraform will perform the actions described above.</span>
<span class="line">  Only <span class="token string">'yes'</span> will be accepted to approve.</span>
<span class="line"></span>
<span class="line">  Enter a value: <span class="token function">yes</span></span>
<span class="line"></span>
<span class="line">azurerm_resource_group.myresourcegroup: Creating<span class="token punctuation">..</span>.</span>
<span class="line">azurerm_resource_group.myresourcegroup: Creation complete after 5s <span class="token punctuation">[</span>id<span class="token operator">=</span>/subscriptions/0222cb06-f803-4f66-a922-a0957813a90c/resourceGroups/hyungwook-workshop<span class="token punctuation">]</span></span>
<span class="line"></span></code></pre></div><h2>실습) 시나리오 2. vnet 생성</h2>
<p>시나리오 1에서 생성한 리소스 그룹에 vnet을 추가합니다.</p>
<h3>HCL 구성파일</h3>
<ul>
<li><a href="http://main.tf" target="_blank" rel="noopener noreferrer">main.tf</a></li>
</ul>
<p>앞서 사용했던 <code>main.tf</code> 파일에 다음과 같이 추가할 <code>azurerm_virtual_network</code> 절을 추가합니다.</p>
<div class="language-ruby" data-highlighter="prismjs" data-ext="rb" data-title="rb"><pre class="language-ruby"><code><span class="line"><span class="token comment"># 생략</span></span>
<span class="line">resource <span class="token string-literal"><span class="token string">"azurerm_virtual_network"</span></span> <span class="token string-literal"><span class="token string">"vnet"</span></span> <span class="token punctuation">{</span></span>
<span class="line">  name                <span class="token operator">=</span> <span class="token string-literal"><span class="token string">"${var.prefix}-vnet"</span></span></span>
<span class="line">  location            <span class="token operator">=</span> azurerm_resource_group<span class="token punctuation">.</span>myresourcegroup<span class="token punctuation">.</span>location</span>
<span class="line">  address_space       <span class="token operator">=</span> <span class="token punctuation">[</span>var<span class="token punctuation">.</span>address_space<span class="token punctuation">]</span></span>
<span class="line">  resource_group_name <span class="token operator">=</span> azurerm_resource_group<span class="token punctuation">.</span>myresourcegroup<span class="token punctuation">.</span>name</span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre></div><ul>
<li><a href="http://variables.tf" target="_blank" rel="noopener noreferrer">variables.tf</a> 에서는 다음과 같은 두 가지 변수를 사용합니다.
<ul>
<li><code>prefix</code> : 리소스의 가장 앞에 선언할 변수명</li>
<li><code>address_space</code>  : 기본 CIDR 정의</li>
</ul>
</li>
</ul>
<div class="language-ruby" data-highlighter="prismjs" data-ext="rb" data-title="rb"><pre class="language-ruby"><code><span class="line">variable <span class="token string-literal"><span class="token string">"prefix"</span></span> <span class="token punctuation">{</span></span>
<span class="line">  description <span class="token operator">=</span> <span class="token string-literal"><span class="token string">"This prefix will be included in the name of most resources."</span></span></span>
<span class="line">  default <span class="token operator">=</span> <span class="token string-literal"><span class="token string">"unknown"</span></span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">variable <span class="token string-literal"><span class="token string">"address_space"</span></span> <span class="token punctuation">{</span></span>
<span class="line">  description <span class="token operator">=</span> <span class="token string-literal"><span class="token string">"The address space that is used by the virtual network. You can supply more than one address space. Changing this forces a new resource to be created."</span></span></span>
<span class="line">  default     <span class="token operator">=</span> <span class="token string-literal"><span class="token string">"10.0.0.0/16"</span></span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre></div><h3>테라폼 계획 &amp; 배포(plan &amp; apply)</h3>
<p><code>azurerm_virtual_network</code> 리소스가 추가로 생성되는 것을 확인합니다.</p>
<div class="language-bash" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="line"><span class="token comment"># 생략</span></span>
<span class="line">Terraform used the selected providers to generate the following execution plan. Resource actions are indicated with the following symbols:</span>
<span class="line">  + create</span>
<span class="line"></span>
<span class="line">Terraform will perform the following actions:</span>
<span class="line"></span>
<span class="line">  <span class="token comment"># azurerm_virtual_network.vnet will be created</span></span>
<span class="line">  + resource <span class="token string">"azurerm_virtual_network"</span> <span class="token string">"vnet"</span> <span class="token punctuation">{</span></span>
<span class="line">      + address_space         <span class="token operator">=</span> <span class="token punctuation">[</span></span>
<span class="line">          + <span class="token string">"10.0.0.0/16"</span>,</span>
<span class="line">        <span class="token punctuation">]</span></span>
<span class="line">      + guid                  <span class="token operator">=</span> <span class="token punctuation">(</span>known after apply<span class="token punctuation">)</span></span>
<span class="line">      + <span class="token function">id</span>                    <span class="token operator">=</span> <span class="token punctuation">(</span>known after apply<span class="token punctuation">)</span></span>
<span class="line">      + location              <span class="token operator">=</span> <span class="token string">"koreacentral"</span></span>
<span class="line">      + name                  <span class="token operator">=</span> <span class="token string">"hyungwook-vnet"</span></span>
<span class="line">      + resource_group_name   <span class="token operator">=</span> <span class="token string">"hyungwook-workshop"</span></span>
<span class="line">      + subnet                <span class="token operator">=</span> <span class="token punctuation">(</span>known after apply<span class="token punctuation">)</span></span>
<span class="line">      + vm_protection_enabled <span class="token operator">=</span> <span class="token boolean">false</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span></code></pre></div><h2>실습) 시나리오 3. Subnet &amp; security group 생성</h2>
<p>이번 시나리오에서는 vnet 내부에 subnet과 security group을 추가로 생성해보겠습니다.</p>
<h3>HCL 구성파일</h3>
<ul>
<li><a href="http://main.tf" target="_blank" rel="noopener noreferrer">main.tf</a> 에서는 다음 두 가지 리소스를 추가로 생성하는 절을 추가합니다.
<ul>
<li><code>azurerm_subnet</code></li>
<li><code>azurerm_network_security_group</code></li>
</ul>
</li>
</ul>
<div class="language-ruby" data-highlighter="prismjs" data-ext="rb" data-title="rb"><pre class="language-ruby"><code><span class="line"><span class="token comment"># 생략</span></span>
<span class="line">resource <span class="token string-literal"><span class="token string">"azurerm_subnet"</span></span> <span class="token string-literal"><span class="token string">"subnet"</span></span> <span class="token punctuation">{</span></span>
<span class="line">  name                 <span class="token operator">=</span> <span class="token string-literal"><span class="token string">"${var.prefix}-subnet"</span></span></span>
<span class="line">  virtual_network_name <span class="token operator">=</span> azurerm_virtual_network<span class="token punctuation">.</span>vnet<span class="token punctuation">.</span>name</span>
<span class="line">  resource_group_name  <span class="token operator">=</span> azurerm_resource_group<span class="token punctuation">.</span>myresourcegroup<span class="token punctuation">.</span>name</span>
<span class="line">  address_prefixes     <span class="token operator">=</span> <span class="token punctuation">[</span>var<span class="token punctuation">.</span>subnet_prefix<span class="token punctuation">]</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">resource <span class="token string-literal"><span class="token string">"azurerm_network_security_group"</span></span> <span class="token string-literal"><span class="token string">"catapp-sg"</span></span> <span class="token punctuation">{</span></span>
<span class="line">  name                <span class="token operator">=</span> <span class="token string-literal"><span class="token string">"${var.prefix}-sg"</span></span></span>
<span class="line">  location            <span class="token operator">=</span> var<span class="token punctuation">.</span>location</span>
<span class="line">  resource_group_name <span class="token operator">=</span> azurerm_resource_group<span class="token punctuation">.</span>myresourcegroup<span class="token punctuation">.</span>name</span>
<span class="line"></span>
<span class="line">  security_rule <span class="token punctuation">{</span></span>
<span class="line">    name                       <span class="token operator">=</span> <span class="token string-literal"><span class="token string">"HTTP"</span></span></span>
<span class="line">    priority                   <span class="token operator">=</span> <span class="token number">100</span></span>
<span class="line">    direction                  <span class="token operator">=</span> <span class="token string-literal"><span class="token string">"Inbound"</span></span></span>
<span class="line">    access                     <span class="token operator">=</span> <span class="token string-literal"><span class="token string">"Allow"</span></span></span>
<span class="line">    protocol                   <span class="token operator">=</span> <span class="token string-literal"><span class="token string">"Tcp"</span></span></span>
<span class="line">    source_port_range          <span class="token operator">=</span> <span class="token string-literal"><span class="token string">"*"</span></span></span>
<span class="line">    destination_port_range     <span class="token operator">=</span> <span class="token string-literal"><span class="token string">"80"</span></span></span>
<span class="line">    source_address_prefix      <span class="token operator">=</span> <span class="token string-literal"><span class="token string">"*"</span></span></span>
<span class="line">    destination_address_prefix <span class="token operator">=</span> <span class="token string-literal"><span class="token string">"*"</span></span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">  security_rule <span class="token punctuation">{</span></span>
<span class="line">    name                       <span class="token operator">=</span> <span class="token string-literal"><span class="token string">"HTTPS"</span></span></span>
<span class="line">    priority                   <span class="token operator">=</span> <span class="token number">102</span></span>
<span class="line">    direction                  <span class="token operator">=</span> <span class="token string-literal"><span class="token string">"Inbound"</span></span></span>
<span class="line">    access                     <span class="token operator">=</span> <span class="token string-literal"><span class="token string">"Allow"</span></span></span>
<span class="line">    protocol                   <span class="token operator">=</span> <span class="token string-literal"><span class="token string">"Tcp"</span></span></span>
<span class="line">    source_port_range          <span class="token operator">=</span> <span class="token string-literal"><span class="token string">"*"</span></span></span>
<span class="line">    destination_port_range     <span class="token operator">=</span> <span class="token string-literal"><span class="token string">"443"</span></span></span>
<span class="line">    source_address_prefix      <span class="token operator">=</span> <span class="token string-literal"><span class="token string">"*"</span></span></span>
<span class="line">    destination_address_prefix <span class="token operator">=</span> <span class="token string-literal"><span class="token string">"*"</span></span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">  security_rule <span class="token punctuation">{</span></span>
<span class="line">    name                       <span class="token operator">=</span> <span class="token string-literal"><span class="token string">"SSH"</span></span></span>
<span class="line">    priority                   <span class="token operator">=</span> <span class="token number">101</span></span>
<span class="line">    direction                  <span class="token operator">=</span> <span class="token string-literal"><span class="token string">"Inbound"</span></span></span>
<span class="line">    access                     <span class="token operator">=</span> <span class="token string-literal"><span class="token string">"Allow"</span></span></span>
<span class="line">    protocol                   <span class="token operator">=</span> <span class="token string-literal"><span class="token string">"Tcp"</span></span></span>
<span class="line">    source_port_range          <span class="token operator">=</span> <span class="token string-literal"><span class="token string">"*"</span></span></span>
<span class="line">    destination_port_range     <span class="token operator">=</span> <span class="token string-literal"><span class="token string">"22"</span></span></span>
<span class="line">    source_address_prefix      <span class="token operator">=</span> <span class="token string-literal"><span class="token string">"*"</span></span></span>
<span class="line">    destination_address_prefix <span class="token operator">=</span> <span class="token string-literal"><span class="token string">"*"</span></span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre></div><ul>
<li><a href="http://variables.tf" target="_blank" rel="noopener noreferrer">variables.tf</a> 에서는 <code>subnet_prerix</code> 절을 추가하여 서브넷의 CIDR을 선언합니다.
<ul>
<li><code>prefix</code></li>
<li><code>address_space</code></li>
<li><strong><code>subnet_prefix</code></strong></li>
</ul>
</li>
</ul>
<div class="language-ruby" data-highlighter="prismjs" data-ext="rb" data-title="rb"><pre class="language-ruby"><code><span class="line">variable <span class="token string-literal"><span class="token string">"subnet_prefix"</span></span> <span class="token punctuation">{</span></span>
<span class="line">  description <span class="token operator">=</span> <span class="token string-literal"><span class="token string">"The address prefix to use for the subnet."</span></span></span>
<span class="line">  default     <span class="token operator">=</span> <span class="token string-literal"><span class="token string">"10.0.10.0/24"</span></span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre></div><h3>테라폼 계획 &amp; 배포(plan &amp; apply)</h3>
<p>다음 두 리소스가 추가적으로 생성되는 것을 확인합니다.</p>
<ul>
<li>azurerm_network_security_group.catapp-sg</li>
<li>azurerm_subnet.subnet</li>
</ul>
<div class="language-bash" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="line"><span class="token comment">#(생략)</span></span>
<span class="line">Terraform will perform the following actions:</span>
<span class="line"></span>
<span class="line">  <span class="token comment"># azurerm_network_security_group.catapp-sg will be created</span></span>
<span class="line">  + resource <span class="token string">"azurerm_network_security_group"</span> <span class="token string">"catapp-sg"</span> <span class="token punctuation">{</span></span>
<span class="line">      + <span class="token function">id</span>                  <span class="token operator">=</span> <span class="token punctuation">(</span>known after apply<span class="token punctuation">)</span></span>
<span class="line">      + location            <span class="token operator">=</span> <span class="token string">"koreacentral"</span></span>
<span class="line">      + name                <span class="token operator">=</span> <span class="token string">"hyungwook-sg"</span></span>
<span class="line">      + resource_group_name <span class="token operator">=</span> <span class="token string">"hyungwook-workshop"</span></span>
<span class="line">      + security_rule       <span class="token operator">=</span> <span class="token punctuation">[</span></span>
<span class="line">          + <span class="token punctuation">{</span></span>
<span class="line">              + access                                     <span class="token operator">=</span> <span class="token string">"Allow"</span></span>
<span class="line">              + description                                <span class="token operator">=</span> <span class="token string">""</span></span>
<span class="line">              + destination_address_prefix                 <span class="token operator">=</span> <span class="token string">"*"</span></span>
<span class="line">              + destination_address_prefixes               <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span></span>
<span class="line">              + destination_application_security_group_ids <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span></span>
<span class="line">              + destination_port_range                     <span class="token operator">=</span> <span class="token string">"22"</span></span>
<span class="line">              + destination_port_ranges                    <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span></span>
<span class="line">              + direction                                  <span class="token operator">=</span> <span class="token string">"Inbound"</span></span>
<span class="line">              + name                                       <span class="token operator">=</span> <span class="token string">"SSH"</span></span>
<span class="line">              + priority                                   <span class="token operator">=</span> <span class="token number">101</span></span>
<span class="line">              + protocol                                   <span class="token operator">=</span> <span class="token string">"Tcp"</span></span>
<span class="line">              + source_address_prefix                      <span class="token operator">=</span> <span class="token string">"*"</span></span>
<span class="line">              + source_address_prefixes                    <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span></span>
<span class="line">              + source_application_security_group_ids      <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span></span>
<span class="line">              + source_port_range                          <span class="token operator">=</span> <span class="token string">"*"</span></span>
<span class="line">              + source_port_ranges                         <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span></span>
<span class="line">            <span class="token punctuation">}</span>,</span>
<span class="line"><span class="token comment">#(중략)            </span></span>
<span class="line">  </span>
<span class="line">  <span class="token comment"># azurerm_subnet.subnet will be created</span></span>
<span class="line">  + resource <span class="token string">"azurerm_subnet"</span> <span class="token string">"subnet"</span> <span class="token punctuation">{</span></span>
<span class="line">      + address_prefix                                 <span class="token operator">=</span> <span class="token punctuation">(</span>known after apply<span class="token punctuation">)</span></span>
<span class="line">      + address_prefixes                               <span class="token operator">=</span> <span class="token punctuation">[</span></span>
<span class="line">          + <span class="token string">"10.0.10.0/24"</span>,</span>
<span class="line">        <span class="token punctuation">]</span></span>
<span class="line">      + enforce_private_link_endpoint_network_policies <span class="token operator">=</span> <span class="token boolean">false</span></span>
<span class="line">      + enforce_private_link_service_network_policies  <span class="token operator">=</span> <span class="token boolean">false</span></span>
<span class="line">      + <span class="token function">id</span>                                             <span class="token operator">=</span> <span class="token punctuation">(</span>known after apply<span class="token punctuation">)</span></span>
<span class="line">      + name                                           <span class="token operator">=</span> <span class="token string">"hyungwook-subnet"</span></span>
<span class="line">      + resource_group_name                            <span class="token operator">=</span> <span class="token string">"hyungwook-workshop"</span></span>
<span class="line">      + virtual_network_name                           <span class="token operator">=</span> <span class="token string">"hyungwook-vnet"</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">Plan: <span class="token number">2</span> to add, <span class="token number">0</span> to change, <span class="token number">0</span> to destroy.</span>
<span class="line"></span></code></pre></div><h2>실습) 시나리오 4. hashicat 웹 애플리케이션 배포</h2>
<blockquote>
<p>참고 : 원본 소스코드는 <a href="https://github.com/hashicorp/hashicat-azure" target="_blank" rel="noopener noreferrer">hashicat-azure 저장소</a>에서 확인할 수 있습니다.</p>
</blockquote>
<p>이번 시나리오는 실제 VM 인스턴스에 초기화 스크립트를 사용하여 웹 애플리케이션을 배포해보도록 하겠습니다.</p>
<h3>HCL 구성파일</h3>
<ul>
<li><a href="http://main.tf" target="_blank" rel="noopener noreferrer">main.tf</a>
<ul>
<li><code>azurerm_network_interface</code> : Network Interface 생성</li>
<li><code>azurerm_network_interface_security_group_association</code> : Network Interface에 Security Group 할당</li>
<li><code>azurerm_public_ip</code> : 가상머신에 접속하기 위한 Public IP</li>
<li><code>azurerm_virtual_machine</code> : 가상머신</li>
<li><code>null_resource</code> : 가상머신 배포 후 <code>provisioner</code> 를 통해 웹 서비스 설치를 위해 사용</li>
</ul>
</li>
</ul>
<div class="language-ruby" data-highlighter="prismjs" data-ext="rb" data-title="rb"><pre class="language-ruby"><code><span class="line">terraform <span class="token punctuation">{</span></span>
<span class="line">  required_providers <span class="token punctuation">{</span></span>
<span class="line">    azurerm <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">      source  <span class="token operator">=</span> <span class="token string-literal"><span class="token string">"hashicorp/azurerm"</span></span></span>
<span class="line">      version <span class="token operator">=</span> <span class="token string-literal"><span class="token string">"=2.60.0"</span></span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">provider <span class="token string-literal"><span class="token string">"azurerm"</span></span> <span class="token punctuation">{</span></span>
<span class="line">  features <span class="token punctuation">{</span><span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">resource <span class="token string-literal"><span class="token string">"azurerm_resource_group"</span></span> <span class="token string-literal"><span class="token string">"myresourcegroup"</span></span> <span class="token punctuation">{</span></span>
<span class="line">  name     <span class="token operator">=</span> <span class="token string-literal"><span class="token string">"${var.prefix}-workshop"</span></span></span>
<span class="line">  location <span class="token operator">=</span> var<span class="token punctuation">.</span>location</span>
<span class="line"></span>
<span class="line">  tags <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">    environment <span class="token operator">=</span> <span class="token string-literal"><span class="token string">"Production"</span></span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">resource <span class="token string-literal"><span class="token string">"azurerm_virtual_network"</span></span> <span class="token string-literal"><span class="token string">"vnet"</span></span> <span class="token punctuation">{</span></span>
<span class="line">  name                <span class="token operator">=</span> <span class="token string-literal"><span class="token string">"${var.prefix}-vnet"</span></span></span>
<span class="line">  location            <span class="token operator">=</span> azurerm_resource_group<span class="token punctuation">.</span>myresourcegroup<span class="token punctuation">.</span>location</span>
<span class="line">  address_space       <span class="token operator">=</span> <span class="token punctuation">[</span>var<span class="token punctuation">.</span>address_space<span class="token punctuation">]</span></span>
<span class="line">  resource_group_name <span class="token operator">=</span> azurerm_resource_group<span class="token punctuation">.</span>myresourcegroup<span class="token punctuation">.</span>name</span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">resource <span class="token string-literal"><span class="token string">"azurerm_subnet"</span></span> <span class="token string-literal"><span class="token string">"subnet"</span></span> <span class="token punctuation">{</span></span>
<span class="line">  name                 <span class="token operator">=</span> <span class="token string-literal"><span class="token string">"${var.prefix}-subnet"</span></span></span>
<span class="line">  virtual_network_name <span class="token operator">=</span> azurerm_virtual_network<span class="token punctuation">.</span>vnet<span class="token punctuation">.</span>name</span>
<span class="line">  resource_group_name  <span class="token operator">=</span> azurerm_resource_group<span class="token punctuation">.</span>myresourcegroup<span class="token punctuation">.</span>name</span>
<span class="line">  address_prefixes     <span class="token operator">=</span> <span class="token punctuation">[</span>var<span class="token punctuation">.</span>subnet_prefix<span class="token punctuation">]</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">resource <span class="token string-literal"><span class="token string">"azurerm_network_security_group"</span></span> <span class="token string-literal"><span class="token string">"catapp-sg"</span></span> <span class="token punctuation">{</span></span>
<span class="line">  name                <span class="token operator">=</span> <span class="token string-literal"><span class="token string">"${var.prefix}-sg"</span></span></span>
<span class="line">  location            <span class="token operator">=</span> var<span class="token punctuation">.</span>location</span>
<span class="line">  resource_group_name <span class="token operator">=</span> azurerm_resource_group<span class="token punctuation">.</span>myresourcegroup<span class="token punctuation">.</span>name</span>
<span class="line"></span>
<span class="line">  security_rule <span class="token punctuation">{</span></span>
<span class="line">    name                       <span class="token operator">=</span> <span class="token string-literal"><span class="token string">"HTTP"</span></span></span>
<span class="line">    priority                   <span class="token operator">=</span> <span class="token number">100</span></span>
<span class="line">    direction                  <span class="token operator">=</span> <span class="token string-literal"><span class="token string">"Inbound"</span></span></span>
<span class="line">    access                     <span class="token operator">=</span> <span class="token string-literal"><span class="token string">"Allow"</span></span></span>
<span class="line">    protocol                   <span class="token operator">=</span> <span class="token string-literal"><span class="token string">"Tcp"</span></span></span>
<span class="line">    source_port_range          <span class="token operator">=</span> <span class="token string-literal"><span class="token string">"*"</span></span></span>
<span class="line">    destination_port_range     <span class="token operator">=</span> <span class="token string-literal"><span class="token string">"80"</span></span></span>
<span class="line">    source_address_prefix      <span class="token operator">=</span> <span class="token string-literal"><span class="token string">"*"</span></span></span>
<span class="line">    destination_address_prefix <span class="token operator">=</span> <span class="token string-literal"><span class="token string">"*"</span></span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">  security_rule <span class="token punctuation">{</span></span>
<span class="line">    name                       <span class="token operator">=</span> <span class="token string-literal"><span class="token string">"HTTPS"</span></span></span>
<span class="line">    priority                   <span class="token operator">=</span> <span class="token number">102</span></span>
<span class="line">    direction                  <span class="token operator">=</span> <span class="token string-literal"><span class="token string">"Inbound"</span></span></span>
<span class="line">    access                     <span class="token operator">=</span> <span class="token string-literal"><span class="token string">"Allow"</span></span></span>
<span class="line">    protocol                   <span class="token operator">=</span> <span class="token string-literal"><span class="token string">"Tcp"</span></span></span>
<span class="line">    source_port_range          <span class="token operator">=</span> <span class="token string-literal"><span class="token string">"*"</span></span></span>
<span class="line">    destination_port_range     <span class="token operator">=</span> <span class="token string-literal"><span class="token string">"443"</span></span></span>
<span class="line">    source_address_prefix      <span class="token operator">=</span> <span class="token string-literal"><span class="token string">"*"</span></span></span>
<span class="line">    destination_address_prefix <span class="token operator">=</span> <span class="token string-literal"><span class="token string">"*"</span></span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">  security_rule <span class="token punctuation">{</span></span>
<span class="line">    name                       <span class="token operator">=</span> <span class="token string-literal"><span class="token string">"SSH"</span></span></span>
<span class="line">    priority                   <span class="token operator">=</span> <span class="token number">101</span></span>
<span class="line">    direction                  <span class="token operator">=</span> <span class="token string-literal"><span class="token string">"Inbound"</span></span></span>
<span class="line">    access                     <span class="token operator">=</span> <span class="token string-literal"><span class="token string">"Allow"</span></span></span>
<span class="line">    protocol                   <span class="token operator">=</span> <span class="token string-literal"><span class="token string">"Tcp"</span></span></span>
<span class="line">    source_port_range          <span class="token operator">=</span> <span class="token string-literal"><span class="token string">"*"</span></span></span>
<span class="line">    destination_port_range     <span class="token operator">=</span> <span class="token string-literal"><span class="token string">"22"</span></span></span>
<span class="line">    source_address_prefix      <span class="token operator">=</span> <span class="token string-literal"><span class="token string">"*"</span></span></span>
<span class="line">    destination_address_prefix <span class="token operator">=</span> <span class="token string-literal"><span class="token string">"*"</span></span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">resource <span class="token string-literal"><span class="token string">"azurerm_network_interface"</span></span> <span class="token string-literal"><span class="token string">"catapp-nic"</span></span> <span class="token punctuation">{</span></span>
<span class="line">  name                      <span class="token operator">=</span> <span class="token string-literal"><span class="token string">"${var.prefix}-catapp-nic"</span></span></span>
<span class="line">  location                  <span class="token operator">=</span> var<span class="token punctuation">.</span>location</span>
<span class="line">  resource_group_name       <span class="token operator">=</span> azurerm_resource_group<span class="token punctuation">.</span>myresourcegroup<span class="token punctuation">.</span>name</span>
<span class="line"></span>
<span class="line">  ip_configuration <span class="token punctuation">{</span></span>
<span class="line">    name                          <span class="token operator">=</span> <span class="token string-literal"><span class="token string">"${var.prefix}ipconfig"</span></span></span>
<span class="line">    subnet_id                     <span class="token operator">=</span> azurerm_subnet<span class="token punctuation">.</span>subnet<span class="token punctuation">.</span>id</span>
<span class="line">    private_ip_address_allocation <span class="token operator">=</span> <span class="token string-literal"><span class="token string">"Dynamic"</span></span></span>
<span class="line">    public_ip_address_id          <span class="token operator">=</span> azurerm_public_ip<span class="token punctuation">.</span>catapp<span class="token operator">-</span>pip<span class="token punctuation">.</span>id</span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">resource <span class="token string-literal"><span class="token string">"azurerm_network_interface_security_group_association"</span></span> <span class="token string-literal"><span class="token string">"catapp-nic-sg-ass"</span></span> <span class="token punctuation">{</span></span>
<span class="line">  network_interface_id      <span class="token operator">=</span> azurerm_network_interface<span class="token punctuation">.</span>catapp<span class="token operator">-</span>nic<span class="token punctuation">.</span>id</span>
<span class="line">  network_security_group_id <span class="token operator">=</span> azurerm_network_security_group<span class="token punctuation">.</span>catapp<span class="token operator">-</span>sg<span class="token punctuation">.</span>id</span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">resource <span class="token string-literal"><span class="token string">"azurerm_public_ip"</span></span> <span class="token string-literal"><span class="token string">"catapp-pip"</span></span> <span class="token punctuation">{</span></span>
<span class="line">  name                <span class="token operator">=</span> <span class="token string-literal"><span class="token string">"${var.prefix}-ip"</span></span></span>
<span class="line">  location            <span class="token operator">=</span> var<span class="token punctuation">.</span>location</span>
<span class="line">  resource_group_name <span class="token operator">=</span> azurerm_resource_group<span class="token punctuation">.</span>myresourcegroup<span class="token punctuation">.</span>name</span>
<span class="line">  allocation_method   <span class="token operator">=</span> <span class="token string-literal"><span class="token string">"Dynamic"</span></span></span>
<span class="line">  domain_name_label   <span class="token operator">=</span> <span class="token string-literal"><span class="token string">"${var.prefix}-meow"</span></span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">resource <span class="token string-literal"><span class="token string">"azurerm_virtual_machine"</span></span> <span class="token string-literal"><span class="token string">"catapp"</span></span> <span class="token punctuation">{</span></span>
<span class="line">  name                <span class="token operator">=</span> <span class="token string-literal"><span class="token string">"${var.prefix}-meow"</span></span></span>
<span class="line">  location            <span class="token operator">=</span> var<span class="token punctuation">.</span>location</span>
<span class="line">  resource_group_name <span class="token operator">=</span> azurerm_resource_group<span class="token punctuation">.</span>myresourcegroup<span class="token punctuation">.</span>name</span>
<span class="line">  vm_size             <span class="token operator">=</span> var<span class="token punctuation">.</span>vm_size</span>
<span class="line"></span>
<span class="line">  network_interface_ids         <span class="token operator">=</span> <span class="token punctuation">[</span>azurerm_network_interface<span class="token punctuation">.</span>catapp<span class="token operator">-</span>nic<span class="token punctuation">.</span>id<span class="token punctuation">]</span></span>
<span class="line">  delete_os_disk_on_termination <span class="token operator">=</span> <span class="token string-literal"><span class="token string">"true"</span></span></span>
<span class="line"></span>
<span class="line">  storage_image_reference <span class="token punctuation">{</span></span>
<span class="line">    publisher <span class="token operator">=</span> var<span class="token punctuation">.</span>image_publisher</span>
<span class="line">    offer     <span class="token operator">=</span> var<span class="token punctuation">.</span>image_offer</span>
<span class="line">    sku       <span class="token operator">=</span> var<span class="token punctuation">.</span>image_sku</span>
<span class="line">    version   <span class="token operator">=</span> var<span class="token punctuation">.</span>image_version</span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">  storage_os_disk <span class="token punctuation">{</span></span>
<span class="line">    name              <span class="token operator">=</span> <span class="token string-literal"><span class="token string">"${var.prefix}-osdisk"</span></span></span>
<span class="line">    managed_disk_type <span class="token operator">=</span> <span class="token string-literal"><span class="token string">"Standard_LRS"</span></span></span>
<span class="line">    caching           <span class="token operator">=</span> <span class="token string-literal"><span class="token string">"ReadWrite"</span></span></span>
<span class="line">    create_option     <span class="token operator">=</span> <span class="token string-literal"><span class="token string">"FromImage"</span></span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">  os_profile <span class="token punctuation">{</span></span>
<span class="line">    computer_name  <span class="token operator">=</span> var<span class="token punctuation">.</span>prefix</span>
<span class="line">    admin_username <span class="token operator">=</span> var<span class="token punctuation">.</span>admin_username</span>
<span class="line">    admin_password <span class="token operator">=</span> var<span class="token punctuation">.</span>admin_password</span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">  os_profile_linux_config <span class="token punctuation">{</span></span>
<span class="line">    disable_password_authentication <span class="token operator">=</span> <span class="token boolean">false</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">  tags <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">  <span class="token comment"># Added to allow destroy to work correctly.</span></span>
<span class="line">  depends_on <span class="token operator">=</span> <span class="token punctuation">[</span>azurerm_network_interface_security_group_association<span class="token punctuation">.</span>catapp<span class="token operator">-</span>nic<span class="token operator">-</span>sg<span class="token operator">-</span>ass<span class="token punctuation">]</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">resource <span class="token string-literal"><span class="token string">"null_resource"</span></span> <span class="token string-literal"><span class="token string">"configure-cat-app"</span></span> <span class="token punctuation">{</span></span>
<span class="line">  depends_on <span class="token operator">=</span> <span class="token punctuation">[</span></span>
<span class="line">    azurerm_virtual_machine<span class="token punctuation">.</span>catapp<span class="token punctuation">,</span></span>
<span class="line">  <span class="token punctuation">]</span></span>
<span class="line"></span>
<span class="line">  <span class="token comment"># Terraform 0.12</span></span>
<span class="line">  triggers <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">    build_number <span class="token operator">=</span> timestamp<span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">  provisioner <span class="token string-literal"><span class="token string">"file"</span></span> <span class="token punctuation">{</span></span>
<span class="line">    source      <span class="token operator">=</span> <span class="token string-literal"><span class="token string">"files/"</span></span></span>
<span class="line">    destination <span class="token operator">=</span> <span class="token string-literal"><span class="token string">"/home/${var.admin_username}/"</span></span></span>
<span class="line"></span>
<span class="line">    connection <span class="token punctuation">{</span></span>
<span class="line">      type     <span class="token operator">=</span> <span class="token string-literal"><span class="token string">"ssh"</span></span></span>
<span class="line">      user     <span class="token operator">=</span> var<span class="token punctuation">.</span>admin_username</span>
<span class="line">      password <span class="token operator">=</span> var<span class="token punctuation">.</span>admin_password</span>
<span class="line">      host     <span class="token operator">=</span> azurerm_public_ip<span class="token punctuation">.</span>catapp<span class="token operator">-</span>pip<span class="token punctuation">.</span>fqdn</span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">  provisioner <span class="token string-literal"><span class="token string">"remote-exec"</span></span> <span class="token punctuation">{</span></span>
<span class="line">    inline <span class="token operator">=</span> <span class="token punctuation">[</span></span>
<span class="line">      <span class="token string-literal"><span class="token string">"sudo apt -y update"</span></span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token string-literal"><span class="token string">"sleep 15"</span></span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token string-literal"><span class="token string">"sudo apt -y update"</span></span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token string-literal"><span class="token string">"sudo apt -y install apache2"</span></span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token string-literal"><span class="token string">"sudo systemctl start apache2"</span></span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token string-literal"><span class="token string">"sudo chown -R ${var.admin_username}:${var.admin_username} /var/www/html"</span></span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token string-literal"><span class="token string">"chmod +x *.sh"</span></span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token string-literal"><span class="token string">"PLACEHOLDER=${var.placeholder} WIDTH=${var.width} HEIGHT=${var.height} PREFIX=${var.prefix} ./deploy_app.sh"</span></span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token punctuation">]</span></span>
<span class="line"></span>
<span class="line">    connection <span class="token punctuation">{</span></span>
<span class="line">      type     <span class="token operator">=</span> <span class="token string-literal"><span class="token string">"ssh"</span></span></span>
<span class="line">      user     <span class="token operator">=</span> var<span class="token punctuation">.</span>admin_username</span>
<span class="line">      password <span class="token operator">=</span> var<span class="token punctuation">.</span>admin_password</span>
<span class="line">      host     <span class="token operator">=</span> azurerm_public_ip<span class="token punctuation">.</span>catapp<span class="token operator">-</span>pip<span class="token punctuation">.</span>fqdn</span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"></span></code></pre></div><ul>
<li><a href="http://variables.tf" target="_blank" rel="noopener noreferrer">variables.tf</a>
<ul>
<li>설명생략</li>
</ul>
</li>
</ul>
<div class="language-ruby" data-highlighter="prismjs" data-ext="rb" data-title="rb"><pre class="language-ruby"><code><span class="line">variable <span class="token string-literal"><span class="token string">"prefix"</span></span> <span class="token punctuation">{</span></span>
<span class="line">  description <span class="token operator">=</span> <span class="token string-literal"><span class="token string">"This prefix will be included in the name of most resources."</span></span></span>
<span class="line">  default <span class="token operator">=</span> <span class="token string-literal"><span class="token string">"unknown"</span></span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">variable <span class="token string-literal"><span class="token string">"location"</span></span> <span class="token punctuation">{</span></span>
<span class="line">  description <span class="token operator">=</span> <span class="token string-literal"><span class="token string">"The region where the virtual network is created."</span></span></span>
<span class="line">  default     <span class="token operator">=</span> <span class="token string-literal"><span class="token string">"eastus"</span></span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">variable <span class="token string-literal"><span class="token string">"address_space"</span></span> <span class="token punctuation">{</span></span>
<span class="line">  description <span class="token operator">=</span> <span class="token string-literal"><span class="token string">"The address space that is used by the virtual network. You can supply more than one address space. Changing this forces a new resource to be created."</span></span></span>
<span class="line">  default     <span class="token operator">=</span> <span class="token string-literal"><span class="token string">"10.0.0.0/16"</span></span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">variable <span class="token string-literal"><span class="token string">"subnet_prefix"</span></span> <span class="token punctuation">{</span></span>
<span class="line">  description <span class="token operator">=</span> <span class="token string-literal"><span class="token string">"The address prefix to use for the subnet."</span></span></span>
<span class="line">  default     <span class="token operator">=</span> <span class="token string-literal"><span class="token string">"10.0.10.0/24"</span></span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">variable <span class="token string-literal"><span class="token string">"vm_size"</span></span> <span class="token punctuation">{</span></span>
<span class="line">  description <span class="token operator">=</span> <span class="token string-literal"><span class="token string">"Specifies the size of the virtual machine."</span></span></span>
<span class="line">  default     <span class="token operator">=</span> <span class="token string-literal"><span class="token string">"Standard_B1s"</span></span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">variable <span class="token string-literal"><span class="token string">"image_publisher"</span></span> <span class="token punctuation">{</span></span>
<span class="line">  description <span class="token operator">=</span> <span class="token string-literal"><span class="token string">"Name of the publisher of the image (az vm image list)"</span></span></span>
<span class="line">  default     <span class="token operator">=</span> <span class="token string-literal"><span class="token string">"Canonical"</span></span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">variable <span class="token string-literal"><span class="token string">"image_offer"</span></span> <span class="token punctuation">{</span></span>
<span class="line">  description <span class="token operator">=</span> <span class="token string-literal"><span class="token string">"Name of the offer (az vm image list)"</span></span></span>
<span class="line">  default     <span class="token operator">=</span> <span class="token string-literal"><span class="token string">"0001-com-ubuntu-server-jammy"</span></span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">variable <span class="token string-literal"><span class="token string">"image_sku"</span></span> <span class="token punctuation">{</span></span>
<span class="line">  description <span class="token operator">=</span> <span class="token string-literal"><span class="token string">"Image SKU to apply (az vm image list)"</span></span></span>
<span class="line">  default     <span class="token operator">=</span> <span class="token string-literal"><span class="token string">"22_04-LTS-gen2"</span></span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">variable <span class="token string-literal"><span class="token string">"image_version"</span></span> <span class="token punctuation">{</span></span>
<span class="line">  description <span class="token operator">=</span> <span class="token string-literal"><span class="token string">"Version of the image to apply (az vm image list)"</span></span></span>
<span class="line">  default     <span class="token operator">=</span> <span class="token string-literal"><span class="token string">"latest"</span></span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">variable <span class="token string-literal"><span class="token string">"admin_username"</span></span> <span class="token punctuation">{</span></span>
<span class="line">  description <span class="token operator">=</span> <span class="token string-literal"><span class="token string">"Administrator user name for linux and mysql"</span></span></span>
<span class="line">  default     <span class="token operator">=</span> <span class="token string-literal"><span class="token string">"hashicorp"</span></span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">variable <span class="token string-literal"><span class="token string">"admin_password"</span></span> <span class="token punctuation">{</span></span>
<span class="line">  description <span class="token operator">=</span> <span class="token string-literal"><span class="token string">"Administrator password for linux and mysql"</span></span></span>
<span class="line">  default     <span class="token operator">=</span> <span class="token string-literal"><span class="token string">"Password123!"</span></span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">variable <span class="token string-literal"><span class="token string">"height"</span></span> <span class="token punctuation">{</span></span>
<span class="line">  default     <span class="token operator">=</span> <span class="token string-literal"><span class="token string">"400"</span></span></span>
<span class="line">  description <span class="token operator">=</span> <span class="token string-literal"><span class="token string">"Image height in pixels."</span></span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">variable <span class="token string-literal"><span class="token string">"width"</span></span> <span class="token punctuation">{</span></span>
<span class="line">  default     <span class="token operator">=</span> <span class="token string-literal"><span class="token string">"600"</span></span></span>
<span class="line">  description <span class="token operator">=</span> <span class="token string-literal"><span class="token string">"Image width in pixels."</span></span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">variable <span class="token string-literal"><span class="token string">"placeholder"</span></span> <span class="token punctuation">{</span></span>
<span class="line">  default     <span class="token operator">=</span> <span class="token string-literal"><span class="token string">"placekitten.com"</span></span></span>
<span class="line">  description <span class="token operator">=</span> <span class="token string-literal"><span class="token string">"Image-as-a-service URL. Some other fun ones to try are fillmurray.com, placecage.com, placebeard.it, loremflickr.com, baconmockup.com, placeimg.com, placebear.com, placeskull.com, stevensegallery.com, placedog.net"</span></span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre></div><h3>테라폼 계획 &amp; 배포(plan &amp; apply)</h3>
<p><code>main.tf</code>에서 추가했던 각종 리소스가 추가적으로 배포되는 것을 확인합니다.<br>
해당 시나리오에서는 가상머신 생성 후 <code>null_resource</code> 리소스를 통해 아파치 웹 서버를 설치하는 과정이 포함되어 있으므로 3~5분정도 소요됩니다.</p>
<h3>결과 확인 : output</h3>
<div class="language-bash" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="line"><span class="token comment"># 생략</span></span>
<span class="line">null_resource.configure-cat-app <span class="token punctuation">(</span>remote-exec<span class="token punctuation">)</span>: Script complete.</span>
<span class="line">null_resource.configure-cat-app: Creation complete after 31s <span class="token punctuation">[</span>id<span class="token operator">=</span><span class="token number">7198378208770846330</span><span class="token punctuation">]</span></span>
<span class="line"></span>
<span class="line">Apply complete<span class="token operator">!</span> Resources: <span class="token number">1</span> added, <span class="token number">0</span> changed, <span class="token number">1</span> destroyed.</span>
<span class="line"></span>
<span class="line">Outputs:</span>
<span class="line"></span>
<span class="line">catapp_url <span class="token operator">=</span> <span class="token string">"http://hyungwook-meow.koreacentral.cloudapp.azure.com"</span></span>
<span class="line"></span></code></pre></div><h3>결과확인 : WEB UI</h3>
<p><code>catapp_url</code> 을 통해 접속해본 결과 정상적으로 웹 애플리케이션이 배포되고 고양이 이미지를 출력하는 것을 확인할 수 있다.</p>
<figure><img src="https://github.com/hyungwook0221/img/blob/main/uPic/hashicat-azure.png?raw=true" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure>
<h2>정리</h2>
<p>본 실습을 통해서 간략하게 Azure의 azurerm 프로바이더를 통해 각종 리소스를 생성하는 방안을 알아보았습니다.<br>
잘못된 정보나 수정이 필요한 부분이 있다면 언제든 피드백 부탁드립니다!</p>
<blockquote>
<p>작성자 : 유형욱(<a href="mailto:hyungwook.yu@hashicorp.com" target="_blank" rel="noopener noreferrer">hyungwook.yu@hashicorp.com</a>)</p>
</blockquote>
]]></content:encoded>
      <enclosure url="https://media.licdn.com/dms/image/C5612AQGhxYMwcjsNSQ/article-cover_image-shrink_600_2000/0/1643170479486?e=2147483647&amp;v=beta&amp;t=yHuifr0mLn3lU1D41ZJ_HvhJ6uDqcfkbxp2GjyRcdYo" type="image/"/>
    </item>
    <item>
      <title>AWS Secrets Role Type Check</title>
      <link>https://docmoa.github.io/04-HashiCorp/06-Vault/07-Sentinel-Sample/aws-secrets-credential-type-check.html</link>
      <guid>https://docmoa.github.io/04-HashiCorp/06-Vault/07-Sentinel-Sample/aws-secrets-credential-type-check.html</guid>
      <source url="https://docmoa.github.io/rss.xml">AWS Secrets Role Type Check</source>
      <description>Sentinel - AWS Secrets Role Type Allow/Deny</description>
      <pubDate>Thu, 13 Jul 2023 02:48:28 GMT</pubDate>
      <content:encoded><![CDATA[
<blockquote>
<p>Public Terraform Registry - Policy Library</p>
<p>Src : <a href="https://registry.terraform.io/policies/Great-Stone/vault-aws-secret-type" target="_blank" rel="noopener noreferrer">https://registry.terraform.io/policies/Great-Stone/vault-aws-secret-type</a></p>
</blockquote>
<h2>1. EGP용 정책 생성 egp_iam_user_deny.sentinel</h2>
<div class="language-hcl" data-highlighter="prismjs" data-ext="hcl" data-title="hcl"><pre class="language-hcl"><code><span class="line">import <span class="token string">"strings"</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># print(request.data)</span></span>
<span class="line"><span class="token property">credential_type</span> <span class="token punctuation">=</span> request.data.credential_type</span>
<span class="line">print(<span class="token string">"CREDENTIAL_TYPE: "</span>, credential_type)</span>
<span class="line"></span>
<span class="line"><span class="token property">allow_role_type</span> <span class="token punctuation">=</span> <span class="token punctuation">[</span><span class="token string">"federation_token"</span><span class="token punctuation">]</span></span>
<span class="line"></span>
<span class="line"><span class="token property">role_type_check</span> <span class="token punctuation">=</span> <span class="token keyword">rule</span> <span class="token punctuation">{</span></span>
<span class="line">  credential_type in allow_role_type</span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># Only check AWS Secret Engine</span></span>
<span class="line"><span class="token comment"># Only check create, update</span></span>
<span class="line"><span class="token property">precond</span> <span class="token punctuation">=</span> <span class="token keyword">rule</span> <span class="token punctuation">{</span></span>
<span class="line">	request.operation in <span class="token punctuation">[</span><span class="token string">"create"</span>, <span class="token string">"update"</span><span class="token punctuation">]</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token property">main</span> <span class="token punctuation">=</span> rule when <span class="token keyword">precond</span> <span class="token punctuation">{</span></span>
<span class="line">    role_type_check</span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre></div><ul>
<li><code>precond</code> : API 요청이 POST, UPDATE 인 경우</li>
<li><code>role_type_check</code> : 요청의 Body에 <code>credential_type</code>의 값이 허용된 type 인지 확인 (e.g. <code>federation_token</code> 허용)</li>
</ul>
<h2>2. EGP에 정책 설정</h2>
<p>EGP는 지정된 path에 대해 정책을 적용</p>
<div class="language-bash" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="line">$ vault <span class="token function">write</span> /sys/policies/egp/iam_user_deny <span class="token punctuation">\</span></span>
<span class="line">  <span class="token assign-left variable">policy</span><span class="token operator">=</span>@egp_iam_user_deny.sentinel <span class="token punctuation">\</span></span>
<span class="line">  <span class="token assign-left variable">enforcement_level</span><span class="token operator">=</span>hard-mandatory <span class="token punctuation">\</span></span>
<span class="line">  <span class="token assign-left variable">paths</span><span class="token operator">=</span><span class="token string">"aws/roles/*"</span></span>
<span class="line"></span></code></pre></div><ul>
<li><code>paths</code>로 지정된 API 경로에 요청이 들어오면 동작</li>
</ul>
<h2>3. 테스트</h2>
<p>EGP로 지정된 path로 credential_type 이 iam_user 인경우 허용된 타입이 아니므로 거부됨</p>
<div class="language-bash" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="line">$ vault <span class="token function">write</span> aws/roles/iam-role <span class="token punctuation">\</span></span>
<span class="line">    <span class="token assign-left variable">credential_type</span><span class="token operator">=</span>iam_user <span class="token punctuation">\</span></span>
<span class="line">    <span class="token assign-left variable">policy_document</span><span class="token operator">=</span>-<span class="token operator">&lt;&lt;</span><span class="token string">EOF</span>
<span class="line">{</span>
<span class="line">  "Version": "2012-10-17",</span>
<span class="line">  "Statement": [</span>
<span class="line">    {</span>
<span class="line">      "Effect": "Allow",</span>
<span class="line">      "Action": "ec2:*",</span>
<span class="line">      "Resource": "*"</span>
<span class="line">    }</span>
<span class="line">  ]</span>
<span class="line">}</span>
<span class="line">EOF</span></span>
<span class="line"></span></code></pre></div><p>에러 메시지</p>
<div class="language-log" data-highlighter="prismjs" data-ext="log" data-title="log"><pre class="language-log"><code><span class="line"><span class="token property">Error writing data to aws/roles/iam-role:</span> Error making API request<span class="token punctuation">.</span></span>
<span class="line"></span>
<span class="line"><span class="token property">URL:</span> PUT <span class="token url">http://127.0.0.1:8200/v1/aws/roles/iam-role</span></span>
<span class="line"><span class="token property">Code:</span> <span class="token number">403</span><span class="token punctuation">.</span> Errors<span class="token operator">:</span></span>
<span class="line"></span>
<span class="line"><span class="token operator">*</span> <span class="token number">2</span> errors occurred<span class="token operator">:</span></span>
<span class="line">	<span class="token operator">*</span> egp standard policy <span class="token string">"root/iam_user_deny"</span> evaluation resulted in denial<span class="token punctuation">.</span></span>
<span class="line"></span>
<span class="line"><span class="token property">The specific error was:</span></span>
<span class="line"><span class="token operator">&lt;</span>nil<span class="token operator">&gt;</span></span>
<span class="line"></span>
<span class="line">A trace of the execution for policy <span class="token string">"root/iam_user_deny"</span> <span class="token property">is available:</span></span>
<span class="line"></span>
<span class="line"><span class="token property">Result:</span> <span class="token boolean">false</span></span>
<span class="line"></span>
<span class="line"><span class="token property">Description:</span> <span class="token operator">&lt;</span>none<span class="token operator">&gt;</span></span>
<span class="line"></span>
<span class="line">print<span class="token operator">(</span><span class="token operator">)</span> output<span class="token operator">:</span></span>
<span class="line"></span>
<span class="line"><span class="token property">CREDENTIAL_TYPE:</span>  iam_user</span>
<span class="line"></span>
<span class="line"></span>
<span class="line">Rule <span class="token string">"main"</span> <span class="token operator">(</span>root<span class="token operator">/</span>iam_user_deny<span class="token operator">:</span><span class="token number">19</span><span class="token operator">:</span><span class="token number">1</span><span class="token operator">)</span> <span class="token operator">=</span> <span class="token boolean">false</span></span>
<span class="line">Rule <span class="token string">"precond"</span> <span class="token operator">(</span>root<span class="token operator">/</span>iam_user_deny<span class="token operator">:</span><span class="token number">15</span><span class="token operator">:</span><span class="token number">1</span><span class="token operator">)</span> <span class="token operator">=</span> <span class="token boolean">true</span></span>
<span class="line">Rule <span class="token string">"role_type_check"</span> <span class="token operator">(</span>root<span class="token operator">/</span>iam_user_deny<span class="token operator">:</span><span class="token number">9</span><span class="token operator">:</span><span class="token number">1</span><span class="token operator">)</span> <span class="token operator">=</span> <span class="token boolean">false</span></span>
<span class="line">	<span class="token operator">*</span> permission denied</span>
<span class="line"></span></code></pre></div><p><code>federation_token</code>은 생성됩니다.</p>
<div class="language-bash" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="line">$ vault <span class="token function">write</span> aws/roles/sts-role <span class="token punctuation">\</span></span>
<span class="line">    <span class="token assign-left variable">credential_type</span><span class="token operator">=</span>federation_token <span class="token punctuation">\</span></span>
<span class="line">    <span class="token assign-left variable">policy_document</span><span class="token operator">=</span>-<span class="token operator">&lt;&lt;</span><span class="token string">EOF</span>
<span class="line">{</span>
<span class="line">  "Version": "2012-10-17",</span>
<span class="line">  "Statement": [</span>
<span class="line">    {</span>
<span class="line">      "Effect": "Allow",</span>
<span class="line">      "Action": "ec2:*",</span>
<span class="line">      "Resource": "*"</span>
<span class="line">    }</span>
<span class="line">  ]</span>
<span class="line">}</span>
<span class="line">EOF</span></span>
<span class="line">Success<span class="token operator">!</span> Data written to: aws/roles/sts-role</span>
<span class="line"></span></code></pre></div>]]></content:encoded>
    </item>
    <item>
      <title>2023년 7월</title>
      <link>https://docmoa.github.io/04-HashiCorp/08-Updates/98-2023/2023-07.html</link>
      <guid>https://docmoa.github.io/04-HashiCorp/08-Updates/98-2023/2023-07.html</guid>
      <source url="https://docmoa.github.io/rss.xml">2023년 7월</source>
      <description>2023년 7월 Update</description>
      <pubDate>Wed, 12 Jul 2023 14:25:54 GMT</pubDate>
      <content:encoded><![CDATA[
<h2>Product 소개 (Hashidays 2023)</h2>
<ul>
<li>매년 유럽 네덜란드에서 이틀간 진행되던 Hashiconf 가 올해는 한단계 더 성장하여 영국 런던, 프랑스 파리 그리고 독일 뮌헨에서 동시에 진행되는 Hashidays 2023 으로 개최되었습니다. 새롭게 펼쳐진 Hashidays 에서는 Terraform, Vault, Consul 그리고 Boundary 에 대해 그동안 사용자들이 사용하면서 느꼈던 불편함을 해소할 신기능을 출시했습니다.
<ul>
<li><a href="https://www.hashicorp.com/blog/a-hashicorp-ambassador-at-hashidays-london" target="_blank" rel="noopener noreferrer">Hashicorp Blog</a></li>
<li><a href="https://www.hashicorp.com/blog/announcing-hcp-vault-secrets-public-beta" target="_blank" rel="noopener noreferrer">HCP Vault Secrets</a> (Public Beta): Vault 에서 가장 많이 활용되고 있는 Secret Engine 중 하나인 KV Engine 기반 시크릿 관리에 특화된 HCP SaaS 서비스로써 애플리케이션 개발 및 운영에 사용되는 시크릿에 대한 저장, 접근 그리고 자동 동기화 기능을 더욱 쉽게 구성 가능하도록 지원합니다. 특히 기존 사용 중인 AWS Secret Manager 등 클라우드 서비스와도 원클릭 동기화를 지원함으로써 기존 워크플로우에 대해 최소한의 변경으로 시크릿 동적관리가 가능합니다.</li>
<li><a href="https://www.hashicorp.com/blog/vault-secrets-operator-for-kubernetes-now-ga" target="_blank" rel="noopener noreferrer">Vault Secrets Operator</a>: CRD 기반으로 K8S의 Secrets 와 연계하여 Secrets 를 동적으로 관리함으로써 최소한의 추가 구성으로 기존 구성하여 사용중인 Secrets 에 대해  보안을 강화합니다.</li>
<li><a href="https://www.hashicorp.com/blog/boundary-0-13-introduces-ssh-session-recording-boundary-enterprise-and-more" target="_blank" rel="noopener noreferrer">Boundary Enterprise</a>: 기존에 Opensource 그리고 HCP SaaS 로만 제공되던 Boundary 가 드디어 Enterprise Edition 이 출시되었습니다. Enterprise Edition 에서는 그동안 많은 사용자들이 필요로 했던 Session Recording 과 더불어 그외 다양한 신규 기능들이 추가되었습니다.</li>
<li><a href="https://www.hashicorp.com/blog/new-terraform-cloud-capabilities-to-import-view-and-manage-infrastructure" target="_blank" rel="noopener noreferrer">Terraform</a>: 지난 6월호에서 소개한 <a href="https://www.hashicorp.com/blog/terraform-cloud-adds-vault-backed-dynamic-credentials" target="_blank" rel="noopener noreferrer">Vault-backed dynamic credentials</a> 의 정식 GA 출시, 그동안 너무 불편하고 어려웠던 Terraform import 를 보완해줄 <a href="https://www.hashicorp.com/blog/terraform-1-5-brings-config-driven-import-and-checks" target="_blank" rel="noopener noreferrer">Config-driven Import</a>, 생성 및 관리 중인 자원에 대한 보다 효과적인 관리를 위한 Explorer (Beta) 등 다양한 기능이 추가되었습니다.</li>
<li><a href="https://www.hashicorp.com/blog/consul-1-16-enhances-service-mesh-reliability-user-experience-and-security" target="_blank" rel="noopener noreferrer">Consul 1.16</a>: Envoy Proxy 에 Extension 이 출시되어 WASM (Web Assembly) Code 기반 추가 기능을 활용하거나 외부 보안 서비스와 연계하여 인증 기반 기능 활용합니다, 또한 여러 Cluster 에 걸쳐 동일 서비스에 대해 동일 서비스 이름을 사용하도록 하는 Sameness Groups 를 통해 서비스 관리 뿐만 아니라 장애 발생 시 수행하는 Failover 를 보다 간단하게 처리할 수 있습니다.</li>
</ul>
</li>
</ul>
<h2>Product Update</h2>
<ul>
<li>Terraform
<ul>
<li>CLI
<ul>
<li><a href="https://github.com/hashicorp/terraform/releases/tag/v1.5.0" target="_blank" rel="noopener noreferrer">1.5.0 Release</a>
<ul>
<li><a href="https://developer.hashicorp.com/terraform/language/checks" target="_blank" rel="noopener noreferrer"><code>check</code></a> Block 추가, 최소 1개 이상의 <code>assert</code> 구문을 요구하며 <code>assert</code> 구문 내 1개 혹은 여러 개의 <code>condition</code> 과 <code>error_message</code> 를 지정하여 <code>resource</code> 또는 <code>data</code> 자원에 대한 검증 지원</li>
<li><code>import</code> Block 추가, 기존 terraform import 명령어 기반 import 작업을 hcl code 로 작성하여 보다 손쉽게 import 작업 수행하도록 지원</li>
</ul>
</li>
</ul>
</li>
<li><a href="https://developer.hashicorp.com/terraform/enterprise/releases" target="_blank" rel="noopener noreferrer">Enterprise Release</a>
<ul>
<li><a href="https://developer.hashicorp.com/terraform/enterprise/releases/2023/v202306-1" target="_blank" rel="noopener noreferrer">6월 Release</a> 출시 (<code>v202306-1 (713)</code>)</li>
<li>필수 Upgrade Versison: Release Note 에서 * 표기된 Version 은 필수로 거쳐야 하는 Version (예: v202207-2)</li>
<li>Terraform run 시 구동되는 Build Worker 관련 지원 종료 (v202306-1 부터 적용, Terraform run 시 TFC Agent 로 대체)</li>
<li><code>v202308-1</code> 부터 TFE 구동을 위한 Container 구성이  <code>terraform-enterprise</code> 라는 단일 Container 로 통합 (<code>terraform plan</code> 또는 <code>terraform apply</code> 는 기존 방식과 동일하게 수행 때마다 agent container 생성)</li>
<li><code>v202308-1</code> 부터 Docker 19.03 지원 종료 예정</li>
<li><a href="https://developer.hashicorp.com/terraform/enterprise/no-code-provisioning/module-design" target="_blank" rel="noopener noreferrer">No-code Provisioning</a> 지원</li>
</ul>
</li>
<li>Provider
<ul>
<li><a href="https://github.com/hashicorp/terraform-provider-aws/releases/tag/v5.7.0" target="_blank" rel="noopener noreferrer">AWS v5.7.0 주요 수정사항</a>
<ul>
<li>신규 resource 추가
<ul>
<li>data/aws_opensearchserverless_*</li>
<li>aws_cleanrooms_collaboration</li>
</ul>
</li>
<li>기능 개선
<ul>
<li>aws_lambda_function 에 대해 <code>ap-east-1</code> region 에서 <code>code_signing_config_arn</code> 설정 지원</li>
</ul>
</li>
<li>Bug Fix
<ul>
<li>provider 에 대해 <code>forbidden_account_ids</code> 처리 오류 개선</li>
<li>aws_kms 에 대해 tag 삭제 오류 개선</li>
<li>aws_secretsmanager_secret_rotation 에 대해 update 시 발생하는<code>InvalidParameterException: You cannot specify both rotation frequency and schedule expression together</code> 오류 개선</li>
<li>aws_vpc_endpoint 에 대해 s3 interface vpc endpoint 생성 시 발생하는 <code>InvalidParameter: PrivateDnsOnlyForInboundResolverEndpoint not supported for this service</code> 오류 개선</li>
</ul>
</li>
</ul>
</li>
<li><a href="https://github.com/hashicorp/terraform-provider-azurerm/releases/tag/v3.64.0" target="_blank" rel="noopener noreferrer">Azure v3.64.0 주요 수정사항</a>
<ul>
<li>신규 resource 추가
<ul>
<li>azurerm_automation_variables</li>
<li>azurerm_arc_private_link_scope</li>
<li>azurerm_kusto_cosmosdb_data_connection</li>
<li>azurerm_pim_*</li>
</ul>
</li>
<li>기능 개선
<ul>
<li>azurerm_windows_* 에 대해 <code>public_network_access_enabled</code> 설정 지원</li>
<li>azurerm_linux_* 에 대해 <code>public_network_access_enabled</code> 설정 지원</li>
<li>azurerm_spring_cloud_gateway 에 대해 <code>allowed_origin_patterns</code> 설정 지원</li>
</ul>
</li>
<li>Bug Fix
<ul>
<li>azurerm_windows_* 에 대해 <code>cors</code> 설정 시 <code>allowed_origins</code> 에 대한 설정 항목 수 오류 개선</li>
<li>azurerm_linux_* 에 대해 <code>cors</code> 설정 시 <code>allowed_origins</code> 에 대한 설정 항목 수 오류 개선</li>
</ul>
</li>
</ul>
</li>
<li><a href="https://github.com/hashicorp/terraform-provider-google/releases/tag/v4.73.0" target="_blank" rel="noopener noreferrer">GCP v4.73.0 주요 수정사항</a>
<ul>
<li>신규 resource 추가
<ul>
<li>google_firebase_extensions_instance</li>
</ul>
</li>
<li>기능 개선
<ul>
<li>compute 에 대해 <code>google_compute_forwarding_rule</code> 설정 내 <code>no_automate_dns_zone</code> 추가</li>
<li>compute 에 대해 <code>google_compute_disk_async_replication</code> 정식 지원</li>
<li>compute 에 대해 <code>google_compute_disk</code> 설정 내 <code>async_primary_disk</code> 추가</li>
<li>compute 에 대해 <code>google_compute_region_disk</code> 설정 내  <code>async_primary_disk</code> 추가</li>
</ul>
</li>
<li>Bug Fix
<ul>
<li>networkservices 에 대해 <code>google_network_services_edge_cache_keyset</code> 의 기본 timeout 값을 90 분으로 설정</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li>Vault
<ul>
<li>1.14.0
<ul>
<li>상세 <a href="https://github.com/hashicorp/vault/releases/tag/v1.14.0" target="_blank" rel="noopener noreferrer">Release Note</a></li>
<li>PKI Engine 에 대해 사용 중인 유효 인증서 정보 관리에 대한 기본 설정을 off 로 변경</li>
<li>AWS Secret Engine: Static Rotation 지원 (기존 생성된 IAM User 에 대해 Access Key / Secret Key Rotation)</li>
<li>Auth Method 추가: OCI (Oracle Cloud Infrastructure)</li>
<li>Vault Agent Supervisor Mode: Vault 에 저장된 Secret 을 환경변수로 등록</li>
<li>PKI: ACME 지원</li>
<li>UI: Terraform 과 같이 좌측 Sidebar 형태로 UI 변경</li>
<li>Vault Proxy: Vault Agent API Proxy 와 동일 기능 제공, 향후 기능 추가 및 Vault Agent API Proxy 사용 종료 예정</li>
</ul>
</li>
</ul>
</li>
<li>Consul
<ul>
<li>1.16
<ul>
<li>상세 <a href="https://github.com/hashicorp/consul/releases/tag/v1.16.0" target="_blank" rel="noopener noreferrer">Release Note</a></li>
<li><code>/v1/health/connect/</code> 와 <code>/v1/health/ingress/</code> api 에 대해 적절한 권한 없는 token 사용 시 403 오류 출력</li>
<li>cluster peering: 지원 종료된 version 을 사용하는 cluster 에 대한 하위 호환성 제거</li>
<li><code>consul services export</code>: peer cluster 또는 타 partition 에 서비스 노출을 위한 명령어 추가</li>
<li>Permissive mTLS: Service Mesh 에 대해 mTLS 활성화 유무 선택</li>
<li>audit hash: audit log hash function 기반 data hash 값 검증 지원</li>
</ul>
</li>
</ul>
</li>
<li>Nomad
<ul>
<li>1.5.6
<ul>
<li>상세 <a href="https://github.com/hashicorp/nomad/releases/tag/v1.5.6" target="_blank" rel="noopener noreferrer">Release Note</a></li>
<li>Job allocation 이 재시작 되었을 때 발생하는 group service 가 등록 해제 되는 오류 개선</li>
<li>종료되었음에도 삭제 되지 않은  Job allocation 에 대한 오류 개선</li>
<li>Job Evaluation 이 잘못된 type 으로 생성되는 오류 개선</li>
</ul>
</li>
</ul>
</li>
</ul>
]]></content:encoded>
    </item>
    <item>
      <title>AWS Auth Method</title>
      <link>https://docmoa.github.io/04-HashiCorp/06-Vault/03-Auth_Method/aws-auth.html</link>
      <guid>https://docmoa.github.io/04-HashiCorp/06-Vault/03-Auth_Method/aws-auth.html</guid>
      <source url="https://docmoa.github.io/rss.xml">AWS Auth Method</source>
      <description>AWS Auth Method 설명 및 구성 방법 안내</description>
      <pubDate>Fri, 30 Jun 2023 12:58:35 GMT</pubDate>
      <content:encoded><![CDATA[
<blockquote>
<p><a href="https://developer.hashicorp.com/vault/docs/auth/aws" target="_blank" rel="noopener noreferrer">https://developer.hashicorp.com/vault/docs/auth/aws</a></p>
<p><a href="https://developer.hashicorp.com/vault/api-docs/auth/aws" target="_blank" rel="noopener noreferrer">https://developer.hashicorp.com/vault/api-docs/auth/aws</a></p>
<p><a href="https://blog.gruntwork.io/a-guide-to-automating-hashicorp-vault-3-authenticating-with-an-iam-user-or-role-a3203a3ee088" target="_blank" rel="noopener noreferrer">https://blog.gruntwork.io/a-guide-to-automating-hashicorp-vault-3-authenticating-with-an-iam-user-or-role-a3203a3ee088</a></p>
</blockquote>
<p>AWS auth method는 IAM 계정 또는 EC2 인스턴스에 대한 Vault 토큰을 검색하는 자동화된 메커니즘을 제공한다. 이 방식은 다양한 상황에서 운영자가 보안에 민감한 자격증명(토큰, 사용자 이름/비밀번호, 클라이언트 인증서 등)을 수동으로 먼저 생성할 필요가 없다.</p>
<h2>1. 인증 워크플로</h2>
<p>AWS auth method는 <code>iam</code>과 <code>ec2</code> 방식을 지원한다.</p>
<h3><code>iam</code> 인증 방식</h3>
<p>AWS IAM 자격 증명으로 서명된 AWS 요청이 인증에 사용된다. 거의 모든 AWS 리소스는 AWS 보안 토큰 서비스(STS)를 호출하여 자신의 신원을 조회할 수 있다. Vault의 AWS iam 인증 방식은 사용자가 직접 요청을 보내는 대신, 서명된 요청 데이터를 Vault로 전송하여 STS에 서명된 요청을 생성할 수 있도록 함으로써 이러한 이점을 활용한다. Vault는 요청을 실행하고 AWS(다시 말해서 신뢰할 수 있는 제3자)로부터 사용자의 실제 신원을 확인한다. <code>iam</code>방식이 좀더 최신의 방식이며, 기존  <code>ec2</code>방식의 한계였던 람다 또는 ECS 같은 다양한 유형의 서비스에서 작동한다.</p>
<p>AWS STS API에는 클라이언트의 신원을 확인할 수 있는 메서드인 <code>sts:GetCallerIdentity</code>가 포함되어 있다. 클라이언트는 AWS 서명 v4 알고리즘을 사용하여 <code>GetCallerIdentity</code> 쿼리에 서명하고 이를 Vault 서버로 보낸다. <code>GetCallerIdentity</code> 요청에 서명하는 데 사용되는 자격 증명은 EC2 인스턴스에 대한 EC2 인스턴스 메타데이터 서비스 또는 AWS Lambda 함수 실행의 AWS 환경 변수에서 가져올 수 있으므로 운영자가 먼저 신원 자료를 수동으로 프로비저닝할 필요가 없다. 그리고 사용되는 자격 증명은 원칙적으로 AWS내부의 Role이부여된 리소스 뿐만 아니라 Access Key를 사용하여 어디에서나 가져올 수 있다.</p>
<p><code>GetCallerIdentity</code> 쿼리는 <code>Request URL</code>, <code>Request Body</code>, <code>Request Header</code>, <code>Request Method</code>의 네 가지 정보로 구성되며, AWS 서명은 이러한 필드를 통해 계산된다. Vault 서버는 이 정보를 사용해 쿼리를 재구성하고 AWS STS 서비스로 전달한다. STS 서비스의 응답에 따라 서버는 클라이언트를 인증한다.</p>
<p>클라이언트가 AWS STS API 엔드포인트와 통신하기 위한 네트워크 접근이 필요하지 않으며, 요청에 서명하기 위한 자격 증명에 대한 액세스만 있으면 된다. 그러나 Vault 서버가 STS 엔드포인트로 요청을 전송하려면 네트워크 수준 액세스가 필요하다.</p>
<p>서명된 각 AWS 요청에는 현재 타임스탬프가 포함되어 리플레이 공격의 위험을 완화합니다. 또한, Vault에서는 다양한 유형의 리플레이 공격(예: 개발 Vault 인스턴스에서 서명된 <code>GetCallerIdentity</code> 요청을 도용하여 프로덕션 Vault 인스턴스에 인증하는 데 사용하는 공격)을 완화하기 위해 추가 헤더인 X-Vault-AWS-IAM-Server-ID를 요구할 수 있다. 또한 Vault는 이 헤더가 AWS 서명에 포함된 헤더 중 하나이어야 하며, 해당 서명을 인증하기 위해 AWS에 의존한다.</p>
<p>AWS API 엔드포인트는 서명된 GET 요청과 POST 요청을 모두 지원하지만, 간단하게 하기 위해 aws auth 메서드는 POST 요청만 지원합니다. 또한 사전 서명된 요청, 즉 인증 정보가 포함된 <code>X-Amz-Credential</code>, <code>X-Amz-Signature</code>, <code>X-Amz-SignedHeaders</code> GET 쿼리 매개 변수가 있는 요청은 지원하지 않는다.</p>
<p>또한 <code>GetCallerIdentity</code> 호출과 관련하여 어떤 종류의 권한 부여도 포함하지 않는다. 예를 들어, 자격 증명에 대해 모든 액세스가 MFA 인증을 받아야 하는 IAM 정책이 있는 경우, MFA 인증을 받지 않은 자격 증명(즉, <code>GetSessionToken</code>을 호출하고 MFA 코드를 제공하여 검색한 자격 증명이 아닌 원시 자격 증명)은 이 방법을 사용하여 여전히 Vault에 인증할 수 있다. Vault에 인증하는 동안 IAM 주체가 MFA 인증을 받도록 강제하는 것은 불가능하다.</p>
<h3><code>ec2</code> 인증 방식</h3>
<p>ec2 방식에서는 AWS가 신뢰할 수 있는 제3자로 취급되며, 각 EC2 인스턴스를 고유하게 나타내는 암호화 서명된 동적 메타데이터 정보가 인증에 사용된다. 이 메타데이터 정보는 AWS가 모든 EC2 인스턴스에 자동으로 제공한다. 특정 AMI, 특정 인스턴스 프로파일의 EC2 인스턴스 또는 특수 태그 값을 가진 EC2 인스턴스(role_tag 기능을 통해)에서 EC2 인스턴스에 대한 액세스를 제한하는 등 EC2 인스턴스를 처리하는 데 특화되어 있다.</p>
<p>Amazon EC2 인스턴스는 인스턴스를 설명하는 메타데이터에 액세스할 수 있습니다. Vault EC2 인증 메서드는 이 메타데이터의 구성 요소를 활용하여 초기 Vault 토큰을 인증하고 EC2 인스턴스에 배포한다. 데이터 흐름(아래 그래픽에도 표시됨)은 다음과 같다:</p>
<figure><img src="https://raw.githubusercontent.com/Great-Stone/images/master/uPic/assets (1368×998) 2023-06-30 20-34-15.png" alt="assets (1368×998) 2023-06-30 20-34-15" tabindex="0" loading="lazy"><figcaption>assets (1368×998) 2023-06-30 20-34-15</figcaption></figure>
<ol>
<li>AWS EC2 인스턴스는 EC2 메타데이터 서비스에서 AWS 인스턴스 ID 문서를 가져옵니다. AWS는 데이터 자체 외에도 데이터의 PKCS#7 서명을 제공하고, 서명을 확인하는 데 사용할 수 있는 공개 키(지역별로)를 게시한다.</li>
<li>AWS EC2 인스턴스는 PKCS#7 서명을 사용하여 Vault에 요청합니다. PKCS#7 서명에는 인스턴스 ID 문서가 포함된다.</li>
<li>Vault는 PKCS#7 문서의 서명을 확인하여 정보가 AWS에 의해 정확하게 인증되었는지 확인합니다. 이 프로세스는 문서 데이터의 유효성과 무결성을 모두 검증합니다. 추가 보안 조치로, Vault는 인스턴스가 현재 퍼블릭 EC2 API 엔드포인트를 사용하여 실행 중인지 확인한다.</li>
<li>모든 단계가 성공적으로 완료되면 Vault는 초기 Vault 토큰을 EC2 인스턴스에 반환합니다. 이 토큰은 인스턴스 메타데이터를 기반으로 구성된 모든 정책에 매핑된다.</li>
</ol>
<h2>2. Vault의 AWS auth method 인증에 필요한 권장 IAM Policy</h2>
<div class="language-json" data-highlighter="prismjs" data-ext="json" data-title="json"><pre class="language-json"><code><span class="line"><span class="token punctuation">{</span></span>
<span class="line">  <span class="token property">"Version"</span><span class="token operator">:</span> <span class="token string">"2012-10-17"</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token property">"Statement"</span><span class="token operator">:</span> <span class="token punctuation">[</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">      <span class="token property">"Effect"</span><span class="token operator">:</span> <span class="token string">"Allow"</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token property">"Action"</span><span class="token operator">:</span> <span class="token punctuation">[</span></span>
<span class="line">        <span class="token string">"ec2:DescribeInstances"</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token string">"iam:GetInstanceProfile"</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token string">"iam:GetUser"</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token string">"iam:GetRole"</span></span>
<span class="line">      <span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token property">"Resource"</span><span class="token operator">:</span> <span class="token string">"*"</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">      <span class="token property">"Effect"</span><span class="token operator">:</span> <span class="token string">"Allow"</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token property">"Action"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"sts:AssumeRole"</span><span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token property">"Resource"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"arn:aws:iam::&lt;AccountId&gt;:role/&lt;VaultRole&gt;"</span><span class="token punctuation">]</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">      <span class="token property">"Sid"</span><span class="token operator">:</span> <span class="token string">"ManageOwnAccessKeys"</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token property">"Effect"</span><span class="token operator">:</span> <span class="token string">"Allow"</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token property">"Action"</span><span class="token operator">:</span> <span class="token punctuation">[</span></span>
<span class="line">        <span class="token string">"iam:CreateAccessKey"</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token string">"iam:DeleteAccessKey"</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token string">"iam:GetAccessKeyLastUsed"</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token string">"iam:GetUser"</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token string">"iam:ListAccessKeys"</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token string">"iam:UpdateAccessKey"</span></span>
<span class="line">      <span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token property">"Resource"</span><span class="token operator">:</span> <span class="token string">"arn:aws:iam::*:user/${aws:username}"</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">      <span class="token property">"Sid"</span><span class="token operator">:</span> <span class="token string">"IAM_Method"</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token property">"Effect"</span><span class="token operator">:</span> <span class="token string">"Allow"</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token property">"Action"</span><span class="token operator">:</span> <span class="token punctuation">[</span></span>
<span class="line">        <span class="token string">"sts:GetCallerIdentity"</span></span>
<span class="line">      <span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token property">"Resource"</span><span class="token operator">:</span> <span class="token string">"*"</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">  <span class="token punctuation">]</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"></span></code></pre></div><ul>
<li><code>arn:aws:iam::\&lt;AccountId\&gt;:*</code>: 로 구성하면 AWS 계정의 모든 주체가 이 계정에 로그인</li>
<li><code>arn:aws:iam::\&lt;AccountId\&gt;:role/*</code> 로 구성하면 AWS 계정의 모든 IAM 역할이 해당 계정에 로그인</li>
<li>와일드카드를 지정하려면 전체 사용자 경로를 올바르게 확인할 수 있도록 Vault에 <code>iam:GetUser</code> 및 <code>iam:GetRole</code> 권한을 부여</li>
<li>ARN이 <code>arn:aws:iam::123456789012:role/MyRole</code>인 역할이 있는 경우, 해당 역할에서 AssumeRole을 호출하여 반환되는 자격 증명은 <code>arn:aws:sts::123456789012:assumed-role/MyRole/RoleSessionName</code>이며, 여기서 <code>RoleSessionName</code>은 AssumeRole API 호출의 세션 이름</li>
<li><code>ec2:DescribeInstances</code>는 ec2 인증 메서드를 사용하거나 EC2 인스턴스가 role binding 요구 사항을 충족하는지 확인하기 위해 <code>ec2_instance</code>엔티티 유형을 추론할 때 필요</li>
<li><code>iam:GetInstanceProfile</code>은 ec2 인증 메서드에 <code>bound_iam_role_arn</code>이 있을 때 사용</li>
<li>계정간 접근이 필요한 경우 <code>sts:AssumeRole</code> 구문이 필요(지정된 리소스는 계정 간 액세스를 구성한 모든 역할의 목록이어야 하며, 각 역할에는 이 IAM 정책이 첨부되어 있어야 하며 <code>sts:AssumeRole</code> 문은 제외)</li>
<li>정적 자격 증명으로 Vault를 구성한 후 Rotate Root Credentials API 호출을 통해 이러한 자격 증명을 회전하려는 경우 <code>ManageOwnAccessKeys</code> 구절이 필요</li>
</ul>
<h2>3. AWS 외부에서 구성</h2>
<p>AWS외부에서 구성하는 경우 AWS 인증을 위한 Policy가 구성된 Access Key/Secret Key가 필요하다.</p>
<h3><code>aws</code> auth method 활성화</h3>
<div class="language-bash" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="line">$ vault auth <span class="token builtin class-name">enable</span> aws</span>
<span class="line"></span></code></pre></div><h3>활성화된 auth method의 구성</h3>
<ul>
<li>access_key</li>
<li>secret_key</li>
</ul>
<div class="language-bash" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="line">$ vault <span class="token function">write</span> auth/aws/config/client <span class="token assign-left variable">secret_key</span><span class="token operator">=</span>vCtSM8ZUEQ3mOFVlYPBQkf2sO6F/W7a5TVzrl3Oj <span class="token assign-left variable">access_key</span><span class="token operator">=</span>VKIAJBRHKH6EVTTNXDHA</span>
<span class="line"></span></code></pre></div><h3><code>ec2</code> role 구성 및 로그인</h3>
<div class="language-bash" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="line">$ vault <span class="token function">write</span> auth/aws/role/dev-role <span class="token assign-left variable">auth_type</span><span class="token operator">=</span>ec2 <span class="token assign-left variable">bound_ami_id</span><span class="token operator">=</span>ami-fce3c696 <span class="token assign-left variable">policies</span><span class="token operator">=</span>prod,dev <span class="token assign-left variable">max_ttl</span><span class="token operator">=</span>500h</span>
<span class="line"></span>
<span class="line">$ <span class="token assign-left variable">SIGNATURE</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$(</span><span class="token function">curl</span> <span class="token parameter variable">-s</span> http://169.254.169.254/latest/dynamic/instance-identity/rsa2048 <span class="token operator">|</span> <span class="token function">tr</span> <span class="token parameter variable">-d</span> <span class="token string">'\n'</span><span class="token variable">)</span></span></span>
<span class="line"></span>
<span class="line">$ vault <span class="token function">write</span> auth/aws/login <span class="token assign-left variable">role</span><span class="token operator">=</span>dev-role <span class="token assign-left variable">pkcs7</span><span class="token operator">=</span><span class="token variable">$SIGNATURE</span></span>
<span class="line"></span></code></pre></div><h3><code>iam</code> role 구성 및 로그인</h3>
<div class="language-bash" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="line">$ vault <span class="token function">write</span> auth/aws/role/dev-role-iam <span class="token assign-left variable">auth_type</span><span class="token operator">=</span>iam  <span class="token assign-left variable">bound_iam_principal_arn</span><span class="token operator">=</span>arn:aws:iam::123456789012:role/MyRole <span class="token assign-left variable">policies</span><span class="token operator">=</span>prod,dev <span class="token assign-left variable">max_ttl</span><span class="token operator">=</span>500h</span>
<span class="line"></span>
<span class="line">$ vault login <span class="token parameter variable">-method</span><span class="token operator">=</span>aws <span class="token assign-left variable">header_value</span><span class="token operator">=</span>vault.example.com <span class="token assign-left variable">role</span><span class="token operator">=</span>dev-role-iam <span class="token punctuation">\</span></span>
<span class="line">        <span class="token assign-left variable">aws_access_key_id</span><span class="token operator">=</span><span class="token operator">&lt;</span>access_key<span class="token operator">&gt;</span> <span class="token punctuation">\</span></span>
<span class="line">        <span class="token assign-left variable">aws_secret_access_key</span><span class="token operator">=</span><span class="token operator">&lt;</span>secret_key<span class="token operator">&gt;</span> <span class="token punctuation">\</span></span>
<span class="line">        <span class="token assign-left variable">aws_security_token</span><span class="token operator">=</span><span class="token operator">&lt;</span>security_token<span class="token operator">&gt;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># AWS SDK가 지원하는 인증 방식이 설정되어있는 경우 aws_access_key_id 생략 가능</span></span>
<span class="line"><span class="token comment"># ~/.aws/credentials</span></span>
<span class="line"><span class="token comment"># IAM 인스턴스 프로파일</span></span>
<span class="line"><span class="token comment"># ECS task role 등</span></span>
<span class="line">$ vault login <span class="token parameter variable">-method</span><span class="token operator">=</span>aws <span class="token assign-left variable">header_value</span><span class="token operator">=</span>vault.example.com <span class="token assign-left variable">role</span><span class="token operator">=</span>dev-role-iam</span>
<span class="line"></span>
<span class="line"><span class="token comment"># 리전 지정이 필요한 경우 대상 지정</span></span>
<span class="line">$ vault login <span class="token parameter variable">-method</span><span class="token operator">=</span>aws <span class="token assign-left variable">region</span><span class="token operator">=</span>us-west-2 <span class="token assign-left variable">role</span><span class="token operator">=</span>dev-role-iam</span>
<span class="line"></span>
<span class="line"><span class="token comment"># 요청 매개변수를 생성하여 로그인 메서드에 전달</span></span>
<span class="line">vault <span class="token function">write</span> auth/aws/login <span class="token assign-left variable">role</span><span class="token operator">=</span>dev-role-iam <span class="token punctuation">\</span></span>
<span class="line">        <span class="token assign-left variable">iam_http_request_method</span><span class="token operator">=</span>POST <span class="token punctuation">\</span></span>
<span class="line">        <span class="token assign-left variable">iam_request_url</span><span class="token operator">=</span>aHR0cHM6Ly9zdHMuYW1hem9uYXdzLmNvbS8<span class="token operator">=</span> <span class="token punctuation">\</span></span>
<span class="line">        <span class="token assign-left variable">iam_request_body</span><span class="token operator">=</span>QWN0aW9uPUdldENhbGxlcklkZW50aXR5JlZlcnNpb249MjAxMS0wNi0xNQ<span class="token operator">==</span> <span class="token punctuation">\</span></span>
<span class="line">        <span class="token assign-left variable">iam_request_headers</span><span class="token operator">=</span>eyJDb250ZW50LUxlbmd0aCI6IFsiNDMiXSwgIlVzZXItQWdlbnQiOiBbImF3cy1zZGstZ28vMS40LjEyIChnbzEuNy4xOyBsaW51eDsgYW1kNjQpIl0sICJYLVZhdWx0LUFXU0lBTS1TZXJ2ZXItSWQiOiBbInZhdWx0LmV4YW1wbGUuY29tIl0sICJYLUFtei1EYXRlIjogWyIyMDE2MDkzMFQwNDMxMjFaIl0sICJDb250ZW50LVR5cGUiOiBbImFwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZDsgY2hhcnNldD11dGYtOCJdLCAiQXV0aG9yaXphdGlvbiI6IFsiQVdTNC1ITUFDLVNIQTI1NiBDcmVkZW50aWFsPWZvby8yMDE2MDkzMC91cy1lYXN0LTEvc3RzL2F3czRfcmVxdWVzdCwgU2lnbmVkSGVhZGVycz1jb250ZW50LWxlbmd0aDtjb250ZW50LXR5cGU7aG9zdDt4LWFtei1kYXRlO3gtdmF1bHQtc2VydmVyLCBTaWduYXR1cmU9YTY5ZmQ3NTBhMzQ0NWM0ZTU1M2UxYjNlNzlkM2RhOTBlZWY1NDA0N2YxZWI0ZWZlOGZmYmM5YzQyOGMyNjU1YiJdfQ<span class="token operator">==</span></span>
<span class="line"></span></code></pre></div><ul>
<li>
<p>iam_request_url 값 예시 : <code>https://sts.amazonaws.com/</code></p>
</li>
<li>
<p>iam_request_body 값 예시 : <code>Action=GetCallerIdentity&amp;Version=2011-06-15</code></p>
</li>
<li>
<p>iam_request_headers 값 예시 :</p>
<div class="language-json" data-highlighter="prismjs" data-ext="json" data-title="json"><pre class="language-json"><code><span class="line"><span class="token punctuation">{</span></span>
<span class="line">  <span class="token property">"Content-Length"</span><span class="token operator">:</span> <span class="token punctuation">[</span></span>
<span class="line">    <span class="token string">"43"</span></span>
<span class="line">  <span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token property">"User-Agent"</span><span class="token operator">:</span> <span class="token punctuation">[</span></span>
<span class="line">    <span class="token string">"aws-sdk-go/1.4.12 (go1.7.1; linux; amd64)"</span></span>
<span class="line">  <span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token property">"X-Vault-AWSIAM-Server-Id"</span><span class="token operator">:</span> <span class="token punctuation">[</span></span>
<span class="line">    <span class="token string">"vault.example.com"</span></span>
<span class="line">  <span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token property">"X-Amz-Date"</span><span class="token operator">:</span> <span class="token punctuation">[</span></span>
<span class="line">    <span class="token string">"20160930T043121Z"</span></span>
<span class="line">  <span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token property">"Content-Type"</span><span class="token operator">:</span> <span class="token punctuation">[</span></span>
<span class="line">    <span class="token string">"application/x-www-form-urlencoded; charset=utf-8"</span></span>
<span class="line">  <span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token property">"Authorization"</span><span class="token operator">:</span> <span class="token punctuation">[</span></span>
<span class="line">    <span class="token string">"AWS4-HMAC-SHA256 Credential=foo/20160930/us-east-1/sts/aws4_request, SignedHeaders=content-length;content-type;host;x-amz-date;x-vault-server, Signature=a69fd750a3445c4e553e1b3e79d3da90eef54047f1eb4efe8ffbc9c428c2655b"</span></span>
<span class="line">  <span class="token punctuation">]</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre></div></li>
</ul>
<h2>4. AWS 내부에서 구성</h2>
<p>AWS 내부에서 구성된 Vault 서버 인스턴스 및 클라이언트에 프로파일을 구성하여 Access Key를 생략하고 인증을 구현할 수 있다.</p>
<h3>Terraform Sample</h3>
<div class="language-hcl" data-highlighter="prismjs" data-ext="hcl" data-title="hcl"><pre class="language-hcl"><code><span class="line"><span class="token keyword">terraform</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">required_providers</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token property">aws</span> <span class="token punctuation">=</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token property">source</span>  <span class="token punctuation">=</span> <span class="token string">"hashicorp/aws"</span></span>
<span class="line">      <span class="token property">version</span> <span class="token punctuation">=</span> <span class="token string">"5.5.0"</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token property">random</span> <span class="token punctuation">=</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token property">source</span>  <span class="token punctuation">=</span> <span class="token string">"hashicorp/random"</span></span>
<span class="line">      <span class="token property">version</span> <span class="token punctuation">=</span> <span class="token string">"3.5.1"</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token property">tls</span> <span class="token punctuation">=</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token property">source</span>  <span class="token punctuation">=</span> <span class="token string">"hashicorp/tls"</span></span>
<span class="line">      <span class="token property">version</span> <span class="token punctuation">=</span> <span class="token string">"3.0.0"</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">provider<span class="token type variable"> "aws" </span></span><span class="token punctuation">{</span></span>
<span class="line">  <span class="token property">region</span> <span class="token punctuation">=</span> <span class="token string">"ap-northeast-2"</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">default_tags</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token property">tags</span> <span class="token punctuation">=</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token property">Environment</span> <span class="token punctuation">=</span> <span class="token string">"Demo"</span></span>
<span class="line">      <span class="token property">Owner</span>       <span class="token punctuation">=</span> <span class="token string">"gs@hashicorp.com"</span></span>
<span class="line">      <span class="token property">Project</span>     <span class="token punctuation">=</span> <span class="token string">"example"</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">data <span class="token type variable">"aws_caller_identity"</span></span> <span class="token string">"current"</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">resource <span class="token type variable">"aws_vpc"</span></span> <span class="token string">"example"</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token property">cidr_block</span>           <span class="token punctuation">=</span> <span class="token string">"10.0.0.0/16"</span></span>
<span class="line">  <span class="token property">enable_dns_support</span>   <span class="token punctuation">=</span> <span class="token boolean">true</span></span>
<span class="line">  <span class="token property">enable_dns_hostnames</span> <span class="token punctuation">=</span> <span class="token boolean">true</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">data <span class="token type variable">"aws_availability_zones"</span></span> <span class="token string">"available"</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token property">state</span> <span class="token punctuation">=</span> <span class="token string">"available"</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// public subnet</span></span>
<span class="line"><span class="token keyword">resource <span class="token type variable">"aws_subnet"</span></span> <span class="token string">"public"</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token property">vpc_id</span>                  <span class="token punctuation">=</span> aws_vpc.example.id</span>
<span class="line">  <span class="token property">availability_zone</span>       <span class="token punctuation">=</span> data.aws_availability_zones.available.names.<span class="token number">0</span></span>
<span class="line">  <span class="token property">cidr_block</span>              <span class="token punctuation">=</span> cidrsubnet(aws_vpc.example.cidr_block, <span class="token number">8</span>, <span class="token number">0</span>) <span class="token comment">// "10.0.0.0/24" &amp; "10.0.1.0/24"</span></span>
<span class="line">  <span class="token property">map_public_ip_on_launch</span> <span class="token punctuation">=</span> <span class="token boolean">true</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">resource <span class="token type variable">"aws_internet_gateway"</span></span> <span class="token string">"public"</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token property">vpc_id</span> <span class="token punctuation">=</span> aws_vpc.example.id</span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">resource <span class="token type variable">"aws_route_table"</span></span> <span class="token string">"public"</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token property">vpc_id</span> <span class="token punctuation">=</span> aws_vpc.example.id</span>
<span class="line"></span>
<span class="line">  <span class="token keyword">route</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token property">cidr_block</span> <span class="token punctuation">=</span> <span class="token string">"0.0.0.0/0"</span></span>
<span class="line">    <span class="token property">gateway_id</span> <span class="token punctuation">=</span> aws_internet_gateway.public.id</span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">resource <span class="token type variable">"aws_route_table_association"</span></span> <span class="token string">"public"</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token property">subnet_id</span>      <span class="token punctuation">=</span> aws_subnet.public.id</span>
<span class="line">  <span class="token property">route_table_id</span> <span class="token punctuation">=</span> aws_route_table.public.id</span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">resource <span class="token type variable">"aws_eip"</span></span> <span class="token string">"public"</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token property">domain</span> <span class="token punctuation">=</span> <span class="token string">"vpc"</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">resource <span class="token type variable">"aws_nat_gateway"</span></span> <span class="token string">"public"</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token property">allocation_id</span> <span class="token punctuation">=</span> aws_eip.public.id</span>
<span class="line">  <span class="token property">subnet_id</span>     <span class="token punctuation">=</span> aws_subnet.public.id</span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// SG</span></span>
<span class="line"><span class="token keyword">resource <span class="token type variable">"aws_security_group"</span></span> <span class="token string">"example"</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token property">name</span>   <span class="token punctuation">=</span> <span class="token string">"example"</span></span>
<span class="line">  <span class="token property">vpc_id</span> <span class="token punctuation">=</span> aws_vpc.example.id</span>
<span class="line"></span>
<span class="line">  <span class="token keyword">egress</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token property">from_port</span>        <span class="token punctuation">=</span> <span class="token number">0</span></span>
<span class="line">    <span class="token property">to_port</span>          <span class="token punctuation">=</span> <span class="token number">0</span></span>
<span class="line">    <span class="token property">protocol</span>         <span class="token punctuation">=</span> <span class="token string">"-1"</span></span>
<span class="line">    <span class="token property">cidr_blocks</span>      <span class="token punctuation">=</span> <span class="token punctuation">[</span><span class="token string">"0.0.0.0/0"</span><span class="token punctuation">]</span></span>
<span class="line">    <span class="token property">ipv6_cidr_blocks</span> <span class="token punctuation">=</span> <span class="token punctuation">[</span><span class="token string">"::/0"</span><span class="token punctuation">]</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">resource <span class="token type variable">"aws_security_group_rule"</span></span> <span class="token string">"example_ssh"</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token property">type</span>              <span class="token punctuation">=</span> <span class="token string">"ingress"</span></span>
<span class="line">  <span class="token property">from_port</span>         <span class="token punctuation">=</span> <span class="token number">22</span></span>
<span class="line">  <span class="token property">to_port</span>           <span class="token punctuation">=</span> <span class="token number">22</span></span>
<span class="line">  <span class="token property">protocol</span>          <span class="token punctuation">=</span> <span class="token string">"tcp"</span></span>
<span class="line">  <span class="token property">cidr_blocks</span>       <span class="token punctuation">=</span> <span class="token punctuation">[</span><span class="token string">"0.0.0.0/0"</span><span class="token punctuation">]</span></span>
<span class="line">  <span class="token property">security_group_id</span> <span class="token punctuation">=</span> aws_security_group.example.id</span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">resource <span class="token type variable">"aws_security_group_rule"</span></span> <span class="token string">"example_vault"</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token property">type</span>              <span class="token punctuation">=</span> <span class="token string">"ingress"</span></span>
<span class="line">  <span class="token property">from_port</span>         <span class="token punctuation">=</span> <span class="token number">8200</span></span>
<span class="line">  <span class="token property">to_port</span>           <span class="token punctuation">=</span> <span class="token number">8200</span></span>
<span class="line">  <span class="token property">protocol</span>          <span class="token punctuation">=</span> <span class="token string">"tcp"</span></span>
<span class="line">  <span class="token property">cidr_blocks</span>       <span class="token punctuation">=</span> <span class="token punctuation">[</span><span class="token string">"0.0.0.0/0"</span><span class="token punctuation">]</span></span>
<span class="line">  <span class="token property">security_group_id</span> <span class="token punctuation">=</span> aws_security_group.example.id</span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// key pair</span></span>
<span class="line"><span class="token keyword">resource <span class="token type variable">"tls_private_key"</span></span> <span class="token string">"ssh"</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token property">algorithm</span> <span class="token punctuation">=</span> <span class="token string">"RSA"</span></span>
<span class="line">  <span class="token property">rsa_bits</span>  <span class="token punctuation">=</span> <span class="token number">4096</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">resource <span class="token type variable">"local_sensitive_file"</span></span> <span class="token string">"ssh_private"</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token property">content</span>  <span class="token punctuation">=</span> tls_private_key.ssh.private_key_pem</span>
<span class="line">  <span class="token property">filename</span> <span class="token punctuation">=</span> <span class="token string">"<span class="token interpolation"><span class="token punctuation">$</span><span class="token punctuation">{</span><span class="token keyword">path</span><span class="token punctuation">.</span><span class="token type variable">module</span><span class="token punctuation">}</span></span>/ssh_private"</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">resource <span class="token type variable">"random_id"</span></span> <span class="token string">"key_id"</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token property">keepers</span> <span class="token punctuation">=</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token property">ami_id</span> <span class="token punctuation">=</span> tls_private_key.ssh.public_key_openssh</span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">  <span class="token property">byte_length</span> <span class="token punctuation">=</span> <span class="token number">8</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">resource <span class="token type variable">"aws_key_pair"</span></span> <span class="token string">"ssh"</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token property">key_name</span>   <span class="token punctuation">=</span> <span class="token string">"key-<span class="token interpolation"><span class="token punctuation">$</span><span class="token punctuation">{</span>random_id<span class="token punctuation">.</span>key_id<span class="token punctuation">.</span>hex<span class="token punctuation">}</span></span>"</span></span>
<span class="line">  <span class="token property">public_key</span> <span class="token punctuation">=</span> tls_private_key.ssh.public_key_openssh</span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// EC2</span></span>
<span class="line"><span class="token keyword">data <span class="token type variable">"aws_ami"</span></span> <span class="token string">"ubuntu"</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token property">most_recent</span> <span class="token punctuation">=</span> <span class="token boolean">true</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">filter</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token property">name</span>   <span class="token punctuation">=</span> <span class="token string">"name"</span></span>
<span class="line">    <span class="token property">values</span> <span class="token punctuation">=</span> <span class="token punctuation">[</span><span class="token string">"ubuntu/images/hvm-ssd/ubuntu-focal-20.04-amd64-server-*"</span><span class="token punctuation">]</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">filter</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token property">name</span>   <span class="token punctuation">=</span> <span class="token string">"virtualization-type"</span></span>
<span class="line">    <span class="token property">values</span> <span class="token punctuation">=</span> <span class="token punctuation">[</span><span class="token string">"hvm"</span><span class="token punctuation">]</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">  <span class="token property">owners</span> <span class="token punctuation">=</span> <span class="token punctuation">[</span><span class="token string">"099720109477"</span><span class="token punctuation">]</span> <span class="token comment"># Canonical</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">data <span class="token type variable">"aws_iam_policy_document"</span></span> <span class="token string">"example_instance_role_client"</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">statement</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token property">effect</span>  <span class="token punctuation">=</span> <span class="token string">"Allow"</span></span>
<span class="line">    <span class="token property">actions</span> <span class="token punctuation">=</span> <span class="token punctuation">[</span><span class="token string">"sts:AssumeRole"</span><span class="token punctuation">]</span></span>
<span class="line">    <span class="token keyword">principals</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token property">type</span>        <span class="token punctuation">=</span> <span class="token string">"Service"</span></span>
<span class="line">      <span class="token property">identifiers</span> <span class="token punctuation">=</span> <span class="token punctuation">[</span><span class="token string">"ec2.amazonaws.com"</span><span class="token punctuation">]</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">resource <span class="token type variable">"aws_iam_role"</span></span> <span class="token string">"example_client_instance_role_client"</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token property">name_prefix</span>        <span class="token punctuation">=</span> <span class="token string">"auth-example-iam-role-client"</span></span>
<span class="line">  <span class="token property">assume_role_policy</span> <span class="token punctuation">=</span> data.aws_iam_policy_document.example_instance_role_client.json</span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">resource <span class="token type variable">"aws_iam_instance_profile"</span></span> <span class="token string">"example_instance_profile_client"</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token property">path</span> <span class="token punctuation">=</span> <span class="token string">"/"</span></span>
<span class="line">  <span class="token property">role</span> <span class="token punctuation">=</span> aws_iam_role.example_client_instance_role_client.name</span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">resource <span class="token type variable">"aws_instance"</span></span> <span class="token string">"client"</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token property">ami</span>                         <span class="token punctuation">=</span> data.aws_ami.ubuntu.id</span>
<span class="line">  <span class="token property">iam_instance_profile</span>        <span class="token punctuation">=</span> aws_iam_instance_profile.example_instance_profile_client.name</span>
<span class="line">  <span class="token property">instance_type</span>               <span class="token punctuation">=</span> <span class="token string">"t3.micro"</span></span>
<span class="line">  <span class="token property">key_name</span>                    <span class="token punctuation">=</span> aws_key_pair.ssh.key_name</span>
<span class="line">  <span class="token property">subnet_id</span>                   <span class="token punctuation">=</span> aws_subnet.public.id</span>
<span class="line">  <span class="token property">associate_public_ip_address</span> <span class="token punctuation">=</span> <span class="token boolean">true</span></span>
<span class="line">  <span class="token property">vpc_security_group_ids</span>      <span class="token punctuation">=</span> <span class="token punctuation">[</span>aws_security_group.example.id<span class="token punctuation">]</span></span>
<span class="line"></span>
<span class="line">  <span class="token property">user_data</span> <span class="token punctuation">=</span> <span class="token heredoc string">&lt;&lt;EOF</span>
<span class="line">		#! /bin/bash</span>
<span class="line">    sudo apt update &amp;&amp; sudo apt install gpg</span>
<span class="line">    wget -O- https://apt.releases.hashicorp.com/gpg | sudo gpg --dearmor -o /usr/share/keyrings/hashicorp-archive-keyring.gpg</span>
<span class="line">    gpg --no-default-keyring --keyring /usr/share/keyrings/hashicorp-archive-keyring.gpg --fingerprint</span>
<span class="line">    echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/hashicorp-archive-keyring.gpg] https://apt.releases.hashicorp.com $(lsb_release -cs) main" | sudo tee /etc/apt/sources.list.d/hashicorp.list</span>
<span class="line">    sudo apt update</span>
<span class="line">    sudo apt install vault</span>
<span class="line">  EOF</span></span>
<span class="line"></span>
<span class="line">  <span class="token property">tags</span> <span class="token punctuation">=</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token property">Name</span> <span class="token punctuation">=</span> <span class="token string">"client"</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">data <span class="token type variable">"aws_iam_policy_document"</span></span> <span class="token string">"assume_role"</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">statement</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token property">effect</span> <span class="token punctuation">=</span> <span class="token string">"Allow"</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">principals</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token property">type</span>        <span class="token punctuation">=</span> <span class="token string">"Service"</span></span>
<span class="line">      <span class="token property">identifiers</span> <span class="token punctuation">=</span> <span class="token punctuation">[</span><span class="token string">"ec2.amazonaws.com"</span><span class="token punctuation">]</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token property">actions</span> <span class="token punctuation">=</span> <span class="token punctuation">[</span><span class="token string">"sts:AssumeRole"</span><span class="token punctuation">]</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">resource <span class="token type variable">"aws_iam_role"</span></span> <span class="token string">"vault_role"</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token property">name</span>               <span class="token punctuation">=</span> <span class="token string">"vault-role"</span></span>
<span class="line">  <span class="token property">assume_role_policy</span> <span class="token punctuation">=</span> data.aws_iam_policy_document.assume_role.json</span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">data <span class="token type variable">"aws_iam_policy_document"</span></span> <span class="token string">"example_policy_vault"</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">statement</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token property">effect</span>    <span class="token punctuation">=</span> <span class="token string">"Allow"</span></span>
<span class="line">    <span class="token property">actions</span> <span class="token punctuation">=</span> <span class="token punctuation">[</span></span>
<span class="line">      <span class="token string">"ec2:DescribeInstances"</span>,</span>
<span class="line">      <span class="token string">"iam:GetInstanceProfile"</span>,</span>
<span class="line">      <span class="token string">"iam:GetUser"</span>,</span>
<span class="line">      <span class="token string">"iam:GetRole"</span>,</span>
<span class="line">    <span class="token punctuation">]</span></span>
<span class="line">    <span class="token property">resources</span> <span class="token punctuation">=</span> <span class="token punctuation">[</span></span>
<span class="line">      <span class="token string">"*"</span></span>
<span class="line">      <span class="token comment">// "arn:aws:iam::*:user/*",</span></span>
<span class="line">      <span class="token comment">// "arn:aws:iam::*:role/*",</span></span>
<span class="line">    <span class="token punctuation">]</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line">  <span class="token keyword">statement</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token property">effect</span>    <span class="token punctuation">=</span> <span class="token string">"Allow"</span></span>
<span class="line">    <span class="token property">actions</span> <span class="token punctuation">=</span> <span class="token punctuation">[</span></span>
<span class="line">      <span class="token string">"sts:AssumeRole"</span>,</span>
<span class="line">    <span class="token punctuation">]</span></span>
<span class="line">    <span class="token property">resources</span> <span class="token punctuation">=</span> <span class="token punctuation">[</span></span>
<span class="line">      <span class="token string">"arn:aws:iam::<span class="token interpolation"><span class="token punctuation">$</span><span class="token punctuation">{</span><span class="token keyword">data</span><span class="token punctuation">.</span><span class="token type variable">aws_caller_identity</span><span class="token punctuation">.</span>current<span class="token punctuation">.</span>account_id<span class="token punctuation">}</span></span>:role/<span class="token interpolation"><span class="token punctuation">$</span><span class="token punctuation">{</span>aws_iam_role<span class="token punctuation">.</span>vault_role<span class="token punctuation">.</span>name<span class="token punctuation">}</span></span>"</span></span>
<span class="line">    <span class="token punctuation">]</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line">  <span class="token keyword">statement</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token property">effect</span>    <span class="token punctuation">=</span> <span class="token string">"Allow"</span></span>
<span class="line">    <span class="token property">actions</span>   <span class="token punctuation">=</span> <span class="token punctuation">[</span></span>
<span class="line">      <span class="token string">"sts:GetCallerIdentity"</span></span>
<span class="line">    <span class="token punctuation">]</span></span>
<span class="line">    <span class="token property">resources</span> <span class="token punctuation">=</span> <span class="token punctuation">[</span><span class="token string">"*"</span><span class="token punctuation">]</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line">  <span class="token keyword">statement</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token property">sid</span> <span class="token punctuation">=</span> <span class="token string">"ManageOwnAccessKeys"</span></span>
<span class="line">    <span class="token property">actions</span> <span class="token punctuation">=</span> <span class="token punctuation">[</span></span>
<span class="line">      <span class="token string">"iam:CreateAccessKey"</span>,</span>
<span class="line">      <span class="token string">"iam:DeleteAccessKey"</span>,</span>
<span class="line">      <span class="token string">"iam:GetAccessKeyLastUsed"</span>,</span>
<span class="line">      <span class="token string">"iam:GetUser"</span>,</span>
<span class="line">      <span class="token string">"iam:ListAccessKeys"</span>,</span>
<span class="line">      <span class="token string">"iam:UpdateAccessKey"</span>,</span>
<span class="line">    <span class="token punctuation">]</span></span>
<span class="line">    <span class="token property">resources</span> <span class="token punctuation">=</span> <span class="token punctuation">[</span><span class="token string">"arn:aws:iam::*:user/$${aws:username}"</span><span class="token punctuation">]</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">resource <span class="token type variable">"aws_iam_policy"</span></span> <span class="token string">"policy"</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token property">name</span>        <span class="token punctuation">=</span> <span class="token string">"vault-policy"</span></span>
<span class="line">  <span class="token property">description</span> <span class="token punctuation">=</span> <span class="token string">"A test policy"</span></span>
<span class="line">  <span class="token property">policy</span>      <span class="token punctuation">=</span> data.aws_iam_policy_document.example_policy_vault.json</span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">resource <span class="token type variable">"aws_iam_role_policy_attachment"</span></span> <span class="token string">"vault-attach"</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token property">role</span>       <span class="token punctuation">=</span> aws_iam_role.vault_role.name</span>
<span class="line">  <span class="token property">policy_arn</span> <span class="token punctuation">=</span> aws_iam_policy.policy.arn</span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">resource <span class="token type variable">"aws_iam_instance_profile"</span></span> <span class="token string">"vault_profile"</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token property">name</span> <span class="token punctuation">=</span> <span class="token string">"vault_profile"</span></span>
<span class="line">  <span class="token property">role</span> <span class="token punctuation">=</span> aws_iam_role.vault_role.name</span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">resource <span class="token type variable">"aws_instance"</span></span> <span class="token string">"vault"</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token property">ami</span>                         <span class="token punctuation">=</span> data.aws_ami.ubuntu.id</span>
<span class="line">  <span class="token property">iam_instance_profile</span>        <span class="token punctuation">=</span> aws_iam_instance_profile.vault_profile.name</span>
<span class="line">  <span class="token property">instance_type</span>               <span class="token punctuation">=</span> <span class="token string">"t3.micro"</span></span>
<span class="line">  <span class="token property">key_name</span>                    <span class="token punctuation">=</span> aws_key_pair.ssh.key_name</span>
<span class="line">  <span class="token property">subnet_id</span>                   <span class="token punctuation">=</span> aws_subnet.public.id</span>
<span class="line">  <span class="token property">associate_public_ip_address</span> <span class="token punctuation">=</span> <span class="token boolean">true</span></span>
<span class="line">  <span class="token property">vpc_security_group_ids</span>      <span class="token punctuation">=</span> <span class="token punctuation">[</span>aws_security_group.example.id<span class="token punctuation">]</span></span>
<span class="line"></span>
<span class="line">  <span class="token property">user_data</span> <span class="token punctuation">=</span> <span class="token heredoc string">&lt;&lt;EOF</span>
<span class="line">		#! /bin/bash</span>
<span class="line">    sudo apt update &amp;&amp; sudo apt install gpg</span>
<span class="line">    wget -O- https://apt.releases.hashicorp.com/gpg | sudo gpg --dearmor -o /usr/share/keyrings/hashicorp-archive-keyring.gpg</span>
<span class="line">    gpg --no-default-keyring --keyring /usr/share/keyrings/hashicorp-archive-keyring.gpg --fingerprint</span>
<span class="line">    echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/hashicorp-archive-keyring.gpg] https://apt.releases.hashicorp.com $(lsb_release -cs) main" | sudo tee /etc/apt/sources.list.d/hashicorp.list</span>
<span class="line">    sudo apt update</span>
<span class="line">    sudo apt install vault</span>
<span class="line">  EOF</span></span>
<span class="line"></span>
<span class="line">  <span class="token property">tags</span> <span class="token punctuation">=</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token property">Name</span> <span class="token punctuation">=</span> <span class="token string">"vault"</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">output<span class="token type variable"> "info" </span></span><span class="token punctuation">{</span></span>
<span class="line">  <span class="token property">value</span> <span class="token punctuation">=</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token property">client_ip</span>       <span class="token punctuation">=</span> aws_instance.client.public_ip</span>
<span class="line">    <span class="token property">vault_ip</span>        <span class="token punctuation">=</span> aws_instance.vault.public_ip</span>
<span class="line">    <span class="token property">client_role_arn</span> <span class="token punctuation">=</span> aws_iam_role.example_client_instance_role_client.arn</span>
<span class="line">    <span class="token property">ami_id</span>          <span class="token punctuation">=</span> aws_instance.client.ami</span>
<span class="line">    <span class="token property">ec2_id</span>          <span class="token punctuation">=</span> aws_instance.client.id</span>
<span class="line">    <span class="token property">private_key</span>     <span class="token punctuation">=</span> nonsensitive(tls_private_key.ssh.private_key_pem)</span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre></div><ul>
<li>서버 ssh 접속을 위한 private key는 <code>ssh_private</code> 파일로 자동 생성<div class="language-bash" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="line">$ <span class="token function">ssh</span> <span class="token parameter variable">-i</span> ./ssh_private <span class="token variable"><span class="token variable">$(</span>terraform output <span class="token parameter variable">-raw</span> vault_ip<span class="token variable">)</span></span></span>
<span class="line"></span></code></pre></div></li>
</ul>
<h3>Vault Server 실행</h3>
<div class="language-bash" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="line"><span class="token comment"># Server Instance</span></span>
<span class="line">$ vault server <span class="token parameter variable">-dev</span> -dev-root-token-id<span class="token operator">=</span>root -log-level<span class="token operator">=</span>trace</span>
<span class="line"></span></code></pre></div><h3>Client에서 Auth 구성 및 테스트</h3>
<div class="language-bash" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="line"><span class="token comment"># Client Instance</span></span>
<span class="line">$ <span class="token builtin class-name">export</span> <span class="token assign-left variable">VAULT_ADDR</span><span class="token operator">=</span>http://10.0.0.8:8200</span>
<span class="line">$ <span class="token builtin class-name">export</span> <span class="token assign-left variable">VAULT_TOKEN</span><span class="token operator">=</span>root</span>
<span class="line"></span>
<span class="line">$ vault policy <span class="token function">write</span> <span class="token string">"example-policy"</span> -<span class="token operator">&lt;&lt;</span><span class="token string">EOF</span>
<span class="line">path "secret/data/example_*" {</span>
<span class="line">  capabilities = ["create", "read"]</span>
<span class="line">}</span>
<span class="line">EOF</span></span>
<span class="line"></span>
<span class="line">$ vault kv put secret/example_test <span class="token assign-left variable">foo</span><span class="token operator">=</span>bar</span>
<span class="line"></span>
<span class="line">$ vault auth <span class="token builtin class-name">enable</span> aws</span>
<span class="line"></span>
<span class="line"><span class="token comment"># auth 구성에 access key 선언이 생략</span></span>
<span class="line">$ vault <span class="token function">write</span> auth/aws/config/client <span class="token assign-left variable">sts_region</span><span class="token operator">=</span><span class="token string">"ap-northeast-2"</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># 만약 Vault Server의 AWS Auth에 권한이 없는 경우</span></span>
<span class="line">$ vault <span class="token function">write</span> <span class="token punctuation">\</span></span>
<span class="line">   auth/aws/role/example-role-name <span class="token punctuation">\</span></span>
<span class="line">   <span class="token assign-left variable">auth_type</span><span class="token operator">=</span>iam <span class="token punctuation">\</span></span>
<span class="line">   <span class="token assign-left variable">policies</span><span class="token operator">=</span>example-policy <span class="token punctuation">\</span></span>
<span class="line">   <span class="token assign-left variable">max_ttl</span><span class="token operator">=</span>500h <span class="token punctuation">\</span></span>
<span class="line">   <span class="token assign-left variable">bound_iam_principal_arn</span><span class="token operator">=</span><span class="token variable">$client_instance_role_arn</span> <span class="token punctuation">\</span></span>
<span class="line">   <span class="token assign-left variable">inferred_entity_type</span><span class="token operator">=</span><span class="token string">"ec2_instance"</span> <span class="token punctuation">\</span></span>
<span class="line">   <span class="token assign-left variable">inferred_aws_region</span><span class="token operator">=</span><span class="token string">"ap-northeast-2"</span></span>
<span class="line"></span>
<span class="line">Error writing data to auth/aws/role/example-role-name: Error making API request.</span>
<span class="line"></span>
<span class="line">URL: PUT http://10.0.0.86:8200/v1/auth/aws/role/example-role-name</span>
<span class="line">Code: <span class="token number">400</span>. Errors:</span>
<span class="line"></span>
<span class="line">* unable to resolve ARN <span class="token string">"arn:aws:iam::467567795630:role/auth-example-iam-role20230630045547898800000001"</span> to internal ID: unable to fetch current caller: NoCredentialProviders: no valid providers <span class="token keyword">in</span> chain. Deprecated.</span>
<span class="line">	For verbose messaging see aws.Config.CredentialsChainVerboseErrors</span>
<span class="line">	</span>
<span class="line"></span>
<span class="line"><span class="token comment"># Policy 추가 후 login 수행</span></span>
<span class="line">$ vault login <span class="token parameter variable">-method</span><span class="token operator">=</span>aws <span class="token assign-left variable">role</span><span class="token operator">=</span>example-role-name</span>
<span class="line"></span>
<span class="line">Key                      Value</span>
<span class="line"></span></code></pre></div>]]></content:encoded>
      <enclosure url="https://raw.githubusercontent.com/Great-Stone/images/master/uPic/assets%20(1368%C3%97998" type="image/"/>
    </item>
    <item>
      <title>ArgoCD Vault Plugin</title>
      <link>https://docmoa.github.io/04-HashiCorp/06-Vault/04-UseCase/argocd-vault-plugin.html</link>
      <guid>https://docmoa.github.io/04-HashiCorp/06-Vault/04-UseCase/argocd-vault-plugin.html</guid>
      <source url="https://docmoa.github.io/rss.xml">ArgoCD Vault Plugin</source>
      <description>ArgoCD Vault Plugin 연동방안</description>
      <pubDate>Mon, 12 Jun 2023 02:29:23 GMT</pubDate>
      <content:encoded><![CDATA[
<blockquote>
<p>참고 : 본 글은 AEWS 스터디 7주차 내용중 일부로 작성된 내용입니다.</p>
</blockquote>
<h2>1. ArgoCD</h2>
<img src="https://raw.githubusercontent.com/hyungwook0221/img/main/uPic/oH5ELj.jpg" alt="img" style="zoom:50%;">
<h3>1) 개요 및 소개</h3>
<p>Argo <strong>CD</strong> is a declarative, <strong>GitOps</strong> continuous delivery tool for <strong>Kubernetes</strong>.</p>
<ul>
<li>지속적인 배포란(Continuous Delivery, CD) 개발자가 소스코드를 변경해서 깃 저장소에 푸시하면 해당 변경 사항이 고객이 사용하는 실제 운영환경의 시스템까지 자동으로 반영함
<ul>
<li>개발자의 코드가 원격 저장소에 업로드됐을 때 <strong>아르고시디</strong>가 자동으로 해당 코드를 클러스터 운영환경에 <strong>배포</strong>합니다.</li>
<li><strong>아르고시티</strong>로 배포한 헬름 애플리케이션의 리소스 목록, 각 리소스 간 관계 및 에러 유무를 <strong>UI</strong>로 보여줍니다.</li>
</ul>
</li>
<li>단일 진실 원천(SSOT, Single Source Of Truth)이란 어떠한 진실(결과)의 원인이 하나의 이유(원천)에서 비롯되는 것을 의미합니다.
<ul>
<li>쿠버네티스 환경에서 깃옵스의 의미는 실제 운영 중인 클러스터의 상태를 개발자의 로컬 PC혹은 아무런 기록을 남기지 않고 클러스터에서 임의로 수정하게 하지 않고 공용으로 관리하는 깃 저장소에서만 유일하게 변경을 허용함으로써 단일 진실 원천(SSOT)를 구현합니다.</li>
<li><strong>아르고시디</strong>를 사용하면 쿠버네티스 매니페스트 <strong>소스</strong> 파일을 여러 개발자의 개인 PC에 보관하지 않고 중앙의 통합된 <strong>깃 저장소</strong>에 반드시 업로드하고 동기화하도록 정책 관리 가능함</li>
</ul>
</li>
<li>GitOps - <a href="https://aws.amazon.com/ko/blogs/containers/automating-amazon-eks-with-gitops/" target="_blank" rel="noopener noreferrer">출처(Automating Amazon EKS with GitOps)</a></li>
</ul>
<img src="https://d2908q01vomqb2.cloudfront.net/fe2ef495a1152561572949784c16bf23abb28057/2020/11/22/Screen-Shot-2020-11-22-at-4.52.30-PM.png" alt="img" style="zoom:50%;">
<ul>
<li>샘플 구성도 - 출처(<a href="https://logonme.net/tech/k8s/pkos2_w3/" target="_blank" rel="noopener noreferrer">https://logonme.net/tech/k8s/pkos2_w3/</a>)</li>
</ul>
<img src="https://logonme.net/wp-content/uploads/2023/03/Untitled-10.png" alt="img" style="zoom:50%;">
<h3>2) 설치</h3>
<div class="language-bash" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="line"><span class="token comment"># 설치</span></span>
<span class="line">helm repo <span class="token function">add</span> argo https://argoproj.github.io/argo-helm</span>
<span class="line">helm repo update</span>
<span class="line">helm <span class="token function">install</span> argocd argo/argo-cd <span class="token parameter variable">--set</span> <span class="token assign-left variable">server.service.type</span><span class="token operator">=</span>LoadBalancer <span class="token parameter variable">--namespace</span> argocd --create-namespace <span class="token parameter variable">--version</span> <span class="token number">5.42</span>.3</span>
<span class="line"></span>
<span class="line"><span class="token comment"># External IP 확인</span></span>
<span class="line"><span class="token assign-left variable">EXTERNAL_IP</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$(</span>k get svc <span class="token parameter variable">-n</span> argocd argocd-server <span class="token parameter variable">-o</span> <span class="token assign-left variable">jsonpath</span><span class="token operator">=</span><span class="token string">'{.status.loadBalancer.ingress[0].hostname}'</span><span class="token variable">)</span></span></span>
<span class="line"><span class="token builtin class-name">echo</span> <span class="token variable">$EXTERNAL_IP</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># admin 계정의 암호 확인</span></span>
<span class="line"><span class="token assign-left variable">ARGOPW</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$(</span>kubectl <span class="token parameter variable">-n</span> argocd get secret argocd-initial-admin-secret <span class="token parameter variable">-o</span> <span class="token assign-left variable">jsonpath</span><span class="token operator">=</span><span class="token string">"{.data.password}"</span> <span class="token operator">|</span> base64 <span class="token parameter variable">-d</span><span class="token variable">)</span></span></span>
<span class="line"><span class="token builtin class-name">echo</span> <span class="token variable">$ARGOPW</span></span>
<span class="line">mf8bOtNEq7iHMqq1</span>
<span class="line"></span></code></pre></div><h4>(1) UI 접속 확인</h4>
<img src="https://raw.githubusercontent.com/hyungwook0221/img/main/uPic/89u0XP.jpg" alt="img" style="zoom: 33%;">
<h4>(2) CLI 도구설치 및 연동</h4>
<div class="language-bash" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="line"><span class="token comment"># 최신버전 설치</span></span>
<span class="line"><span class="token function">curl</span> <span class="token parameter variable">-sSL</span> <span class="token parameter variable">-o</span> argocd-linux-amd64 https://github.com/argoproj/argo-cd/releases/latest/download/argocd-linux-amd64</span>
<span class="line"><span class="token function">install</span> <span class="token parameter variable">-m</span> <span class="token number">555</span> argocd-linux-amd64 /usr/local/bin/argocd</span>
<span class="line"><span class="token function">chmod</span> +x /usr/local/bin/argocd</span>
<span class="line"></span>
<span class="line"><span class="token comment"># 버전 확인</span></span>
<span class="line">argocd version <span class="token parameter variable">--short</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># argocd 서버 로그인</span></span>
<span class="line">argocd login <span class="token variable">$EXTERNAL_IP</span> <span class="token parameter variable">--username</span> admin <span class="token parameter variable">--password</span> <span class="token variable">$ARGOPW</span></span>
<span class="line">WARNING: server certificate had error: tls: failed to verify certificate: x509: certificate signed by unknown authority. Proceed insecurely <span class="token punctuation">(</span>y/n<span class="token punctuation">)</span>? y</span>
<span class="line"><span class="token string">'admin:login'</span> logged <span class="token keyword">in</span> successfully</span>
<span class="line">Context <span class="token string">'k8s-argocd-argocdse-789cd00c72-b0b60b99b16f1fc7.elb.ap-northeast-2.amazonaws.com'</span> updated</span>
<span class="line"></span>
<span class="line"><span class="token comment"># 기 설치한 깃랩의 프로젝트 URL 을 argocd 깃 리포지토리(argocd repo)로 등록. 깃랩은 프로젝트 단위로 소스 코드를 보관.</span></span>
<span class="line">argocd repo <span class="token function">add</span> <span class="token operator">&lt;</span>저장소 주소<span class="token operator">&gt;</span> <span class="token parameter variable">--username</span> <span class="token operator">&lt;</span>계정명<span class="token operator">&gt;</span> <span class="token parameter variable">--password</span> <span class="token operator">&lt;</span>암호<span class="token operator">&gt;</span></span>
<span class="line"> </span>
<span class="line"><span class="token comment"># 등록 확인 : 기본적으로 아르고시디가 설치된 쿠버네티스 클러스터는 타깃 클러스터로 등록됨</span></span>
<span class="line">argocd repo list</span>
<span class="line">TYPE  NAME  REPO                                            INSECURE  OCI    LFS    CREDS  STATUS      MESSAGE  PROJECT</span>
<span class="line"><span class="token function">git</span>         https://github.com/hyungwook0221/argo-demo.git  <span class="token boolean">false</span>     <span class="token boolean">false</span>  <span class="token boolean">false</span>  <span class="token boolean">true</span>   Successful</span>
<span class="line"></span>
<span class="line"><span class="token comment"># 기본적으로 아르고시디가 설치된 쿠버네티스 클러스터는 타깃 클러스터로 등록됨</span></span>
<span class="line">argocd cluster list</span>
<span class="line">SERVER                          NAME        VERSION  STATUS   MESSAGE                                                  PROJECT</span>
<span class="line">https://kubernetes.default.svc  in-cluster           Unknown  Cluster has no applications and is not being monitored.</span>
<span class="line"></span></code></pre></div><h3>3) 샘플 앱 배포</h3>
<h4>(1) Git 저장소 생성 및 다운</h4>
<blockquote>
<p>해당 저장소는 개인이 생성한 Git 저장소로 대체하셔도 됩니다.<br>
필자가 만든 저장소를 그대로 사용한다면, "ArgoCD Application CRD" 챕터로 넘어가시면 됩ㄴ디ㅏ.</p>
</blockquote>
<div class="language-bash" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="line"><span class="token comment"># Git 저장소 설정</span></span>
<span class="line"><span class="token function">git</span> clone https://github.com/hyungwook0221/argo-demo.git</span>
<span class="line"><span class="token builtin class-name">cd</span> argo-demo</span>
<span class="line"></span>
<span class="line"><span class="token comment"># 깃 원격 오리진 주소 확인</span></span>
<span class="line"><span class="token function">git</span> config <span class="token parameter variable">-l</span> <span class="token operator">|</span> <span class="token function">grep</span> remote.origin.url</span>
<span class="line"><span class="token assign-left variable">remote.origin.url</span><span class="token operator">=</span>https://github.com/hyungwook0221/argo-demo.git</span>
<span class="line"></span></code></pre></div><h4>(2) PostgreSQL 배포</h4>
<blockquote>
<p>참고 : <a href="https://artifacthub.io/packages/helm/bitnami/postgresql" target="_blank" rel="noopener noreferrer">https://artifacthub.io/packages/helm/bitnami/postgresql</a></p>
</blockquote>
<ul>
<li>PostgreSQL 헬름차트 준비 및 Github 저장소</li>
</ul>
<div class="language-bash" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="line"><span class="token comment"># PostgreSQL 헬름차트 추가 및 다운로드</span></span>
<span class="line">helm repo <span class="token function">add</span> bitnami https://charts.bitnami.com/bitnami</span>
<span class="line">helm fetch bitnami/postgresql <span class="token parameter variable">--untar</span></span>
<span class="line"><span class="token builtin class-name">cd</span> postgresql/</span>
<span class="line"></span>
<span class="line"><span class="token comment"># audit.logConnections=false에서 true로 변경</span></span>
<span class="line"><span class="token function">cat</span> <span class="token operator">&lt;&lt;</span><span class="token string">EOF<span class="token bash punctuation"> <span class="token operator">&gt;</span> override-values.yaml</span></span>
<span class="line">audit:</span>
<span class="line">  logConnections: true</span>
<span class="line">EOF</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># 헬름 차트를 깃랩 저장소에 업로드</span></span>
<span class="line"><span class="token function">git</span> <span class="token function">add</span> <span class="token builtin class-name">.</span> <span class="token operator">&amp;&amp;</span> <span class="token function">git</span> commit <span class="token parameter variable">-m</span> <span class="token string">"add postgresql helm"</span></span>
<span class="line"><span class="token function">git</span> push</span>
<span class="line"></span></code></pre></div><ul>
<li>ArgoCD Application CRD 준비 : postgresql-helm-argo-application.yml</li>
</ul>
<div class="language-yaml" data-highlighter="prismjs" data-ext="yml" data-title="yml"><pre class="language-yaml"><code><span class="line"><span class="token comment"># postgresql-helm-argo-application.yml</span></span>
<span class="line"></span></code></pre></div>]]></content:encoded>
      <enclosure url="https://raw.githubusercontent.com/hyungwook0221/img/main/uPic/8p131S.jpg" type="image/jpeg"/>
    </item>
    <item>
      <title>2023년 6월</title>
      <link>https://docmoa.github.io/04-HashiCorp/08-Updates/98-2023/2023-06.html</link>
      <guid>https://docmoa.github.io/04-HashiCorp/08-Updates/98-2023/2023-06.html</guid>
      <source url="https://docmoa.github.io/rss.xml">2023년 6월</source>
      <description>2023년 6월 Update</description>
      <pubDate>Wed, 07 Jun 2023 05:34:37 GMT</pubDate>
      <content:encoded><![CDATA[
<h2>Product 소개</h2>
<ul>
<li>
<p>Terraform Cloud updates plans with an enhanced Free tier and more flexibility</p>
<ul>
<li><a href="https://www.hashicorp.com/blog/terraform-cloud-updates-plans-with-an-enhanced-free-tier-and-more-flexibility" target="_blank" rel="noopener noreferrer">Hashicorp Blog</a></li>
<li>Terraform Cloud 에 대한 요금제가 개편됩니다. 요금제 개편과 함께 각 요금제에서 사용가능한 기능들도 추가되었습니다. (예를 들어 기존 Free Tier 에서는 사용불가 했던 Sentinel/OPA, SSO, Terraform Agent, Run Tasks 등)</li>
</ul>
</li>
<li>
<p>Terraform Cloud adds Vault-backed dynamic credentials</p>
<ul>
<li><a href="https://www.hashicorp.com/blog/terraform-cloud-adds-vault-backed-dynamic-credentials" target="_blank" rel="noopener noreferrer">Hashicorp Blog</a></li>
<li>지난 4월 소개된 Dynamic provider credentials now generally available for Terraform Cloud 에 이어 Vault의 Cloud Secrets Engine (AWS, Azure, GCP) 를 연계한 동적 자격증명 발급 기능이 출시되었습니다. 이제, Terraform Apply 수행 시 마다 Vault 로 부터 자격증명을 발급받아 사용함으로써 보다 보안 강화된 워크플로우를 구성할 수 있습니다.</li>
</ul>
</li>
</ul>
<h2>Product Update</h2>
<ul>
<li>Terraform
<ul>
<li>CLI
<ul>
<li><a href="https://github.com/hashicorp/terraform/releases/tag/v1.4.6" target="_blank" rel="noopener noreferrer">1.4.6 Release</a>
<ul>
<li><code>terraform plan</code> 시 null string 또는 잘못 정의된 map 으로 인한 오류 개선</li>
<li><code>terraform plan</code> 시 구버전 TFE 에서 plan 두번 되는 이슈 개선</li>
<li><code>forces replacement</code> 설정된 자원 관련 오류 개선</li>
</ul>
</li>
</ul>
</li>
<li><a href="https://developer.hashicorp.com/terraform/enterprise/releases" target="_blank" rel="noopener noreferrer">Enterprise Release</a>
<ul>
<li><a href="https://developer.hashicorp.com/terraform/enterprise/releases/2023/v202305-1" target="_blank" rel="noopener noreferrer">5월 Release</a> 출시 (<code>v202305-1 (703)</code>)</li>
<li>필수 Upgrade Versison: Release Note 에서 * 표기된 Version 은 필수로 거쳐야 하는 Version (예: v202207-2)</li>
<li>Terraform run 시 구동되는 Build Worker 관련 지원 종료 (v202306-1 부터 적용, Terraform run 시 TFC Agent 로 대체)</li>
<li>Project 단위 Variable Set 사용 가능</li>
<li>Vault 와 연계한 Dynamic Credentials 사용 시 base64 encoded PEM format Cert 지정시 <code>TFC_VAULT_ENCODED_CACERT</code> 환경변수 사용 지원</li>
<li>Authentication Token 발행 시 폐기 시점 (Expire date) 설정지원</li>
<li>OPA Version 자동 업그레이드 지원</li>
</ul>
</li>
<li>Provider
<ul>
<li><a href="https://github.com/hashicorp/terraform-provider-aws/releases/tag/v5.0.0" target="_blank" rel="noopener noreferrer">AWS v5.0 주요 수정사항</a>
<ul>
<li>신버전 출시 관련 <a href="https://www.hashicorp.com/blog/terraform-aws-provider-5-0-adds-updates-to-default-tags" target="_blank" rel="noopener noreferrer">Hashicorp Blog</a></li>
<li>Provider 단위별 생성/관리 되는 자원에 대한 Default Tag 설정 지원 및 기존 발생하던 Tag 관련 이슈에 대한 개선</li>
<li>EC2 Classic 관련 기능 지원 종료</li>
<li>기존에 사용자가 고지 받던 Warning 알림 (지원 종료된 자원 사용 등) 에 대한 개선</li>
<li>신규 자원 관련 지원 추가
<ul>
<li>Amazon CloudWatch Observability Access Manager</li>
<li>Amazon EC2 Recycle Bin</li>
<li>Amazon QuickSight</li>
<li>Amazon VPC Lattice</li>
<li>AWS Directory Service trust relationships</li>
<li>Amazon EventBridge Pipes</li>
</ul>
</li>
</ul>
</li>
<li><a href="https://github.com/hashicorp/terraform-provider-azurerm/releases/tag/v3.58.0" target="_blank" rel="noopener noreferrer">Azure v3.58.0 주요 수정사항</a>
<ul>
<li>신규 resource 추가
<ul>
<li>azurerm_cosmosdb_mongo_*</li>
<li>azurerm_mobile_network_packet_core_control_plane</li>
<li>azurerm_monitor_alert_prometheus_rule_group</li>
<li>azurerm_site_recovery_*</li>
</ul>
</li>
<li>기능 개선
<ul>
<li>azurerm_subnet_service_endpoint_policy 에 대해 service 설정 가능</li>
<li>azurerm_site_recovery_replication_recovery_plan 에 대해 azure_to_azure_settings 설정 가능</li>
</ul>
</li>
<li>Bug Fix
<ul>
<li>azurerm_kubernetes_cluster 에 대해 nil 값 반환으로 인한 panic 오류 개선</li>
<li>azurerm_api_management 에 대해 triple_des_ciphers_enabled 설정값 오류 개선</li>
<li>azurerm_key_vault 에 대해 <code>createMode</code> 를 nil 대신 default 로 대체</li>
</ul>
</li>
</ul>
</li>
<li><a href="https://github.com/hashicorp/terraform-provider-google/releases/tag/v4.67.0" target="_blank" rel="noopener noreferrer">GCP v4.67.0 주요 수정사항</a>
<ul>
<li>신규 resource 추가
<ul>
<li>google_____*_iam_policy</li>
<li>google_vertex_ai_index</li>
</ul>
</li>
<li>기능 개선
<ul>
<li>google_compute_instance 와 google_compute_instance_template 에 대해 network_performance_config 설정 지원</li>
<li>google_compute_disk 와 google_compute_region_disk 에 대해 guest_os_features 및 licenses 설정 지원</li>
<li>google_datastream_stream 에 대해 mysql_source_config.max_concurrent_backfill_tasks 설정 지원</li>
</ul>
</li>
<li>Bug Fix
<ul>
<li>google_apigee_orginization 에 대한 default timeout 을 기존 20분에서 45분으로 개선</li>
<li>google_container_node_pool 에 대해 crash 오류 관련 개선</li>
<li>google_gkeonprem_vmware_cluster 에 대해 hostname 설정을 필수에서 선택으로 변경</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li>Vault
<ul>
<li>1.13.2
<ul>
<li>상세 <a href="https://github.com/hashicorp/vault/releases/tag/v1.13.2" target="_blank" rel="noopener noreferrer">Release Note</a></li>
<li>namespace 에 대한 output 정보 상세화</li>
<li>pki secret engine 에 대해 OCSP 에 대한 사이즈 조정 및 호환성 제고</li>
<li>ldap auth method 에 대해 max_page_size 설정 지원</li>
<li>신규 생성된 Token 이 인지되지 않음으로 인해 간헐적으로 발생되는  <code>error performing token check: no lease entry found for token that ought to have one, possible eventual consistency issue</code> 오류 개선</li>
<li>Perf Standby Cluster 에 대해 Leader 변경, Unseal 등의 작업 이후 발생하는 412 오류 개선</li>
<li>PR Cluster 에 filter 된 정보 replication 작업 시 발생하는 caching 오류 개선</li>
<li>UI 개선</li>
</ul>
</li>
</ul>
</li>
<li>Consul
<ul>
<li>1.15.3
<ul>
<li>상세 <a href="https://github.com/hashicorp/consul/releases/tag/v1.15.3" target="_blank" rel="noopener noreferrer">Release Note</a></li>
<li>보안 취약점 관련 패치: <a href="https://github.com/advisories/GHSA-9f7g-gqwh-jpf5" target="_blank" rel="noopener noreferrer">CVE-2023-24537 (<code>go/scanner</code>)</a>, <a href="https://github.com/advisories/GHSA-v4m2-x4rp-hv22" target="_blank" rel="noopener noreferrer">CVE-2023-24538(<code>html/template</code>)</a>, <a href="https://github.com/advisories/GHSA-8v5j-pwr7-w5f8" target="_blank" rel="noopener noreferrer">CVE-2023-24534(<code>net/textproto</code>)</a>, <a href="https://github.com/advisories/GHSA-9f7g-gqwh-jpf5" target="_blank" rel="noopener noreferrer">CVE-2023-24536(<code>mime/multipart</code>)</a></li>
<li>HCP Consul 에 대해 OTEL 형태의 Metric 수집 지원</li>
<li>Raft Storage 관련 성능 개선</li>
<li>partition/region 간 peering 관련 기능 개선</li>
<li>Envoy Version 지원추가: <code>1.22.11</code>, <code>1.23.8</code>, <code>1.24.6</code>, <code>1.25.4</code></li>
<li>Envoy Proxy 관련 Passive Health Check 에 대해 <code>MaxEjectionPercent</code> 과 <code>BaseEjectionTime</code> 설정 지원</li>
</ul>
</li>
</ul>
</li>
<li>Nomad
<ul>
<li>1.5.6
<ul>
<li>상세 <a href="https://github.com/hashicorp/nomad/releases/tag/v1.5.6" target="_blank" rel="noopener noreferrer">Release Note</a></li>
<li>Job allocation 이 재시작 되었을 때 발생하는 group service 가 등록 해제 되는 오류 개선</li>
<li>종료되었음에도 삭제 되지 않은  Job allocation 에 대한 오류 개선</li>
<li>Job Evaluation 이 잘못된 type 으로 생성되는 오류 개선</li>
</ul>
</li>
</ul>
</li>
</ul>
]]></content:encoded>
    </item>
    <item>
      <title>AEWS 3주차 - Amzaon EKS Storage</title>
      <link>https://docmoa.github.io/07-Kubernetes/06-EKS/03-eks-storage.html</link>
      <guid>https://docmoa.github.io/07-Kubernetes/06-EKS/03-eks-storage.html</guid>
      <source url="https://docmoa.github.io/rss.xml">AEWS 3주차 - Amzaon EKS Storage</source>
      <description>AEWS 3주차 - Amzaon EKS Storage</description>
      <pubDate>Sat, 20 May 2023 16:20:14 GMT</pubDate>
      <content:encoded><![CDATA[
]]></content:encoded>
    </item>
    <item>
      <title>Vault Secrets Operator 개요</title>
      <link>https://docmoa.github.io/04-HashiCorp/06-Vault/01-Information/vault-secret-operator/1-vso-overview.html</link>
      <guid>https://docmoa.github.io/04-HashiCorp/06-Vault/01-Information/vault-secret-operator/1-vso-overview.html</guid>
      <source url="https://docmoa.github.io/rss.xml">Vault Secrets Operator 개요</source>
      <description>Vault Secrets Operator(이하, VSO)를 사용하면 파드가 쿠버네티스 시크릿에서 기본적으로 볼트 시크릿을 사용할 수 있다.</description>
      <pubDate>Sat, 20 May 2023 16:20:14 GMT</pubDate>
      <content:encoded><![CDATA[
<blockquote>
<p>참고:<br>
현재 Vault 비밀 오퍼레이터는 공개 베타 버전입니다. *<a href="https://github.com/hashicorp/vault-secrets-operator/issues" target="_blank" rel="noopener noreferrer">here</a>*에서 GitHub 이슈를 개설하여 피드백을 제공해 주세요.</p>
</blockquote>
<figure><img src="https://external-preview.redd.it/UWYqK9zEwREq18MnMbIC7T6W5mUJbF_i4C2K3T1cV6Y.jpg?width=640&amp;crop=smart&amp;auto=webp&amp;s=927dad31a962359c0b61c5ae57ce1d57f6957cf7" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure>
<p>Vault Secrets Operator(이하, VSO)를 사용하면 파드가 쿠버네티스 시크릿에서 기본적으로 볼트 시크릿을 사용할 수 있다.</p>
<h2>개요</h2>
<p>VSO는 지원되는 Custom Resource Definitions (CRD) 집합의 변경 사항을 감시하여 작동한다. 각 CRD는 오퍼레이터가 Vault Secrets을 Kubernetes Secret에 동기화할 수 있도록 하는 데 필요한 사양(specification)을 제공한다.</p>
<p>오퍼레이터는 소스(source) 볼트 시크릿 데이터를 대상(destination) 쿠버네티스 시크릿에 직접 쓰며, 소스에 대한 변경 사항이 수명 기간 동안 대상에 복제되도록 한다. 이러한 방식으로 애플리케이션은 대상 시크릿에 대한 접근 권한만 있으면 그 안에 포함된 시크릿 데이터를 사용할 수 있다.</p>
<h3>특징</h3>
<p>VSO가 지원하는 기능은 다음과 같다:</p>
<ul>
<li>모든 Vault 비밀 엔진 지원.</li>
<li>Vault와의 TLS/mTLS 통신.</li>
<li><a href="https://developer.hashicorp.com/vault/docs/auth/kubernetes" target="_blank" rel="noopener noreferrer">Kubernetes Auth Method</a>을 통해 요청하는 <code>Pod</code>의 <code>ServiceAccount</code>를 사용한 인증.</li>
<li>Vault Secrets을 Kubernetes Secrets에 동기화.</li>
<li><code>Deployment</code>, <code> ReplicaSet</code>, <code>StatefulSet</code>  쿠버네티스 리소스 유형에 대한 시크릿 로테이션.</li>
<li>운영자 모니터링을 위한 Prometheus 계측(instrumentation) 제공.</li>
<li>지원되는 설치 방법: <code>Helm</code>, <code>Kustomize</code></li>
<li>자세한 내용은 <em><a href="https://developer.hashicorp.com/vault/docs/platform/k8s/vso/installation" target="_blank" rel="noopener noreferrer">installation</a></em> 문서를 참조.</li>
</ul>
<h2>지원되는 쿠버네티스 버전</h2>
<p>현재 지원되는 <a href="https://kubernetes.io/releases/" target="_blank" rel="noopener noreferrer">Kubernetes minor releases</a>는 다음과 같다. 최신 버전은 각 쿠버네티스 버전에 대해 테스트되며, 다른 버전의 Kubernetes에서도 작동할 수 있지만 지원되지는 않는다.</p>
<ul>
<li>1.26</li>
<li>1.25</li>
<li>1.24</li>
<li>1.23</li>
<li>1.22</li>
</ul>
<h2>Vault 접근 및 사용자 지정 리소스 정의</h2>
<blockquote>
<p>참고:<br>
현재, 오퍼레이터는 쿠버네티스 인증 방법만 지원한다. 시간이 지남에 따라 더 많은 Vault 인증 방식에 대한 지원을 추가할 예정이다.</p>
</blockquote>
<p>Vault 연결 및 인증 구성은 <code>VaultConnection</code> 및 <code>VaultAuth</code> CRD에서 제공한다. 이는 모든 비밀 복제 유형 리소스가 참조하는 기본 사용자 지정 리소스로 간주할 수 있다.</p>
<h3><code>VaultConnection</code> 커스텀 리소스</h3>
<p>오퍼레이터가 단일 Vault 서버 인스턴스에 연결하는 데 필요한 구성을 제공한다.</p>
<div class="language-yaml" data-highlighter="prismjs" data-ext="yml" data-title="yml"><pre class="language-yaml"><code><span class="line"></span></code></pre></div>]]></content:encoded>
      <enclosure url="https://external-preview.redd.it/UWYqK9zEwREq18MnMbIC7T6W5mUJbF_i4C2K3T1cV6Y.jpg?width=640&amp;crop=smart&amp;auto=webp&amp;s=927dad31a962359c0b61c5ae57ce1d57f6957cf7" type="image/"/>
    </item>
    <item>
      <title>Vault Secrets Operator 설치</title>
      <link>https://docmoa.github.io/04-HashiCorp/06-Vault/01-Information/vault-secret-operator/2-vso-install.html</link>
      <guid>https://docmoa.github.io/04-HashiCorp/06-Vault/01-Information/vault-secret-operator/2-vso-install.html</guid>
      <source url="https://docmoa.github.io/rss.xml">Vault Secrets Operator 설치</source>
      <description>Vault Secrets Operator(이하, VSO)를 설치하고 구성하는 권고 방안이다.</description>
      <pubDate>Sat, 20 May 2023 16:20:14 GMT</pubDate>
      <content:encoded><![CDATA[
<blockquote>
<p>참고:<br>
현재 Vault 비밀 오퍼레이터는 공개 베타 버전입니다. *<a href="https://github.com/hashicorp/vault-secrets-operator/issues" target="_blank" rel="noopener noreferrer">here</a>*에서 GitHub 이슈를 개설하여 피드백을 제공해 주세요.</p>
</blockquote>
<h2>사전 요구사항</h2>
<ul>
<li>Kubernetes 1.22+</li>
<li>Vault OSS/Enterprise 1.11+</li>
</ul>
<h2>Helm을 활용한 설치</h2>
<p><a href="https://developer.hashicorp.com/vault/docs/platform/k8s/vso/helm" target="_blank" rel="noopener noreferrer">Vault Secrets Operator Helm chart</a>는 Vault Secrets Operator(이하, VSO)를 설치하고 구성하는 권고 방안이다.</p>
<p>VSO의 새 인스턴스를 설치하려면 먼저 HashiCorp Helm Repo를 추가하고 Chart에 액세스할 수 있는지 확인한다:</p>
<div class="language-bash" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="line"><span class="token variable">$helm</span> repo <span class="token function">add</span> hashicorp https://helm.releases.hashicorp.com</span>
<span class="line"><span class="token string">"hashicorp"</span> has been added to your repositories</span>
<span class="line"></span>
<span class="line">$ helm search repo hashicorp/vault-secrets-operator <span class="token parameter variable">--devel</span></span>
<span class="line">NAME            CHART VERSION   APP VERSION DESCRIPTION</span>
<span class="line">hashicorp/vault-secrets-operator    <span class="token number">0.1</span>.0-beta          <span class="token number">0.1</span>.0-beta      Official HashiCorp Vault Secrets Operator Chart</span>
<span class="line"></span></code></pre></div><p>그런다음 Operator를 설치한다:</p>
<div class="language-shell-session" data-highlighter="prismjs" data-ext="shell-session" data-title="shell-session"><pre class="language-shell-session"><code><span class="line"><span class="token command"><span class="token shell-symbol important">$</span> <span class="token bash language-bash">helm <span class="token function">install</span> --create-namespace <span class="token parameter variable">--namespace</span> vault-secrets-operator vault-secrets-operator hashicorp/vault-secrets-operator <span class="token parameter variable">--version</span> <span class="token number">0.1</span>.0-beta</span></span></span>
<span class="line"></span></code></pre></div><h2>Helm을 사용한 업그레이드</h2>
<p>업그레이드는 기존 설치에서 <code>helm upgrade</code>로 수행할 수 있다. 설치 또는 업그레이드 전에 항상 <code>--dry-run</code>으로 헬름을 실행하여 변경 사항을 확인한다.</p>
<h3>Helm Chart Values</h3>
<p>지원되는 모든 헬름 차트 값은 <a href="https://developer.hashicorp.com/vault/docs/platform/k8s/vso/helm" target="_blank" rel="noopener noreferrer">here</a>에서 확인할 수 있다.</p>
]]></content:encoded>
    </item>
    <item>
      <title>Vault Secrets Operator 예제실습</title>
      <link>https://docmoa.github.io/04-HashiCorp/06-Vault/01-Information/vault-secret-operator/3-vso-samples.html</link>
      <guid>https://docmoa.github.io/04-HashiCorp/06-Vault/01-Information/vault-secret-operator/3-vso-samples.html</guid>
      <source url="https://docmoa.github.io/rss.xml">Vault Secrets Operator 예제실습</source>
      <description>Vault Secret Operator 저장소에서 제공하는 코드를 활용하여 환경구성 및 샘플 애플리케이션 배포/연동에 대한 상세 분석을 제공한다.</description>
      <pubDate>Sat, 20 May 2023 16:20:14 GMT</pubDate>
      <content:encoded><![CDATA[
<blockquote>
<p>📌 참고:<br>
현재 Vault 비밀 오퍼레이터는 공개 베타 버전입니다. *<a href="https://github.com/hashicorp/vault-secrets-operator/issues" target="_blank" rel="noopener noreferrer">here</a>*에서 GitHub 이슈를 개설하여 피드백을 제공해 주세요.</p>
</blockquote>
<p>본 문서는 HashiCorp 공식 GitHub의 <a href="%5Bhere%5D(https://github.com/hashicorp/vault-secrets-operator#samples)">Vault Secret Operator 저장소</a> 에서 제공하는 코드를 활용하여 환경구성 및 샘플 애플리케이션 배포/연동에 대한 상세 분석을 제공한다.</p>
<figure><img src="https://raw.githubusercontent.com/hyungwook0221/img/main/uPic/vso_repo.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure>
<h2>0. 사전 요구사항</h2>
<h3>1) 패키지 및 바이너리 정보</h3>
<ul>
<li>go(1.20.2 이상)</li>
<li>make</li>
<li>KinD</li>
<li>Docker</li>
<li>Kubectl</li>
<li>unzip</li>
</ul>
<h3>2) 저장소 복제</h3>
<p>실습을 위해 <a href="https://github.com/hashicorp/vault-secrets-operator" target="_blank" rel="noopener noreferrer">vault-secrets-operator</a> 저장소를 복제한다.</p>
<div class="language-bash" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="line"><span class="token comment"># 저장소 복제</span></span>
<span class="line">$ <span class="token function">git</span> clone https://github.com/hashicorp/vault-secrets-operator.git</span>
<span class="line"></span>
<span class="line"><span class="token comment"># 작업 디렉토리 이동</span></span>
<span class="line">$ <span class="token builtin class-name">cd</span> vault-secrets-operator</span>
<span class="line"></span></code></pre></div><h2>1. K8s 환경구성 및 샘플배포</h2>
<blockquote>
<p>📌 참고:<br>
실행결과 : <a href="https://gist.githubusercontent.com/hyungwook0221/85ec45d06a8c7643bcfe4afcd8843856/raw/b40096f6bbfad75636e3657f6c0827f8b7a0b436/vso-demo-1.sh" target="_blank" rel="noopener noreferrer">vso-demo-1.sh</a></p>
</blockquote>
<ul>
<li>Start a KinD Cluster</li>
</ul>
<div class="language-bash" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="line">$ <span class="token function">make</span> setup-kind</span>
<span class="line"></span></code></pre></div><ul>
<li><code>setup-kind</code> 수행 후 생성된 KinD 클러스터 및 파드정보 확인</li>
</ul>
<p><code>vault-secrets-operator-control-plane</code> 가 단일노드로 배포된 것을 확인할 수 있다.</p>
<div class="language-bash" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="line">$ kubectl get nodes <span class="token parameter variable">-o</span> wide</span>
<span class="line">NAME                                   STATUS   ROLES           AGE     VERSION   INTERNAL-IP   EXTERNAL-IP   OS-IMAGE             KERNEL-VERSION     CONTAINER-RUNTIME</span>
<span class="line">vault-secrets-operator-control-plane   Ready    control-plane   3m18s   v1.25.3   <span class="token number">172.18</span>.0.2    <span class="token operator">&lt;</span>none<span class="token operator">&gt;</span>        Ubuntu <span class="token number">22.04</span>.1 LTS   <span class="token number">5.15</span>.49-linuxkit   containerd://1.6.9</span>
<span class="line"></span>
<span class="line">$ kubectl get pods <span class="token parameter variable">-A</span></span>
<span class="line">NAMESPACE            NAME                                                           READY   STATUS    RESTARTS   AGE</span>
<span class="line">kube-system          coredns-565d847f94-42vpm                                       <span class="token number">1</span>/1     Running   <span class="token number">0</span>          3m5s</span>
<span class="line">kube-system          coredns-565d847f94-6fsv9                                       <span class="token number">1</span>/1     Running   <span class="token number">0</span>          3m5s</span>
<span class="line">kube-system          etcd-vault-secrets-operator-control-plane                      <span class="token number">1</span>/1     Running   <span class="token number">0</span>          3m18s</span>
<span class="line">kube-system          kindnet-9j486                                                  <span class="token number">1</span>/1     Running   <span class="token number">0</span>          3m6s</span>
<span class="line">kube-system          kube-apiserver-vault-secrets-operator-control-plane            <span class="token number">1</span>/1     Running   <span class="token number">0</span>          3m18s</span>
<span class="line">kube-system          kube-controller-manager-vault-secrets-operator-control-plane   <span class="token number">1</span>/1     Running   <span class="token number">0</span>          3m18s</span>
<span class="line">kube-system          kube-proxy-tfqc8                                               <span class="token number">1</span>/1     Running   <span class="token number">0</span>          3m6s</span>
<span class="line">kube-system          kube-scheduler-vault-secrets-operator-control-plane            <span class="token number">1</span>/1     Running   <span class="token number">0</span>          3m17s</span>
<span class="line">local-path-storage   local-path-provisioner-684f458cdd-2dzfn                        <span class="token number">1</span>/1     Running   <span class="token number">0</span>          3m5s</span>
<span class="line"></span></code></pre></div><h2>2. Vault 클러스터 배포</h2>
<blockquote>
<p>📌 참고<br>
실행결과 : <a href="https://gist.githubusercontent.com/hyungwook0221/3bf0603ca179f367492fefab9574595f/raw/53b33e501082193999c1f5dca9ed73c70507d42f/vso-demo-2.sh" target="_blank" rel="noopener noreferrer">vso-demo-2.sh</a></p>
</blockquote>
<p>앞서 생성된 KinD 클러스터 내부에 Vault 클러스터를 배포한다. 이때, 필요한 사전 환경을 Terraform 코드를 통해 자동으로 구성한다.</p>
<div class="language-bash" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="line"><span class="token function">make</span> setup-integration-test</span>
<span class="line"></span></code></pre></div><ul>
<li>배포된 Vaulat Server Pod 확인</li>
</ul>
<div class="language-bash" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="line"><span class="token comment"># Pod 확인</span></span>
<span class="line">$ kubectl get pods <span class="token parameter variable">-n</span> vault</span>
<span class="line">NAME      READY   STATUS    RESTARTS   AGE</span>
<span class="line">vault-0   <span class="token number">1</span>/1     Running   <span class="token number">0</span>          73s</span>
<span class="line"></span>
<span class="line"><span class="token comment"># vault 상태확인</span></span>
<span class="line">$ kubectl <span class="token builtin class-name">exec</span> <span class="token parameter variable">-n</span> vault <span class="token parameter variable">-it</span> vault-0 -- vault status</span>
<span class="line">Key             Value</span>
<span class="line"></span></code></pre></div>]]></content:encoded>
      <enclosure url="https://raw.githubusercontent.com/hyungwook0221/img/main/uPic/vso_repo.png" type="image/png"/>
    </item>
    <item>
      <title>Rancher Desktop Disk Resize on MAC</title>
      <link>https://docmoa.github.io/07-Kubernetes/04-RancherDesktop/rancher-desktop-disk-resize-mac.html</link>
      <guid>https://docmoa.github.io/07-Kubernetes/04-RancherDesktop/rancher-desktop-disk-resize-mac.html</guid>
      <source url="https://docmoa.github.io/rss.xml">Rancher Desktop Disk Resize on MAC</source>
      <description>no space left on device</description>
      <pubDate>Tue, 09 May 2023 08:42:23 GMT</pubDate>
      <content:encoded><![CDATA[
<blockquote>
<p>Private docker registry<br>
Rancher Desktop<br>
MacOS<br>
Src :  <a href="https://slack-archive.rancher.com/t/8508077/on-my-m1-mac-i-ve-started-getting-this-error-and-it-wont-go-#3e8d178c-aee8-46e6-b4cc-094c2339cbaa" target="_blank" rel="noopener noreferrer">https://slack-archive.rancher.com/t/8508077/on-my-m1-mac-i-ve-started-getting-this-error-and-it-wont-go-#3e8d178c-aee8-46e6-b4cc-094c2339cbaa</a></p>
</blockquote>
<h2>issue</h2>
<div class="language-bash" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="line">$ <span class="token function">docker</span> run abc</span>
<span class="line">f631eb8a0078: Already exists</span>
<span class="line">d04f82e55126: Already exists</span>
<span class="line">0b1212f566e8: Already exists</span>
<span class="line">8e7d076cd7f0: Already exists</span>
<span class="line">62aa9a741295: Already exists</span>
<span class="line">f3e65750a6be: Extracting  <span class="token number">22</span>.02GB/22.02GB</span>
<span class="line">docker: failed to register layer: Error processing <span class="token function">tar</span> file<span class="token punctuation">(</span>exit status <span class="token number">1</span><span class="token punctuation">)</span>: <span class="token function">write</span> /0000.dat: no space left on device.</span>
<span class="line">See <span class="token string">'docker run --help'</span><span class="token builtin class-name">.</span></span>
<span class="line"></span></code></pre></div><div class="hint-container caution">
<p class="hint-container-title">위험</p>
<p>Check the Rancher desktop stopped</p>
</div>
<h2>Resize</h2>
<div class="language-bash" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="line">$ /Applications/Rancher<span class="token punctuation">\</span> Desktop.app/Contents/Resources/resources/darwin/lima/bin/qemu-img resize <span class="token environment constant">$HOME</span>/Library/Application<span class="token punctuation">\</span> Support/rancher-desktop/lima/0/diffdisk +10G</span>
<span class="line"></span>
<span class="line">Image resized.</span>
<span class="line"></span></code></pre></div>]]></content:encoded>
    </item>
    <item>
      <title>AEWS 2주차 - Amzaon EKS Networking</title>
      <link>https://docmoa.github.io/07-Kubernetes/06-EKS/02-eks-networking.html</link>
      <guid>https://docmoa.github.io/07-Kubernetes/06-EKS/02-eks-networking.html</guid>
      <source url="https://docmoa.github.io/rss.xml">AEWS 2주차 - Amzaon EKS Networking</source>
      <description>AWS에서 공식적으로 제공되는 다양한 HOL 기반의 Workshop과 가시다님의 팀에서 2차 가공한 컨텐츠를 기반으로 진행한다..</description>
      <pubDate>Sat, 06 May 2023 17:36:03 GMT</pubDate>
      <content:encoded><![CDATA[
<p>이번에 연재할 스터디는 AWS EKS Workshop Study (=AEWS)이다. AWS에서 공식적으로 제공되는 다양한 HOL 기반의 Workshop과 가시다님의 팀에서 2차 가공한 컨텐츠를 기반으로 진행한다.</p>
<figure><img src="https://raw.githubusercontent.com/hyungwook0221/img/main/uPic/9cxho8.jpg" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure>
<h2>0. 실습환경 준비</h2>
<p>2주차 부터는 원클릭으로 EKS 실습환경을 배포할 수 있는 코드를 사용한다. 필자는 사용중인 AWS IAM 권한 제약사항으로 기존 CF 코드를 변경하여 베스천용 EC2에 관리자 권한을 위임하여 배포할 예정이다.</p>
<blockquote>
<p>참고 : <a href="https://cloudkatha.com/attach-an-iam-role-to-an-ec2-instance-with-cloudformation/" target="_blank" rel="noopener noreferrer">https://cloudkatha.com/attach-an-iam-role-to-an-ec2-instance-with-cloudformation/</a></p>
</blockquote>
<ul>
<li>원클릭 배포</li>
</ul>
<div class="language-bash" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="line"><span class="token comment"># YAML 파일 다운로드</span></span>
<span class="line"><span class="token function">curl</span> <span class="token parameter variable">-O</span> https://gist.githubusercontent.com/hyungwook0221/238d96b3b751362cc03ea40494d15313/raw/49de0a9056688b206a41349fc90727d2375f4f02/aews-eks-oneclick-with-ec2-profile.yaml</span>
<span class="line"></span>
<span class="line"><span class="token comment"># CloudFormation 스택 배포</span></span>
<span class="line"><span class="token comment"># aws cloudformation deploy --template-file eks-oneclick.yaml --stack-name myeks --parameter-overrides KeyName=&lt;My SSH Keyname&gt; SgIngressSshCidr=&lt;My Home Public IP Address&gt;/32 MyIamUserAccessKeyID=&lt;IAM User의 액세스키&gt; MyIamUserSecretAccessKey=&lt;IAM User의 시크릿 키&gt; ClusterBaseName='&lt;eks 이름&gt;' --region ap-northeast-2</span></span>
<span class="line">예시<span class="token punctuation">)</span> aws cloudformation deploy --template-file eks-oneclick.yaml --stack-name myeks --parameter-overrides <span class="token assign-left variable">KeyName</span><span class="token operator">=</span>hw-key <span class="token assign-left variable">SgIngressSshCidr</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$(</span><span class="token function">curl</span> <span class="token parameter variable">-s</span> ipinfo.io/ip<span class="token variable">)</span></span>/32 <span class="token assign-left variable">ClusterBaseName</span><span class="token operator">=</span>myeks <span class="token parameter variable">--region</span> ap-northeast-2 <span class="token parameter variable">--capabilities</span> CAPABILITY_NAMED_IAM</span>
<span class="line"></span>
<span class="line"><span class="token comment"># CloudFormation 스택 배포 완료 후 작업용 EC2 IP 출력</span></span>
<span class="line">aws cloudformation describe-stacks --stack-name myeks <span class="token parameter variable">--query</span> <span class="token string">'Stacks[*].Outputs[0].OutputValue'</span> <span class="token parameter variable">--output</span> text</span>
<span class="line"></span>
<span class="line"><span class="token comment"># 마스터노드 SSH 접속</span></span>
<span class="line"><span class="token function">ssh</span> <span class="token parameter variable">-i</span> ~/.ssh/kp-gasida.pem ec2-user@<span class="token variable"><span class="token variable">$(</span>aws cloudformation describe-stacks --stack-name myeks <span class="token parameter variable">--query</span> <span class="token string">'Stacks[*].Outputs[0].OutputValue'</span> <span class="token parameter variable">--output</span> text<span class="token variable">)</span></span></span>
<span class="line"></span></code></pre></div><h2>1. AWS VPC CNI</h2>
<p>일반적으로 Calico와 같은 K8s CNI의 경우는 Node - Pod의 IP 대역이 다르지만 AWS VPC CNI의 경우에는 Node-Pod 대역을 동일하게 해서 통신이 가능하도록 구성할 수 있다.</p>
<p>일반적으로 Outer 패킷을 감싸서 오버레이로 통신하지만 AWS VPC CNI는 오히려 심플한 구조를 가진다. 이로인해 간단하고 효율적인 통신이 가능하다!</p>
<h3>K8s Calico CNI vs AWS VPC CNI 비교</h3>
<ul>
<li>네트워크 통신의 최적화(성능, 지연)를 위해서 노드와 파드의 네트워크 대역을 동일하게 설정 (그림출처-가시다)</li>
</ul>
<img src="https://raw.githubusercontent.com/hyungwook0221/img/main/uPic/aFbQX7.jpg" alt="img" style="zoom: 33%;">
<ul>
<li>파드간 통신 시
<ul>
<li>K8S CNI는 <strong>오버레이(VXLAN, IP-IP 등)</strong> 통신</li>
<li>AWS VPC CNI는 <strong>동일 대역으로 직접</strong> 통신</li>
</ul>
</li>
</ul>
<img src="https://raw.githubusercontent.com/hyungwook0221/img/main/uPic/tMpJbl.jpg" alt="img" style="zoom:33%;">
<ul>
<li>노드간 통신(추후 업데이트)</li>
<li>파드간 통신(추후 업데이트)</li>
</ul>
<h2>2. Service &amp; AWS LoadBalancer Controller</h2>
<p>K8s 환경에서는 내/외부 통신을 위한 서비스를 크게 3가지 형태로 제공한다.</p>
<ul>
<li>Cluster IP</li>
<li>NodePort</li>
<li><strong>LoadBalancer</strong></li>
</ul>
<p>필자는 그 중에서 <strong>LoadBalancer</strong> 타입을 AWS 환경에서 어떻게 활용할 수 있는지를 집중적으로 확인하고 Consul 샘플 예제와 함께 적용해볼 예정이다.</p>
<h2>3. LoadBalancer NLB 모드</h2>
<p>LoadBalancer 배포 시 NLB 모드는  다음 두 가지 유형을 사용할 수 있다.</p>
<h3>유형1. 인스턴스</h3>
<ol>
<li><code>externalTrafficPolicy</code> : ClusterIP ⇒ 2번 분산 및 SNAT으로 Client IP 확인 불가능 ← <code>LoadBalancer</code> 타입 (기본 모드) 동작</li>
<li><code>externalTrafficPolicy</code> : Local ⇒ 1번 분산 및 ClientIP 유지, 워커 노드의 iptables 사용함</li>
</ol>
<img src="https://raw.githubusercontent.com/hyungwook0221/img/main/uPic/bvP3xu.jpg" alt="img" style="zoom: 33%;">
<h3>유형2. IP</h3>
<blockquote>
<p>참고 : 반드시 AWS LoadBalancer 컨트롤러 파드 및 정책 설정이 필요함!</p>
</blockquote>
<ol>
<li><code>Proxy Protocol v2 비활성화</code> ⇒ NLB에서 바로 파드로 인입, 단 ClientIP가 NLB로 SNAT 되어 Client IP 확인 불가능</li>
<li><code>Proxy Protocol v2 활성화</code> ⇒ NLB에서 바로 파드로 인입 및 ClientIP 확인 가능(→ 단 PPv2 를 애플리케이션이 인지할 수 있게 설정 필요)</li>
</ol>
<img src="https://raw.githubusercontent.com/hyungwook0221/img/main/uPic/J4nUpO.jpg" alt="img" style="zoom:33%;">
<h3>AWS LoadBalancer Controller 배포 with IRSA</h3>
<blockquote>
<p>참고 : <a href="https://docs.aws.amazon.com/ko_kr/eks/latest/userguide/aws-load-balancer-controller.html" target="_blank" rel="noopener noreferrer">AWS Load Balancer Controller 추가 기능 설치</a></p>
</blockquote>
<div class="language-bash" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="line"><span class="token comment"># AWSLoadBalancerControllerIAMPolicy 생성</span></span>
<span class="line"><span class="token function">curl</span> <span class="token parameter variable">-o</span> iam_policy.json https://raw.githubusercontent.com/kubernetes-sigs/aws-load-balancer-controller/v2.4.7/docs/install/iam_policy.json</span>
<span class="line">aws iam create-policy --policy-name AWSLoadBalancerControllerIAMPolicy --policy-document file://iam_policy.json</span>
<span class="line"></span>
<span class="line"><span class="token comment"># 업데이트가 필요한 경우 </span></span>
<span class="line"><span class="token comment"># aws iam update-policy --policy-name AWSLoadBalancerControllerIAMPolicy --policy-document file://iam_policy.json</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># AWS Load Balancer Controller를 위한 ServiceAccount를 생성 </span></span>
<span class="line">eksctl create iamserviceaccount <span class="token parameter variable">--cluster</span><span class="token operator">=</span><span class="token variable">$CLUSTER_NAME</span> <span class="token parameter variable">--namespace</span><span class="token operator">=</span>kube-system <span class="token parameter variable">--name</span><span class="token operator">=</span>aws-load-balancer-controller <span class="token punctuation">\</span></span>
<span class="line">--attach-policy-arn<span class="token operator">=</span>arn:aws:iam::<span class="token variable">$ACCOUNT_ID</span>:policy/AWSLoadBalancerControllerIAMPolicy --override-existing-serviceaccounts <span class="token parameter variable">--approve</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">## IRSA 정보 확인</span></span>
<span class="line">eksctl get iamserviceaccount <span class="token parameter variable">--cluster</span> <span class="token variable">$CLUSTER_NAME</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">## 서비스 어카운트 확인</span></span>
<span class="line">kubectl get serviceaccounts <span class="token parameter variable">-n</span> kube-system aws-load-balancer-controller <span class="token parameter variable">-o</span> yaml <span class="token operator">|</span> yh</span>
<span class="line"></span>
<span class="line"><span class="token comment"># Helm Chart 설치</span></span>
<span class="line">helm repo <span class="token function">add</span> eks https://aws.github.io/eks-charts</span>
<span class="line">helm repo update</span>
<span class="line">helm <span class="token function">install</span> aws-load-balancer-controller eks/aws-load-balancer-controller <span class="token parameter variable">-n</span> kube-system <span class="token parameter variable">--set</span> <span class="token assign-left variable">clusterName</span><span class="token operator">=</span><span class="token variable">$CLUSTER_NAME</span> <span class="token punctuation">\</span></span>
<span class="line">  <span class="token parameter variable">--set</span> <span class="token assign-left variable">serviceAccount.create</span><span class="token operator">=</span>false <span class="token parameter variable">--set</span> <span class="token assign-left variable">serviceAccount.name</span><span class="token operator">=</span>aws-load-balancer-controller</span>
<span class="line">  </span>
<span class="line"><span class="token comment"># 설치 확인</span></span>
<span class="line">kubectl get crd</span>
<span class="line">kubectl get deployment <span class="token parameter variable">-n</span> kube-system aws-load-balancer-controller</span>
<span class="line">kubectl describe deploy <span class="token parameter variable">-n</span> kube-system aws-load-balancer-controller <span class="token operator">|</span> <span class="token function">grep</span> <span class="token string">'Service Account'</span></span>
<span class="line">  Service Account:  aws-load-balancer-controller</span>
<span class="line"> </span>
<span class="line"><span class="token comment"># 클러스터롤, 클러스터 롤바인딩 확인</span></span>
<span class="line">kubectl describe clusterrolebindings.rbac.authorization.k8s.io aws-load-balancer-controller-rolebinding</span>
<span class="line">kubectl describe clusterroles.rbac.authorization.k8s.io aws-load-balancer-controller-role</span>
<span class="line"></span></code></pre></div><ul>
<li>생성된 ClusterRole 확인</li>
</ul>
<p>AWS LoadBalancer Controller가 동작하기 위해 필요한 SA를 생성 후 연결된 ClusterRole과 ClusterRoleBinding을 화인</p>
<figure><img src="https://raw.githubusercontent.com/hyungwook0221/img/main/uPic/tKiW7W.jpg" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure>
<h4>샘플 애플리케이션 테스트</h4>
<p>LoadBalancer 타입의 서비스와 및 파드를 배포하고 NLB 모드에 따라서 Client IP가 어떻게 확인되는지 확인해본다.</p>
<div class="language-bash" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="line"><span class="token comment"># 모니터링</span></span>
<span class="line"><span class="token function">watch</span> <span class="token parameter variable">-d</span> kubectl get pod,svc,ep</span>
<span class="line"></span>
<span class="line"><span class="token comment"># 작업용 EC2 - 디플로이먼트 &amp; 서비스 생성</span></span>
<span class="line"><span class="token function">curl</span> <span class="token parameter variable">-s</span> <span class="token parameter variable">-O</span> https://raw.githubusercontent.com/gasida/PKOS/main/2/echo-service-nlb.yaml</span>
<span class="line"><span class="token function">cat</span> echo-service-nlb.yaml <span class="token operator">|</span> yh</span>
<span class="line">kubectl apply <span class="token parameter variable">-f</span> echo-service-nlb.yaml</span>
<span class="line"></span>
<span class="line"><span class="token comment"># 파드 로깅 모니터링</span></span>
<span class="line">kubectl logs <span class="token parameter variable">-l</span> <span class="token assign-left variable">app</span><span class="token operator">=</span>deploy-websrv <span class="token parameter variable">-f</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># 분산 접속 확인</span></span>
<span class="line"><span class="token assign-left variable">NLB</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$(</span>kubectl get svc svc-nlb-ip-type <span class="token parameter variable">-o</span> <span class="token assign-left variable">jsonpath</span><span class="token operator">=</span><span class="token punctuation">{</span>.status.loadBalancer.ingress<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>.hostname<span class="token punctuation">}</span><span class="token variable">)</span></span></span>
<span class="line"><span class="token function">curl</span> <span class="token parameter variable">-s</span> <span class="token variable">$NLB</span></span>
<span class="line"></span></code></pre></div><ul>
<li>NLB 확인 : Target IP 정보 확인(UI)</li>
</ul>
<figure><img src="https://raw.githubusercontent.com/hyungwook0221/img/main/uPic/Gr1F1F.jpg" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure>
<p>NLB에 등록된 Target IP 정보는 생성된 샘플 Pod의 IP인 것을 확인할 수 있다.</p>
<figure><img src="https://raw.githubusercontent.com/hyungwook0221/img/main/uPic/XW9vaE.jpg" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure>
<p>이제 NLB를 통해서 Pod를 호출할 경우 Client IP가 어떻게 확인되는지 확인해보자.</p>
<ul>
<li>Client IP 확인 결과</li>
</ul>
<figure><img src="https://raw.githubusercontent.com/hyungwook0221/img/main/uPic/FVppDY.jpg" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure>
<p>다음 정보는 각 Node의 정보가 아닌 다른 IP 정보가 확인된다.</p>
<ul>
<li>각 Node의 IP 정보 확인</li>
</ul>
<figure><img src="https://raw.githubusercontent.com/hyungwook0221/img/main/uPic/WAkmPs.jpg" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure>
<p><strong>그렇다면 Client IP의 정체는?</strong> 바로 NLB에 할당된 네트워크 인터페이스의 IP 이다.</p>
<figure><img src="https://raw.githubusercontent.com/hyungwook0221/img/main/uPic/BY1AQ6.jpg" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure>
<p>이제 실제로 Client IP를 추적하기 위한 방법을 알아본다.</p>
<h4>NLB IP Target &amp; Proxy Protocol v2 활성화</h4>
<p>앞선 실습에서 NLB로 SNAT되어서Client IP 확인되지 못하는 것을 확인하였다. 이번에는 Proxy Protocol v2을 활성화 하여 IP 정보를 유지하는 방법을 알아본다. (이미지 출처 : 가시다님 스터디)</p>
<img src="https://raw.githubusercontent.com/hyungwook0221/img/main/uPic/r8IvNa.jpg" alt="img" style="zoom: 50%;">
<ul>
<li>샘플코드 배포</li>
</ul>
<p>이때 중요한 부분은 SVC 생성 시 <code>service.beta.kubernetes.io/aws-load-balancer-proxy-protocol: "*"</code> 어노테이션을 활성화 하는 것이다.</p>
<div class="language-yaml" data-highlighter="prismjs" data-ext="yml" data-title="yml"><pre class="language-yaml"><code><span class="line"><span class="token comment"># 생성</span></span>
<span class="line">cat &lt;&lt;EOF <span class="token punctuation">|</span> kubectl create <span class="token punctuation">-</span>f <span class="token punctuation">-</span></span>
<span class="line"><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> apps/v1</span>
<span class="line"><span class="token key atrule">kind</span><span class="token punctuation">:</span> Deployment</span>
<span class="line"><span class="token key atrule">metadata</span><span class="token punctuation">:</span></span>
<span class="line">  <span class="token key atrule">name</span><span class="token punctuation">:</span> gasida<span class="token punctuation">-</span>web</span>
<span class="line"><span class="token key atrule">spec</span><span class="token punctuation">:</span></span>
<span class="line">  <span class="token key atrule">replicas</span><span class="token punctuation">:</span> <span class="token number">1</span></span>
<span class="line">  <span class="token key atrule">selector</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token key atrule">matchLabels</span><span class="token punctuation">:</span></span>
<span class="line">      <span class="token key atrule">app</span><span class="token punctuation">:</span> gasida<span class="token punctuation">-</span>web</span>
<span class="line">  <span class="token key atrule">template</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token key atrule">metadata</span><span class="token punctuation">:</span></span>
<span class="line">      <span class="token key atrule">labels</span><span class="token punctuation">:</span></span>
<span class="line">        <span class="token key atrule">app</span><span class="token punctuation">:</span> gasida<span class="token punctuation">-</span>web</span>
<span class="line">    <span class="token key atrule">spec</span><span class="token punctuation">:</span></span>
<span class="line">      <span class="token key atrule">terminationGracePeriodSeconds</span><span class="token punctuation">:</span> <span class="token number">0</span></span>
<span class="line">      <span class="token key atrule">containers</span><span class="token punctuation">:</span></span>
<span class="line">      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> gasida<span class="token punctuation">-</span>web</span>
<span class="line">        <span class="token key atrule">image</span><span class="token punctuation">:</span> gasida/httpd<span class="token punctuation">:</span>pp</span>
<span class="line">        <span class="token key atrule">ports</span><span class="token punctuation">:</span></span>
<span class="line">        <span class="token punctuation">-</span> <span class="token key atrule">containerPort</span><span class="token punctuation">:</span> <span class="token number">80</span></span>
<span class="line"></span></code></pre></div>]]></content:encoded>
      <enclosure url="https://raw.githubusercontent.com/hyungwook0221/img/main/uPic/9cxho8.jpg" type="image/jpeg"/>
    </item>
    <item>
      <title>AEWS 1주차 - Amzaon EKS 설치 및 기본 사용</title>
      <link>https://docmoa.github.io/07-Kubernetes/06-EKS/01-eks-deploy.html</link>
      <guid>https://docmoa.github.io/07-Kubernetes/06-EKS/01-eks-deploy.html</guid>
      <source url="https://docmoa.github.io/rss.xml">AEWS 1주차 - Amzaon EKS 설치 및 기본 사용</source>
      <description>AWS에서 공식적으로 제공되는 다양한 HOL 기반의 Workshop과 가시다님의 팀에서 2차 가공한 컨텐츠를 기반으로 진행한다.</description>
      <pubDate>Sat, 29 Apr 2023 16:00:29 GMT</pubDate>
      <content:encoded><![CDATA[
<p>이번에 연재할 스터디는 AWS EKS Workshop Study (=AEWS)이다. AWS에서 공식적으로 제공되는 다양한 HOL 기반의 Workshop과 가시다님의 팀에서 2차 가공한 컨텐츠를 기반으로 진행한다.</p>
<figure><img src="https://raw.githubusercontent.com/hyungwook0221/img/main/uPic/751VTo.jpg" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure>
<p>필자는 기본적인 스터디내용을 이번 시리즈에 연재할 예정이며, 추가적으로 HashiCorp의 Consul, Vault 등을 샘플로 배포하며 연동하는 내용을 조금씩 다뤄볼 예정이다.</p>
<h2>AWS Workshop - EKS 관련</h2>
<blockquote>
<p>참고 : AWS EKS 관련 핸즈온 워크샵을 해볼 수 있는 다양한 링크 모음이다.</p>
</blockquote>
<ul>
<li>[AWS] EKS Workshop - <a href="https://www.eksworkshop.com/" target="_blank" rel="noopener noreferrer">링크</a> / Github - <a href="https://github.com/aws-samples/eks-workshop-v2" target="_blank" rel="noopener noreferrer">링크</a> / Blog - <a href="https://aws.amazon.com/ko/blogs/containers/introducing-the-amazon-eks-workshop/" target="_blank" rel="noopener noreferrer">링크</a> / Youtube - <a href="https://www.youtube.com/@ContainersfromtheCouch" target="_blank" rel="noopener noreferrer">링크</a> <a href="https://www.youtube.com/@ContainersfromtheCouch/streams" target="_blank" rel="noopener noreferrer">Streams</a></li>
<li>[한글] EKS 웹 앱 구축 - <a href="https://catalog.us-east-1.prod.workshops.aws/workshops/9c0aa9ab-90a9-44a6-abe1-8dff360ae428/ko-KR" target="_blank" rel="noopener noreferrer">링크</a> / (Old) Amazon EKS 워크샵 - <a href="https://awskrug.github.io/eks-workshop/" target="_blank" rel="noopener noreferrer">링크</a></li>
<li>[한글/whchoi98] EKS Hands On LAB - <a href="https://awskocaptain.gitbook.io/aws-builders-eks/" target="_blank" rel="noopener noreferrer">링크</a></li>
<li>[AWS] EKS Terraform Workshop - <a href="https://tf-eks-workshop.workshop.aws/" target="_blank" rel="noopener noreferrer">링크</a> / Youtube - <a href="https://www.youtube.com/live/TXa-y-Uwh2w?feature=share" target="_blank" rel="noopener noreferrer">링크</a></li>
<li>[AWS] EKS Best Practices Guides - <a href="https://aws.github.io/aws-eks-best-practices/" target="_blank" rel="noopener noreferrer">링크</a></li>
<li>[AWS workshop studio] Running batch workloads on Amazon EKS with AWS Batch - <a href="https://catalog.us-east-1.prod.workshops.aws/workshops/b67b6665-f7a2-427f-affb-caccd087d50d/en-US" target="_blank" rel="noopener noreferrer">링크</a></li>
<li>[AWS workshop studio] Manage your EKS cluster in Full-stack with CDK - <a href="https://catalog.us-east-1.prod.workshops.aws/workshops/c15012ac-d05d-46b1-8a4a-205e7c9d93c9/en-US" target="_blank" rel="noopener noreferrer">링크</a></li>
<li>[AWS workshop studio] One Observability Workshop - <a href="https://catalog.workshops.aws/observability/en-US" target="_blank" rel="noopener noreferrer">링크</a></li>
<li>[AWS workshop studio] Web Application Hosts on EKS Workshop - <a href="https://catalog.us-east-1.prod.workshops.aws/workshops/a1101fcc-c7cf-4dd5-98c4-f599a65056d5/en-US" target="_blank" rel="noopener noreferrer">링크</a></li>
<li>[한글/AWS workshop studio] AWS General Immersion Day - <a href="https://catalog.workshops.aws/general-immersionday/ko-KR" target="_blank" rel="noopener noreferrer">링크</a></li>
<li>[한글/whchoi98] AWS IAM Hands On LAB - <a href="https://whchoi98.gitbook.io/aws-iam/" target="_blank" rel="noopener noreferrer">링크</a></li>
</ul>
<blockquote>
<p><s>여담이지만, HashiCorp 솔루션에 대한 다양한 HOL Workshop 실습도 사용자들이 많이 만들고 기여할 수 있도록 플랫폼을 오픈하면 좋을 것 같다.</s></p>
</blockquote>
<h2>Amazon EKS 소개</h2>
<figure><img src="https://static.us-east-1.prod.workshops.aws/public/e7ab9b91-502d-4ada-84e2-5c8b92d8f791/static/images/10-intro/eks_architecture.svg" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure>
<p>Amazon <strong>E</strong>lastic <strong>K</strong>ubernetes Service는 자체 Kubernetes 컨트롤 플레인 또는 노드를 설치, 운영 및 유지 관리할 필요 없이 Kubernetes 실행에 사용할 수 있는 관리형 서비스이다.</p>
<p>EKS를 사용하는 다양한 이유가 있겠지만 대표적으로 여러 AWS 서비스와 통합할 수 있다는 장점이 크다.</p>
<ul>
<li>컨테이너 이미지 저장소 Amazon ECR</li>
<li>로드 분산을 위한 ELB</li>
<li>고가용성 스토리지 서비스를 위한 EBS/EFS</li>
<li>인증 IAM</li>
<li>격리를 위한 Amazon VPC</li>
</ul>
<p>다만 단점(?)이라고 할 수 있는 부분은 지원 버전이  보통 4개의 마이너 버전 지원(현재 1.22~1.26), 평균 3개월마다 새 버전 제공, 각 버전은 12개월 정도 지원한다는 것이다. <a href="https://docs.aws.amazon.com/eks/latest/userguide/kubernetes-versions.html" target="_blank" rel="noopener noreferrer">링크</a></p>
<p>이 부분이 단점이라고 이야기하는 이유는 실제 서비스를 운영하보면 EKS 클러스터 업그레이드를 하기위한 운영조직 체계가 갖춰져 있지 않은 상황에서 강제로 EKS 구버전에 대한 업그레이드를 해야하는 상황을 직면할 수 있기 때문이다.</p>
<p>물론, 보안, 서비스 지원 등 다양한 이유로 인해 클러스터 업그레이드는 불가피하지만 때때로 업그레이드를 강제해야하는 것은 특정 서비스를 운영하는 조직에게는 큰 걸림돌이 될 수 있다.</p>
<p>기회가 된다면 이번 스터디중에 EKS 업그레이드로 인한 어려움을 겪었던 사례를 발표해보려 한다.</p>
<blockquote>
<p>참고 : EKS 업데이트 캘린더 : <a href="https://endoflife.date/amazon-eks" target="_blank" rel="noopener noreferrer">https://endoflife.date/amazon-eks</a></p>
</blockquote>
<h2>Amazon EKS 클러스터 구성 방안</h2>
<p>EKS 클러스터는 다음과 같은 방식으로 배포할 수 있다.</p>
<ul>
<li>웹 관리 콘솔</li>
<li><strong>eksctl</strong></li>
<li>기타(CDK, CloudFormation, Terraform 등)</li>
</ul>
<p>이번 EKS 스터디 시리즈에서는  <code>eksctl</code> 을 활용한 배포방식을 활용할 예정이다.</p>
<blockquote>
<p>eksctl : EKS 클러스터 구축 및 관리를 하기 위한 오프소스 명령줄 도구 - <a href="https://eksctl.io/" target="_blank" rel="noopener noreferrer">링크</a></p>
</blockquote>
<figure><img src="https://eksctl.io/img/eksctl.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure>
<h2>실습환경 구성</h2>
<p>실습환경은 외부에서 접근 가능한 Bastion 역할을 하는 EC2와  퍼블릭 서브넷 2개에 워커노드 두 대를 구성한다.</p>
<blockquote>
<p>참고 : 실습환경 변경 챕터에서 노드를 3대로 증설예정</p>
</blockquote>
<ul>
<li>실습환경 아키텍처(출처:가시다님 스터디)</li>
</ul>
<img src="https://raw.githubusercontent.com/hyungwook0221/img/main/uPic/2DsILw.jpg" alt="img" style="zoom: 33%;">
<ul>
<li>Cloudformantion을 통한 Bastion 노드 배포</li>
</ul>
<p>간단하게 VPC, Security Group, EC2 등을 구성하는 CF 코드를 통해 사전 환경을 구성한다.</p>
<div class="language-bash" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="line">aws cloudformation deploy --template-file myeks-1week.yaml <span class="token punctuation">\</span></span>
<span class="line">     --stack-name myeks --parameter-overrides <span class="token assign-left variable">KeyName</span><span class="token operator">=</span>hw-key <span class="token assign-left variable">SgIngressSshCidr</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$(</span><span class="token function">curl</span> <span class="token parameter variable">-s</span> ipinfo.io/ip<span class="token variable">)</span></span>/32 <span class="token parameter variable">--region</span> ap-northeast-2</span>
<span class="line"></span>
<span class="line">Waiting <span class="token keyword">for</span> changeset to be created<span class="token punctuation">..</span></span>
<span class="line">Waiting <span class="token keyword">for</span> stack create/update to complete</span>
<span class="line">Successfully created/updated stack - myeks</span>
<span class="line"></span>
<span class="line"><span class="token comment"># Public IP 확인</span></span>
<span class="line">aws cloudformation describe-stacks --stack-name myeks <span class="token parameter variable">--query</span> <span class="token string">'Stacks[*].Outputs[*].OutputValue'</span> <span class="token parameter variable">--output</span> text</span>
<span class="line"><span class="token number">13.124</span>.14.182</span>
<span class="line"></span>
<span class="line"><span class="token comment"># ec2 에 SSH 접속</span></span>
<span class="line"><span class="token function">ssh</span> <span class="token parameter variable">-i</span> ~/.ssh/id_rsa ec2-user@<span class="token variable"><span class="token variable">$(</span>aws cloudformation describe-stacks --stack-name myeks <span class="token parameter variable">--query</span> <span class="token string">'Stacks[*].Outputs[0].OutputValue'</span> <span class="token parameter variable">--output</span> text<span class="token variable">)</span></span></span>
<span class="line"></span></code></pre></div><ul>
<li>VPC 구성 확인</li>
</ul>
<figure><img src="https://raw.githubusercontent.com/hyungwook0221/img/main/uPic/6ulJkf.jpg" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure>
<p>필자의 경우에는 AWS IAM 계정 정책에 대한 제약사항이 있어,  <code>aws configure</code> 명령등으로 <code>access_key</code>, <code>secret_key</code> 설정을 하지않고 EC2 인스턴스에 admin 권한을 부여하여 사용하였다.</p>
<ul>
<li>Cloudformation 으로 배포한 myeks-host인스턴스에 <code>eks-admin</code> 이라고하는 admin 권한의 역할을 생성 후 부여</li>
</ul>
<figure><img src="https://raw.githubusercontent.com/hyungwook0221/img/main/uPic/eObYCj.jpg" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure>
<ul>
<li>환경변수 설정  및 EKS 클러스터 배포</li>
</ul>
<div class="language-bash" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="line"><span class="token comment"># EKS 배포할 VPC 정보 확인</span></span>
<span class="line"><span class="token builtin class-name">export</span> <span class="token assign-left variable">VPCID</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$(</span>aws ec2 describe-vpcs <span class="token parameter variable">--filters</span> <span class="token string">"Name=tag:Name,Values=<span class="token variable">$CLUSTER_NAME</span>-VPC"</span> <span class="token operator">|</span> jq <span class="token parameter variable">-r</span> .Vpcs<span class="token punctuation">[</span><span class="token punctuation">]</span>.VpcId<span class="token variable">)</span></span></span>
<span class="line"><span class="token builtin class-name">echo</span> <span class="token string">"export VPCID=<span class="token variable">$VPCID</span>"</span> <span class="token operator">&gt;&gt;</span> /etc/profile</span>
<span class="line"><span class="token builtin class-name">echo</span> VPCID</span>
<span class="line"></span>
<span class="line"><span class="token comment">## 퍼블릭 서브넷 ID 확인</span></span>
<span class="line"><span class="token builtin class-name">export</span> <span class="token assign-left variable">PubSubnet1</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$(</span>aws ec2 describe-subnets <span class="token parameter variable">--filters</span> <span class="token assign-left variable">Name</span><span class="token operator">=</span>tag:Name,Values<span class="token operator">=</span><span class="token string">"<span class="token variable">$CLUSTER_NAME</span>-PublicSubnet1"</span> <span class="token parameter variable">--query</span> <span class="token string">"Subnets[0].[SubnetId]"</span> <span class="token parameter variable">--output</span> text<span class="token variable">)</span></span></span>
<span class="line"><span class="token builtin class-name">export</span> <span class="token assign-left variable">PubSubnet2</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$(</span>aws ec2 describe-subnets <span class="token parameter variable">--filters</span> <span class="token assign-left variable">Name</span><span class="token operator">=</span>tag:Name,Values<span class="token operator">=</span><span class="token string">"<span class="token variable">$CLUSTER_NAME</span>-PublicSubnet2"</span> <span class="token parameter variable">--query</span> <span class="token string">"Subnets[0].[SubnetId]"</span> <span class="token parameter variable">--output</span> text<span class="token variable">)</span></span></span>
<span class="line"><span class="token builtin class-name">echo</span> <span class="token string">"export PubSubnet1=<span class="token variable">$PubSubnet1</span>"</span> <span class="token operator">&gt;&gt;</span> /etc/profile</span>
<span class="line"><span class="token builtin class-name">echo</span> <span class="token string">"export PubSubnet2=<span class="token variable">$PubSubnet2</span>"</span> <span class="token operator">&gt;&gt;</span> /etc/profile</span>
<span class="line"><span class="token builtin class-name">echo</span> <span class="token variable">$PubSubnet1</span></span>
<span class="line"><span class="token builtin class-name">echo</span> <span class="token variable">$PubSubnet2</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># EKS 클러스터 배포</span></span>
<span class="line">eksctl create cluster <span class="token parameter variable">--name</span> <span class="token variable">$CLUSTER_NAME</span> <span class="token parameter variable">--region</span><span class="token operator">=</span><span class="token variable">$AWS_DEFAULT_REGION</span> --nodegroup-name<span class="token operator">=</span><span class="token variable">$CLUSTER_NAME</span>-nodegroup --node-type<span class="token operator">=</span>t3.medium --node-volume-size<span class="token operator">=</span><span class="token number">30</span> --vpc-public-subnets <span class="token string">"<span class="token variable">$PubSubnet1</span>,<span class="token variable">$PubSubnet2</span>"</span> <span class="token parameter variable">--version</span> <span class="token number">1.24</span> --ssh-access --external-dns-access <span class="token parameter variable">--verbose</span> <span class="token number">4</span></span>
<span class="line"></span></code></pre></div><p>EKS 클러스터를 명령형으로 배포하지 않고 YAML로 작성하여 언언적으로 배포하는 것도 가능하다. 다음은 앞서 실행한 <code>eksctl create cluster</code> 명령의 <code> --dry-run</code> 옵션을 통해 추출한 명세이다.</p>
<ul>
<li>myeks-sample.yaml</li>
</ul>
<div class="language-yaml" data-highlighter="prismjs" data-ext="yml" data-title="yml"><pre class="language-yaml"><code><span class="line"><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> eksctl.io/v1alpha5</span>
<span class="line"><span class="token key atrule">cloudWatch</span><span class="token punctuation">:</span></span>
<span class="line">  <span class="token key atrule">clusterLogging</span><span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span>
<span class="line"><span class="token key atrule">iam</span><span class="token punctuation">:</span></span>
<span class="line">  <span class="token key atrule">vpcResourceControllerPolicy</span><span class="token punctuation">:</span> <span class="token boolean important">true</span></span>
<span class="line">  <span class="token key atrule">withOIDC</span><span class="token punctuation">:</span> <span class="token boolean important">false</span></span>
<span class="line"><span class="token key atrule">kind</span><span class="token punctuation">:</span> ClusterConfig</span>
<span class="line"><span class="token key atrule">kubernetesNetworkConfig</span><span class="token punctuation">:</span></span>
<span class="line">  <span class="token key atrule">ipFamily</span><span class="token punctuation">:</span> IPv4</span>
<span class="line"><span class="token key atrule">managedNodeGroups</span><span class="token punctuation">:</span></span>
<span class="line"><span class="token punctuation">-</span> <span class="token key atrule">amiFamily</span><span class="token punctuation">:</span> AmazonLinux2</span>
<span class="line">  <span class="token key atrule">desiredCapacity</span><span class="token punctuation">:</span> <span class="token number">2</span></span>
<span class="line">  <span class="token key atrule">disableIMDSv1</span><span class="token punctuation">:</span> <span class="token boolean important">false</span></span>
<span class="line">  <span class="token key atrule">disablePodIMDS</span><span class="token punctuation">:</span> <span class="token boolean important">false</span></span>
<span class="line">  <span class="token key atrule">iam</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token key atrule">withAddonPolicies</span><span class="token punctuation">:</span></span>
<span class="line">      <span class="token key atrule">albIngress</span><span class="token punctuation">:</span> <span class="token boolean important">false</span></span>
<span class="line">      <span class="token key atrule">appMesh</span><span class="token punctuation">:</span> <span class="token boolean important">false</span></span>
<span class="line">      <span class="token key atrule">appMeshPreview</span><span class="token punctuation">:</span> <span class="token boolean important">false</span></span>
<span class="line">      <span class="token key atrule">autoScaler</span><span class="token punctuation">:</span> <span class="token boolean important">false</span></span>
<span class="line">      <span class="token key atrule">awsLoadBalancerController</span><span class="token punctuation">:</span> <span class="token boolean important">false</span></span>
<span class="line">      <span class="token key atrule">certManager</span><span class="token punctuation">:</span> <span class="token boolean important">false</span></span>
<span class="line">      <span class="token key atrule">cloudWatch</span><span class="token punctuation">:</span> <span class="token boolean important">false</span></span>
<span class="line">      <span class="token key atrule">ebs</span><span class="token punctuation">:</span> <span class="token boolean important">false</span></span>
<span class="line">      <span class="token key atrule">efs</span><span class="token punctuation">:</span> <span class="token boolean important">false</span></span>
<span class="line">      <span class="token key atrule">externalDNS</span><span class="token punctuation">:</span> <span class="token boolean important">true</span></span>
<span class="line">      <span class="token key atrule">fsx</span><span class="token punctuation">:</span> <span class="token boolean important">false</span></span>
<span class="line">      <span class="token key atrule">imageBuilder</span><span class="token punctuation">:</span> <span class="token boolean important">false</span></span>
<span class="line">      <span class="token key atrule">xRay</span><span class="token punctuation">:</span> <span class="token boolean important">false</span></span>
<span class="line">  <span class="token key atrule">instanceSelector</span><span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span>
<span class="line">  <span class="token key atrule">instanceType</span><span class="token punctuation">:</span> t3.medium</span>
<span class="line">  <span class="token key atrule">labels</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token key atrule">alpha.eksctl.io/cluster-name</span><span class="token punctuation">:</span> myeks</span>
<span class="line">    <span class="token key atrule">alpha.eksctl.io/nodegroup-name</span><span class="token punctuation">:</span> myeks<span class="token punctuation">-</span>nodegroup</span>
<span class="line">  <span class="token key atrule">maxSize</span><span class="token punctuation">:</span> <span class="token number">2</span></span>
<span class="line">  <span class="token key atrule">minSize</span><span class="token punctuation">:</span> <span class="token number">2</span></span>
<span class="line">  <span class="token key atrule">name</span><span class="token punctuation">:</span> myeks<span class="token punctuation">-</span>nodegroup</span>
<span class="line">  <span class="token key atrule">privateNetworking</span><span class="token punctuation">:</span> <span class="token boolean important">false</span></span>
<span class="line">  <span class="token key atrule">releaseVersion</span><span class="token punctuation">:</span> <span class="token string">""</span></span>
<span class="line">  <span class="token key atrule">securityGroups</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token key atrule">withLocal</span><span class="token punctuation">:</span> <span class="token null important">null</span></span>
<span class="line">    <span class="token key atrule">withShared</span><span class="token punctuation">:</span> <span class="token null important">null</span></span>
<span class="line">  <span class="token key atrule">ssh</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token key atrule">allow</span><span class="token punctuation">:</span> <span class="token boolean important">true</span></span>
<span class="line">    <span class="token key atrule">publicKeyPath</span><span class="token punctuation">:</span> ~/.ssh/id_rsa.pub</span>
<span class="line">  <span class="token key atrule">tags</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token key atrule">alpha.eksctl.io/nodegroup-name</span><span class="token punctuation">:</span> myeks<span class="token punctuation">-</span>nodegroup</span>
<span class="line">    <span class="token key atrule">alpha.eksctl.io/nodegroup-type</span><span class="token punctuation">:</span> managed</span>
<span class="line">  <span class="token key atrule">volumeIOPS</span><span class="token punctuation">:</span> <span class="token number">3000</span></span>
<span class="line">  <span class="token key atrule">volumeSize</span><span class="token punctuation">:</span> <span class="token number">30</span></span>
<span class="line">  <span class="token key atrule">volumeThroughput</span><span class="token punctuation">:</span> <span class="token number">125</span></span>
<span class="line">  <span class="token key atrule">volumeType</span><span class="token punctuation">:</span> gp3</span>
<span class="line"><span class="token key atrule">metadata</span><span class="token punctuation">:</span></span>
<span class="line">  <span class="token key atrule">name</span><span class="token punctuation">:</span> myeks</span>
<span class="line">  <span class="token key atrule">region</span><span class="token punctuation">:</span> ap<span class="token punctuation">-</span>northeast<span class="token punctuation">-</span><span class="token number">2</span></span>
<span class="line">  <span class="token key atrule">version</span><span class="token punctuation">:</span> <span class="token string">"1.24"</span></span>
<span class="line"><span class="token key atrule">privateCluster</span><span class="token punctuation">:</span></span>
<span class="line">  <span class="token key atrule">enabled</span><span class="token punctuation">:</span> <span class="token boolean important">false</span></span>
<span class="line">  <span class="token key atrule">skipEndpointCreation</span><span class="token punctuation">:</span> <span class="token boolean important">false</span></span>
<span class="line"><span class="token key atrule">vpc</span><span class="token punctuation">:</span></span>
<span class="line">  <span class="token key atrule">autoAllocateIPv6</span><span class="token punctuation">:</span> <span class="token boolean important">false</span></span>
<span class="line">  <span class="token key atrule">cidr</span><span class="token punctuation">:</span> 192.168.0.0/16</span>
<span class="line">  <span class="token key atrule">clusterEndpoints</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token key atrule">privateAccess</span><span class="token punctuation">:</span> <span class="token boolean important">false</span></span>
<span class="line">    <span class="token key atrule">publicAccess</span><span class="token punctuation">:</span> <span class="token boolean important">true</span></span>
<span class="line">  <span class="token key atrule">id</span><span class="token punctuation">:</span> vpc<span class="token punctuation">-</span>0521fc003559b2f2c</span>
<span class="line">  <span class="token key atrule">manageSharedNodeSecurityGroupRules</span><span class="token punctuation">:</span> <span class="token boolean important">true</span></span>
<span class="line">  <span class="token key atrule">nat</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token key atrule">gateway</span><span class="token punctuation">:</span> Disable</span>
<span class="line">  <span class="token key atrule">subnets</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token key atrule">public</span><span class="token punctuation">:</span></span>
<span class="line">      <span class="token key atrule">ap-northeast-2a</span><span class="token punctuation">:</span></span>
<span class="line">        <span class="token key atrule">az</span><span class="token punctuation">:</span> ap<span class="token punctuation">-</span>northeast<span class="token punctuation">-</span>2a</span>
<span class="line">        <span class="token key atrule">cidr</span><span class="token punctuation">:</span> 192.168.1.0/24</span>
<span class="line">        <span class="token key atrule">id</span><span class="token punctuation">:</span> subnet<span class="token punctuation">-</span>0fdff27653277aaf0</span>
<span class="line">      <span class="token key atrule">ap-northeast-2c</span><span class="token punctuation">:</span></span>
<span class="line">        <span class="token key atrule">az</span><span class="token punctuation">:</span> ap<span class="token punctuation">-</span>northeast<span class="token punctuation">-</span>2c</span>
<span class="line">        <span class="token key atrule">cidr</span><span class="token punctuation">:</span> 192.168.2.0/24</span>
<span class="line">        <span class="token key atrule">id</span><span class="token punctuation">:</span> subnet<span class="token punctuation">-</span>084a8752d4c7ddf6c</span>
<span class="line"></span></code></pre></div><ul>
<li>EKS 클러스터 배포 확인</li>
</ul>
<p>정상적으로 클러스터가 구성된 것을 확인할 수 있다.</p>
<div class="language-bash" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="line"><span class="token comment"># eks클러스터 확인</span></span>
<span class="line">eksctl get cluster</span>
<span class="line">NAME	REGION		EKSCTL CREATED</span>
<span class="line">myeks	ap-northeast-2	True</span>
<span class="line"></span>
<span class="line"><span class="token comment"># 노드확인</span></span>
<span class="line">kubectl get <span class="token function">node</span> <span class="token parameter variable">-v</span><span class="token operator">=</span><span class="token number">6</span></span>
<span class="line">I0423 <span class="token number">22</span>:10:48.050969    <span class="token number">2339</span> loader.go:374<span class="token punctuation">]</span> Config loaded from file:  /root/.kube/config</span>
<span class="line"></span>
<span class="line">I0423 <span class="token number">22</span>:10:48.880262    <span class="token number">2339</span> round_trippers.go:553<span class="token punctuation">]</span> GET https://6E205513BA73EEBC3CA693BADEEC5294.gr7.ap-northeast-2.eks.amazonaws.com/api/v1/nodes?limit<span class="token operator">=</span><span class="token number">500</span> <span class="token number">200</span> OK <span class="token keyword">in</span> <span class="token number">819</span> milliseconds</span>
<span class="line">NAME                                               STATUS   ROLES    AGE   VERSION</span>
<span class="line">ip-192-168-1-139.ap-northeast-2.compute.internal   Ready    <span class="token operator">&lt;</span>none<span class="token operator">&gt;</span>   61m   v1.24.11-eks-a59e1f0</span>
<span class="line">ip-192-168-2-225.ap-northeast-2.compute.internal   Ready    <span class="token operator">&lt;</span>none<span class="token operator">&gt;</span>   61m   v1.24.11-eks-a59e1f0</span>
<span class="line"></span>
<span class="line"><span class="token comment"># 파드확인</span></span>
<span class="line">k get pods <span class="token parameter variable">-A</span></span>
<span class="line">NAMESPACE     NAME                      READY   STATUS    RESTARTS   AGE</span>
<span class="line">kube-system   aws-node-2bpxr            <span class="token number">1</span>/1     Running   <span class="token number">0</span>          62m</span>
<span class="line">kube-system   aws-node-s7p5b            <span class="token number">1</span>/1     Running   <span class="token number">0</span>          62m</span>
<span class="line">kube-system   coredns-dc4979556-knkkh   <span class="token number">1</span>/1     Running   <span class="token number">0</span>          68m</span>
<span class="line">kube-system   coredns-dc4979556-m789b   <span class="token number">1</span>/1     Running   <span class="token number">0</span>          68m</span>
<span class="line">kube-system   kube-proxy-lkp8f          <span class="token number">1</span>/1     Running   <span class="token number">0</span>          62m</span>
<span class="line">kube-system   kube-proxy-z6hbk          <span class="token number">1</span>/1     Running   <span class="token number">0</span>          62m</span>
<span class="line"></span></code></pre></div><blockquote>
<p>참고 : <code>eksctl</code> 명령 예제</p>
</blockquote>
<div class="language-bash" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="line"><span class="token comment"># eksctl help</span></span>
<span class="line">eksctl</span>
<span class="line">eksctl create</span>
<span class="line">eksctl create cluster <span class="token parameter variable">--help</span></span>
<span class="line">eksctl create nodegroup <span class="token parameter variable">--help</span></span>
<span class="line"></span></code></pre></div><h2>실습환경 변경</h2>
<p>앞선 과정을 통해 실습을 위한 클러스터 구성이 완성되었다. 필자는 향후 샘플 애플리케이션으로 Vault, Consul 등을 배포할 예정이다. 때문에, 최소 3대 이상의 노드가 필요하여 기본 실습 노드를 3대로 구성한다.</p>
<p>EKS는 <code>nodegraup</code> 개수의 최소/최대 개수를 선언적으로 관리할 수 있다. 다음은 노드 개수를 변경/확인 하는 방법이다.</p>
<div class="language-bash" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="line"><span class="token comment"># eks 노드 그룹 정보 확인</span></span>
<span class="line">eksctl get nodegroup <span class="token parameter variable">--cluster</span> <span class="token variable">$CLUSTER_NAME</span> <span class="token parameter variable">--name</span> <span class="token variable">$CLUSTER_NAME</span>-nodegroup</span>
<span class="line">CLUSTER	NODEGROUP	STATUS		CREATED			MIN SIZE	MAX SIZE	DESIRED CAPACITY	<span class="token environment constant">INSTANCE</span> TYPE	IMAGE ID	ASG NAME							TYPE</span>
<span class="line">myeks	myeks-nodegroup	UPDATING	<span class="token number">2023</span>-04-23T12:07:57Z	<span class="token number">2</span>		<span class="token number">2</span>		<span class="token number">2</span>			t3.medium	AL2_x86_64	eks-myeks-nodegroup-fcc3d701-b90a-9c83-7907-fca8459770b9	managed</span>
<span class="line"></span>
<span class="line"><span class="token comment"># 노드 2개 → 3개 증가</span></span>
<span class="line">eksctl scale nodegroup <span class="token parameter variable">--cluster</span> <span class="token variable">$CLUSTER_NAME</span> <span class="token parameter variable">--name</span> <span class="token variable">$CLUSTER_NAME</span>-nodegroup <span class="token parameter variable">--nodes</span> <span class="token number">3</span> --nodes-min <span class="token number">3</span> --nodes-max <span class="token number">6</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># 노드 그룹 변경 확인</span></span>
<span class="line">eksctl get nodegroup <span class="token parameter variable">--cluster</span> myeks <span class="token parameter variable">--region</span> ap-northeast-2 <span class="token parameter variable">--name</span> myeks-nodegroup</span>
<span class="line">CLUSTER	NODEGROUP	STATUS		CREATED			MIN SIZE	MAX SIZE	DESIRED CAPACITY	<span class="token environment constant">INSTANCE</span> TYPE	IMAGE ID	ASG NAME							TYPE</span>
<span class="line">myeks	myeks-nodegroup	UPDATING	<span class="token number">2023</span>-04-23T12:07:57Z	<span class="token number">3</span>		<span class="token number">6</span>		<span class="token number">3</span>			t3.medium	AL2_x86_64	eks-myeks-nodegroup-fcc3d701-b90a-9c83-7907-fca8459770b9	managed</span>
<span class="line"></span>
<span class="line"><span class="token comment"># 노드 확인</span></span>
<span class="line">kubectl get nodes <span class="token parameter variable">-o</span> wide</span>
<span class="line"></span>
<span class="line">NAME                                               STATUS   ROLES    AGE    VERSION                INTERNAL-IP     EXTERNAL-IP      OS-IMAGE         KERNEL-VERSION                  CONTAINER-RUNTIME</span>
<span class="line">ip-192-168-1-139.ap-northeast-2.compute.internal   Ready    <span class="token operator">&lt;</span>none<span class="token operator">&gt;</span>   150m   v1.24.11-eks-a59e1f0   <span class="token number">192.168</span>.1.139   <span class="token number">43.201</span>.51.34     Amazon Linux <span class="token number">2</span>   <span class="token number">5.10</span>.176-157.645.amzn2.x86_64   containerd://1.6.19</span>
<span class="line">ip-192-168-1-76.ap-northeast-2.compute.internal    Ready    <span class="token operator">&lt;</span>none<span class="token operator">&gt;</span>   53s    v1.24.11-eks-a59e1f0   <span class="token number">192.168</span>.1.76    <span class="token number">13.124</span>.158.208   Amazon Linux <span class="token number">2</span>   <span class="token number">5.10</span>.176-157.645.amzn2.x86_64   containerd://1.6.19</span>
<span class="line">ip-192-168-2-225.ap-northeast-2.compute.internal   Ready    <span class="token operator">&lt;</span>none<span class="token operator">&gt;</span>   150m   v1.24.11-eks-a59e1f0   <span class="token number">192.168</span>.2.225   <span class="token number">52.79</span>.236.227    Amazon Linux <span class="token number">2</span>   <span class="token number">5.10</span>.176-157.645.amzn2.x86_64   containerd://1.6.19</span>
<span class="line"></span>
<span class="line">kubectl get nodes <span class="token parameter variable">-l</span> eks.amazonaws.com/nodegroup<span class="token operator">=</span><span class="token variable">$CLUSTER_NAME</span>-nodegroup</span>
<span class="line">NAME                                               STATUS   ROLES    AGE    VERSION</span>
<span class="line">ip-192-168-1-139.ap-northeast-2.compute.internal   Ready    <span class="token operator">&lt;</span>none<span class="token operator">&gt;</span>   150m   v1.24.11-eks-a59e1f0</span>
<span class="line">ip-192-168-1-76.ap-northeast-2.compute.internal    Ready    <span class="token operator">&lt;</span>none<span class="token operator">&gt;</span>   74s    v1.24.11-eks-a59e1f0</span>
<span class="line">ip-192-168-2-225.ap-northeast-2.compute.internal   Ready    <span class="token operator">&lt;</span>none<span class="token operator">&gt;</span>   150m   v1.24.11-eks-a59e1f0</span>
<span class="line"></span></code></pre></div><h2>샘플 애플리케이션 배포</h2>
<p>필자는 본 글을 작성하던 시기에 고객사 환경에 ArgoCD + Helm을 기반으로 Consul Cluster 구성 테스트 요청이 있어 해당 클러스터를 활용해 보았다.</p>
<figure><img src="https://raw.githubusercontent.com/hyungwook0221/img/main/uPic/helm_argo.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure>
<h3>ArgoCD 배포</h3>
<blockquote>
<p>참고 : PKOS 2기에 사용한 ArgoCD 배포 가이드를 참고하여 배포한다.</p>
</blockquote>
<ul>
<li>argocd-application-controller : 실행 중인 k8s 애플리케이션의 설정과 깃 저장소의 소스 파일에 선언된 상태를 서로 비교하는 컨트롤러. 상태와 다르면 <code>OutOfSync</code> 에러를 출력.</li>
<li>argocd-dex-server : 외부 사용자의 LDAP 인증에 Dex 서버를 사용할 수 있음</li>
<li>argocd-repo-server : 원격 깃 저장소의 소스 코드를 아르고시디 내부 캐시 서버에 저장합니다. 디렉토리 경로, 소스, 헬름 차트 등이 저장.</li>
</ul>
<div class="language-bash" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="line"><span class="token comment"># 네임스페이스 생성</span></span>
<span class="line">kubectl create ns argocd</span>
<span class="line"></span>
<span class="line"><span class="token comment"># argocd-helm 설치</span></span>
<span class="line"><span class="token builtin class-name">cd</span></span>
<span class="line">helm repo <span class="token function">add</span> argo https://argoproj.github.io/argo-helm</span>
<span class="line">helm repo update</span>
<span class="line">helm <span class="token function">install</span> argocd argo/argo-cd <span class="token parameter variable">--set</span> <span class="token assign-left variable">server.service.type</span><span class="token operator">=</span>LoadBalancer <span class="token parameter variable">--namespace</span> argocd <span class="token parameter variable">--version</span> <span class="token number">5.19</span>.14</span>
<span class="line"></span>
<span class="line"><span class="token comment"># 확인</span></span>
<span class="line">helm list <span class="token parameter variable">-n</span> argocd</span>
<span class="line">kubectl get pod,pvc,svc,deploy,sts <span class="token parameter variable">-n</span> argocd</span>
<span class="line">kubectl get-all <span class="token parameter variable">-n</span> argocd</span>
<span class="line"></span>
<span class="line">kubectl get crd <span class="token operator">|</span> <span class="token function">grep</span> argoproj</span>
<span class="line">applications.argoproj.io              <span class="token number">2023</span>-03-19T11:39:26Z</span>
<span class="line">applicationsets.argoproj.io           <span class="token number">2023</span>-03-19T11:39:26Z</span>
<span class="line">appprojects.argoproj.io               <span class="token number">2023</span>-03-19T11:39:26Z</span>
<span class="line"></span>
<span class="line"><span class="token comment"># admin 계정의 암호 확인</span></span>
<span class="line"><span class="token assign-left variable">ARGOPW</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$(</span>kubectl <span class="token parameter variable">-n</span> argocd get secret argocd-initial-admin-secret <span class="token parameter variable">-o</span> <span class="token assign-left variable">jsonpath</span><span class="token operator">=</span><span class="token string">"{.data.password}"</span> <span class="token operator">|</span> base64 <span class="token parameter variable">-d</span><span class="token variable">)</span></span></span>
<span class="line"><span class="token builtin class-name">echo</span> <span class="token variable">$ARGOPW</span></span>
<span class="line">mf8bOtNEq7iHMqq1</span>
<span class="line"></span>
<span class="line"><span class="token comment"># 웹 접속 로그인 (admin) CLB의 hostname으로 접속</span></span>
<span class="line">k get svc <span class="token parameter variable">-n</span> argocd argocd-server <span class="token parameter variable">-o</span> <span class="token assign-left variable">jsonpath</span><span class="token operator">=</span><span class="token string">'{.status.loadBalancer.ingress[].hostname}'</span></span>
<span class="line"></span></code></pre></div><ul>
<li>ArgoCD Web UI 화면</li>
</ul>
<figure><img src="https://raw.githubusercontent.com/hyungwook0221/img/main/uPic/T5kZFT.jpg" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure>
<h3>GitHub 저장소 준비</h3>
<blockquote>
<p>필자는 개인 GitHub에 <a href="https://github.com/chosam2/gitops" target="_blank" rel="noopener noreferrer">개인 퍼블릭 저장소</a>를 만들어서 실습을 진행하였다.</p>
</blockquote>
<p>사전에 로컬에서 다운로드 받은 Consul Helm Chart 파일에 새로 재정의 할 values 파일을 GitHub 저장소에 업로드 한다.</p>
<figure><img src="https://raw.githubusercontent.com/hyungwook0221/img/main/uPic/aY0au9.jpg" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure>
<ul>
<li>override-values.yaml</li>
</ul>
<blockquote>
<p>참고 : 다음은 실제 작성된 Values 파일이다. 각 항목에 대한 상세한 설명은 향후 <strong>Consul Deploy on K8s</strong> 가이드를 작성해서 업로드 예정이다.</p>
</blockquote>
<div class="language-yaml" data-highlighter="prismjs" data-ext="yml" data-title="yml"><pre class="language-yaml"><code><span class="line"><span class="token key atrule">client</span><span class="token punctuation">:</span></span>
<span class="line">  <span class="token key atrule">grpc</span><span class="token punctuation">:</span> <span class="token boolean important">true</span></span>
<span class="line"><span class="token key atrule">connectInject</span><span class="token punctuation">:</span></span>
<span class="line">  <span class="token key atrule">consulNamespaces</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token key atrule">mirroringK8S</span><span class="token punctuation">:</span> <span class="token boolean important">true</span></span>
<span class="line">  <span class="token key atrule">enabled</span><span class="token punctuation">:</span> <span class="token boolean important">true</span></span>
<span class="line"><span class="token key atrule">controller</span><span class="token punctuation">:</span></span>
<span class="line">  <span class="token key atrule">enabled</span><span class="token punctuation">:</span> <span class="token boolean important">true</span></span>
<span class="line"><span class="token key atrule">global</span><span class="token punctuation">:</span></span>
<span class="line">  <span class="token key atrule">acls</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token key atrule">manageSystemACLs</span><span class="token punctuation">:</span> <span class="token boolean important">true</span></span>
<span class="line">  <span class="token key atrule">enableConsulNamespaces</span><span class="token punctuation">:</span> <span class="token boolean important">true</span></span>
<span class="line">  <span class="token key atrule">enterpriseLicense</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token key atrule">secretKey</span><span class="token punctuation">:</span> key</span>
<span class="line">    <span class="token key atrule">secretName</span><span class="token punctuation">:</span> license</span>
<span class="line">  <span class="token key atrule">gossipEncryption</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token key atrule">autoGenerate</span><span class="token punctuation">:</span> <span class="token boolean important">true</span></span>
<span class="line">  <span class="token key atrule">image</span><span class="token punctuation">:</span> hashicorp/consul<span class="token punctuation">-</span>enterprise<span class="token punctuation">:</span>1.13.7<span class="token punctuation">-</span>ent</span>
<span class="line">  <span class="token key atrule">imageEnvoy</span><span class="token punctuation">:</span> envoyproxy/envoy<span class="token punctuation">:</span>v1.22.5</span>
<span class="line">  <span class="token key atrule">imageK8S</span><span class="token punctuation">:</span> hashicorp/consul<span class="token punctuation">-</span>k8s<span class="token punctuation">-</span>control<span class="token punctuation">-</span>plane<span class="token punctuation">:</span>0.49.5</span>
<span class="line">  <span class="token key atrule">metrics</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token key atrule">enabled</span><span class="token punctuation">:</span> <span class="token boolean important">false</span></span>
<span class="line">  <span class="token key atrule">tls</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token key atrule">enableAutoEncrypt</span><span class="token punctuation">:</span> <span class="token boolean important">true</span></span>
<span class="line">    <span class="token key atrule">enabled</span><span class="token punctuation">:</span> <span class="token boolean important">true</span></span>
<span class="line">    <span class="token key atrule">httpsOnly</span><span class="token punctuation">:</span> <span class="token boolean important">false</span></span>
<span class="line">    <span class="token key atrule">verify</span><span class="token punctuation">:</span> <span class="token boolean important">false</span></span>
<span class="line"><span class="token key atrule">ingressGateways</span><span class="token punctuation">:</span></span>
<span class="line">  <span class="token key atrule">defaults</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token key atrule">replicas</span><span class="token punctuation">:</span> <span class="token number">1</span></span>
<span class="line">    <span class="token key atrule">service</span><span class="token punctuation">:</span></span>
<span class="line">      <span class="token key atrule">type</span><span class="token punctuation">:</span> LoadBalancer</span>
<span class="line">  <span class="token key atrule">enabled</span><span class="token punctuation">:</span> <span class="token boolean important">true</span></span>
<span class="line">  <span class="token key atrule">gateways</span><span class="token punctuation">:</span></span>
<span class="line">  <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> ingress<span class="token punctuation">-</span>gateway</span>
<span class="line"><span class="token key atrule">meshGateway</span><span class="token punctuation">:</span></span>
<span class="line">  <span class="token key atrule">enabled</span><span class="token punctuation">:</span> <span class="token boolean important">false</span></span>
<span class="line">  <span class="token key atrule">replicas</span><span class="token punctuation">:</span> <span class="token number">1</span></span>
<span class="line">  <span class="token key atrule">service</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token key atrule">enabled</span><span class="token punctuation">:</span> <span class="token boolean important">true</span></span>
<span class="line">    <span class="token key atrule">nodePort</span><span class="token punctuation">:</span> <span class="token number">32000</span></span>
<span class="line">    <span class="token key atrule">type</span><span class="token punctuation">:</span> NodePort</span>
<span class="line"><span class="token key atrule">server</span><span class="token punctuation">:</span></span>
<span class="line">  <span class="token key atrule">replicas</span><span class="token punctuation">:</span> <span class="token number">3</span></span>
<span class="line"><span class="token key atrule">terminatingGateways</span><span class="token punctuation">:</span></span>
<span class="line">  <span class="token key atrule">defaults</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token key atrule">replicas</span><span class="token punctuation">:</span> <span class="token number">1</span></span>
<span class="line">  <span class="token key atrule">enabled</span><span class="token punctuation">:</span> <span class="token boolean important">false</span></span>
<span class="line"><span class="token key atrule">ui</span><span class="token punctuation">:</span></span>
<span class="line">  <span class="token key atrule">enabled</span><span class="token punctuation">:</span> <span class="token boolean important">true</span></span>
<span class="line">  <span class="token key atrule">service</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token key atrule">port</span><span class="token punctuation">:</span></span>
<span class="line">      <span class="token key atrule">http</span><span class="token punctuation">:</span> <span class="token number">80</span></span>
<span class="line">      <span class="token key atrule">https</span><span class="token punctuation">:</span> <span class="token number">443</span></span>
<span class="line">    <span class="token key atrule">type</span><span class="token punctuation">:</span> LoadBalance</span>
<span class="line"></span></code></pre></div><h3>ArgoCD + GitHub 연동</h3>
<p>ArgoCD CLI를 통해 필자의 GitHub을 연동한다</p>
<div class="language-bash" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="line">argocd login <span class="token operator">&lt;</span>argocd 주소<span class="token operator">&gt;</span> <span class="token parameter variable">--username</span> admin <span class="token parameter variable">--password</span> <span class="token variable">$ARGOPW</span></span>
<span class="line"><span class="token punctuation">..</span>.</span>
<span class="line"><span class="token string">'admin:login'</span> logged <span class="token keyword">in</span> successfully</span>
<span class="line"></span>
<span class="line">argocd repo <span class="token function">add</span> https://github.com/<span class="token operator">&lt;</span>깃헙 계정명<span class="token operator">&gt;</span>/<span class="token operator">&lt;</span>레파지토리명<span class="token operator">&gt;</span> <span class="token parameter variable">--username</span> <span class="token operator">&lt;</span>깃헙 계정명<span class="token operator">&gt;</span> <span class="token parameter variable">--password</span> <span class="token operator">&lt;</span>깃헙 계정 암호<span class="token operator">&gt;</span></span>
<span class="line"> </span>
<span class="line">argocd repo list</span>
<span class="line">TYPE  NAME  REPO                                   INSECURE  OCI    LFS    CREDS  STATUS      MESSAGE  PROJECT</span>
<span class="line"><span class="token function">git</span>         https://github.com/chosam2/gitops.git  <span class="token boolean">false</span>     <span class="token boolean">false</span>  <span class="token boolean">false</span>  <span class="token boolean">true</span>   Successful</span>
<span class="line"></span>
<span class="line"><span class="token comment"># 기본적으로 아르고시디가 설치된 쿠버네티스 클러스터는 타깃 클러스터로 등록됨</span></span>
<span class="line">argocd cluster list</span>
<span class="line">SERVER                          NAME        VERSION  STATUS      MESSAGE  PROJECT</span>
<span class="line">https://kubernetes.default.svc  in-cluster  <span class="token number">1.24</span>+    Successful</span>
<span class="line"></span></code></pre></div><h3>ArgoCD Application 생성 및 배포</h3>
<p>앞서 생성한 GitHub 저장소에 업로드한 consul helm values 파일을 통해 배포하기 위해 <code>Application</code> CRD를 생성 및 배포한다.</p>
<ul>
<li><code>consul-helm-argo-application.yaml</code></li>
</ul>
<div class="language-yaml" data-highlighter="prismjs" data-ext="yml" data-title="yml"><pre class="language-yaml"><code><span class="line"><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> argoproj.io/v1alpha1</span>
<span class="line"><span class="token key atrule">kind</span><span class="token punctuation">:</span> Application</span>
<span class="line"><span class="token key atrule">metadata</span><span class="token punctuation">:</span></span>
<span class="line">  <span class="token key atrule">name</span><span class="token punctuation">:</span> consul<span class="token punctuation">-</span>helm</span>
<span class="line">  <span class="token key atrule">namespace</span><span class="token punctuation">:</span> argocd</span>
<span class="line">  <span class="token key atrule">finalizers</span><span class="token punctuation">:</span></span>
<span class="line">  <span class="token punctuation">-</span> resources<span class="token punctuation">-</span>finalizer.argocd.argoproj.io</span>
<span class="line"><span class="token key atrule">spec</span><span class="token punctuation">:</span></span>
<span class="line">  <span class="token key atrule">destination</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token key atrule">namespace</span><span class="token punctuation">:</span> consul</span>
<span class="line">    <span class="token key atrule">server</span><span class="token punctuation">:</span> https<span class="token punctuation">:</span>//kubernetes.default.svc</span>
<span class="line">  <span class="token key atrule">project</span><span class="token punctuation">:</span> default</span>
<span class="line">  <span class="token key atrule">source</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token key atrule">repoURL</span><span class="token punctuation">:</span> https<span class="token punctuation">:</span>//github.com/chosam2/gitops.git</span>
<span class="line">    <span class="token key atrule">path</span><span class="token punctuation">:</span> argocd</span>
<span class="line">    <span class="token key atrule">targetRevision</span><span class="token punctuation">:</span> main</span>
<span class="line">    <span class="token key atrule">helm</span><span class="token punctuation">:</span></span>
<span class="line">      <span class="token key atrule">valueFiles</span><span class="token punctuation">:</span></span>
<span class="line">      <span class="token punctuation">-</span> override<span class="token punctuation">-</span>values.yaml</span>
<span class="line">  <span class="token key atrule">syncPolicy</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token key atrule">syncOptions</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token punctuation">-</span> CreateNamespace=true</span>
<span class="line"></span></code></pre></div><ul>
<li>Application CRD 배포</li>
</ul>
<div class="language-bash" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="line">k apply <span class="token parameter variable">-f</span> consul-helm-argo-application.yaml</span>
<span class="line">application.argoproj.io/consul-helm created</span>
<span class="line"></span></code></pre></div><p>최초 배포 시 <code>OutOfSync</code> 상태로 배포되었지만, 동기화 버튼을 클릭하여 강제로 동기화해준 뒤 정상적으로 배포된 것을 확인할 수 있다.<br>
다만, 최초 <code>OutOfSync</code> 상태로 배포되는 부분에 대해서는 Application YAML 작성 시 옵션을 통해 해결이 가능하지만, 실제 운영시 영향도 체크가 필요해 보인다. 이 부분은 다음 블로깅시에 조금 더 테스트 및 확인해볼 예정이다.</p>
<ul>
<li>최초 구성 후 OutOfSync 상태</li>
</ul>
<figure><img src="https://raw.githubusercontent.com/hyungwook0221/img/main/uPic/argo_구조.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure>
<ul>
<li>강제 동기화 이후 Sync 된 화면</li>
</ul>
<figure><img src="https://raw.githubusercontent.com/hyungwook0221/img/main/uPic/argo_구조2.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure>
<ul>
<li>실제 배포된 Consul UI 화면</li>
</ul>
<figure><img src="https://raw.githubusercontent.com/hyungwook0221/img/main/uPic/ejor4D.jpg" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure>
<h2>마무리</h2>
<p>1주차 스터디는 EKS에 대한 전반적인 컨셉과 기본적으로 클러스터를 구성하고 Consul Cluster를 간단하게 배포해보았다. 다음주에는 네트워킹을 주제로 찾아올 예정이다.</p>
]]></content:encoded>
      <enclosure url="https://raw.githubusercontent.com/hyungwook0221/img/main/uPic/751VTo.jpg" type="image/jpeg"/>
    </item>
    <item>
      <title>2023년 5월</title>
      <link>https://docmoa.github.io/04-HashiCorp/08-Updates/98-2023/2023-05.html</link>
      <guid>https://docmoa.github.io/04-HashiCorp/08-Updates/98-2023/2023-05.html</guid>
      <source url="https://docmoa.github.io/rss.xml">2023년 5월</source>
      <description>2023년 5월 Update</description>
      <pubDate>Wed, 26 Apr 2023 06:03:54 GMT</pubDate>
      <content:encoded><![CDATA[
<h2>Product 소개</h2>
<ul>
<li>
<p>Vault Secrets Operator: A new method for Kubernetes integration</p>
<ul>
<li><a href="https://www.hashicorp.com/blog/vault-secrets-operator-a-new-method-for-kubernetes-integration" target="_blank" rel="noopener noreferrer">Hashicorp Blog</a></li>
<li>K8S Cluster 의 Secret 을 CRD (custom resource definitions) 를 기반으로 Vault 와 연동함으로써 K8S 를 이용하는 개발자 및 다양한 사용자들은 새로운 Tool 을 배울 필요 없이 기존의 경험을 바탕으로 K8S Secret 을 생명주기가 더해진 동적인 데이터로써 사용 가능합니다 .</li>
<li>기존에 제공되고 있던 Sidecar Injector 및 CSI Provider 방식과의 비교 분석은 <a href="https://www.hashicorp.com/blog/kubernetes-vault-integration-via-sidecar-agent-injector-vs-csi-provider" target="_blank" rel="noopener noreferrer">Hashicorp Blog: Kubernetes Vault Integration via Sidecar Agent Injector vs. Vault Secrets Operator vs. CSI Provider</a> 를 참고하세요.</li>
<li><a href="https://developer.hashicorp.com/vault/tutorials/kubernetes/vault-secrets-operator" target="_blank" rel="noopener noreferrer">Hashicorp Officlal Tutorial</a> 을 참고하여 테스트 해보실 수 있습니다.</li>
</ul>
</li>
</ul>
<h2>Product Update</h2>
<ul>
<li>Terraform
<ul>
<li>
<p>CLI</p>
<ul>
<li><a href="https://github.com/hashicorp/terraform/releases/tag/v1.4.5" target="_blank" rel="noopener noreferrer">1.4.5 Release</a>
<ul>
<li>terraform destroy 시 <code>create_before_destroy</code> 참조 오류 등 개선</li>
</ul>
</li>
</ul>
</li>
<li>
<p><a href="https://developer.hashicorp.com/terraform/enterprise/releases" target="_blank" rel="noopener noreferrer">Enterprise Release</a></p>
<ul>
<li><a href="https://developer.hashicorp.com/terraform/enterprise/releases/2023/v202304-1" target="_blank" rel="noopener noreferrer">4월 Release</a> 출시 (<code>v202304-1 (692)</code>)</li>
<li>필수 Upgrade Versison: Release Note 에서 * 표기된 Version 은 필수로 거쳐야 하는 Version (예: v202207-2)</li>
<li>Project List API 사용 시 Project 이름 기반 필터 처리 지원</li>
<li>신규 생성된 User, Team, Org 정보에 대한 강조 표시 등 UI 개선</li>
<li>Sentinel 0.21 Upgrade</li>
</ul>
</li>
<li>
<p>Provider</p>
<ul>
<li>
<p><a href="https://github.com/hashicorp/terraform-provider-aws/releases/tag/v4.64.0" target="_blank" rel="noopener noreferrer">AWS v4.64.0 주요 수정사항</a></p>
<ul>
<li>신규 Resource
<ul>
<li>data/aws_route53_resolver_query_log_config</li>
<li>data/aws_redshiftserverless_workgroup</li>
<li>resource/aws_cloudwatch_event_endpoint</li>
</ul>
</li>
<li>기능 개선
<ul>
<li>data/aws_eks_node_group 에 대해 <code>launch_template</code> 설정 추가</li>
<li>aws_iam_role 에 대해 <code>role_last_used</code> 설정 추가</li>
<li>aws_lambda_* 에 대해 <code>compatible_runtimes = python 3.10</code> 설정 추가</li>
</ul>
</li>
<li>Bug Fix
<ul>
<li>aws_default_vpc 에 대해 ipv6 vpc 사용 시 발생하는 오류 개선</li>
<li>aws_ecs_service 에 대해 IAM Role 기반 service import 수행 시 오류 개선</li>
<li>aws_lakeformation_permissions 사용 시 발생하는 오류 개선</li>
</ul>
</li>
</ul>
</li>
<li>
<p><a href="https://github.com/hashicorp/terraform-provider-azurerm/releases/tag/v3.53.0" target="_blank" rel="noopener noreferrer">Azure v3.53.0 주요 수정사항</a></p>
<ul>
<li>신규 resource 추가
<ul>
<li>azurerm_storage_mover_*</li>
<li>azurerm_cost_management_scheduled_action</li>
</ul>
</li>
<li>기능 개선
<ul>
<li>azurerm_windows_* 에 대해 <code>hosting_environment_id</code> 설정 추가</li>
<li>azurerm_linux_* 에 대해 <code>hosting_environment_id</code> 설정 추가</li>
</ul>
</li>
<li>Bug Fix
<ul>
<li>azurerm_cdn_endpoint 사용 시 <code>query_string</code> 길이 제약 제거</li>
<li>azurerm_monitor_metric_alert 사용 시 <code>dynamic_criteria.0.ignore_data_before</code> 미설정시 발생하는 오류 개선</li>
<li>azurerm_postgresql_flexible_server 사용 시 <code>point_in_time_restore_time_in_utc</code> 관련 오류 개선</li>
</ul>
</li>
</ul>
</li>
<li>
<p><a href="https://github.com/hashicorp/terraform-provider-google/releases/tag/v4.63.0" target="_blank" rel="noopener noreferrer">GCP v4.63.0 주요 수정사항</a></p>
<ul>
<li>신규 resource 추가
<ul>
<li>google_compute_region_commitment</li>
<li>google_compute_public_advertised_prefix</li>
<li>google_network_service_http_route</li>
</ul>
</li>
<li>기능 개선
<ul>
<li>google_alloydb_cluster 및 google_alloydb_backup 사용 시 <code>location</code> 설정 required 로 변경 (기존: optional)\</li>
<li>google_data_loss_prevention_job_trigger 사용 시 <code>inspect_job.actions.job_notification_emails</code>, <code>inspect_job.actions.deidentify</code>, <code>triggers.manual</code> 그리고 <code>inspect_job.storage_config.hybrid_options</code> 설정 추가</li>
</ul>
</li>
<li>Bug Fix
<ul>
<li>google_alloydb_cluster 에 대해  <code>weekly_schedule</code> 설정 optional 로 변경</li>
<li>google_compute_backend_bucket 에 대해 <code>USE_ORIGIN_HEADERS</code> 사용시 발생하는 TTL 관련 오류 개선</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li>Vault
<ul>
<li>1.13.1
<ul>
<li>상세 <a href="https://github.com/hashicorp/vault/releases/tag/v1.13.1" target="_blank" rel="noopener noreferrer">Release Note</a></li>
<li>Github Auth Method 에 대해 환경변수 <code>VAULT_AUTH_CONFIG_GITHUB_TOKEN</code> 설정 지원</li>
<li>DB Secrets Engine (Elasticsearch) 에 대해 API 오류 시 알림 메세지 강화</li>
<li><code>CKR_FUNCTION_FAILED</code> 오류 발생 시 PKCS#11 HSM 에 대한 재연결 시도 개선</li>
<li>UI 개선</li>
</ul>
</li>
</ul>
</li>
<li>Consul
<ul>
<li>1.15.2
<ul>
<li>상세 <a href="https://github.com/hashicorp/consul/releases/tag/v1.15.2" target="_blank" rel="noopener noreferrer">Release Note</a></li>
<li>connect proxy 설정 기반 service mesh 관련 telemetry 를 HCP metrics collection service 로 전달하는 기능 추가</li>
<li>Vault CA Provider 와 연동 시 발생하는 Service Mesh TLS 설정 관련 오류 개선</li>
<li>Gateway 에 대해 Namespace 및 Partition 관련 <code>unmarshal</code> 되는 오류 개선</li>
<li>Default Namespace 또는 Partition 을 사용하지 않는 서비스에 대한 Resolver, Router, Splitter 사용 시 Peering 이 올바르게 수행되지 않는 오류 개선</li>
<li>Audit Log 이용 시 <code>Streaming not supported</code> 발생하는 오류 개선</li>
</ul>
</li>
</ul>
</li>
<li>Nomad
<ul>
<li>1.5.3
<ul>
<li>상세 <a href="https://github.com/hashicorp/nomad/releases/tag/v1.5.3" target="_blank" rel="noopener noreferrer">Release Note</a></li>
<li>인증되지 않은 HTTP API 호출이 ACL 검사를 우회 통과하는 오류 개선</li>
</ul>
</li>
</ul>
</li>
</ul>
]]></content:encoded>
    </item>
    <item>
      <title>Kubernetes Vault 통합방안 3가지 비교</title>
      <link>https://docmoa.github.io/04-HashiCorp/06-Vault/04-UseCase/vault-k8s-integration-three-methods.html</link>
      <guid>https://docmoa.github.io/04-HashiCorp/06-Vault/04-UseCase/vault-k8s-integration-three-methods.html</guid>
      <source url="https://docmoa.github.io/rss.xml">Kubernetes Vault 통합방안 3가지 비교</source>
      <description>Kubernetes Vault 통합방안 3가지 비교 Sidecar Agent Injector CSI provider Vault Secrets Operator 개요 본 글에서는 HashiCorp Vault 및 Kubernetes 통합을 위해 HashiCorp가 지원하는 세 가지 방법을 자세히 비교한다: 볼트 사이드카 ...</description>
      <pubDate>Sun, 23 Apr 2023 13:46:44 GMT</pubDate>
      <content:encoded><![CDATA[
<ul>
<li>Sidecar Agent Injector</li>
<li>CSI provider</li>
<li>Vault Secrets Operator</li>
</ul>
<div class="hint-container info">
<p class="hint-container-title">개요</p>
<p>본 글에서는 HashiCorp Vault 및 Kubernetes 통합을 위해 HashiCorp가 지원하는 세 가지 방법을 자세히 비교한다:</p>
<ol>
<li>볼트 사이드카 에이전트 인젝터(Sidecar Agent Injector)</li>
<li>볼트 컨테이너 스토리지 인터페이스 공급자(Container Storage Interface (CSI) provider)</li>
<li>볼트 시크릿 오퍼레이터(Secrets Operator)</li>
</ol>
<p>각 방법에 대한 실용적인 지침(guidance)을 제공하여 사용 사례에 가장 적합한 방법을 이해하고 선택할 수 있도록 안내한다.</p>
</div>
<div class="hint-container warning">
<p class="hint-container-title">참고</p>
<p>본 포스트는 제품 설명서나 단계별(step-by-step) 구현 가이드가 아니며, HashiCorp Vault 및 Kubernetes에 익숙하고 시크릿 관리 개념에 대한 기본적인 이해가 있는 데브옵스 실무자를 위한 문서이다.</p>
</div>
<h2>1. Vault Sidecar Agent Injector</h2>
<p>Vault 사이드카 에이전트 인젝터(<a href="https://www.vaultproject.io/docs/platform/k8s/injector?_gl=1*67yi4g*_ga*MjA5MTM1MTczLjE2ODA2MDU3MjM.*_ga_P7S46ZYEKW*MTY4MTM5Nzc3NC45LjEuMTY4MTM5ODY2NC4wLjAuMA.." target="_blank" rel="noopener noreferrer">Vault Sidecar Agent Injector</a>)는 사이드카 패턴(<a href="https://docs.microsoft.com/en-us/azure/architecture/patterns/sidecar" target="_blank" rel="noopener noreferrer">sidecar pattern</a>)을 활용하여 공유 메모리 볼륨에 볼트 시크릿을 렌더링하는 Vault 에이전트 컨테이너를 포함하도록 파드 사양(spec)을 변경한다. 공유 볼륨에 시크릿을 렌더링함으로써, 파드 내의 컨테이너는 Vault를 인식(Vault-aware)하지 않고도 Vault 시크릿을 사용할 수 있다.<br>
인젝터는 Kubernetes Mutating Webhook Controller이다. Controller는 파드 이벤트를 가로채고(intercepts) 요청 내에 어노테이션이 있는 경우 파드에 변형(mutations)을 적용한다. 이 기능은 <a href="https://github.com/hashicorp/vault-k8s" target="_blank" rel="noopener noreferrer">vault-k8s</a> 프로젝트에 의해 제공되며, Vault Helm 차트를 사용하여 자동으로 설치 및 구성할 수 있다.</p>
<figure><img src="https://www.hashicorp.com/_next/image?url=https%3A%2F%2Fwww.datocms-assets.com%2F2885%2F1643214443-sidecar-workflow-v1.png&amp;w=3840&amp;q=75" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure>
<h2>2. Vault CSI provider</h2>
<p>파드가 임시(ephemeral) <a href="https://github.com/kubernetes-sigs/secrets-store-csi-driver" target="_blank" rel="noopener noreferrer">CSI Secrets Store</a> 볼륨을 사용하여 볼트 시크릿을 사용할 수 있도록 하는 것이 <a href="https://www.vaultproject.io/docs/platform/k8s/csi?_gl=1*8ev72c*_ga*MjA5MTM1MTczLjE2ODA2MDU3MjM.*_ga_P7S46ZYEKW*MTY4MTM5Nzc3NC45LjEuMTY4MTM5ODc3NC4wLjAuMA.." target="_blank" rel="noopener noreferrer">Vault CSI provider</a>이다.<br>
높은 수준(high level)에서, CSI Secretes Store 드라이버는 사용자가 <code>SecretProviderClass</code> 오브젝트를 생성할 수 있게 해준다. 이 오브젝트는 사용할 시크릿 프로바이더와 검색할 시크릿을 정의한다. CSI 볼륨을 요청하는 파드가 생성되면, CSI Secretes Store 드라이버는 프로바이더가 <code>vault</code>인 경우 요청을 Vault CSI Provider에게 보낸다. 그러면 Vault CSI Provider는 지정된 <code>SecretProviderClass</code>와 파드의 서비스 어카운트(SA)을 사용하여 볼트에서 시크릿을 검색하고 파드의 CSI 볼륨에 마운트한다. 시크릿은 Vault에서 검색되어 <code>ContainerCreation</code> 단계에서 CSI 시크릿 스토어 볼륨에 채워진다. 즉, Vault에서 시크릿을 읽고 볼륨에 쓰기 전까지는 파드가 시작되지 않도록 차단된다.</p>
<figure><img src="https://www.hashicorp.com/_next/image?url=https%3A%2F%2Fwww.datocms-assets.com%2F2885%2F1643214470-csi-workflow-v1.png&amp;w=3840&amp;q=75" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure>
<h2>3. Vault Secrets Operator</h2>
<p><a href="https://github.com/hashicorp/vault-secrets-operator/" target="_blank" rel="noopener noreferrer">Vault Secrets Operator</a>는 기본적으로 Vault secrets을 Kubernetes Secrets에 동기화할 책임이 있는(responsible) CRD 집합으로 쿠버네티스 시크릿 오퍼레이터(Kubernetes Secrets Operator)를 구현하는 새로운 통합 방법이다.</p>
<figure><figcaption></figcaption></figure>
<p>오퍼레이터는 하나 이상의 볼트 서버 인스턴스에서 정적(static), 동적(dynamic) 및 PKI 기반(PKI-based) 시크릿을 포함한 시크릿 관리의 전체 라이프사이클 동기화를 지원한다. 또한 오퍼레이터는 시크릿 로테이션(secret rotation)을 관리하고 <a href="https://kubernetes.io/docs/concepts/workloads/controllers/deployment/" target="_blank" rel="noopener noreferrer">Deployment</a>의 <a href="https://kubernetes.io/docs/reference/generated/kubectl/kubectl-commands#rollout" target="_blank" rel="noopener noreferrer">rolling update</a>를 통해 애플리케이션에 직접 알리거나(notifying) 롤링 업데이트를 트리거(triggering)하는 등 로테이션 후 작업을 수행할 수 있다.</p>
<blockquote>
<p>참고 :</p>
<ul>
<li>
<p><a href="https://kubernetes.io/ko/docs/concepts/extend-kubernetes/api-extension/custom-resources/" target="_blank" rel="noopener noreferrer">커스텀 리소스(Custom Resource) 란?</a></p>
</li>
<li>
<p><a href="https://kubernetes.io/ko/docs/concepts/extend-kubernetes/operator/" target="_blank" rel="noopener noreferrer">오퍼레이터(operator) 패턴이란?</a></p>
</li>
</ul>
</blockquote>
<h2>4. 설계 고려사항</h2>
<p>두 솔루션 간에는 몇 가지 유사점과 차이점이 있으며, Kubernetes 환경에서 시크릿 관리 전략을 설계하고 구현할 때 고려해야 할 사항이다.</p>
<p>| 고려사항                     | 설명                                                         |<br>
|</p>
]]></content:encoded>
      <enclosure url="https://www.hashicorp.com/_next/image?url=https%3A%2F%2Fwww.datocms-assets.com%2F2885%2F1643214443-sidecar-workflow-v1.png&amp;w=3840&amp;q=75" type="image/"/>
    </item>
    <item>
      <title>Vault로 Spring Boot 구성관리</title>
      <link>https://docmoa.github.io/04-HashiCorp/06-Vault/04-UseCase/spring-boot.html</link>
      <guid>https://docmoa.github.io/04-HashiCorp/06-Vault/04-UseCase/spring-boot.html</guid>
      <source url="https://docmoa.github.io/rss.xml">Vault로 Spring Boot 구성관리</source>
      <description>Vault로 Spring Boot 구성관리 Example Source : https://github.com/Great-Stone/vault_springboot_example 볼트는 애플리케이션(앱)의 구성관리, 특히 사용자 ID, 패스워드, Token, 인증서, 엔드포인트, AWS 자격증명 등과 같은 민감한 정보를 ...</description>
      <pubDate>Sun, 09 Apr 2023 23:54:58 GMT</pubDate>
      <content:encoded><![CDATA[
<blockquote>
<p>Example Source : <a href="https://github.com/Great-Stone/vault_springboot_example" target="_blank" rel="noopener noreferrer">https://github.com/Great-Stone/vault_springboot_example</a></p>
</blockquote>
<p>볼트는 애플리케이션(앱)의 구성관리, 특히 사용자 ID, 패스워드, Token, 인증서, 엔드포인트, AWS 자격증명 등과 같은 민감한 정보를 안전하게 저장하는 중앙 집중식 인프라를 제공한다. 서비스의 성장과 더불어, 이를 구성하는 앱은 확장과 분리 요구 사항이 발생하면 구성 관리가 어려워 진다. 특히, 시크릿 정보가 포함되는 구성 관리는 수동으로 관리하는 경우 로컬 환경을 포함한 여러 시스템에 노출되는 위험성을 갖고, 환경마다 다른 시크릿을 관리하기위한 유지 관리의 노력과 비용이 증가한다. 볼트에서 이야기하는 앱과 관련한 "시크릿 스프롤(퍼짐)" 현상은 다음과 같다.</p>
<ul>
<li>시트릿의 위치가 파일 서버, Git 저장소, 로컬 환경, 앱 실행 환경등 다양한 곳에 존재하고 추적이 어려움</li>
<li>분산 서비스 및 Scale out/in 되는 앱 환경에 구성 설정의 변경 시 개별적 관리 필요</li>
<li>스크릿 사용의 위반 추적이 어렵고 거버넌스와 규제 요구사항에 대한 통제</li>
</ul>
<p>본질적으로 시크릿 스프롤은 가시성과 통제력의 저하를 야기한다.</p>
<h2>구성관리 개념</h2>
<p>앱과 구성 관계에서 구성관리의 원칙은 다음과 같다.</p>
<ul>
<li>구성은 앱과 분리되어야 한다.</li>
<li>앱은 한번 빌드되면 로직의 변화가 없는 경우 그대로 배포되어야 한다.</li>
<li>구성의 변경 사항은 앱의 런타임시 주입되어야 한다.</li>
<li>구성은 중앙집중화 되어 강력한 감사와 접근제어가 동반되어야 한다.</li>
<li>민감한 구성은 암호화 되어야 한다.</li>
<li>12 factor 앱 모범 사례에 따라, 중앙 저장소의 구성 데이터를 사용할 수 있도록(부트스트래핑) 앱을 설계해야 한다.</li>
</ul>
<h2>볼트의 구성관리 저장소 및 관리</h2>
<p>볼트는 구성 요소에 대해 중앙 저장소를 제공하며 다음과 같은 주요 이점이 있다.</p>
<ul>
<li>중앙 집중식 구성 저장소</li>
<li>저장되는 데이터의 암호화 저장</li>
<li>KV 형태의 구성 저장 및 버전 관리</li>
<li>정책 기반 접근관리</li>
<li>감사 기능</li>
<li>저장 및 인증을 위한 플러그인 기반</li>
<li>동적 시크릿 발급 및 수명주기 관리</li>
<li>고가용성(HA) 아키텍처 제공</li>
<li>정적 구성 요소 관리를 위한 템플릿팅 지원 (xml, json 등)</li>
<li>다중 클러스터 간 복제</li>
</ul>
<h3>[Example 1. Spring Boot Application]</h3>
<p>앱을 위한 볼트 구성을 위해 다음과 같이 볼트를 실행한다.</p>
<div class="language-bash" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="line">$ vault server <span class="token parameter variable">-dev</span> -dev-root-token-id<span class="token operator">=</span>root -log-level<span class="token operator">=</span>trace</span>
<span class="line"></span>
<span class="line"><span class="token punctuation">..</span>.</span>
<span class="line">You may need to <span class="token builtin class-name">set</span> the following environment variables:</span>
<span class="line"></span>
<span class="line">    $ <span class="token builtin class-name">export</span> <span class="token assign-left variable">VAULT_ADDR</span><span class="token operator">=</span><span class="token string">'http://127.0.0.1:8200'</span></span>
<span class="line"></span>
<span class="line">The unseal key and root token are displayed below <span class="token keyword">in</span> <span class="token keyword">case</span> you want to</span>
<span class="line">seal/unseal the Vault or re-authenticate.</span>
<span class="line"></span>
<span class="line">Unseal Key: UTZ7HoZCu8dtWa/eSMKcwq1klhC/qFoDxHXmhRn4qnE<span class="token operator">=</span></span>
<span class="line">Root Token: root</span>
<span class="line"></span></code></pre></div><p><code>root</code> 토큰은 구성관리 관리자의 권한으로 가정한다.</p>
<div class="language-bash" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="line">$ <span class="token builtin class-name">export</span> <span class="token assign-left variable">VAULT_ADDR</span><span class="token operator">=</span><span class="token string">'http://127.0.0.1:8200'</span></span>
<span class="line">$ vault login</span>
<span class="line">Token <span class="token punctuation">(</span>will be hidden<span class="token punctuation">)</span>: root</span>
<span class="line"></span>
<span class="line">Success<span class="token operator">!</span> You are now authenticated. The token information displayed below</span>
<span class="line">is already stored <span class="token keyword">in</span> the token helper. You <span class="token keyword">do</span> NOT need to run <span class="token string">"vault login"</span></span>
<span class="line">again. Future Vault requests will automatically use this token.</span>
<span class="line"></span>
<span class="line">Key                  Value</span>
<span class="line"></span></code></pre></div>]]></content:encoded>
      <enclosure url="https://raw.githubusercontent.com/Great-Stone/images/master/uPic/image-20230406150032627.png" type="image/png"/>
    </item>
    <item>
      <title>2023년 4월</title>
      <link>https://docmoa.github.io/04-HashiCorp/08-Updates/98-2023/2023-04.html</link>
      <guid>https://docmoa.github.io/04-HashiCorp/08-Updates/98-2023/2023-04.html</guid>
      <source url="https://docmoa.github.io/rss.xml">2023년 4월</source>
      <description>2023년 4월 Update</description>
      <pubDate>Thu, 06 Apr 2023 07:39:35 GMT</pubDate>
      <content:encoded><![CDATA[
<h2>Product 소개</h2>
<ul>
<li>
<p>Dynamic provider credentials now generally available for Terraform Cloud</p>
<ul>
<li><a href="https://www.hashicorp.com/blog/dynamic-provider-credentials-now-ga-for-terraform-cloud" target="_blank" rel="noopener noreferrer">Hashicorp Blog</a></li>
<li>AWS, MS Azure, GCP 등 Cloud 환경을 Terraform 과 연동 및 인증하기 위해 Workspace Variable 또는 Variable Set 을 활용하여 Credential 정보를 설정해서 사용했습니다. 해당 Credential 정보는 장기간의 TTL 을 설정하여 사용하거나 혹은 보안취약점을 보완하기 위해 관리자가 수동으로 갱신 및 설정하는 등의 번거로움을 동반하고 있었습니다. Dynamic Provider Credential 은 각 Cloud Service 의 OIDC Provider 를 기반으로 Terraform 에 대한 TLS 인증 확인을 수행함으로써 매 Apply 마다  Terraform 에 대한 인증 처리 후 Resource Provisioning 등을 수행하는 <code>동적인증처리</code> 를 지원합니다.</li>
<li><a href="https://developer.hashicorp.com/terraform/tutorials/cloud/dynamic-credentials?product_intent=terraform" target="_blank" rel="noopener noreferrer">Hashicorp Officlal Tutorial</a> 을 참고하여 테스트 해보실 수 있습니다.</li>
</ul>
</li>
</ul>
<h2>Product Update</h2>
<ul>
<li>Terraform
<ul>
<li>CLI
<ul>
<li><a href="https://github.com/hashicorp/terraform/releases/tag/v1.4.2" target="_blank" rel="noopener noreferrer">1.4.2 Release</a>
<ul>
<li>일부 Provider 에서 발생하는 <code>invalid plan</code> 오류 개선</li>
</ul>
</li>
</ul>
</li>
<li><a href="https://developer.hashicorp.com/terraform/enterprise/releases" target="_blank" rel="noopener noreferrer">Enterprise Release</a>
<ul>
<li><a href="https://developer.hashicorp.com/terraform/enterprise/releases/2023/v202303-1" target="_blank" rel="noopener noreferrer">3월 Release</a> 출시 (<code>v202303-1 (688)</code>)</li>
<li>필수 Upgrade Versison: Release Note 에서 * 표기된 Version 은 필수로 거쳐야 하는 Version (예: v202207-2)</li>
<li>OPA Support: OPA (Open Policy Agent) 기반 정책 설정 지원</li>
<li>Dynamic Provider Credential: Terraform 과 Provider 간 동적 인증처리 지원 (지원대상 Provider: AWS, AzureRM, AzureAD, GCP, Vault)</li>
<li>Drift Detection: State 파일 내 상태정보와 실제 대상환경 간 상이한 부분 체크 및 알림 설정, Workspace 또는 Organization 단위로 활성화</li>
</ul>
</li>
<li>Provider
<ul>
<li><a href="https://github.com/hashicorp/terraform-provider-aws/releases/tag/v4.60.0" target="_blank" rel="noopener noreferrer">AWS v4.60.0 주요 수정사항</a>
<ul>
<li>신규 Resource: data/appmesh_route, data/appmesh_virtual_gateway, resource/aws_cognito_managed_user_pool_client 등</li>
<li>기능 개선
<ul>
<li>data/aws_ecs_cluster: <code>tags</code> 설정 지원</li>
<li>resource/aws_rds_cluster: <code>snapshot_identifier</code> 와 <code>global_cluster_identifier</code> 설정에 의한 잘못된 복원 수행 개선</li>
</ul>
</li>
<li>Bug Fix
<ul>
<li>aws_appmesh 관련 mesh owner 설정에 대한 오류 개선</li>
<li>aws_medialive_channel 관련 type casting 설정에 대한 오류 개선</li>
</ul>
</li>
</ul>
</li>
<li><a href="https://github.com/hashicorp/terraform-provider-azurerm/releases/tag/v3.49.0" target="_blank" rel="noopener noreferrer">Azure v3.49.0 주요 수정사항</a>
<ul>
<li>신규 resource 추가: azurerm_databricks_virtual_network_peering, azurerm_sentinel_threat_intelligence_indicator, azurerm_voice_services_communications_gateway</li>
<li>기능 개선
<ul>
<li>azurerm_mysql_flexible_server 에 대해  <code>geo_backup_key_vault_key_id</code> 와 <code>geo_backup_user_assigned_identity_id</code> 설정 지원</li>
<li>azurerm_virtual_network_peering 에 대해 <code>allow_forwarded_traffic</code>, <code>allow_gateway_transit</code>, <code>use_remote_gateways</code> 에 대한 기본값 설정</li>
<li>azurerm_virtual_hub 에 대해 <code>hub_routing_preference</code> 설정 지원</li>
</ul>
</li>
<li>Bug Fix
<ul>
<li>azurerm_linux_function_app 에 대해 <code>auth_v2</code>, <code>token_store_enabled</code>, <code>ip_restriction</code>, <code>scp_ip_restriction</code> 관련 오류 개선</li>
<li>azurerm_linux_wep_app 에 대해  <code>auth_v2</code>, <code>token_store_enabled</code>, <code>ip_restriction</code>, <code>scp_ip_restriction</code> 관련 오류 개선</li>
<li>azurerm_windows_function_app 에 대해  <code>auth_v2</code>, <code>token_store_enabled</code>, <code>ip_restriction</code>, <code>scp_ip_restriction</code> 관련 오류 개선</li>
<li>azurerm_windows_web_app 에 대해  <code>auth_v2</code>, <code>token_store_enabled</code>, <code>ip_restriction</code>, <code>scp_ip_restriction</code> 관련 오류 개선</li>
</ul>
</li>
</ul>
</li>
<li><a href="https://github.com/hashicorp/terraform-provider-google/releases/tag/v4.59.0" target="_blank" rel="noopener noreferrer">GCP v4.59.0 주요 수정사항</a>
<ul>
<li>신규 resource 추가: google_dataplex, google_network_services_gateway</li>
<li>기능 개선
<ul>
<li>oauth2 기반 mTLS 지원</li>
<li>bigquery 에 대해 <code>is_case_insensitive</code> 와 <code>default_collation</code> 설정 지원</li>
<li>compute 에 대해 <code>scratch_disk.size</code>와 <code>local_nvme_ssd_block</code> 설정 지원</li>
</ul>
</li>
<li>Bug Fix
<ul>
<li>certificatemanager 에 대해 import 과정 중 <code>managed.dns_authorizations</code> 관련 오류 개선</li>
<li>compute 에 대해 <code>enforce_on_key_name</code> 관련 설정 오류 개선</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li>Vault
<ul>
<li>1.13.1
<ul>
<li>상세 <a href="https://github.com/hashicorp/vault/releases/tag/v1.13.1" target="_blank" rel="noopener noreferrer">Release Note</a></li>
<li>Github Auth Method 에 대해 환경변수 <code>VAULT_AUTH_CONFIG_GITHUB_TOKEN</code> 설정 지원</li>
<li>DB Secrets Engine (Elasticsearch) 에 대해 API 오류 시 알림 메세지 강화</li>
<li><code>CKR_FUNCTION_FAILED</code> 오류 발생 시 PKCS#11 HSM 에 대한 재연결 시도 개선</li>
<li>UI 개선</li>
</ul>
</li>
</ul>
</li>
<li>Consul
<ul>
<li>1.15.1
<ul>
<li>상세 <a href="https://github.com/hashicorp/consul/releases/tag/v1.15.1" target="_blank" rel="noopener noreferrer">Release Note</a></li>
<li><code>consul token update</code> 명령어 수행 시 <code>-append-policy-id</code>, <code>-append-policy-name</code>, <code>-append-role-id</code>, <code>-append-service-identity</code>, <code>-append-node-identity</code> 매개변수 설정 지원</li>
<li>호환 Envoy Version: 1.22.5 ~ 1.22.7, 1.23.2 ~ 1.23.4, 1.24.0 ~ 1.24.2 지원 (1.21.5 제외)</li>
<li>Service Mesh 에 사용되는 Gateway 에서 발생하는 <code>HTTPRoute</code> 관련 오류 개선</li>
<li>존재하지 않는 ACL 정책 호출 시 발생하는 오류 개선</li>
</ul>
</li>
</ul>
</li>
<li>Nomad
<ul>
<li>1.5.2
<ul>
<li>상세 <a href="https://github.com/hashicorp/nomad/releases/tag/v1.5.2" target="_blank" rel="noopener noreferrer">Release Note</a></li>
<li><code>namespace status</code>, <code>quota status</code>, <code>server members</code> 명령어에 대해 <code>-json</code>과 <code>-t</code> 매개변수 설정 지원</li>
<li>등록된 서비스 제거 시 두번 제거 되는 오류 개선</li>
<li>Consul Discovery 사용하는 서비스에 대해 발생하는 Cluster Join 권한 오류 개선</li>
</ul>
</li>
</ul>
</li>
</ul>
]]></content:encoded>
    </item>
    <item>
      <title>Vault PKI - mTLS demo</title>
      <link>https://docmoa.github.io/04-HashiCorp/06-Vault/04-UseCase/mtls.html</link>
      <guid>https://docmoa.github.io/04-HashiCorp/06-Vault/04-UseCase/mtls.html</guid>
      <source url="https://docmoa.github.io/rss.xml">Vault PKI - mTLS demo</source>
      <description>Vault PKI - mTLS demo Demo App Github : https://github.com/Great-Stone/vault-mtls-demo 1. mTLS 설명 1.1 SSL과 TLS SSL(Secure Sokets Layer, 보안 소캣 계층)는 클라이언트와 서버 사이에 전송된 데이터를 암호화 하고 ...</description>
      <pubDate>Sun, 19 Mar 2023 08:21:15 GMT</pubDate>
      <content:encoded><![CDATA[
<blockquote>
<p>Demo App Github : <a href="https://github.com/Great-Stone/vault-mtls-demo" target="_blank" rel="noopener noreferrer">https://github.com/Great-Stone/vault-mtls-demo</a></p>
</blockquote>
<h2>1. mTLS 설명</h2>
<h3>1.1 SSL과 TLS</h3>
<p>SSL(Secure Sokets Layer, 보안 소캣 계층)는 클라이언트와 서버 사이에 전송된 데이터를 암호화 하고 인터넷 연결에 보안을 유지하는 표준 기술이다. 악의적 외부인이 클라이언트와 서버 사이에 전송되는 정보를 확인 및 탈취하는 것을 방지한다.</p>
<p>TLS(Transport Layer Security, 전송 계층 보안)는 현재 더이상 사용되지 않는 SSL을 계승하는 보다 진보된 보안 기술이다. SSL 3.0을 기반으로 만들어졌지만 호환되지는 않는다. 최신 버전은 TLS 1.3이다.</p>
<ul>
<li>TLS 1.2의 경우 암호화 방식과 키 교환 통신이 handshake 과정에 포한되어있어 2회 정도의 추가 요청이 있었다.</li>
<li>TLS 1.3에서는 handshake과정을 최소화해 암호화 통신하는 방안이 추가되어 HTTPS 통신에 속도와 보안이 개선되었다.
<ul>
<li>handshake에 0-RTT 모드 추가</li>
<li>정적인 RSA와 Diffie-Hellman Cipher Suite 제거</li>
<li>handshake 최대한 암호화</li>
<li>키 교환과 암호화 방식을 Cipher Suite를 통해 묶어서 정하지 않고 개별적 지정</li>
</ul>
</li>
</ul>
<p>SSL 기술이 TLS로 대체되었다고 하지만 여전히 브라우저 인증서는 SSL 인증서라고 불린다.</p>
<h3>1.2 TLS Handshake</h3>
<p>TLS에서는 서버에만 TLS 인증서 및 공개/개인 키 쌍이 있고 클라이언트에는 없다. TLS 프로세스는 다음과 같다.</p>
<figure><img src="https://raw.githubusercontent.com/Great-Stone/images/master/uPic/image-20230320091036089.png" alt="image-20230320091036089" tabindex="0" loading="lazy"><figcaption>image-20230320091036089</figcaption></figure>
<h3>1.3 mutualTLS(mTLS)</h3>
<p>mTLS에서는 클라이언트와 서버 모두에 인증서가 있고 양쪽에서 공개/개인 키 쌍을 사용하여 인증한다. TLS 대비 mTLS는 양쪽을 확인하기 위한 추가 단계가 있다.</p>
<figure><img src="https://raw.githubusercontent.com/Great-Stone/images/master/uPic/image-20230320091236622.png" alt="image-20230320091236622" tabindex="0" loading="lazy"><figcaption>image-20230320091236622</figcaption></figure>
<h3>1.4 mTLS 의 장단점</h3>
<p>먼저 mTLS의 장점을 살펴보면,</p>
<ul>
<li>서버와 클라이언트 간의 상호 인증을 가능하게 하므로, 서버와 클라이언트 모두 신뢰할 수 있는 대상인지 확인할 수 있다. 이를 통해 중간자 공격 및 위조된 인증서와 같은 보안 문제를 방지할 수 있다.</li>
<li>mTLS는 암호화된 연결을 통해 전송되는 데이터의 안전성을 보장한다. TLS 프로토콜을 사용하므로, 데이터는 암호화되어 전송되며, 중간자 공격 및 도청과 같은 공격으로부터 안전하게 보호된다.</li>
</ul>
<p>mTLS의 단점은 다음과 같다.</p>
<ul>
<li>연결을 설정하는 과정에서 추가적인 CPU 리소스와 대역폭이 필요할 수 있다. 이는 특히 고사양의 서버에서 큰 부담이 될 수 있다.</li>
<li>서버와 클라이언트 모두가 인증서를 발급하고 관리해야 한다는 점이 있다. 인증서를 발급하는 과정은 복잡할 수 있으며, 이를 관리하는 것도 일정한 노력과 비용이 필요합니다.</li>
<li>mTLS를 구현하는 것은 애플리케이션과 서버 모두에게 추가적인 복잡성을 요구할 수 있다. 이를 위해 애플리케이션과 서버 모두에 대한 추가적인 설정 및 관리가 필요할 수 있다.</li>
</ul>
<h3>1.5 구성의 예</h3>
<h4>Python - Flask</h4>
<div class="language-python" data-highlighter="prismjs" data-ext="py" data-title="py"><pre class="language-python"><code><span class="line"><span class="token keyword">from</span> flask <span class="token keyword">import</span> Flask<span class="token punctuation">,</span> render_template<span class="token punctuation">,</span> request<span class="token punctuation">,</span> make_response</span>
<span class="line"><span class="token keyword">import</span> ssl</span>
<span class="line"></span>
<span class="line">app <span class="token operator">=</span> Flask<span class="token punctuation">(</span>__name__<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">### APIs ###</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span></span>
<span class="line">    app<span class="token punctuation">.</span>debug <span class="token operator">=</span> <span class="token boolean">True</span></span>
<span class="line highlighted">    ssl_context <span class="token operator">=</span> ssl<span class="token punctuation">.</span>create_default_context<span class="token punctuation">(</span>purpose<span class="token operator">=</span>ssl<span class="token punctuation">.</span>Purpose<span class="token punctuation">.</span>CLIENT_AUTH<span class="token punctuation">,</span> cafile<span class="token operator">=</span><span class="token string">'ca.crt'</span><span class="token punctuation">)</span></span>
<span class="line highlighted">    ssl_context<span class="token punctuation">.</span>load_cert_chain<span class="token punctuation">(</span>certfile<span class="token operator">=</span><span class="token string-interpolation"><span class="token string">f'site.crt'</span></span><span class="token punctuation">,</span> keyfile<span class="token operator">=</span><span class="token string-interpolation"><span class="token string">f'site.key'</span></span><span class="token punctuation">,</span> password<span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">)</span></span>
<span class="line highlighted">    ssl_context<span class="token punctuation">.</span>verify_mode <span class="token operator">=</span> ssl<span class="token punctuation">.</span>CERT_REQUIRED</span>
<span class="line">    app<span class="token punctuation">.</span>run<span class="token punctuation">(</span>host<span class="token operator">=</span><span class="token string">"0.0.0.0"</span><span class="token punctuation">,</span> port<span class="token operator">=</span>src_port<span class="token punctuation">,</span> ssl_context<span class="token operator">=</span>ssl_context<span class="token punctuation">,</span> use_reloader<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre></div><h4>nginx</h4>
<div class="language-hcl" data-highlighter="prismjs" data-ext="hcl" data-title="hcl"><pre class="language-hcl"><code><span class="line"><span class="token comment"># default.conf</span></span>
<span class="line"><span class="token keyword">server</span> <span class="token punctuation">{</span></span>
<span class="line">    listen                  <span class="token number">443</span> ssl;</span>
<span class="line"></span>
<span class="line">    access_log /var/log/nginx/access.log;</span>
<span class="line">    error_log /var/log/nginx/error.log;</span>
<span class="line"></span>
<span class="line highlighted">    ssl_certificate         /etc/ssl/server.crt;</span>
<span class="line highlighted">    ssl_certificate_key     /etc/ssl/server.key;</span>
<span class="line highlighted">    ssl_protocols           TLSv1.<span class="token number">2</span> TLSv1.<span class="token number">3</span>;</span>
<span class="line highlighted">    ssl_client_certificate  /etc/nginx/client_certs/ca.crt;</span>
<span class="line highlighted">    ssl_verify_client       on;</span>
<span class="line highlighted">    ssl_verify_depth        <span class="token number">2</span>;</span>
<span class="line"></span>
<span class="line">    location / <span class="token punctuation">{</span></span>
<span class="line">        if ($ssl_client_verify !<span class="token punctuation">=</span> SUCCESS) <span class="token punctuation">{</span> return <span class="token number">403</span>; <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">### 구성 ###</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre></div><h4>Apache HTTPD 2.4</h4>
<div class="language-xml" data-highlighter="prismjs" data-ext="xml" data-title="xml"><pre class="language-xml"><code><span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>VirtualHost</span> <span class="token attr-name"><span class="token namespace">*:</span>80</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">    ServerName {DOMAIN}</span>
<span class="line">    Redirect permanent / https://{DOMAIN}</span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>VirtualHost</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>IfModule</span> <span class="token attr-name">mod_ssl.c</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>VirtualHost</span> <span class="token attr-name"><span class="token namespace">*:</span>443</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">        ServerAdmin info@{DOMAIN}</span>
<span class="line">        ServerName {DOMAIN}</span>
<span class="line"></span>
<span class="line">        Header always set Strict-Transport-Security "max-age=63072000; includeSubdomains;"</span>
<span class="line"></span>
<span class="line">        SSLEngine       on</span>
<span class="line">        SSLCompression      Off</span>
<span class="line">        SSLProtocol         ALL -SSLv2 -SSLv3</span>
<span class="line">        SSLHonorCipherOrder     On</span>
<span class="line">        SSLCipherSuite      EECDH+AESGCM:EDH+AESGCM:AES256+EECDH:AES256+EDH</span>
<span class="line highlighted">        SSLCertificateFile  {SSL}/fullchain.pem</span>
<span class="line highlighted">        SSLCertificateKeyFile   {SSL}/privkey.pem</span>
<span class="line highlighted">        SSLCACertificateFile    {PATH}/ca.crt</span>
<span class="line">        SSLStrictSNIVHostCheck  on</span>
<span class="line"></span>
<span class="line">        &lt;Location / &gt;</span>
<span class="line highlighted">            SSLVerifyClient     require </span>
<span class="line">            SSLVerifyDepth      1</span>
<span class="line"></span>
<span class="line">            Options FollowSymLinks</span>
<span class="line">            AllowOverride None</span>
<span class="line">        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Location</span><span class="token punctuation">&gt;</span></span>     </span>
<span class="line"></span>
<span class="line">        &lt;Location /health&gt;</span>
<span class="line">            SSLVerifyClient none</span>
<span class="line">        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Location</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"></span>
<span class="line">        ProxyPreserveHost On</span>
<span class="line">        ProxyRequests off</span>
<span class="line">        ProxyPass / http://localhost/</span>
<span class="line">        ProxyPassReverse / http://localhost/</span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>VirtualHost</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>IfModule</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"></span></code></pre></div>]]></content:encoded>
      <enclosure url="https://raw.githubusercontent.com/Great-Stone/images/master/uPic/image-20230320091036089.png" type="image/png"/>
    </item>
    <item>
      <title>[PKOS] 2편 - 네트워크 &amp; 스토리지</title>
      <link>https://docmoa.github.io/07-Kubernetes/05-Kops/02-kops-network-storage.html</link>
      <guid>https://docmoa.github.io/07-Kubernetes/05-Kops/02-kops-network-storage.html</guid>
      <source url="https://docmoa.github.io/rss.xml">[PKOS] 2편 - 네트워크 &amp; 스토리지</source>
      <description>AWS Kops 설치 및 기본 사용</description>
      <pubDate>Sat, 18 Mar 2023 15:08:30 GMT</pubDate>
      <content:encoded><![CDATA[
<p>지난 1주차 스터디에이어 2주차 스터디를 진행하였습니다. 이번 스터디에서는 "쿠버네티스 네트워크" 및 "쿠버네티스 스토리지"를 중심으로 학습하였습니다.</p>
<blockquote>
<p>참고 :<br>
원활한 실습을 위해 인스턴스 타입을 변경한 후 진행합니다.</p>
</blockquote>
<h2>0. 사전준비</h2>
<h3>1) Kops 클러스터의 인스턴 그룹 변경</h3>
<div class="language-bash" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="line">kops get ig</span>
<span class="line">NAME			ROLE	MACHINETYPE	MIN	MAX	ZONES</span>
<span class="line">master-ap-northeast-2a	Master	t3.medium	<span class="token number">1</span>	<span class="token number">1</span>	ap-northeast-2a</span>
<span class="line">nodes-ap-northeast-2a	Node	t3.medium	<span class="token number">1</span>	<span class="token number">1</span>	ap-northeast-2a</span>
<span class="line">nodes-ap-northeast-2c	Node	t3.medium	<span class="token number">1</span>	<span class="token number">1</span>	ap-northeast-2c</span>
<span class="line"></span></code></pre></div><div class="language-yaml" data-highlighter="prismjs" data-ext="yml" data-title="yml"><pre class="language-yaml"><code><span class="line">kops edit ig master<span class="token punctuation">-</span>ap<span class="token punctuation">-</span>northeast<span class="token punctuation">-</span>2a</span>
<span class="line"></span>
<span class="line"><span class="token comment"># 예제화면</span></span>
<span class="line"><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> kops.k8s.io/v1alpha2</span>
<span class="line"><span class="token key atrule">kind</span><span class="token punctuation">:</span> InstanceGroup</span>
<span class="line"><span class="token key atrule">metadata</span><span class="token punctuation">:</span></span>
<span class="line">  <span class="token key atrule">creationTimestamp</span><span class="token punctuation">:</span> <span class="token string">"2023-03-05T13:37:26Z"</span></span>
<span class="line">  <span class="token key atrule">labels</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token key atrule">kops.k8s.io/cluster</span><span class="token punctuation">:</span> pkos.hyungwook.link</span>
<span class="line">  <span class="token key atrule">name</span><span class="token punctuation">:</span> master<span class="token punctuation">-</span>ap<span class="token punctuation">-</span>northeast<span class="token punctuation">-</span>2a</span>
<span class="line"><span class="token key atrule">spec</span><span class="token punctuation">:</span></span>
<span class="line">  <span class="token key atrule">image</span><span class="token punctuation">:</span> 099720109477/ubuntu/images/hvm<span class="token punctuation">-</span>ssd/ubuntu<span class="token punctuation">-</span>focal<span class="token punctuation">-</span>20.04<span class="token punctuation">-</span>amd64<span class="token punctuation">-</span>server<span class="token punctuation">-</span><span class="token number">20230112</span></span>
<span class="line">  <span class="token key atrule">instanceMetadata</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token key atrule">httpPutResponseHopLimit</span><span class="token punctuation">:</span> <span class="token number">3</span></span>
<span class="line">    <span class="token key atrule">httpTokens</span><span class="token punctuation">:</span> required</span>
<span class="line">  <span class="token key atrule">machineType</span><span class="token punctuation">:</span> t3.medium <span class="token comment">#기존 t3.medium에서 c5d.large로 변경</span></span>
<span class="line">  <span class="token key atrule">maxSize</span><span class="token punctuation">:</span> <span class="token number">1</span></span>
<span class="line">  <span class="token key atrule">minSize</span><span class="token punctuation">:</span> <span class="token number">1</span></span>
<span class="line">  <span class="token key atrule">role</span><span class="token punctuation">:</span> Master</span>
<span class="line">  <span class="token key atrule">subnets</span><span class="token punctuation">:</span></span>
<span class="line">  <span class="token punctuation">-</span> ap<span class="token punctuation">-</span>northeast<span class="token punctuation">-</span>2a</span>
<span class="line"></span></code></pre></div><ul>
<li>확인</li>
</ul>
<div class="language-bash" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="line">kops get ig</span>
<span class="line">NAME			ROLE	MACHINETYPE	MIN	MAX	ZONES</span>
<span class="line">master-ap-northeast-2a	Master	c5d.large	<span class="token number">1</span>	<span class="token number">1</span>	ap-northeast-2a</span>
<span class="line">nodes-ap-northeast-2a	Node	c5d.large	<span class="token number">1</span>	<span class="token number">1</span>	ap-northeast-2a</span>
<span class="line">nodes-ap-northeast-2c	Node	c5d.large	<span class="token number">1</span>	<span class="token number">1</span>	ap-northeast-2c</span>
<span class="line"></span></code></pre></div><ul>
<li>Cluster Update 수행</li>
</ul>
<div class="language-bash" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="line">kops update cluster <span class="token parameter variable">--name</span> pkos.hyungwook.link <span class="token parameter variable">--yes</span></span>
<span class="line"></span>
<span class="line">kops rolling-update cluster <span class="token parameter variable">--yes</span></span>
<span class="line"></span></code></pre></div>]]></content:encoded>
      <enclosure url="https://raw.githubusercontent.com/hyungwook0221/img/main/uPic/IMeYr3.jpg" type="image/jpeg"/>
    </item>
    <item>
      <title>[PKOS]  1편 - AWS Kops 설치 및 기본 사용</title>
      <link>https://docmoa.github.io/07-Kubernetes/05-Kops/01-kops-on-aws.html</link>
      <guid>https://docmoa.github.io/07-Kubernetes/05-Kops/01-kops-on-aws.html</guid>
      <source url="https://docmoa.github.io/rss.xml">[PKOS]  1편 - AWS Kops 설치 및 기본 사용</source>
      <description>AWS Kops 설치 및 기본 사용</description>
      <pubDate>Sat, 11 Mar 2023 15:35:17 GMT</pubDate>
      <content:encoded><![CDATA[
<blockquote>
<p>💡 본 글은 PKOS(Production Kubernetes Online Study) 2기 스터디의 일부로 작성된 내용입니다.<br>
실제 Production Kubernetes 환경에서 활용 가능한 다양한 정보를 전달하기 위한 시리즈로 작성 예정입니다.</p>
</blockquote>
<h2>1. 실습환경 사전준비</h2>
<p>본 스터디는 AWS 환경에서 Kops(Kubernetes Operations)를 활용한 실습으로 진행할 예정입니다.</p>
<blockquote>
<p>📌 참고 : 필자는 개인적인 이유로 Route 53 계정과, kOps 클러스터 운영 계정을 나눠서 진행합니다.<br>
하나의 계정에서 실습을 진행할 경우에는 사전 환경구성이 다를 수 있는 점 참고 부탁드립니다.</p>
</blockquote>
<h3>1) Route 53 도메인 구매</h3>
<p>AWS의 DNS 웹 서비스인 <a href="https://docs.aws.amazon.com/ko_kr/Route53/latest/DeveloperGuide/Welcome.html" target="_blank" rel="noopener noreferrer">Route 53</a>을 통해 도메인을 구입합니다.<br>
필자는  <code>hyungwook.link</code> 도메인을 구입하였으며, 초기 구입 후  <code>상태: 도메인 등록 진행 중</code> 인 화면을 확인할 수 있습니다,</p>
<figure><img src="https://raw.githubusercontent.com/hyungwook0221/img/main/uPic/1_route53.png" alt="image-20230305211458121" tabindex="0" loading="lazy"><figcaption>image-20230305211458121</figcaption></figure>
<p>구입 시 등록했던 이메일 계정으로 발송된 verify 메일 링크를 클릭하여 활성화 합니다.</p>
<h4>(1) Route53 Verify mail</h4>
<figure><img src="https://raw.githubusercontent.com/hyungwook0221/img/main/uPic/2_route53.png" alt="image-20230305211833451" tabindex="0" loading="lazy"><figcaption>image-20230305211833451</figcaption></figure>
<p>일정시간이 지나면 정상적으로 도메인이 활성화 되된 것을 확인할 수 있습니다.</p>
<h4>(2) 도메인 등록완료 화면</h4>
<figure><img src="https://raw.githubusercontent.com/hyungwook0221/img/main/uPic/3_route53.png" alt="image-20230305212617366" tabindex="0" loading="lazy"><figcaption>image-20230305212617366</figcaption></figure>
<ul>
<li>등록된 도메인 확인</li>
</ul>
<div class="language-bash" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="line"><span class="token comment"># 자신의 도메인에 NS 타입 조회</span></span>
<span class="line"><span class="token comment"># dig ns &lt;구입한 자신의 도메인&gt; +short</span></span>
<span class="line"><span class="token function">dig</span> ns hyungwook.link +short</span>
<span class="line">ns-939.awsdns-53.net.</span>
<span class="line">ns-1575.awsdns-04.co.uk.</span>
<span class="line">ns-233.awsdns-29.com.</span>
<span class="line">ns-1466.awsdns-55.org.</span>
<span class="line"></span></code></pre></div><h3>2) Route 53 등록</h3>
<p>필자는 서두에서 언급한 것 처럼 <strong>Route 53 구매한 계정</strong>과, <strong>kOps 클러스터를 생성할 계정</strong>이 다르므로 다음과 같은 과정을 추가적으로 수행하였습니다.</p>
<h4>(1) Kops 클러스터를 생성할 계정 : <code>pkos.hyungwook.link</code> 레코드를 생성</h4>
<h4>(2) Route 53을 구매한 AWS 계정 : NS 레코드 등록</h4>
<ul>
<li>Kops 클러스터를 생성할 계정에서 등록한 레코드를 정보를 Route 53 구매 계정의 NS 레코드에 등록합니다.</li>
</ul>
<figure><img src="https://raw.githubusercontent.com/hyungwook0221/img/main/uPic/4_route53_서브도메인등록.png" alt="image-20230305223503518" tabindex="0" loading="lazy"><figcaption>image-20230305223503518</figcaption></figure>
<blockquote>
<p>📌 참고 : <a href="https://theburningmonk.com/2021/05/how-to-manage-route53-hosted-zones-in-a-multi-account-environment/" target="_blank" rel="noopener noreferrer">How to manage Route53 hosted zones in a multi-account environment</a></p>
</blockquote>
]]></content:encoded>
      <enclosure url="https://raw.githubusercontent.com/hyungwook0221/img/main/uPic/1_route53.png" type="image/png"/>
    </item>
    <item>
      <title>How to integrate Vault with K8s (CSI &amp; Injection &amp; VSO)</title>
      <link>https://docmoa.github.io/04-HashiCorp/06-Vault/04-UseCase/vault-k8s-usecase-csi-injection.html</link>
      <guid>https://docmoa.github.io/04-HashiCorp/06-Vault/04-UseCase/vault-k8s-usecase-csi-injection.html</guid>
      <source url="https://docmoa.github.io/rss.xml">How to integrate Vault with K8s (CSI &amp; Injection &amp; VSO)</source>
      <description>Kubernetes에서 Vault의 시크릿을 사용하는 CSI방식과 Injection방식에 대한 설명</description>
      <pubDate>Thu, 09 Mar 2023 05:08:03 GMT</pubDate>
      <content:encoded><![CDATA[
<p>Vault에 저장된 시크릿 또는 발행되는(Dynamic) 시크릿을 획득하기 위해서는, 시크릿을 요청하는 클라이언트(사람/앱/장비)가 다음의 과정을 수행해야 합니다.</p>
<ol>
<li>클라이언트가 Vault 토큰을 획득하기 위한 인증 절차</li>
<li>획득한 Vault 토큰의 수명주기 관리 (갱신과 재요청)</li>
<li>Vault의 특정 시크릿 경로를 저장하고 해당 시크릿 요청</li>
<li>동적(Dynamic) 시크릿인 경우 해당 임대(Lease)정보 확인 및 갱신과 재요청</li>
</ol>
<p>Vault는 위의 과정을 클라이언트 대신 플랫폼 수준에서 대행할 수 있는 방안을 제공하고 있습니다. 여기서는 Kubernetes 상에서의 Vault와의 통합 구성을 활용하여 위 과정을 대체하고 Kubernetes 플랫폼 자체(Kuberetes Native)의 기능을 사용하듯 Vault의 시크릿을 사용하게 만드는 방식에 대해 설명합니다.</p>
<p>Kubernetes에 배포되는 컨테이너 애플리케이션이 Vault의 시크릿 데이터를 얻기위해 사용되는 플랫폼 수준(Kubernetes)에서의 통합을 설명합니다. CSI, Sidecar Injection, Vault Secret Operator <sup>VSO</sup>에 대한 설명은 다음 글을 확인해 보세요.</p>
<ul>
<li><a href="https://docmoa.github.io/04-HashiCorp/06-Vault/04-UseCase/vault-k8s-integration-three-methods.html" target="_blank" rel="noopener noreferrer">Kubernetes Vault 통합방안 3가지 비교</a></li>
<li><a href="https://github.com/Great-Stone/vault-for-k8s" target="_blank" rel="noopener noreferrer">Minikube 기반 데모 환경</a></li>
</ul>
<div class="hint-container info">
<p class="hint-container-title">정보</p>
<p>아래 링크는 애플리케이션 또는 CICD 수준에서의 통합 예시 목록 입니다.</p>
<ul>
<li><a href="https://docmoa.github.io/04-HashiCorp/06-Vault/04-UseCase/spring-boot.html" target="_blank" rel="noopener noreferrer">애플리케이션 수준의 통합 예시(Spring boot)</a></li>
<li><a href="https://docmoa.github.io/04-HashiCorp/06-Vault/04-UseCase/jenkins-with-vault.html" target="_blank" rel="noopener noreferrer">CICD 수준의 통합 예시(Jenkins)</a></li>
<li><a href="https://docmoa.github.io/04-HashiCorp/06-Vault/04-UseCase/argocd-vault-plugin.html" target="_blank" rel="noopener noreferrer">CICD 수준의 통합 예시(ArgoCD)</a></li>
</ul>
</div>
<div class="hint-container tip">
<p class="hint-container-title">팁</p>
<p>Vault와 Kuberentes간의 통합의 세가지 방식은 중복으로 적용 가능합니다.</p>
</div>
<div class="hint-container warning">
<p class="hint-container-title">준비사항</p>
<p>구성을 위한 사전 필요 사항은 다음과 같습니다.</p>
<ul>
<li>Vault CLI를 위한 바이너리</li>
<li>Kubectl CLI 도구 및 대상 Kubernetes에 대한 구성 완료</li>
<li>Helm CLI 도구</li>
</ul>
</div>
<h2>1. CSI</h2>
<blockquote>
<p>참고 : <a href="https://developer.hashicorp.com/vault/tutorials/kubernetes/kubernetes-secret-store-driver" target="_blank" rel="noopener noreferrer">https://developer.hashicorp.com/vault/tutorials/kubernetes/kubernetes-secret-store-driver</a></p>
</blockquote>
<p>CSI 방식에서는 <code>SecretProviderClass</code> 가 Vault의 정보를 구성하는 역할을 수행하고, 이후 <code>deployment</code>에서 볼륨 형태로 호출하는 방식으로 구성됩니다.</p>
<figure><figcaption></figcaption></figure>
<h3>1.1 Kubernetes에 CSI 드라이버 설치</h3>
<p>Container Storage Interface(CSI) 드라이버를 설치하면 <code>SecretProviderClass</code> CRD 구성을 사용하여 Kubernets에 외부 시크릿 저장소의 값을 Pod에 마운트 할 수 있습니다.</p>
<p>먼저 CSI 드라이버 Helm 차트를 등록합니다.</p>
<div class="language-bash" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="line">helm repo <span class="token function">add</span> secrets-store-csi-driver <span class="token punctuation">\</span></span>
<span class="line">    https://kubernetes-sigs.github.io/secrets-store-csi-driver/charts</span>
<span class="line"></span></code></pre></div><p>다음으로 CSI 드라이버를 설치 합니다.</p>
<div class="language-bash" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="line">helm <span class="token function">install</span> csi secrets-store-csi-driver/secrets-store-csi-driver <span class="token punctuation">\</span></span>
<span class="line">    <span class="token parameter variable">--set</span> <span class="token assign-left variable">syncSecret.enabled</span><span class="token operator">=</span>true</span>
<span class="line"></span></code></pre></div><p>설치가 정상적으로 완료되면 다음의 Pod를 확인할 수 있습니다.</p>
<div class="language-bash" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="line">$ kubectl get pods</span>
<span class="line"></span>
<span class="line">NAME                                 READY   STATUS    RESTARTS   AGE</span>
<span class="line">csi-secrets-store-csi-driver-vkppq   <span class="token number">3</span>/3     Running   <span class="token number">0</span>          20s</span>
<span class="line"></span></code></pre></div><h3>1.2 CSI를 위한 Vault 구성 (Helm)</h3>
<p>CSI 드라이버에서 <code>vault</code> 프로바이더를 사용하기 위한 구성을 설치해야 합니다. 이 구성이 설치되면 <code>SecretProviderClass</code> 정의 시 프로바이더 대상으로 <code>vault</code>를 지정할 수 있습니다.</p>
<p>먼저 Vault Helm 차트를 등록합니다.</p>
<div class="language-bash" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="line">helm repo <span class="token function">add</span> hashicorp https://helm.releases.hashicorp.com</span>
<span class="line"></span></code></pre></div><p>Vault Helm 차트를 사용하여 1) Kubernetes에 Vault를 설치하는 구성 또는 2) 외부 Vault와 연계하는 구성으로 설치 할 수 있습니다.</p>

<p>설치가 정상적으로 완료되면 다음의 Pod를 확인할 수 있습니다. (<code>vault-0</code>는 Vault 서버를 설치한 경우 확인되고, 외부 Vault 서버를 사용하는 경우에는 확인되지 않습니다.)</p>
<div class="language-bash" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="line">$ kubectl get pods</span>
<span class="line"></span>
<span class="line">NAME                                 READY   STATUS    RESTARTS   AGE</span>
<span class="line">vault-0                    <span class="token number">1</span>/1     Running   <span class="token number">0</span>          58s</span>
<span class="line">vault-csi-provider-t874l   <span class="token number">1</span>/1     Running   <span class="token number">0</span>          58s</span>
<span class="line"></span></code></pre></div><h3>1.3 CSI에서 사용할 Vault 시크릿 정의</h3>
<p>간단한 예로 Vault KV 시크릿 엔진을 사용합니다.</p>
<div class="hint-container warning">
<p class="hint-container-title">Kubernetes내의 Vault에서 CLI 사용</p>
<p>Kubernetes내에 배포된 Vault인 경우 다음과 같이 쉘을 실행할 수 있도록 Pod에 접근합니다. (Optional)</p>
<div class="language-bash" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="line">kubectl <span class="token builtin class-name">exec</span> <span class="token parameter variable">-it</span> vault-0 -- /bin/sh</span>
<span class="line"></span></code></pre></div></div>
<details class="hint-container details"><summary>/secret 경로에 KV 시크릿 엔진 활성화 (Optional)</summary>
<p>Vault가 개발 모드로 실행된 경우 기본적으로 <code>Secret</code>이라는 경로에 KV version2 시크릿 엔진이 활성화되어있습니다. 만약 개발 모드가 아닌경우 다음과 같이 활성화 합니다. (Optional)</p>
<div class="language-bash" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="line">vault secrets <span class="token builtin class-name">enable</span> <span class="token parameter variable">-path</span> secret <span class="token parameter variable">-version</span><span class="token operator">=</span><span class="token number">2</span> kv</span>
<span class="line"></span></code></pre></div></details>
<p><code>secret/db-pass</code> 경로에 <code>password</code> 값을 저장 합니다.</p>
<div class="language-bash" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="line">vault kv put secret/db-pass <span class="token assign-left variable">password</span><span class="token operator">=</span><span class="token string">"db-secret-password-v1"</span></span>
<span class="line"></span></code></pre></div><p>다음과 같이 저장된 값을 확인할 수 있습니다.</p>
<div class="language-bash" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="line">$ vault kv get secret/db-pass</span>
<span class="line"></span>
<span class="line"><span class="token operator">==</span><span class="token operator">=</span> Secret Path <span class="token operator">==</span><span class="token operator">=</span></span>
<span class="line">secret/data/db-pass</span>
<span class="line"></span>
<span class="line"><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">=</span> Metadata <span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">=</span></span>
<span class="line">Key                Value</span>
<span class="line"></span></code></pre></div>]]></content:encoded>
    </item>
    <item>
      <title>2023년 3월</title>
      <link>https://docmoa.github.io/04-HashiCorp/08-Updates/98-2023/2023-03.html</link>
      <guid>https://docmoa.github.io/04-HashiCorp/08-Updates/98-2023/2023-03.html</guid>
      <source url="https://docmoa.github.io/rss.xml">2023년 3월</source>
      <description>2023년 3월 Update</description>
      <pubDate>Tue, 07 Mar 2023 14:14:10 GMT</pubDate>
      <content:encoded><![CDATA[
<h2>Product 소개</h2>
<ul>
<li>
<p>Writing Terraform for unsupported resources</p>
<ul>
<li><a href="https://www.hashicorp.com/blog/writing-terraform-for-unsupported-resources" target="_blank" rel="noopener noreferrer">Hashicorp Blog</a></li>
<li>Terraform 과 대상 환경 간 연동을 위해 Provider 를 활용할 때 대상 환경이 API 을 통해서는 지원하는 기능이지만 Provider 에는 구현되어 있지 않아 사용할 수 없는 기능이 종종 있습니다 (예: Vault Provider 기반 Vault 운영 시 Unseal 기능 사용 불가). Terracurl 을 통해 API 을 통해서만 지원되는 기능들을 Terraform Code 로 구성하여 하나의 Resource 로 관리할 수 있습니다.</li>
</ul>
</li>
</ul>
<h2>Product Update</h2>
<ul>
<li>Terraform
<ul>
<li>CLI
<ul>
<li><a href="https://github.com/hashicorp/terraform/releases/tag/v1.3.9" target="_blank" rel="noopener noreferrer">1.3.9 Release</a>
<ul>
<li>이미 폐기된 Resource 에 대해 제거 및 plan 할 때 발생하는 이슈 해결</li>
</ul>
</li>
</ul>
</li>
<li><a href="https://developer.hashicorp.com/terraform/enterprise/releases" target="_blank" rel="noopener noreferrer">Enterprise Release</a>
<ul>
<li><a href="https://developer.hashicorp.com/terraform/enterprise/releases/2023/v202302-1" target="_blank" rel="noopener noreferrer">2월 Release</a> 출시 (<code>v202302-1 (681)</code>)</li>
<li>필수 Upgrade Versison: Release Note 에서 * 표기된 Version 은 필수로 거쳐야 하는 Version (예: v202207-2)</li>
<li>구버전 OS 및 Postrgres DB 에 대한 지원 종료
<ul>
<li>대상 OS
<ul>
<li>Debian 8, 9 / Ubuntu 14.04, 16.04 / Amazon Linux 2014.03, 2014.09, 2015.03, 2015.09, 2016.03, 2016.09, 2017.03, 2017.09, 2018.03</li>
</ul>
</li>
<li>대상 Postgres
<ul>
<li>Postgres 11</li>
<li>TFE 에 대해 External PostgresSQL 사용 시 최소 버전 12 이상 필요 (Release 659 부터 적용)</li>
</ul>
</li>
</ul>
</li>
<li>Known Issue 1: 관리자 설정에서 TFC Agent 에 대해 사용 여부를 선택하지 않은 상태에서 <code>agent run pipeline mode</code> 사용 시 실행 계획이 무기한 Queue 에 대기하는 문제 발생. 관련하여 <code>tfe-task-worker</code> 를 통해  <code>[ERROR] core: Unexpected HTTP response code: method=POST url=https://terraform.example.com/api/agent/register status=404</code> 라는 Error Log 출력되며 2023년 3월 Release (<code>v202303-1</code>) 에서 해결 예정</li>
<li>Known Issue 2: API 를 통해 team 에게 <code>manage-workspaces</code> 권한 부여 시, <code>read-workspaces</code> 도 부여되는 문제 발생. 더불어 <code>manage-workspaces</code> 에 대한 권한 제거 시 <code>read-workspaces</code> 권한은 제거 되지 않고 부여된 채로 유지 되는 문제 발생. 이후 출시 예정인 Release 에서 해결 예정</li>
<li>Breaking Changes: 여러 Workspace 를 그룹으로 엮는 Project 기능이 추가됨에 따라</li>
</ul>
</li>
<li>Provider
<ul>
<li><a href="https://github.com/hashicorp/terraform-provider-aws/releases/tag/v4.57.1" target="_blank" rel="noopener noreferrer">AWS v4.57.1 주요 수정사항</a>
<ul>
<li>Bug Fix
<ul>
<li>resource/aws_lambda_function 에 대해 <code>skip_destroy</code> 를 Null 값 처리 시 발생하는 <code>Provider produced inconsitent final plan</code> 오류 개선</li>
</ul>
</li>
</ul>
</li>
<li><a href="https://github.com/hashicorp/terraform-provider-azurerm/releases/tag/v3.46.0" target="_blank" rel="noopener noreferrer">Azure v3.46.0 주요 수정사항</a>
<ul>
<li>신규 resource 추가: <code>azurerm_mobile_network</code> 및 <code>azurerm_sentinel_alert_rule</code></li>
<li>기능 개선
<ul>
<li>resource 에 대해 AuthV2(EasyAuthV2) 지원</li>
</ul>
</li>
<li>Bug Fix
<ul>
<li>azurerm_storage_object_replication 에 대해 cross tenant replication 이 비활성화 되어 있는 경우 동작하지 않는 오류 개선</li>
</ul>
</li>
</ul>
</li>
<li><a href="https://github.com/hashicorp/terraform-provider-google/releases/tag/v4.56.0" target="_blank" rel="noopener noreferrer">GCP v4.56.0 주요 수정사항</a>
<ul>
<li>신규 resource 추가: <code>google_data_catalog</code>, <code>google_scc_mute_config</code>, <code>google_workstations_workstation_config</code></li>
<li>기능 개선
<ul>
<li>compute 에 대해 resource-policy 관련 max_distance 설정 추가</li>
<li>compute 에 대해 google_compute_shared_vpc_service_project 관련 deletion_policy 설정 추가</li>
<li>networkservices 에 대해 allow_origins 에 대한 최대 설정치를 기존 5 에서 25 로 변경</li>
</ul>
</li>
<li>Bug Fix
<ul>
<li>spanner 에 대해  google_spanner_database 관련 deletion_protection 수정 시 발생하는 오류 개선</li>
<li>spanner 에 대해 google_spanner_instance 에 대해 force_destory 수정 시 발생하는 오류 개선</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li>Vault
<ul>
<li>1.13.0
<ul>
<li><a href="https://www.hashicorp.com/blog/vault-1-13-adds-kubernetes-operator-mfa-improvements-and-more" target="_blank" rel="noopener noreferrer">Hashicorp Blog</a></li>
<li>상세 <a href="https://github.com/hashicorp/vault/releases/tag/v1.13.0" target="_blank" rel="noopener noreferrer">Release Note</a></li>
<li>Multi-namespace access: namespace 간 권한 부여를 통한 secret 공유 기능 추가</li>
<li>Multi Vault Agent: 여러 config 파일 연동하여 다양한 namespace 및 path 에 agent 접근 기능 추가</li>
<li>Certificate revocation for cross-cluster management: PR 구성과 같은 Multi Cluster 구조에서 Cluster 간 PKI 인증서 만료 처리에 대한 동기화 지원</li>
<li>Managed transit keys: Transit 암호화 처리 시 사용자 key 사용 지원</li>
</ul>
</li>
</ul>
</li>
<li>Consul
<ul>
<li>1.15.0
<ul>
<li><a href="https://www.hashicorp.com/blog/consul-1-15-adds-envoy-extensions-and-enhances-access-logging" target="_blank" rel="noopener noreferrer">Hashicorp Blog</a></li>
<li>상세 <a href="https://github.com/hashicorp/consul/releases/tag/v1.15.0" target="_blank" rel="noopener noreferrer">Release Note</a></li>
<li>Envoy access logging: service mesh 구성 시 config entries 와 CRD 를 기반한 손쉬운 envoy log 활성화 지원</li>
<li>Consul Envoy extensions: <code>EnvoyExtensions</code> 설정을 통해 lua 및 lambda 등에 대한 service mesh 연동 지원</li>
<li>Service-to-service troubleshooting: <code>consul troubleshoot</code> 명령어 지원을 통해 서비스 간 통신 오류에 대한 진단 지원</li>
<li>Linux VM runtime support in Consul-native API Gateway (beta): Linux VM 환경 기반 Application 의 service mesh 구성에 필요한 API Gateway 지원</li>
</ul>
</li>
</ul>
</li>
<li>Nomad
<ul>
<li>1.5.0
<ul>
<li><a href="https://www.hashicorp.com/blog/nomad-1-5-adds-single-sign-on-and-dynamic-node-metadata" target="_blank" rel="noopener noreferrer">Hashicorp Blog</a></li>
<li>상세 <a href="https://github.com/hashicorp/nomad/releases/tag/v1.5.0" target="_blank" rel="noopener noreferrer">Release Note</a></li>
<li>Single sign-on and OIDC support: OIDC 기반 SSO 지원 및 Login 기능 추가</li>
<li>Dynamic node metadata: client node 에 대해 constraints, affinity, spread 등 job scheduling 결정에 영향을 주는 meta 정보 동적 설정 지원</li>
<li>Job Templates:  Job 명세 작성 지원을 위한 Template 기능 지원</li>
</ul>
</li>
</ul>
</li>
</ul>
]]></content:encoded>
    </item>
    <item>
      <title>Token의 이해</title>
      <link>https://docmoa.github.io/04-HashiCorp/06-Vault/01-Information/vault-token.html</link>
      <guid>https://docmoa.github.io/04-HashiCorp/06-Vault/01-Information/vault-token.html</guid>
      <source url="https://docmoa.github.io/rss.xml">Token의 이해</source>
      <description>Vault Token의 구성과 종류 설명</description>
      <pubDate>Sat, 04 Mar 2023 08:04:42 GMT</pubDate>
      <content:encoded><![CDATA[
<blockquote>
<p><a href="https://developer.hashicorp.com/vault/docs/concepts/tokens" target="_blank" rel="noopener noreferrer">https://developer.hashicorp.com/vault/docs/concepts/tokens</a></p>
</blockquote>
<figure><img src="https://raw.githubusercontent.com/Great-Stone/images/master/uPic/image-20230304125220402.png" alt="image-20230304125220402" tabindex="0" loading="lazy"><figcaption>image-20230304125220402</figcaption></figure>
<h2>1. Token의 구성과 내용</h2>
<p>다음은 수동으로 Token을 생성하는 방법으로 Token을 생성할 수 있는 권한의 사용자가 CLI를 사용하여 <code>default</code> Policy를 갖는 Token을 생성하는 경우의 예이다.</p>
<div class="language-bash" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="line">$ vault token create <span class="token parameter variable">-policy</span><span class="token operator">=</span>default</span>
<span class="line"></span>
<span class="line">Key                  Value</span>
<span class="line"></span></code></pre></div>]]></content:encoded>
      <enclosure url="https://raw.githubusercontent.com/Great-Stone/images/master/uPic/image-20230304125220402.png" type="image/png"/>
    </item>
    <item>
      <title>Pass HCL to API</title>
      <link>https://docmoa.github.io/04-HashiCorp/07-Nomad/04-UseCase/job-start-from-hcl.html</link>
      <guid>https://docmoa.github.io/04-HashiCorp/07-Nomad/04-UseCase/job-start-from-hcl.html</guid>
      <source url="https://docmoa.github.io/rss.xml">Pass HCL to API</source>
      <description>Passing Jobs defined in HCL to API (Execute Job written in HCL in Nomad Job Run API)</description>
      <pubDate>Fri, 24 Feb 2023 06:24:30 GMT</pubDate>
      <content:encoded><![CDATA[
<p>HCL로 작성된 Job의 경우 Nomad CLI 또는 UI 접속이 가능하다면 바로 적용 가능하다.</p>
<details class="hint-container details"><summary>HCL Job Sample (2048.hcl)</summary>
<div class="language-hcl" data-highlighter="prismjs" data-ext="hcl" data-title="hcl"><pre class="language-hcl"><code><span class="line">job <span class="token string">"2048-game"</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token property">datacenters</span> <span class="token punctuation">=</span> <span class="token punctuation">[</span><span class="token string">"dc1"</span><span class="token punctuation">]</span></span>
<span class="line">  <span class="token property">type</span>        <span class="token punctuation">=</span> <span class="token string">"service"</span></span>
<span class="line">  group <span class="token string">"game"</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token property">count</span> <span class="token punctuation">=</span> <span class="token number">1</span> <span class="token comment"># number of instances</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">network</span> <span class="token punctuation">{</span></span>
<span class="line">      port <span class="token string">"http"</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token property">static</span> <span class="token punctuation">=</span> <span class="token number">80</span></span>
<span class="line">      <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    task <span class="token string">"2048"</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token property">driver</span> <span class="token punctuation">=</span> <span class="token string">"docker"</span></span>
<span class="line"></span>
<span class="line">      <span class="token keyword">config</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token property">image</span> <span class="token punctuation">=</span> <span class="token string">"alexwhen/docker-2048"</span></span>
<span class="line"></span>
<span class="line">        <span class="token property">ports</span> <span class="token punctuation">=</span> <span class="token punctuation">[</span></span>
<span class="line">          <span class="token string">"http"</span></span>
<span class="line">        <span class="token punctuation">]</span></span>
<span class="line"></span>
<span class="line">      <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">      <span class="token keyword">resources</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token property">cpu</span>    <span class="token punctuation">=</span> <span class="token number">500</span> <span class="token comment"># 500 MHz</span></span>
<span class="line">        <span class="token property">memory</span> <span class="token punctuation">=</span> <span class="token number">256</span> <span class="token comment"># 256MB</span></span>
<span class="line">      <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre></div></details>
<div class="language-bash" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="line">nomad job run <span class="token number">2048</span>.hcl</span>
<span class="line"></span></code></pre></div><figure><figcaption></figcaption></figure>
<p>하지만 CLI/UI를 사용할 수 없는 환경에서 API를 사용하여 Job을 실행해야하는 경우, 특히 CICD Pipeline구성에서 API를 사용하여 Job을 실행해야하는 경우 HCL을 Json 형식으로 변경해야하는 경우가 있다.</p>
<h2>HCL parse to Json</h2>
<p>HCL을 Json으로 변경하는 방식의 첫번째는 CLI를 사용하는 방식이다.</p>
<div class="language-bash" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="line">nomad job run <span class="token parameter variable">-output</span> <span class="token number">2048</span>.hcl <span class="token operator">&gt;</span> payload.json</span>
<span class="line"></span></code></pre></div><p>하지만 이 경우 <code>-output</code>을 입력하지 않는 경우 Job이 실행되는 실수의 여지가 있고, CLI가 없다면 사용 불가하다.</p>
<p>다음은 API를 사용하는 방식이다.</p>
<blockquote>
<p>Parsh Job : <a href="https://developer.hashicorp.com/nomad/api-docs/jobs#parse-job" target="_blank" rel="noopener noreferrer">https://developer.hashicorp.com/nomad/api-docs/jobs#parse-job</a></p>
</blockquote>
<p>문서의 내용처럼 HCL을 한줄로 변경하여 API로 요청하면 Json으로 형태를 출력해준다.</p>
<h3>Sample Payload</h3>
<div class="language-json" data-highlighter="prismjs" data-ext="json" data-title="json"><pre class="language-json"><code><span class="line"><span class="token punctuation">{</span></span>
<span class="line">  <span class="token property">"JobHCL"</span><span class="token operator">:</span> <span class="token string">"job \"example\" {\n  type = \"service\"\n  group \"cache\" {}\n}"</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token property">"Canonicalize"</span><span class="token operator">:</span> <span class="token boolean">true</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre></div><p>HCL을 한줄로 변경하기 까다롭거나 별도의 도구가 없다면 <code>jq</code>를 활용한 방식도 가이드하고 있다.</p>
<div class="language-bash" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="line">jq <span class="token parameter variable">-Rsc</span> <span class="token string">'{ JobHCL: ., Canonicalize: true }'</span> example.nomad.hcl <span class="token operator">&gt;</span> payload.json</span>
<span class="line"></span></code></pre></div><h3>Sample Request</h3>
<p><code>/v1/jobs/parse</code> 엔드포인트로 <code>payload.json</code> 데이터를 담아 요청한다.</p>
<div class="language-bash" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="line"><span class="token function">curl</span> <span class="token punctuation">\</span></span>
<span class="line">    <span class="token parameter variable">--request</span> POST <span class="token punctuation">\</span></span>
<span class="line">    <span class="token parameter variable">--data</span> @payload.json <span class="token punctuation">\</span></span>
<span class="line">    https://localhost:4646/v1/jobs/parse</span>
<span class="line"></span></code></pre></div><h3>Sample Response</h3>
<p>Json으로 변경된 값을 반환한다.</p>
<div class="language-json" data-highlighter="prismjs" data-ext="json" data-title="json"><pre class="language-json"><code><span class="line"><span class="token punctuation">{</span></span>
<span class="line">  <span class="token property">"AllAtOnce"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token property">"Constraints"</span><span class="token operator">:</span> <span class="token null keyword">null</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token property">"Affinities"</span><span class="token operator">:</span> <span class="token null keyword">null</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token property">"CreateIndex"</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token property">"Datacenters"</span><span class="token operator">:</span> <span class="token null keyword">null</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token property">"ID"</span><span class="token operator">:</span> <span class="token string">"my-job"</span><span class="token punctuation">,</span></span>
<span class="line"></span></code></pre></div><h2>HCL로 작성된 Job을 API로 실행하기</h2>
<p>API가 제공하는 Json Parse를 사용, 다음과 같은 순서로 Job을 실행할 수 있다.</p>
<h3>1. Json으로 생성할 HCL을 <code>hcl.json</code>으로 생성</h3>
<div class="language-bash" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="line">jq <span class="token parameter variable">-Rsc</span> <span class="token string">'{ JobHCL: ., Canonicalize: true }'</span> <span class="token number">2048</span>.hcl <span class="token operator">&gt;</span> hcl.json</span>
<span class="line"></span></code></pre></div><h3>2. <code>/v1/jobs/parse</code> 엔드포인트로 요청하여 Json형태로 파싱</h3>
<div class="language-bash" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="line"><span class="token function">curl</span> <span class="token parameter variable">--request</span> POST <span class="token parameter variable">--data</span> @hcl.json http://127.0.0.1:4646/v1/jobs/parse</span>
<span class="line"></span></code></pre></div><p>한가지 문제는, Job의 Json 정의에는 <code>Job</code> 이라는 키값이 최상위에 존재해야하는데, 반환되는 결과에는 <code>Job</code> 하위부터 출력된다. 따라서 <code>jq</code>를 사용하여 다음과 같이 출력을 수정하여 저장한다.</p>
<div class="language-bash" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="line"><span class="token function">curl</span> <span class="token parameter variable">--request</span> POST <span class="token parameter variable">--data</span> @hcl.json http://127.0.0.1:4646/v1/jobs/parse <span class="token operator">|</span> jq <span class="token parameter variable">-s</span> <span class="token string">'{ Job: .[] }'</span> <span class="token operator">&gt;</span> <span class="token number">2048</span>.json</span>
<span class="line"></span></code></pre></div><h3>3. 생성된 json으로 Job 실행</h3>
<div class="language-bash" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="line"><span class="token function">curl</span> <span class="token parameter variable">--request</span> POST <span class="token parameter variable">--data</span> @2048.json http://127.0.0.1:4646/v1/jobs</span>
<span class="line"></span></code></pre></div>]]></content:encoded>
    </item>
    <item>
      <title>Vault Development Mode Options</title>
      <link>https://docmoa.github.io/04-HashiCorp/06-Vault/01-Information/vault-dev-mode-option.html</link>
      <guid>https://docmoa.github.io/04-HashiCorp/06-Vault/01-Information/vault-dev-mode-option.html</guid>
      <source url="https://docmoa.github.io/rss.xml">Vault Development Mode Options</source>
      <description>Vault 개발 모드 실행시 옵션 값 설명</description>
      <pubDate>Sun, 12 Feb 2023 08:01:51 GMT</pubDate>
      <content:encoded><![CDATA[
<p>볼트 개발 모드 서버를 시작하는 기초적인 커맨드와 실행 후 안내 메시지는 다음과 같다.</p>
<div class="language-bash" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="line">$ vault server <span class="token parameter variable">-dev</span></span>
<span class="line"></span>
<span class="line"><span class="token operator">==</span><span class="token operator">&gt;</span> Vault server configuration:</span>
<span class="line"></span>
<span class="line">             Api Address: http://127.0.0.1:8200</span>
<span class="line">                     Cgo: disabled</span>
<span class="line">         Cluster Address: https://127.0.0.1:8201</span>
<span class="line">   Environment Variables: <span class="token environment constant">HOME</span>, ITERM_PROFILE, <span class="token punctuation">..</span>.</span>
<span class="line">              Go Version: go1.19.4</span>
<span class="line">              Listener <span class="token number">1</span>: tcp <span class="token punctuation">(</span>addr: <span class="token string">"127.0.0.1:8200"</span>, cluster address: <span class="token string">"127.0.0.1:8201"</span>, max_request_duration: <span class="token string">"1m30s"</span>, max_request_size: <span class="token string">"33554432"</span>, tls: <span class="token string">"disabled"</span><span class="token punctuation">)</span></span>
<span class="line">               Log Level: info</span>
<span class="line">                   Mlock: supported: false, enabled: <span class="token boolean">false</span></span>
<span class="line">           Recovery Mode: <span class="token boolean">false</span></span>
<span class="line">                 Storage: inmem</span>
<span class="line">                 Version: Vault v1.12.3, built <span class="token number">2023</span>-02-02T09:07:27Z</span>
<span class="line">             Version Sha: 209b3dd99fe8ca320340d08c70cff5f620261f9b</span>
<span class="line"></span>
<span class="line"><span class="token operator">==</span><span class="token operator">&gt;</span> Vault server started<span class="token operator">!</span> Log data will stream <span class="token keyword">in</span> below:</span>
<span class="line"></span>
<span class="line"><span class="token punctuation">..</span>.</span>
<span class="line"></span></code></pre></div><p>개발 모드에서 제공하는 옵션을 확인하기 위해 <code>vault server -h</code> 커맨드를 실행하면 하단에서 <code>Dev Opstions</code>를 확인할 수 있다.</p>
<div class="language-bash" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="line">$ vault server <span class="token parameter variable">-h</span></span>
<span class="line"></span>
<span class="line"><span class="token punctuation">..</span>.</span>
<span class="line">Dev Options:</span>
<span class="line"></span>
<span class="line">  <span class="token parameter variable">-dev</span></span>
<span class="line">      Enable development mode. In this mode, Vault runs in-memory and starts</span>
<span class="line">      unsealed. As the name implies, <span class="token keyword">do</span> not run <span class="token string">"dev"</span> mode <span class="token keyword">in</span> production. The</span>
<span class="line">      default is false.</span>
<span class="line"></span>
<span class="line">  -dev-listen-address<span class="token operator">=</span><span class="token operator">&lt;</span>string<span class="token operator">&gt;</span></span>
<span class="line">      Address to <span class="token builtin class-name">bind</span> to <span class="token keyword">in</span> <span class="token string">"dev"</span> mode. The default is <span class="token number">127.0</span>.0.1:8200. This</span>
<span class="line">      can also be specified via the VAULT_DEV_LISTEN_ADDRESS environment</span>
<span class="line">      variable.</span>
<span class="line"></span>
<span class="line">  -dev-no-store-token</span>
<span class="line">      Do not persist the dev root token to the token helper <span class="token punctuation">(</span>usually the <span class="token builtin class-name">local</span></span>
<span class="line">      filesystem<span class="token punctuation">)</span> <span class="token keyword">for</span> <span class="token for-or-select variable">use</span> <span class="token keyword">in</span> future requests. The token will only be displayed</span>
<span class="line">      <span class="token keyword">in</span> the <span class="token builtin class-name">command</span> output. The default is false.</span>
<span class="line"></span>
<span class="line">  -dev-root-token-id<span class="token operator">=</span><span class="token operator">&lt;</span>string<span class="token operator">&gt;</span></span>
<span class="line">      Initial root token. This only applies when running <span class="token keyword">in</span> <span class="token string">"dev"</span> mode.</span>
<span class="line">      This can also be specified via the VAULT_DEV_ROOT_TOKEN_ID environment</span>
<span class="line">      variable.</span>
<span class="line"></span>
<span class="line">  -dev-tls</span>
<span class="line">      Enable TLS development mode. In this mode, Vault runs in-memory and</span>
<span class="line">      starts unsealed, with a generated TLS CA, certificate and key. As the</span>
<span class="line">      name implies, <span class="token keyword">do</span> not run <span class="token string">"dev-tls"</span> mode <span class="token keyword">in</span> production. The default is</span>
<span class="line">      false.</span>
<span class="line"></span>
<span class="line">  -dev-tls-cert-dir<span class="token operator">=</span><span class="token operator">&lt;</span>string<span class="token operator">&gt;</span></span>
<span class="line">      Directory where generated TLS files are created <span class="token keyword">if</span> <span class="token variable"><span class="token variable">`</span>-dev-tls<span class="token variable">`</span></span> is</span>
<span class="line">      specified. If left unset, files are generated <span class="token keyword">in</span> a temporary directory.</span>
<span class="line"></span></code></pre></div><p>개발 모드로 실행하는 <code>-dev </code>  옵션 외 다른 옵션에 대한 설명은 다음과 같다.</p>
<ul>
<li><code>-dev-listen-address</code> : 기본은 <code>127.0.0.1:8200</code>이며, 변경을 원하는 경우 여기 입력한다. <code>VAULT_DEV_LISTEN_ADDRESS</code> 환경변수로도 대체 가능하다.</li>
<li><code>-dev-no-store-token</code> : 개발 모드시 사용자 디렉토리에 저장되는 <code>.vault-token</code>을 생성하지 않는 경우 <code>true</code>로 설정한다.</li>
<li><code>-dev-root-token-id</code>: <code>Root Token</code>은 임의의 값으로 생성되는데, 개발 모드 한정으로 사용자가 지정한 문자열로 정의할 수 있다.</li>
<li><code>-dev-tls</code> : 개발 모드를 위한 임시 TLS 인증서를 적용하고 <code>Api Address</code>를 <code>HTTPS</code>로 설정한다. 실행 후 출력에 <code>VAULT_CACERT</code> 로 임의 생성된 인증서 위치와 설정을 출력한다.</li>
<li><code>-dev-tls-cert-dir</code>: <code>-dev-tls</code>가 적용된 경우 사용자가 보유한 인증서를 적용하려는 경우 대상 디렉토리를 지정한다.</li>
</ul>
<p>다음과 같이 옵션을 적용한 개발 모드 볼트를 실행하면, <code>Api Address</code>가 지정된 주소로 설정되고, <code>.vault-token</code>은 생성되지 않고, <code>Root Token</code>이 <code>root</code>로 설정되고, 생성된 인증서 위치와 커맨드 실행에 필요한  <code>VAULT_CACERT</code>가 출력되는 것을 확인할 수 있다.</p>
<div class="language-bash" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="line">$ vault server <span class="token parameter variable">-dev</span> -dev-listen-address<span class="token operator">=</span><span class="token number">0.0</span>.0.0:8200 -dev-no-store-token<span class="token operator">=</span>true -dev-root-token-id<span class="token operator">=</span>root -dev-tls</span>
<span class="line"></span>
<span class="line"><span class="token operator">==</span><span class="token operator">&gt;</span> Vault server configuration:</span>
<span class="line"></span>
<span class="line">             Api Address: https://0.0.0.0:8200</span>
<span class="line">                       <span class="token punctuation">..</span>.</span>
<span class="line">              Listener <span class="token number">1</span>: tcp <span class="token punctuation">(</span>addr: <span class="token string">"0.0.0.0:8200"</span>, cluster address: <span class="token string">"0.0.0.0:8201"</span>, max_request_duration: <span class="token string">"1m30s"</span>, max_request_size: <span class="token string">"33554432"</span>, tls: <span class="token string">"enabled"</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token operator">==</span><span class="token operator">&gt;</span> Vault server started<span class="token operator">!</span> Log data will stream <span class="token keyword">in</span> below:</span>
<span class="line"></span>
<span class="line"><span class="token punctuation">..</span>.</span>
<span class="line"></span>
<span class="line">You may need to <span class="token builtin class-name">set</span> the following environment variables:</span>
<span class="line"></span>
<span class="line">    $ <span class="token builtin class-name">export</span> <span class="token assign-left variable">VAULT_ADDR</span><span class="token operator">=</span><span class="token string">'https://0.0.0.0:8200'</span></span>
<span class="line">    $ <span class="token builtin class-name">export</span> <span class="token assign-left variable">VAULT_CACERT</span><span class="token operator">=</span><span class="token string">'/var/folders/5r/8y6t82xd1h183tq1l_whv8yw0000gn/T/vault-tls3194599057/vault-ca.pem'</span></span>
<span class="line"></span>
<span class="line">The unseal key and root token are displayed below <span class="token keyword">in</span> <span class="token keyword">case</span> you want to</span>
<span class="line">seal/unseal the Vault or re-authenticate.</span>
<span class="line"></span>
<span class="line">Unseal Key: <span class="token assign-left variable">DfFexcExFfbN3jRu7cRuAvMeLMpP9J9yNTgzvvcO8Gw</span><span class="token operator">=</span></span>
<span class="line">Root Token: root</span>
<span class="line"></span>
<span class="line">Development mode should NOT be used <span class="token keyword">in</span> production installations<span class="token operator">!</span></span>
<span class="line"></span></code></pre></div>]]></content:encoded>
    </item>
    <item>
      <title>Vault Server Configuration - Info</title>
      <link>https://docmoa.github.io/04-HashiCorp/06-Vault/01-Information/vault-server-configuration-info.html</link>
      <guid>https://docmoa.github.io/04-HashiCorp/06-Vault/01-Information/vault-server-configuration-info.html</guid>
      <source url="https://docmoa.github.io/rss.xml">Vault Server Configuration - Info</source>
      <description>Vault 서버 실행시 구성 정보 내용 설명</description>
      <pubDate>Sun, 12 Feb 2023 07:21:43 GMT</pubDate>
      <content:encoded><![CDATA[
<p>볼트 서버를 시작하는 기초적인 커맨드와 실행 후 안내 메시지는 다음과 같다.</p>
<div class="language-bash" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="line">$ vault server <span class="token parameter variable">-dev</span></span>
<span class="line"></span>
<span class="line"><span class="token operator">==</span><span class="token operator">&gt;</span> Vault server configuration:</span>
<span class="line"></span>
<span class="line">             Api Address: http://127.0.0.1:8200</span>
<span class="line">                     Cgo: disabled</span>
<span class="line">         Cluster Address: https://127.0.0.1:8201</span>
<span class="line">   Environment Variables: <span class="token environment constant">HOME</span>, ITERM_PROFILE, <span class="token punctuation">..</span>.</span>
<span class="line">              Go Version: go1.19.4</span>
<span class="line">              Listener <span class="token number">1</span>: tcp <span class="token punctuation">(</span>addr: <span class="token string">"127.0.0.1:8200"</span>, cluster address: <span class="token string">"127.0.0.1:8201"</span>, max_request_duration: <span class="token string">"1m30s"</span>, max_request_size: <span class="token string">"33554432"</span>, tls: <span class="token string">"disabled"</span><span class="token punctuation">)</span></span>
<span class="line">               Log Level: info</span>
<span class="line">                   Mlock: supported: false, enabled: <span class="token boolean">false</span></span>
<span class="line">           Recovery Mode: <span class="token boolean">false</span></span>
<span class="line">                 Storage: inmem</span>
<span class="line">                 Version: Vault v1.12.3, built <span class="token number">2023</span>-02-02T09:07:27Z</span>
<span class="line">             Version Sha: 209b3dd99fe8ca320340d08c70cff5f620261f9b</span>
<span class="line"></span>
<span class="line"><span class="token operator">==</span><span class="token operator">&gt;</span> Vault server started<span class="token operator">!</span> Log data will stream <span class="token keyword">in</span> below:</span>
<span class="line"></span>
<span class="line"><span class="token punctuation">..</span>.</span>
<span class="line"></span></code></pre></div><p>기동 후 서버가 실행된 주요 설정 정보의 설명인 <code>Vault server configuration</code>의 내용의 설명은 다음과 같다.</p>
<ul>
<li>
<p><code>Api Address: http://127.0.0.1:8200</code><br>
: 볼트와의 인터페이스를 위한 API 주소로, RestAPI, CLI, UI 모두 해당 주소와 통신한다.</p>
</li>
<li>
<p><code>Cgo: disabled</code><br>
: 볼트는 golang으로 이루어져 있는데, go 컴파일 시 <code>CGO_ENABLED</code>가 활성화되어있다면 dynamic library로 빌드된다. 이 경우 실행 환경에 컴파일 시 사용되는 링크 모듈이 존재하지 않으면 에러가 발생하므로, 실행된 볼트 바이너리는 빌드시 static library로 빌드되었다는 의미다.</p>
</li>
<li>
<p><code>Cluster Address: https://127.0.0.1:8201</code><br>
: 볼트 서버를 고가용성(HA)을 위해 다수의 서버로 구성한 경우 서버 간에 통신하는데 사용되는 주소로, TLS1.2로 상호간 인증한다.</p>
</li>
<li>
<p><code>Environment Variables: HOME, ITERM_PROFILE, ...</code><br>
: 볼트 서버가 실행된 환경의 환경변수 값의 나열로, 볼트 실행에 영향을 주는 환경변수가 있는지 확인할 수 있다.</p>
</li>
<li>
<p><code>Go Version: go1.19.4</code><br>
: 볼트 서버가 빌드 된 golang 버전이다.</p>
</li>
<li>
<p><code>Listener 1: tcp (addr: "127.0.0.1:8200", cluster address: "127.0.0.1:8201", max_request_duration: "1m30s", max_request_size: "33554432", tls: "disabled")</code><br>
: 볼트의 리스너 정보로, 이 정보를 기반으로 <code>Api Address</code>, <code>Cluster Address</code> 가 설정 된다. 숫자가 붙어있다는 의미는 리스터를 여러개 설정 할 수 있다는 의미다.</p>
</li>
<li>
<p><code>Log Level: info</code><br>
: 볼트에서 기록하는 로그 수준이다.</p>
</li>
<li>
<p><code>Mlock: supported: false, enabled: false</code><br>
: 볼트의 기본값은 디스크로의 스와핑을 비활성화하기 위해 메모리상의 가상 주소 공간을 RAM에서 잠근다. 이를 위해서는 <code>mlock()</code>을 지원하는 시스템, 루트 권한, 설정의 활성화가 필요하다.</p>
</li>
<li>
<p><code>Recovery Mode: false</code><br>
: 볼트 시작시 복구모드로 실행되었는지의 여부이다.</p>
</li>
<li>
<p><code>Storage: inmem</code><br>
: 볼트 저장소 타입이다.</p>
</li>
<li>
<p><code>Version: Vault v1.12.3, built 2023-02-02T09:07:27Z</code><br>
: 볼트 바이너리 버정 정보를 나타낸다.</p>
</li>
<li>
<p><code>Version Sha: 209b3dd99fe8ca320340d08c70cff5f620261f9b</code><br>
: 각 볼트 버전과 관련된 고유 식별자입니다. 실행 중인 코드의 버전을 식별하는 데 사용되며, 볼트 오픈소스의 GitHub Repository의 commit id와 같다.</p>
</li>
</ul>
]]></content:encoded>
    </item>
    <item>
      <title>2023년 2월</title>
      <link>https://docmoa.github.io/04-HashiCorp/08-Updates/98-2023/2023-02.html</link>
      <guid>https://docmoa.github.io/04-HashiCorp/08-Updates/98-2023/2023-02.html</guid>
      <source url="https://docmoa.github.io/rss.xml">2023년 2월</source>
      <description>2023년 2월 Update</description>
      <pubDate>Fri, 03 Feb 2023 11:21:37 GMT</pubDate>
      <content:encoded><![CDATA[
<h2>Product 소개</h2>
<ul>
<li>
<p>Terraform Cloud Adds ‘Projects’ to Organize Workspaces at Scale</p>
<ul>
<li><a href="https://www.hashicorp.com/blog/terraform-cloud-adds-projects-to-organize-workspaces-at-scale" target="_blank" rel="noopener noreferrer">Hashicorp Blog</a></li>
<li>기존의 Terraform Cloud 에서는 연관되는 Workspace 간 그룹화가 불가능하고 Organization 및 Workspace 단위로만 권한 할당이 가능함으로 인해 사용자들은 자원 활용에 대한 제약사항을 고려하여 Organization 및 Workspace 를 분할하는 불편함을 감수해야 했습니다. 'Projects' 는 Workspace 를 그룹화하고 Project 단위로 권한 설정을 지원함으로써 앞서 소개한 제약사항을 해소하도록 지원합니다.</li>
</ul>
</li>
</ul>
<h2>Product Update</h2>
<ul>
<li>Terraform
<ul>
<li>CLI
<ul>
<li><a href="https://github.com/hashicorp/terraform/releases/tag/v1.3.7" target="_blank" rel="noopener noreferrer">1.3.7 Release</a>
<ul>
<li>Module 사용 시 Version Constraint 에 대한 Parsing 관련 오류 개선</li>
<li>ignore_changes 설정된 resource 가 있을 경우  panic 이 발생하는 오류 개선</li>
</ul>
</li>
</ul>
</li>
<li><a href="https://developer.hashicorp.com/terraform/enterprise/releases" target="_blank" rel="noopener noreferrer">Enterprise Release</a>
<ul>
<li><a href="https://developer.hashicorp.com/terraform/enterprise/releases/2023/v202301-2" target="_blank" rel="noopener noreferrer">1월 Release</a> 출시 (<code>v202301-2</code>)</li>
<li>필수 Upgrade Versison: Release Note 에서 * 표기된 Version 은 필수로 거쳐야 하는 Version (예: v202207-2, v202204-2)</li>
<li>2023년 2월 Release (<code>v202302-1</code>) 을 기점으로 구버전 OS 및 Postrgres DB 에 대한 지원 종료
<ul>
<li>
<p>대상 OS</p>
<ul>
<li>
<p>Debian 8, 9</p>
</li>
<li>
<p>Ubuntu 14.04, 16.04</p>
</li>
<li>
<p>Amazon Linux 2014.03, 2014.09, 2015.03, 2015.09, 2016.03, 2016.09, 2017.03, 2017.09, 2018.03</p>
</li>
</ul>
</li>
<li>
<p>대상 Postgres</p>
<ul>
<li>Postgres 11</li>
<li>TFE 에 대해 External PostgresSQL 사용하는 경우 최소 버전 12 이상으로 Upgrade 필요 (Release 659 부터 적용)</li>
</ul>
</li>
</ul>
</li>
<li>Log Level (debug) 로 설정 시 tfe-atlas, tfe-atlas-ui, tfe-sidekiq 등 일부 구성요소로 인한 대량 log 수집되는 이슈 해결</li>
<li>Policy Manager 에 대한 Resource 접근 권한 제한, 필요 시 필요한 만큼의 추가 권한 필요</li>
<li>Private Module 처럼 Organization 간 Provider 공유 가능</li>
<li>State Rollback 기능 지원</li>
</ul>
</li>
<li>Provider
<ul>
<li><a href="https://github.com/hashicorp/terraform-provider-aws/releases/tag/v4.52.0" target="_blank" rel="noopener noreferrer">AWS v4.52.0 주요 수정사항</a>
<ul>
<li>신규 resource 추가: <code>aws_auditmanager resource</code> 추가</li>
<li>Bug Fix
<ul>
<li>aws_dynamodb_table 에 대해 <code>kms_key_arn</code> 관련 오류 개선</li>
<li>aws_api_gateway_integration 에 대해 <code>connection type</code> 이 변경되는 오류 개선</li>
</ul>
</li>
</ul>
</li>
<li><a href="https://github.com/hashicorp/terraform-provider-azurerm/releases/tag/v3.41.0" target="_blank" rel="noopener noreferrer">Azure v3.41.0 주요 수정사항</a>
<ul>
<li>신규 resource 추가: <code>azure_site_recovery_replication_recovery_plan</code></li>
<li>기능 개선
<ul>
<li>azurerm_databricks_workspace 에 대해 <code>customer managed key</code> 및 <code>public_network_access_enabled</code> 설정 지원</li>
<li>azurerm_kubernetes_cluster 에 대해 <code>node_public_ip_tags</code> 설정 지원</li>
</ul>
</li>
<li>Bug Fix
<ul>
<li>azurerm_stream_analytics_output_servicebus 에 대해 MSI Authentication 설정 관련 개선</li>
</ul>
</li>
</ul>
</li>
<li><a href="https://github.com/hashicorp/terraform-provider-google/releases/tag/v4.51.0" target="_blank" rel="noopener noreferrer">GCP v4.51.0 주요 수정사항</a>
<ul>
<li>신규 resource 추가: <code>google_iam_access_boundary_policy</code>, <code>google_tags_location_tag_bindings</code></li>
<li>기능 개선
<ul>
<li>compute 에 대해 google_compute_node_group 의 share_settings 설정 지원</li>
<li>spanner 에 대해 <code>google_spanner_database_iam_member</code> 및 <code>google_spanner_instance_iam_member</code> 설정 지원</li>
</ul>
</li>
<li>Bug Fix
<ul>
<li>bigquery 에 대해 IAM 설정 및 External Data Config 관련 오류 개선</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li>Vault
<ul>
<li>1.12.2
<ul>
<li>상세 <a href="https://github.com/hashicorp/vault/blob/main/CHANGELOG.md#1122" target="_blank" rel="noopener noreferrer">CHANGELOG</a></li>
<li>PKI Secret Engine: 기본 issuer 에 대한 변경을 위해 <code>default_follows_latest_issuer</code> 설정 추가</li>
<li>Raft Storage: <code>retry_join_as_non_voter</code>설정 추가</li>
<li>Okta Auth Method 관련 AuthRenew 로 인한 Panic 오류 수정</li>
<li>ciphertext 가 4 byte 이하인 경우 발생 가능한 deadlock 오류 수정</li>
<li>Performance Standby Node 에 대한 start up race condition 수정</li>
</ul>
</li>
</ul>
</li>
<li>Consul
<ul>
<li>1.14.4
<ul>
<li>상세 <a href="https://github.com/hashicorp/consul/blob/main/CHANGELOG.md#1144-january-26-2023" target="_blank" rel="noopener noreferrer">CHANGELOG</a></li>
<li>connect 관련 transparent proxy upstreams 에 필요한 세부 구성 (<code>proxy-defaults</code>, <code>service-default</code>) 수정</li>
<li>peering 구성 시 이름은 반드시 소문자로 구성 필요. 향후 호환성 등을 고려하여 기존 구성된 peering 에 대해서 이름에 대문자 사용한 경우에 대해 소문자로 재구성 권고</li>
<li>consul connect envoy 명령어 사용 시 <code>envoy-ready-bind-port</code> 및 <code>envoy-ready-bind-address</code> 설정 지원</li>
<li>connect 관련 filter expression 이 처리 되도록 ConsulResolver 지원</li>
<li>인증서 auto-reloading 에 대한 오류 개선</li>
</ul>
</li>
</ul>
</li>
<li>Nomad
<ul>
<li>1.4.3
<ul>
<li>상세 <a href="https://github.com/hashicorp/nomad/blob/main/CHANGELOG.md#143-november-21-2022" target="_blank" rel="noopener noreferrer">CHANGELOG</a></li>
<li>동일 Job 에 대해 여러 evaluation 이 pending 되어 있는 경우, 가장 최근 성공한 evaluation 에 대해서만 반영</li>
<li>File Upload, Consul Upstream 설정 등 UI 개선</li>
<li>Consul 연동 시 gRPC fingerprint 관련 발생 오류 개선 (Consul 1.14 연동부터 적용)</li>
</ul>
</li>
</ul>
</li>
</ul>
]]></content:encoded>
    </item>
    <item>
      <title>Library not loaded: libunistring.2.dylib</title>
      <link>https://docmoa.github.io/06-etc/mac/libunistring-issue.html</link>
      <guid>https://docmoa.github.io/06-etc/mac/libunistring-issue.html</guid>
      <source url="https://docmoa.github.io/rss.xml">Library not loaded: libunistring.2.dylib</source>
      <description>libunistring.2.dylib not loaded</description>
      <pubDate>Tue, 31 Jan 2023 22:56:32 GMT</pubDate>
      <content:encoded><![CDATA[
<h2>현상</h2>
<p>macOS Ventura 업그레이드 후 wget 실행시 오류 발생</p>
<div class="language-bash" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="line">$ <span class="token function">wget</span></span>
<span class="line">dyld<span class="token punctuation">[</span><span class="token number">4414</span><span class="token punctuation">]</span>: Library not loaded: /usr/local/opt/libunistring/lib/libunistring.2.dylib</span>
<span class="line">  Referenced from: <span class="token operator">&lt;</span>1ECBA17E-A426-310D-9902-EFF0D9E1053<span class="token operator"><span class="token file-descriptor important">2</span>&gt;</span> /usr/local/Cellar/wget/1.21.3/bin/wget</span>
<span class="line">  Reason: tried: <span class="token string">'/usr/local/opt/libunistring/lib/libunistring.2.dylib'</span> <span class="token punctuation">(</span>no such <span class="token function">file</span><span class="token punctuation">)</span>, <span class="token string">'/System/Volumes/Preboot/Cryptexes/OS/usr/local/opt/libunistring/lib/libunistring.2.dylib'</span> <span class="token punctuation">(</span>no such <span class="token function">file</span><span class="token punctuation">)</span>, <span class="token string">'/usr/local/opt/libunistring/lib/libunistring.2.dylib'</span> <span class="token punctuation">(</span>no such <span class="token function">file</span><span class="token punctuation">)</span>, <span class="token string">'/usr/local/lib/libunistring.2.dylib'</span> <span class="token punctuation">(</span>no such <span class="token function">file</span><span class="token punctuation">)</span>, <span class="token string">'/usr/lib/libunistring.2.dylib'</span> <span class="token punctuation">(</span>no such file, not <span class="token keyword">in</span> dyld cache<span class="token punctuation">)</span>, <span class="token string">'/usr/local/Cellar/libunistring/1.1/lib/libunistring.2.dylib'</span> <span class="token punctuation">(</span>no such <span class="token function">file</span><span class="token punctuation">)</span>, <span class="token string">'/System/Volumes/Preboot/Cryptexes/OS/usr/local/Cellar/libunistring/1.1/lib/libunistring.2.dylib'</span> <span class="token punctuation">(</span>no such <span class="token function">file</span><span class="token punctuation">)</span>, <span class="token string">'/usr/local/Cellar/libunistring/1.1/lib/libunistring.2.dylib'</span> <span class="token punctuation">(</span>no such <span class="token function">file</span><span class="token punctuation">)</span>, <span class="token string">'/usr/local/lib/libunistring.2.dylib'</span> <span class="token punctuation">(</span>no such <span class="token function">file</span><span class="token punctuation">)</span>, <span class="token string">'/usr/lib/libunistring.2.dylib'</span> <span class="token punctuation">(</span>no such file, not <span class="token keyword">in</span> dyld cache<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>    <span class="token number">4414</span> abort      <span class="token function">wget</span></span>
<span class="line"></span></code></pre></div><h2>해결방안 찾기 과정</h2>
<ul>
<li><a href="https://stackoverflow.com/questions/50631185/homebrew-will-not-run-wget-command-library-not-loaded" target="_blank" rel="noopener noreferrer">https://stackoverflow.com/questions/50631185/homebrew-will-not-run-wget-command-library-not-loaded</a>를 참고하여 <code>brew uninstall --force gettext</code> 실행했으나 오류</li>
</ul>
<div class="language-bash" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="line">$ brew uninstall <span class="token parameter variable">--force</span> gettext</span>
<span class="line">xcrun: error: invalid active developer path <span class="token punctuation">(</span>/Library/Developer/CommandLineTools<span class="token punctuation">)</span>, missing xcrun at: /Library/Developer/CommandLineTools/usr/bin/xcrun</span>
<span class="line">Error: Refusing to uninstall /usr/local/Cellar/gettext/0.21.1</span>
<span class="line">because it is required by cairo, gdk-pixbuf, git, glib, gnupg, gnutls, gobject-introspection, graphviz, gts, harfbuzz, libidn2, librsvg, libslirp, pango, podman, qemu and wget, <span class="token function">which</span> are currently installed.</span>
<span class="line">You can override this and force removal with:</span>
<span class="line">brew uninstall --ignore-dependencies gettext</span>
<span class="line"></span></code></pre></div><ul>
<li>오류 메시지에서의 안내대로 <code>--ignore-dependencies</code> 추가하여 실행</li>
</ul>
<div class="language-bash" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="line">$ brew uninstall --ignore-dependencies gettext</span>
<span class="line">Uninstalling /usr/local/Cellar/gettext/0.21.1<span class="token punctuation">..</span>. <span class="token punctuation">(</span><span class="token number">1,983</span> files, <span class="token number">20</span>.6MB<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre></div><ul>
<li><code>gettext</code> 재설치하면 도중에 실행이 안됐던 <code>wget</code>도 재설치</li>
</ul>
<div class="language-bash" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="line">$ brew <span class="token function">install</span> gettext</span>
<span class="line"><span class="token punctuation">..</span>.</span>
<span class="line"><span class="token operator">==</span><span class="token operator">&gt;</span> Upgrading <span class="token function">wget</span></span>
<span class="line"><span class="token number">1.21</span>.3 -<span class="token operator">&gt;</span> <span class="token number">1.21</span>.3_1</span>
<span class="line"></span>
<span class="line"><span class="token operator">==</span><span class="token operator">&gt;</span> Installing dependencies <span class="token keyword">for</span> wget: openssl@3</span>
<span class="line"><span class="token operator">==</span><span class="token operator">&gt;</span> Installing <span class="token function">wget</span> dependency: openssl@3</span>
<span class="line"><span class="token operator">==</span><span class="token operator">&gt;</span> Pouring openssl@3--3.0.7.ventura.bottle.tar.gz</span>
<span class="line">🍺  /usr/local/Cellar/openssl@3/3.0.7: <span class="token number">6,454</span> files, <span class="token number">28</span>.2MB</span>
<span class="line"><span class="token operator">==</span><span class="token operator">&gt;</span> Installing <span class="token function">wget</span></span>
<span class="line"><span class="token operator">==</span><span class="token operator">&gt;</span> Pouring wget--1.21.3_1.ventura.bottle.1.tar.gz</span>
<span class="line">🍺  /usr/local/Cellar/wget/1.21.3_1: <span class="token number">89</span> files, <span class="token number">4</span>.2MB</span>
<span class="line"><span class="token operator">==</span><span class="token operator">&gt;</span> Running <span class="token variable"><span class="token variable">`</span>brew cleanup <span class="token function">wget</span><span class="token variable">`</span></span><span class="token punctuation">..</span>.</span>
<span class="line">Removing: /usr/local/Cellar/wget/1.21.3<span class="token punctuation">..</span>. <span class="token punctuation">(</span><span class="token number">89</span> files, <span class="token number">4</span>.2MB<span class="token punctuation">)</span></span>
<span class="line"><span class="token operator">==</span><span class="token operator">&gt;</span> Checking <span class="token keyword">for</span> dependents of upgraded formulae<span class="token punctuation">..</span>.</span>
<span class="line"><span class="token punctuation">..</span>.</span>
<span class="line"></span></code></pre></div><ul>
<li><code>git</code>도 업그레이드 후 영향을 받았는지 재설치 필요</li>
</ul>
<div class="language-log" data-highlighter="prismjs" data-ext="log" data-title="log"><pre class="language-log"><code><span class="line"><span class="token property">Error:</span> <span class="token string">'git'</span> must be installed and in your PATH<span class="token operator">!</span></span>
<span class="line"><span class="token property">Warning:</span> gettext <span class="token number">0.21.1</span> is already installed and up<span class="token operator">-</span>to<span class="token operator">-</span>date<span class="token punctuation">.</span></span>
<span class="line">To reinstall <span class="token number">0.21.1</span><span class="token punctuation">,</span> run<span class="token operator">:</span></span>
<span class="line">    brew reinstall gettext</span>
<span class="line"></span></code></pre></div><ul>
<li>
<p><code>brew install git</code>으로 다시 <code>git</code>설치</p>
</li>
<li>
<p>마지막 재설치 요구에 따라 <code>gettext</code> 재설치</p>
</li>
</ul>
<div class="language-bash" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="line">$ brew reinstall gettext</span>
<span class="line"></span></code></pre></div><ul>
<li><code>wget</code> 재실행 시 정상 동작 확인</li>
</ul>
<div class="language-bash" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="line">$ <span class="token function">wget</span></span>
<span class="line">wget: URL 빠짐</span>
<span class="line">사용법: <span class="token function">wget</span> <span class="token punctuation">[</span><span class="token operator">&lt;</span>옵션<span class="token operator">&gt;</span><span class="token punctuation">]</span><span class="token punctuation">..</span>. <span class="token punctuation">[</span>URL<span class="token punctuation">]</span><span class="token punctuation">..</span>.</span>
<span class="line"></span>
<span class="line">자세한 옵션은 `wget --help'를 입력하십시오.</span>
<span class="line"></span></code></pre></div>]]></content:encoded>
    </item>
    <item>
      <title>Graceful Shutdown 적용 (kill_signal)</title>
      <link>https://docmoa.github.io/04-HashiCorp/07-Nomad/04-UseCase/springboot-graceful-shutdown.html</link>
      <guid>https://docmoa.github.io/04-HashiCorp/07-Nomad/04-UseCase/springboot-graceful-shutdown.html</guid>
      <source url="https://docmoa.github.io/rss.xml">Graceful Shutdown 적용 (kill_signal)</source>
      <description>Graceful Shutdown of Spring Boot Application in HashiCorp Nomad</description>
      <pubDate>Thu, 12 Jan 2023 05:48:04 GMT</pubDate>
      <content:encoded><![CDATA[
<blockquote>
<p>GitHub 리소스 : <a href="https://github.com/Great-Stone/nomad-springboot-graceful-shutdown" target="_blank" rel="noopener noreferrer">https://github.com/Great-Stone/nomad-springboot-graceful-shutdown</a></p>
</blockquote>
<h2>테스트 환경</h2>
<ul>
<li>Gradle 7.4.2</li>
<li>Java 11</li>
<li>Spring Boot 2.7.7</li>
<li>Nomad 1.4.3</li>
</ul>
<h2>Spring Boot 리뷰</h2>
<h3><code>application.yml</code> 구성</h3>
<div class="language-yaml" data-highlighter="prismjs" data-ext="yml" data-title="yml"><pre class="language-yaml"><code><span class="line"><span class="token key atrule">server</span><span class="token punctuation">:</span></span>
<span class="line">  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">8080</span></span>
<span class="line">  <span class="token key atrule">shutdown</span><span class="token punctuation">:</span> graceful </span>
<span class="line"><span class="token key atrule">spring</span><span class="token punctuation">:</span></span>
<span class="line">  <span class="token key atrule">lifecycle</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token key atrule">timeout-per-shutdown-phase</span><span class="token punctuation">:</span> 35s <span class="token comment"># Default 30s</span></span>
<span class="line"></span></code></pre></div><ul>
<li><code>server.shutdown</code>에 <code>graceful</code> 정의 필요</li>
<li><code>spring.lifecycle.timeout-per-shutdown-phase</code>에 Graceful Shutdown 요청시 지연 시간 설정</li>
</ul>
<h3>Graceful Shutdown 테스트</h3>
<ul>
<li>
<p>테스트는 빌드(<code>gradle build</code>) 후 해당 jar파일에 대해 실행</p>
</li>
<li>
<p>실행 커맨드 예시 : <code>java -jar ./build/libs/demo-0.0.1-SNAPSHOT.jar</code></p>
</li>
<li>
<p>테스트 API : <code>http://localhost:8080/test/1</code></p>
<div class="language-bash" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="line">$ <span class="token function">curl</span> http://localhost:8080/test/1</span>
<span class="line"><span class="token punctuation">(</span>코드에서 지정한 20000ms 지연<span class="token punctuation">)</span></span>
<span class="line">Process Success <span class="token operator">!</span><span class="token operator">!</span></span>
<span class="line"></span></code></pre></div></li>
<li>
<p>Graceful Shutdown 종료를 위해 <code>kill -15 &lt;PID&gt;</code> 형태의 시그널 전달 필요</p>
<ul>
<li>KILL(<code>-9</code>)대신 TERM(<code>-15</code>)를 사용</li>
<li>KILL(SIGKILL) : 무조건적인 즉각적 종료</li>
<li>TERM(SIGTERM) : 자연스러운 실행 종료, 정상 종료 작업 처리 후 끝냄</li>
</ul>
</li>
<li>
<p>SIGTERM 사용시 종료 메시지 확인 및 정상 응답 확인</p>
<div class="language-log" data-highlighter="prismjs" data-ext="log" data-title="log"><pre class="language-log"><code><span class="line">  <span class="token punctuation">.</span>   ____          _            __ _ _</span>
<span class="line"><span class="token operator">/</span>\\ <span class="token operator">/</span> ___'_ __ _ _<span class="token operator">(</span>_<span class="token operator">)</span>_ __  __ _ \ \ \ \</span>
<span class="line"><span class="token operator">(</span> <span class="token operator">(</span> <span class="token operator">)</span>\___ <span class="token operator">|</span> <span class="token string">'_ | '</span>_<span class="token operator">|</span> <span class="token operator">|</span> '_ \<span class="token operator">/</span> _` <span class="token operator">|</span> \ \ \ \</span>
<span class="line">\\<span class="token operator">/</span>  ___<span class="token operator">)</span><span class="token operator">|</span> <span class="token operator">|</span>_<span class="token operator">)</span><span class="token operator">|</span> <span class="token operator">|</span> <span class="token operator">|</span> <span class="token operator">|</span> <span class="token operator">|</span> <span class="token operator">|</span><span class="token operator">|</span> <span class="token operator">(</span>_<span class="token operator">|</span> <span class="token operator">|</span>  <span class="token operator">)</span> <span class="token operator">)</span> <span class="token operator">)</span> <span class="token operator">)</span></span>
<span class="line">  '  <span class="token operator">|</span>____<span class="token operator">|</span> <span class="token punctuation">.</span>__<span class="token operator">|</span>_<span class="token operator">|</span> <span class="token operator">|</span>_<span class="token operator">|</span>_<span class="token operator">|</span> <span class="token operator">|</span>_\__<span class="token punctuation">,</span> <span class="token operator">|</span> <span class="token operator">/</span> <span class="token operator">/</span> <span class="token operator">/</span> <span class="token operator">/</span></span>
<span class="line"><span class="token separator comment">=========</span><span class="token operator">|</span>_<span class="token operator">|</span><span class="token separator comment">==============</span><span class="token operator">|</span>___<span class="token operator">/</span><span class="token operator">=</span><span class="token operator">/</span>_<span class="token operator">/</span>_<span class="token operator">/</span>_<span class="token operator">/</span></span>
<span class="line"><span class="token operator">:</span><span class="token operator">:</span> Spring Boot <span class="token operator">:</span><span class="token operator">:</span>                <span class="token operator">(</span><span class="token number">v2.7.7</span><span class="token operator">)</span></span>
<span class="line"></span>
<span class="line"><span class="token date number">2023-01-12</span> <span class="token time number">14:10:14.572</span>  <span class="token level info keyword">INFO</span> <span class="token number">45334</span> </span></code></pre></div></li>
</ul>
]]></content:encoded>
    </item>
    <item>
      <title>2023년 1월</title>
      <link>https://docmoa.github.io/04-HashiCorp/08-Updates/98-2023/2023-01.html</link>
      <guid>https://docmoa.github.io/04-HashiCorp/08-Updates/98-2023/2023-01.html</guid>
      <source url="https://docmoa.github.io/rss.xml">2023년 1월</source>
      <description>2023년 1월 Update</description>
      <pubDate>Tue, 03 Jan 2023 13:07:11 GMT</pubDate>
      <content:encoded><![CDATA[
<h2>Product 소개</h2>
<ul>
<li>
<p>Dynamic Secrets for Waypoint with Vault</p>
<ul>
<li><a href="https://www.hashicorp.com/blog/dynamic-secrets-for-waypoint-with-vault" target="_blank" rel="noopener noreferrer">Hashicorp Blog</a></li>
<li>Application 에 대한 Build, Deployment 및 Monitoring 을 간소화하고 쉽게 접근할 수 있도록 개발자를 지원하는 Waypoint 에서도 이제 Vault 와 연동하여 Hashicorp Vault config sourcer plugin 을 통해 Application Config 에 포함되는 보안 정보를 관리할 수 있습니다.</li>
</ul>
</li>
</ul>
<h2>Product Update</h2>
<ul>
<li>Terraform
<ul>
<li>CLI
<ul>
<li><a href="https://github.com/hashicorp/terraform/releases/tag/v1.3." target="_blank" rel="noopener noreferrer">1.3.6 Release</a>
<ul>
<li>Module Output 관련 오류 개선</li>
</ul>
</li>
</ul>
</li>
<li><a href="https://developer.hashicorp.com/terraform/enterprise/releases" target="_blank" rel="noopener noreferrer">Enterprise Release</a>
<ul>
<li><a href="https://developer.hashicorp.com/terraform/enterprise/releases/2022/v202212-2" target="_blank" rel="noopener noreferrer">12월 Release</a> 출시 (v202212-2)</li>
<li>필수 Upgrade Version: Release Note 에서 * 표기된 Version 은 필수로 거쳐야 하는 Version (예: v202207-2, v202204-2)</li>
<li>2023년 2월 Release (v202302-1) 을 기점으로 구버전 OS 및 Postrgres DB 에 대한 지원 종료
<ul>
<li>
<p>대상 OS</p>
<ul>
<li>
<p>Debian 8, 9</p>
</li>
<li>
<p>Ubuntu 14.04, 16.04</p>
</li>
<li>
<p>Amazon Linux 2014.03, 2014.09, 2015.03, 2015.09, 2016.03, 2016.09, 2017.03, 2017.09, 2018.03</p>
</li>
</ul>
</li>
<li>
<p>대상 Postgres</p>
<ul>
<li>Postgres 11</li>
<li>TFE 에 대해 External PostgresSQL 사용하는 경우 최소 버전 12 이상으로 Upgrade 필요 (Release 659 부터 적용)</li>
</ul>
</li>
</ul>
</li>
<li>CA Bundle 관련 이슈로 인해 발생하는 HTTPS endpoint 접속 관련 Sentinel 정책 오류 수정</li>
<li>sentinel, cost-estimation, plan-exporter 등을 처리하는 tfe-nomad container 에 대해 성능 및 안정성 제고를 위해 tfe-task-worker 로 대체.</li>
<li><a href="https://developer.hashicorp.com/terraform/cloud-docs/workspaces/settings/run-tasks#associating-run-tasks-with-a-workspace" target="_blank" rel="noopener noreferrer">Pre-plan 및 Pre-Apply 를 위한 Run Task</a> 지원</li>
<li><a href="https://developer.hashicorp.com/terraform/enterprise/api-docs/workspaces#list-workspaces" target="_blank" rel="noopener noreferrer">List Workspaces API endpoint</a> 사용 시 wildcard 매칭 지원</li>
<li>terraform apply 진행 도중 취소 시 해당 resource 의 상태 정보에 대해 'unknown' 으로 출력하도록 개선</li>
</ul>
</li>
<li>Provider
<ul>
<li><a href="https://github.com/hashicorp/terraform-provider-aws/releases/tag/v4.48.0" target="_blank" rel="noopener noreferrer">AWS v4.48.0 주요 수정사항</a>
<ul>
<li>aws_eks_node_group 에 대해 WINDOWS_CORE_2019_x86_64, WINDOWS_CORE_2022_x86_64 등 Windows OS 기반 Node 사용 지원</li>
<li>aws_networkfirewall_rule_group 에 대해 reference_sets 지원</li>
<li>aws_networkmanager_vpc_attachment 에 대해 options.appliance_mode_support 지원</li>
</ul>
</li>
<li><a href="https://github.com/hashicorp/terraform-provider-azurerm/releases/tag/v3.37.0" target="_blank" rel="noopener noreferrer">Azure v3.37.0 주요 수정사항</a>
<ul>
<li>신규 resource 추가: azurerm_coginitive_deployment, azurerm_billing_account_cost_management_export, azurerm_key_vault_certificate_contacts, azurerm_lab_service_plan, azurerm_resource_deployment_script, azurerm_spring_cloud_customized_accelerator 등</li>
<li>azurerm_netapp_volume 에 대해 zone 설정 추가</li>
<li>azurerm_virtual_network_gateway_connection 에 대해 다른 resource group 에서 생성 안되는 오류 개선</li>
</ul>
</li>
<li><a href="https://github.com/hashicorp/terraform-provider-google/releases/tag/v4.47.0" target="_blank" rel="noopener noreferrer">GCP v4.47.0 주요 수정사항</a>
<ul>
<li>신규 resource: google_alloydb_backup, google_filestore_backup</li>
<li>compute 에 대해 ipv6_access_type 설정 지원</li>
<li>container 에 대해 autoscaling 에 대한 default 설정 지원 추가</li>
<li>container 에 대해 gke gateway api controller 지원을 위한 gateway_api_config 설정 추가</li>
<li>google_sql_database 에 대해 삭제 정책이 기본 "abandon" 처리 되어 있음으로 인해 발생 가능한 오류 개선</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li>Vault
<ul>
<li>1.12.2
<ul>
<li>상세 <a href="https://github.com/hashicorp/vault/blob/main/CHANGELOG.md#1122" target="_blank" rel="noopener noreferrer">CHANGELOG</a></li>
<li>PKI Secret Engine: 기본 issuer 에 대한 변경을 위해 default_follows_latest_issuer 설정 추가</li>
<li>Raft Storage: retry_join_as_non_voter 설정 추가</li>
<li>Okta Auth Method 관련 AuthRenew 로 인한 Panic 오류 수정</li>
<li>ciphertext 가 4 byte 이하인 경우 발생 가능한 deadlock 오류 수정</li>
<li>Performance Standby Node 에 대한 start up race condition 수정</li>
</ul>
</li>
</ul>
</li>
<li>Consul
<ul>
<li>1.14.3
<ul>
<li>
<p>상세 <a href="https://github.com/hashicorp/consul/blob/main/CHANGELOG.md#1143-december-13-2022" target="_blank" rel="noopener noreferrer">CHANGELOG</a></p>
</li>
<li>
<p>consul connect: vault connect CA test 에 대해 제한된 권한의 token 사용하도록 수정</p>
</li>
<li>
<p>consul connect 관련 Mesh Gateway 의 Failover peering 에 대한 오류 개선</p>
</li>
<li>
<p>consul connect 관련 Vault 1.11+ 를 CA Provider 로 사용 시 발생하는 Intermediate CA 관련 오류 개선</p>
</li>
<li>
<p>Cluster Peering 기반 Service Failover 포함 Mesh Traffic Management 기능 개선</p>
</li>
<li>
<p>Windows 에 대한 Service Mesh 지원</p>
</li>
<li>
<p>AWS Lambda 에 대한 Service Mesh 지원</p>
</li>
</ul>
</li>
</ul>
</li>
<li>Nomad
<ul>
<li>1.4.3
<ul>
<li>상세 <a href="https://github.com/hashicorp/nomad/blob/main/CHANGELOG.md#143-november-21-2022" target="_blank" rel="noopener noreferrer">CHANGELOG</a></li>
<li>동일 Job 에 대해 여러 evaluation 이 pending 되어 있는 경우, 가장 최근 성공한 evaluation 에 대해서만 반영</li>
<li>File Upload, Consul Upstream 설정 등 UI 개선</li>
<li>Consul 연동 시 gRPC fingerprint 관련 발생 오류 개선 (Consul 1.14 연동부터 적용)</li>
</ul>
</li>
</ul>
</li>
</ul>
]]></content:encoded>
    </item>
    <item>
      <title>2022년 12월</title>
      <link>https://docmoa.github.io/04-HashiCorp/08-Updates/99-2022/2022-12.html</link>
      <guid>https://docmoa.github.io/04-HashiCorp/08-Updates/99-2022/2022-12.html</guid>
      <source url="https://docmoa.github.io/rss.xml">2022년 12월</source>
      <description>2022년 12월 Update</description>
      <pubDate>Wed, 07 Dec 2022 02:56:03 GMT</pubDate>
      <content:encoded><![CDATA[
<h2>Product 소개</h2>
<ul>
<li>
<p>Terraform Run Tasks in Public Registry</p>
<ul>
<li><a href="https://www.hashicorp.com/blog/run-tasks-are-now-available-in-the-terraform-registry" target="_blank" rel="noopener noreferrer">Hashicorp Blog</a></li>
<li>활발하게 활용되고 있는 Terraform Run Tasks (3rd party 연동 및 통합) 기능이 강화되었습니다. 이제 <a href="https://registry.terraform.io/" target="_blank" rel="noopener noreferrer">Terraform Public Registry</a> 에서 Run Tasks 를 검색하여 필요한 3rd party service 와 연동하여 자원 관리에 필요한 Cost Management, Policy Compliance 와 같은 다양한 기능들을 적용하여 보다 효율적인 자원 관리가 가능합니다.</li>
</ul>
</li>
</ul>
<h2>Product Update</h2>
<ul>
<li>
<p>Terraform</p>
<ul>
<li>CLI
<ul>
<li><a href="https://github.com/hashicorp/terraform/releases/tag/v1.3.5" target="_blank" rel="noopener noreferrer">1.35 Release</a>
<ul>
<li>Size 확인 불가한 Temp File 에 대한 처리 오류 개선</li>
<li>Empty 및 Null Collection 에 대한 처리 오류 개선</li>
<li>Optional object 에 대핸 처리 오류 개선</li>
</ul>
</li>
</ul>
</li>
<li><a href="https://developer.hashicorp.com/terraform/enterprise/releases" target="_blank" rel="noopener noreferrer">Enterprise Release</a>
<ul>
<li><a href="https://developer.hashicorp.com/terraform/enterprise/releases/2022/v202211-1" target="_blank" rel="noopener noreferrer">11월 Release</a> 출시 (v202211-1)</li>
<li>필수 Upgrade Version: Release Note 에서 * 표기된 Version 은 필수로 거쳐야 하는 Version (예: v202207-2, v202204-2)</li>
<li>2023년 2월 Release (v202302-1) 을 기점으로 구버전 OS 및 Postrgres DB 에 대한 지원 종료
<ul>
<li>
<p>대상 OS</p>
<ul>
<li>
<p>Debian 8, 9</p>
</li>
<li>
<p>Ubuntu 14.04, 16.04</p>
</li>
<li>
<p>Amazon Linux 2014.03, 2014.09, 2015.03, 2015.09, 2016.03, 2016.09, 2017.03, 2017.09, 2018.03</p>
</li>
</ul>
</li>
<li>
<p>대상 Postgres</p>
<ul>
<li>Postgres 11</li>
<li>TFE 에 대해 External PostgresSQL 사용하는 경우 최소 버전 12 이상으로 Upgrade 필요 (Release 659 부터 적용)</li>
</ul>
</li>
</ul>
</li>
<li>Workspaces API 관련 workspace 삭제 기능을 safe / force 로 세분화</li>
</ul>
</li>
<li>Provider
<ul>
<li><a href="https://github.com/hashicorp/terraform-provider-aws/releases/tag/v4.41.0" target="_blank" rel="noopener noreferrer">AWS v4.41.0 주요 수정사항</a>
<ul>
<li>aws_rds_clusters resource 추가</li>
<li>aws_nat_gateway 에 대해 private_ip 설정 지원</li>
<li>aws_resourcegroups_group 에 대해 configuration.parameters 설정을 optional 로 변경</li>
</ul>
</li>
<li><a href="https://github.com/hashicorp/terraform-provider-azurerm/releases/tag/v3.33.0" target="_blank" rel="noopener noreferrer">Azure v3.33.0 주요 수정사항</a>
<ul>
<li>azurerm_mssql_managed_instance_transparent_data_encryption resource 추가</li>
<li>azurerm_mssql_managed_instance 에 대해 customer_managed_key_id 와 user-assigned identity 설정 지원</li>
<li>azurerm_mysql_flexible_server 에 대해 iops 설정 오류 개선</li>
<li>azurerm_storage_account 에 대해 multichannel checking 과정 관련 오류 개선</li>
</ul>
</li>
<li><a href="https://github.com/hashicorp/terraform-provider-google/releases/tag/v4.44.1" target="_blank" rel="noopener noreferrer">GCP v4.41.1 주요 수정사항</a>
<ul>
<li>google_compute_instance_template 에 대해 advanced_machine_features 설정으로 인한 오류 개선</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li>
<p>Vault</p>
<ul>
<li><a href="https://github.com/hashicorp/vault/releases/tag/v1.12.1" target="_blank" rel="noopener noreferrer">1.12.1 주요 수정사항</a>
<ul>
<li>DB Secret Enging - Snowflake 에 대해 병렬 요청 허용</li>
<li>SDK/LDAP 에 대해 group filter 사용 시 paging 지원</li>
<li>MFA (Multi Factor Authentication) 수행 시 발생 가능한 namespace 관련 오류 개선</li>
<li>Vault Agent 가 Certificate Template 렌더링 하는 과정에서 발생 가능한 오류 개선</li>
</ul>
</li>
</ul>
</li>
<li>
<p>Consul</p>
<ul>
<li>
<p><a href="https://www.hashicorp.com/blog/consul-1-14-ga-announcing-simplified-service-mesh-deployments" target="_blank" rel="noopener noreferrer">1.14</a></p>
<ul>
<li>
<p>상세 <a href="https://github.com/hashicorp/consul/blob/main/CHANGELOG.md#1140-november-15-2022" target="_blank" rel="noopener noreferrer">CHANGELOG</a></p>
</li>
<li>
<p>Consul Client on K8S 에 대한 구조변화: Daemonset 에서 Sidecar 방식으로 변경</p>
</li>
<li>
<p>Cluster Peering 기반 Service Failover 포함 Mesh Traffic Management 기능 개선</p>
</li>
<li>
<p>Windows 에 대한 Service Mesh 지원</p>
</li>
<li>
<p>AWS Lambda 에 대한 Service Mesh 지원</p>
</li>
</ul>
</li>
</ul>
</li>
<li>
<p>Nomad</p>
<ul>
<li><a href="https://github.com/hashicorp/nomad/releases/tag/v1.4.3" target="_blank" rel="noopener noreferrer">1.4.3 주요 수정사항</a>
<ul>
<li>동일 Job 에 대해 여러 evaluation 이 pending 되어 있는 경우, 가장 최근 성공한 evaluation 에 대해서만 반영</li>
<li>File Upload, Consul Upstream 설정 등 UI 개선</li>
<li>Consul 연동 시 gRPC fingerprint 관련 발생 오류 개선 (Consul 1.14 연동부터 적용)</li>
</ul>
</li>
</ul>
</li>
</ul>
]]></content:encoded>
    </item>
    <item>
      <title>code-server</title>
      <link>https://docmoa.github.io/04-HashiCorp/07-Nomad/05-SampleJob/code-server.html</link>
      <guid>https://docmoa.github.io/04-HashiCorp/07-Nomad/05-SampleJob/code-server.html</guid>
      <source url="https://docmoa.github.io/rss.xml">code-server</source>
      <description>Nomad Sample</description>
      <pubDate>Wed, 23 Nov 2022 05:36:04 GMT</pubDate>
      <content:encoded><![CDATA[
<ul>
<li>vs-code를 local이 아닌 환경에서 사용할 수 있도록 도와주는 code-server의 예시입니다.</li>
<li>이 code의 변수는 nomad variable를 활용해서 배포합니다.</li>
</ul>
<h2>변수 선언</h2>
<ul>
<li>web ui 접근 password와 code-server terminal에서 사용 할 sudo의 password 를 변수로 선언했습니다.</li>
</ul>
<div class="language-bash" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="line"><span class="token comment"># nomad var put {path기반의 varialbes} key=vaule</span></span>
<span class="line">$ nomad var put code/config <span class="token assign-left variable">password</span><span class="token operator">=</span>password</span>
<span class="line"></span></code></pre></div><h2>job sample</h2>
<div class="language-hcl" data-highlighter="prismjs" data-ext="hcl" data-title="hcl"><pre class="language-hcl"><code><span class="line">job <span class="token string">"010-code-server"</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token property">datacenters</span> <span class="token punctuation">=</span> <span class="token punctuation">[</span><span class="token string">"dc1"</span><span class="token punctuation">]</span></span>
<span class="line">  <span class="token property">type</span>        <span class="token punctuation">=</span> <span class="token string">"service"</span></span>
<span class="line"></span>
<span class="line">  group <span class="token string">"code-server"</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token property">count</span> <span class="token punctuation">=</span> <span class="token number">1</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">network</span> <span class="token punctuation">{</span></span>
<span class="line">      port <span class="token string">"http"</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token property">to</span> <span class="token punctuation">=</span> <span class="token number">8443</span></span>
<span class="line">        <span class="token property">static</span> <span class="token punctuation">=</span> <span class="token number">8443</span></span>
<span class="line">      <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">service</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token property">name</span> <span class="token punctuation">=</span> <span class="token string">"code-server"</span></span>
<span class="line">      <span class="token property">port</span> <span class="token punctuation">=</span> <span class="token string">"http"</span></span>
<span class="line">      <span class="token property">provider</span> <span class="token punctuation">=</span> <span class="token string">"nomad"</span></span>
<span class="line"></span>
<span class="line">      <span class="token keyword">check</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token property">type</span>     <span class="token punctuation">=</span> <span class="token string">"http"</span></span>
<span class="line">        <span class="token property">path</span>     <span class="token punctuation">=</span> <span class="token string">"/"</span></span>
<span class="line">        <span class="token property">interval</span> <span class="token punctuation">=</span> <span class="token string">"2s"</span></span>
<span class="line">        <span class="token property">timeout</span>  <span class="token punctuation">=</span> <span class="token string">"30s"</span></span>
<span class="line">      <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    task <span class="token string">"code-server-runner"</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token property">driver</span> <span class="token punctuation">=</span> <span class="token string">"docker"</span></span>
<span class="line"></span>
<span class="line">      <span class="token keyword">template</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token property">data</span> <span class="token punctuation">=</span> <span class="token heredoc string">&lt;&lt;EOH</span>
<span class="line">{{ with nomadVar "code/config" }}</span>
<span class="line">PASSWORD={{ .password }}</span>
<span class="line">SUDO_PASSWORD={{ .password }}</span>
<span class="line">{{ end }}</span>
<span class="line">EOH</span></span>
<span class="line"></span>
<span class="line">  <span class="token property">destination</span> <span class="token punctuation">=</span> <span class="token string">"secrets/file.env"</span></span>
<span class="line">  <span class="token property">env</span>         <span class="token punctuation">=</span> <span class="token boolean">true</span></span>
<span class="line">      <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line">      <span class="token keyword">config</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token property">image</span> <span class="token punctuation">=</span> <span class="token string">"linuxserver/code-server"</span></span>
<span class="line">        <span class="token property">ports</span> <span class="token punctuation">=</span> <span class="token punctuation">[</span><span class="token string">"http"</span><span class="token punctuation">]</span></span>
<span class="line">      <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">      <span class="token keyword">env</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token property">PGID</span><span class="token punctuation">=</span><span class="token number">1000</span></span>
<span class="line">        <span class="token property">PUID</span><span class="token punctuation">=</span><span class="token number">1000</span></span>
<span class="line">      <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line">      <span class="token keyword">resources</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token property">cpu</span>    <span class="token punctuation">=</span> <span class="token number">1000</span></span>
<span class="line">        <span class="token property">memory</span> <span class="token punctuation">=</span> <span class="token number">900</span></span>
<span class="line">      <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"></span></code></pre></div>]]></content:encoded>
    </item>
    <item>
      <title>Sentinel - (Identity &amp; CIDR)</title>
      <link>https://docmoa.github.io/04-HashiCorp/06-Vault/04-UseCase/sentinel-check-identity-cidr.html</link>
      <guid>https://docmoa.github.io/04-HashiCorp/06-Vault/04-UseCase/sentinel-check-identity-cidr.html</guid>
      <source url="https://docmoa.github.io/rss.xml">Sentinel - (Identity &amp; CIDR)</source>
      <description>Sentinel을 사용하여 identity 조건에 cidr 검사</description>
      <pubDate>Wed, 16 Nov 2022 02:54:07 GMT</pubDate>
      <content:encoded><![CDATA[
<blockquote>
<p>Enterprise 기능</p>
</blockquote>
<p>Token Role에 <code>bound_cidr</code>을 적용하거나 여타 인증(AppRole, Userpass 등)에 허용하는 cidr을 적용하는 경우 다시 Token을 발급하거나 인증받지 않는한은 cidr을 기반으로한 차단을 동적으로 적용할 수 없다.</p>
<p>이경우 Sentinel을 사용하여 동적인 정책을 적용할 수 있다. Sentinel은 ACL방식의 기존 <code>Policy</code>와는 달리 Path가 아닌 다른 검증 조건을 추가할 수 있다.</p>
<ul>
<li>
<p>예제 (GitHub) : <a href="https://github.com/hashicorp/vault-guides/blob/master/governance/sentinel/README.md" target="_blank" rel="noopener noreferrer">https://github.com/hashicorp/vault-guides/blob/master/governance/sentinel/README.md</a></p>
</li>
<li>
<p>엔터프라이즈 Trial 신청 (30일) : <a href="https://www.hashicorp.com/products/vault/trial" target="_blank" rel="noopener noreferrer">https://www.hashicorp.com/products/vault/trial</a></p>
</li>
</ul>
<h2>테스트 사용자 생성</h2>
<p>Sentinel 적용을 확인하기 위해 모든 권한이 있는 기존 <code>Policy</code> 방식의 정책을 생성한다.</p>
<div class="language-bash" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="line">vault policy <span class="token function">write</span> super-user - <span class="token operator">&lt;&lt;</span> <span class="token string">EOF</span>
<span class="line">path "*" {</span>
<span class="line">capabilities = ["create", "read", "update", "delete", "list", "sudo"]</span>
<span class="line">}</span>
<span class="line">EOF</span></span>
<span class="line"></span></code></pre></div><p>생성한 정책고 앞으로 생성할 Sentinel 정책이 포함된 사용자를 생성한다.</p>
<div class="language-bash" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="line">vault <span class="token function">write</span> auth/userpass/users/admin <span class="token assign-left variable">password</span><span class="token operator">=</span>password <span class="token assign-left variable">policies</span><span class="token operator">=</span><span class="token string">"super-user, test-rgp"</span></span>
<span class="line">vault <span class="token function">write</span> auth/userpass/users/rgp <span class="token assign-left variable">password</span><span class="token operator">=</span>password <span class="token assign-left variable">policies</span><span class="token operator">=</span><span class="token string">"super-user, test-rgp"</span></span>
<span class="line"></span></code></pre></div><p><code>admin</code>과 <code>rgp</code> 사용자 모두 동일한 정책을 부여 받았다. Sentinel에서는 <code>identity</code> 정보를 기반으로 조건을 부여할 수 있으며, 동일한 정책이 부여되었더라도 어떤 <code>identity</code> 인가에 따라 적용 여부를 선택적으로 검증할 수 있다.</p>
<p>각 사용자로 로그인하여 Token 정보를 확인하면 <code>entity_id</code> 값을 확인할 수 있다.</p>
<div class="language-bash" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="line">$ <span class="token assign-left variable">TOKEN</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$(</span>vault login <span class="token parameter variable">-field</span><span class="token operator">=</span>token <span class="token parameter variable">-method</span> userpass <span class="token assign-left variable">username</span><span class="token operator">=</span>admin <span class="token assign-left variable">password</span><span class="token operator">=</span>password<span class="token variable">)</span></span></span>
<span class="line"></span>
<span class="line">$ vault token lookup <span class="token variable">$TOKEN</span></span>
<span class="line"></span>
<span class="line">Key                 Value</span>
<span class="line"></span></code></pre></div>]]></content:encoded>
    </item>
    <item>
      <title>Jaeger를 활용한 Consul Service Mesh Tracing</title>
      <link>https://docmoa.github.io/04-HashiCorp/04-Consul/06-on_Kubernetes/tracing/jaeger_tracing.html</link>
      <guid>https://docmoa.github.io/04-HashiCorp/04-Consul/06-on_Kubernetes/tracing/jaeger_tracing.html</guid>
      <source url="https://docmoa.github.io/rss.xml">Jaeger를 활용한 Consul Service Mesh Tracing</source>
      <description>K8S 환경에서 Jaeger를 통한 Consul Service Mesh Tracing</description>
      <pubDate>Sat, 12 Nov 2022 09:25:49 GMT</pubDate>
      <content:encoded><![CDATA[
<h2>0. 사전 요구사항</h2>
<h3>1) Consul Install</h3>
<p>Jaeger 연동을 위해 Consul on K8s 환경을 구성합니다. 해당 가이드의 경우에는 <a href="">여기</a>를 참고하세요.</p>
<h4>(1) 시크릿 생성 - 라이센스</h4>
<ul>
<li>라이센스 파일 생성 및 시크릿 생성</li>
</ul>
<div class="language-bash" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="line"><span class="token comment"># license파일 생성</span></span>
<span class="line"><span class="token function">vi</span> consul.lic</span>
<span class="line"></span>
<span class="line"><span class="token comment"># 생성한 license파일로 secret 생성</span></span>
<span class="line">kubectl create secret generic license --from-file<span class="token operator">=</span><span class="token string">'key=./consul.lic'</span></span>
<span class="line"></span></code></pre></div><h4>(2)  시크릿 생성 - Gossip Key</h4>
<ul>
<li>consul-gossip-encryption-key 시크릿 생성</li>
</ul>
<div class="language-bash" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="line"><span class="token assign-left variable">GOSSIP_KEY</span><span class="token operator">=</span><span class="token string">"VeQ8CHV3sDY/bHCseXC7PGXNTSXtWWvOzQKAaFFo9oE="</span></span>
<span class="line">kubectl patch secret consul-gossip-encryption-key <span class="token parameter variable">-n</span> consul <span class="token parameter variable">--patch</span><span class="token operator">=</span><span class="token string">'{"stringData":{"key": "$GOSSIP_KEY"}}'</span></span>
<span class="line"></span></code></pre></div><h4>(3) Consul Helm 배포</h4>
<p><code>values.yaml</code> 파일 수정 및 배포합니다.</p>
<ul>
<li><code>values.yaml</code> 파일 예시</li>
</ul>
<div class="language-yaml" data-highlighter="prismjs" data-ext="yml" data-title="yml"><pre class="language-yaml"><code><span class="line"><span class="token key atrule">global</span><span class="token punctuation">:</span></span>
<span class="line">  <span class="token key atrule">name</span><span class="token punctuation">:</span> consul</span>
<span class="line">  <span class="token key atrule">datacenter</span><span class="token punctuation">:</span> dc1</span>
<span class="line">  <span class="token key atrule">logLevel</span><span class="token punctuation">:</span> <span class="token string">"debug"</span></span>
<span class="line">  <span class="token key atrule">logJSON</span><span class="token punctuation">:</span> <span class="token boolean important">false</span></span>
<span class="line">  <span class="token key atrule">image</span><span class="token punctuation">:</span> hashicorp/consul<span class="token punctuation">-</span>enterprise<span class="token punctuation">:</span>1.12.3<span class="token punctuation">-</span>ent</span>
<span class="line">  <span class="token key atrule">gossipEncryption</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token key atrule">autoGenerate</span><span class="token punctuation">:</span> <span class="token boolean important">true</span></span>
<span class="line">  <span class="token key atrule">tls</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token key atrule">enabled</span><span class="token punctuation">:</span> <span class="token boolean important">false</span></span>
<span class="line">    <span class="token key atrule">enableAutoEncrypt</span><span class="token punctuation">:</span> <span class="token boolean important">false</span></span>
<span class="line">    <span class="token key atrule">verify</span><span class="token punctuation">:</span> <span class="token boolean important">false</span></span>
<span class="line">    <span class="token key atrule">httpsOnly</span><span class="token punctuation">:</span> <span class="token boolean important">false</span></span>
<span class="line">  <span class="token key atrule">imageEnvoy</span><span class="token punctuation">:</span> envoyproxy/envoy<span class="token punctuation">:</span>v1.22<span class="token punctuation">-</span>latest</span>
<span class="line">  <span class="token key atrule">enterpriseLicense</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token key atrule">secretName</span><span class="token punctuation">:</span> license</span>
<span class="line">    <span class="token key atrule">secretKey</span><span class="token punctuation">:</span> key</span>
<span class="line"><span class="token key atrule">server</span><span class="token punctuation">:</span></span>
<span class="line">  <span class="token key atrule">replicas</span><span class="token punctuation">:</span> <span class="token number">3</span></span>
<span class="line"><span class="token key atrule">client</span><span class="token punctuation">:</span></span>
<span class="line">  <span class="token key atrule">enabled</span><span class="token punctuation">:</span> <span class="token boolean important">true</span></span>
<span class="line">  <span class="token key atrule">exposeGossipPorts</span><span class="token punctuation">:</span> <span class="token boolean important">true</span></span>
<span class="line">  <span class="token key atrule">extraConfig</span><span class="token punctuation">:</span> <span class="token punctuation">|</span><span class="token scalar string"></span>
<span class="line">    {</span>
<span class="line">      "log_level": "debug"</span>
<span class="line">    }</span></span>
<span class="line">  <span class="token key atrule">grpc</span><span class="token punctuation">:</span> <span class="token boolean important">true</span></span>
<span class="line"><span class="token key atrule">ui</span><span class="token punctuation">:</span></span>
<span class="line">  <span class="token key atrule">enabled</span><span class="token punctuation">:</span> <span class="token boolean important">true</span></span>
<span class="line">  <span class="token key atrule">service</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token key atrule">type</span><span class="token punctuation">:</span> LoadBalancer</span>
<span class="line"><span class="token key atrule">connectInject</span><span class="token punctuation">:</span></span>
<span class="line">  <span class="token key atrule">enabled</span><span class="token punctuation">:</span> <span class="token boolean important">true</span></span>
<span class="line"><span class="token key atrule">controller</span><span class="token punctuation">:</span></span>
<span class="line">  <span class="token key atrule">enabled</span><span class="token punctuation">:</span> <span class="token boolean important">true</span></span>
<span class="line">  <span class="token comment">#terminatingGateways:</span></span>
<span class="line">  <span class="token comment">#enabled: true</span></span>
<span class="line">  <span class="token comment">#apiGateway:</span></span>
<span class="line">  <span class="token comment">#enabled: true</span></span>
<span class="line">  <span class="token comment">#image: "hashicorp/consul-api-gateway:latest"</span></span>
<span class="line"><span class="token key atrule">ingressGateways</span><span class="token punctuation">:</span></span>
<span class="line">  <span class="token key atrule">enabled</span><span class="token punctuation">:</span> <span class="token boolean important">true</span></span>
<span class="line">  <span class="token key atrule">gateways</span><span class="token punctuation">:</span></span>
<span class="line">  <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> ingress<span class="token punctuation">-</span>gateway</span>
<span class="line">    <span class="token key atrule">service</span><span class="token punctuation">:</span></span>
<span class="line">      <span class="token key atrule">type</span><span class="token punctuation">:</span> LoadBalancer</span>
<span class="line">      <span class="token key atrule">ports</span><span class="token punctuation">:</span></span>
<span class="line">      <span class="token punctuation">-</span> <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">5000</span></span>
<span class="line"></span></code></pre></div><h2><a class="header-anchor" href="#_1-cert-manager-설치"><span></span></a><a href="https://cert-manager.io/docs/installation/" target="_blank" rel="noopener noreferrer">1. Cert-Manager 설치</a></h2>
<p>Jaeger를 설치할 때 cert-manager 설치가 필수적으로 요구됩니다.</p>
<blockquote>
<p>Since version 1.31 the Jaeger Operator uses webhooks to validate Jaeger custom resources (CRs). This requires an installed version of the cert-manager.</p>
</blockquote>
<ul>
<li><a href="https://cert-manager.io/docs/installation/#default-static-install" target="_blank" rel="noopener noreferrer">Yaml 배포</a></li>
</ul>
<div class="language-bash" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="line">kubectl apply <span class="token parameter variable">-f</span> https://github.com/cert-manager/cert-manager/releases/download/v1.9.1/cert-manager.yaml</span>
<span class="line"></span></code></pre></div><ul>
<li>cert-manager 파드 배포확인</li>
</ul>
<div class="language-bash" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="line">kubectl get pods <span class="token parameter variable">-n</span> cert-manager</span>
<span class="line">NAME                                       READY   STATUS    RESTARTS   AGE</span>
<span class="line">cert-manager-6544c44c6b-z76nd              <span class="token number">1</span>/1     Running   <span class="token number">0</span>          25s</span>
<span class="line">cert-manager-cainjector-5687864d5f-pdzbn   <span class="token number">1</span>/1     Running   <span class="token number">0</span>          25s</span>
<span class="line">cert-manager-webhook-785bb86798-v6phx      <span class="token number">1</span>/1     Running   <span class="token number">0</span>          25s</span>
<span class="line"></span></code></pre></div><h2><a class="header-anchor" href="#_2-jaeger-설치"><span></span></a><a href="https://www.jaegertracing.io/docs/1.37/operator/" target="_blank" rel="noopener noreferrer">2. Jaeger 설치</a></h2>
<p>Tracing을 위해 Jaeger 공식 문서를 참고하여 K8s 환경에 Jaeger Operator를 설치합니다.</p>
<h3>(1) Role Binding 배포(선택)</h3>
<blockquote>
<p>💡참고 : 동일 네임스페이스 배포할 경우 해당 과정은 생략!</p>
</blockquote>
<ul>
<li>YAML 생성 : <code>consul-jaeger</code> RoleBinding 생성</li>
</ul>
<div class="language-yaml" data-highlighter="prismjs" data-ext="yml" data-title="yml"><pre class="language-yaml"><code><span class="line"><span class="token comment"># role-binding.yaml</span></span>
<span class="line"><span class="token key atrule">kind</span><span class="token punctuation">:</span> RoleBinding</span>
<span class="line"><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> rbac.authorization.k8s.io/v1</span>
<span class="line"><span class="token key atrule">metadata</span><span class="token punctuation">:</span></span>
<span class="line">  <span class="token key atrule">name</span><span class="token punctuation">:</span> jaeger<span class="token punctuation">-</span>operator<span class="token punctuation">-</span>in<span class="token punctuation">-</span>myproject</span>
<span class="line">  <span class="token key atrule">namespace</span><span class="token punctuation">:</span> consul<span class="token punctuation">-</span>jaeger</span>
<span class="line"><span class="token key atrule">subjects</span><span class="token punctuation">:</span></span>
<span class="line"><span class="token punctuation">-</span> <span class="token key atrule">kind</span><span class="token punctuation">:</span> ServiceAccount</span>
<span class="line">  <span class="token key atrule">name</span><span class="token punctuation">:</span> jaeger<span class="token punctuation">-</span>operator</span>
<span class="line">  <span class="token key atrule">namespace</span><span class="token punctuation">:</span> observability</span>
<span class="line"><span class="token key atrule">roleRef</span><span class="token punctuation">:</span></span>
<span class="line">  <span class="token key atrule">kind</span><span class="token punctuation">:</span> Role</span>
<span class="line">  <span class="token key atrule">name</span><span class="token punctuation">:</span> jaeger<span class="token punctuation">-</span>operator</span>
<span class="line">  <span class="token key atrule">apiGroup</span><span class="token punctuation">:</span> rbac.authorization.k8s.io</span>
<span class="line"></span></code></pre></div><ul>
<li>YAML 배포</li>
</ul>
<div class="language-bash" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="line">kubectl apply <span class="token parameter variable">-f</span> role-binding.yaml</span>
<span class="line"></span></code></pre></div><h3>(2) Jaeger Operator 배포(CRD 설치)</h3>
<p>Jaeger Operator를 배포하기 위한 <code>observbility</code> 네임스페이스를 생성합니다. 이때, 별도의 네임스페이스에 배포할 경우에는 다운받은 <code>.yaml</code>에 설저된 네임스페이스명을 변경하셔야 합니다. <a href="https://www.jaegertracing.io/docs/1.39/operator/#installing-the-operator-on-kubernetes" target="_blank" rel="noopener noreferrer">참고</a></p>
<ul>
<li>네임스페이스 생성 및 각종 리소스 배포</li>
</ul>
<div class="language-bash" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="line">kubectl create namespace observability</span>
<span class="line">kubectl create <span class="token parameter variable">-f</span> https://github.com/jaegertracing/jaeger-operator/releases/download/v1.37.0/jaeger-operator.yaml <span class="token parameter variable">-n</span> observability</span>
<span class="line"></span></code></pre></div><ul>
<li>배포된 <code>jaeger-operator</code> 확인</li>
</ul>
<div class="language-bash" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="line">kubectl get deployment jaeger-operator <span class="token parameter variable">-n</span> observability </span>
<span class="line">NAME              READY   UP-TO-DATE   AVAILABLE   AGE</span>
<span class="line">jaeger-operator   <span class="token number">1</span>/1     <span class="token number">1</span>            <span class="token number">1</span>           2m30s</span>
<span class="line"></span></code></pre></div><h3>(3) Jaeger CR 배포 - AllInOne</h3>
<p>실제 K8s 환경에서 <code>Jaeger</code>리소스 생성을 위해 다음 <code>.yaml</code> 파일을 배포합니다. 본 문서에서는 편의상 <code>AllInOne</code> 이미지를 사용하여 배포합니다.</p>
<p><code>AllInOne</code> 이미지는 프로덕션 환경에서 사용하기에는 적합하지 않으며, Dev 또는 Test 목적으로 사용해야 합니다. <a href="https://www.jaegertracing.io/docs/1.37/operator/#allinone-default-strategy" target="_blank" rel="noopener noreferrer">(배포전략 참고)</a></p>
<blockquote>
<p>The simplest possible way to create a Jaeger instance is by creating a YAML file like the following example. This will install the default AllInOne strategy, which deploys the “all-in-one” image (agent, collector, query, ingester, Jaeger UI) in a single pod, using in-memory storage by default.</p>
</blockquote>
<ul>
<li>YAML 생성</li>
</ul>
<div class="language-yaml" data-highlighter="prismjs" data-ext="yml" data-title="yml"><pre class="language-yaml"><code><span class="line"><span class="token comment"># simplest.yaml</span></span>
<span class="line"><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> jaegertracing.io/v1</span>
<span class="line"><span class="token key atrule">kind</span><span class="token punctuation">:</span> Jaeger</span>
<span class="line"><span class="token key atrule">metadata</span><span class="token punctuation">:</span></span>
<span class="line">  <span class="token key atrule">name</span><span class="token punctuation">:</span> simplest</span>
<span class="line">  <span class="token key atrule">namespace</span><span class="token punctuation">:</span> observability</span>
<span class="line"></span></code></pre></div><ul>
<li>(참고) <a href="https://www.jaegertracing.io/docs/1.39/operator/#examples" target="_blank" rel="noopener noreferrer">Log Level 조정</a></li>
</ul>
<div class="language-yaml" data-highlighter="prismjs" data-ext="yml" data-title="yml"><pre class="language-yaml"><code><span class="line"><span class="token comment"># simplest-debug.yaml</span></span>
<span class="line"><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> jaegertracing.io/v1</span>
<span class="line"><span class="token key atrule">kind</span><span class="token punctuation">:</span> Jaeger</span>
<span class="line"><span class="token key atrule">metadata</span><span class="token punctuation">:</span></span>
<span class="line">  <span class="token key atrule">name</span><span class="token punctuation">:</span> simplest</span>
<span class="line">  <span class="token key atrule">namespace</span><span class="token punctuation">:</span> observability</span>
<span class="line"><span class="token key atrule">spec</span><span class="token punctuation">:</span></span>
<span class="line">  <span class="token key atrule">strategy</span><span class="token punctuation">:</span> allInOne</span>
<span class="line">  <span class="token key atrule">allInOne</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token key atrule">image</span><span class="token punctuation">:</span> jaegertracing/all<span class="token punctuation">-</span>in<span class="token punctuation">-</span>one<span class="token punctuation">:</span>latest</span>
<span class="line">    <span class="token key atrule">options</span><span class="token punctuation">:</span></span>
<span class="line">      <span class="token key atrule">log-level</span><span class="token punctuation">:</span> debug</span>
<span class="line"></span></code></pre></div><ul>
<li>YAML 배포</li>
</ul>
<div class="language-text" data-highlighter="prismjs" data-ext="text" data-title="text"><pre class="language-text"><code><span class="line">kubectl apply -f simplest.yaml</span>
<span class="line"></span></code></pre></div><ul>
<li>배포 로그 확인
<ul>
<li><code>{"level":"info","ts":1661997111.1498919,"caller":"healthcheck/handler.go:129","msg":"Health Check state change","status":"ready"}</code> 로그를 통해서 정상적인 상태 확인됨</li>
</ul>
</li>
</ul>
<div class="language-bash" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="line">kubectl logs <span class="token parameter variable">-l</span> app.kubernetes.io/instance<span class="token operator">=</span>simplest <span class="token parameter variable">-n</span> consul-jaeger</span>
<span class="line"><span class="token punctuation">{</span><span class="token string">"level"</span><span class="token builtin class-name">:</span><span class="token string">"info"</span>,<span class="token string">"ts"</span>:1661997111.149404,<span class="token string">"caller"</span><span class="token builtin class-name">:</span><span class="token string">"channelz/funcs.go:340"</span>,<span class="token string">"msg"</span><span class="token builtin class-name">:</span><span class="token string">"[core][Channel #10] Channel Connectivity change to TRANSIENT_FAILURE"</span>,<span class="token string">"system"</span><span class="token builtin class-name">:</span><span class="token string">"grpc"</span>,<span class="token string">"grpc_log"</span>:true<span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">{</span><span class="token string">"level"</span><span class="token builtin class-name">:</span><span class="token string">"info"</span>,<span class="token string">"ts"</span>:1661997111.1495373,<span class="token string">"caller"</span><span class="token builtin class-name">:</span><span class="token string">"app/static_handler.go:181"</span>,<span class="token string">"msg"</span><span class="token builtin class-name">:</span><span class="token string">"UI config path not provided, config file will not be watched"</span><span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">{</span><span class="token string">"level"</span><span class="token builtin class-name">:</span><span class="token string">"info"</span>,<span class="token string">"ts"</span>:1661997111.149864,<span class="token string">"caller"</span><span class="token builtin class-name">:</span><span class="token string">"app/server.go:217"</span>,<span class="token string">"msg"</span><span class="token builtin class-name">:</span><span class="token string">"Query server started"</span>,<span class="token string">"http_addr"</span><span class="token builtin class-name">:</span><span class="token string">"[::]:16686"</span>,<span class="token string">"grpc_addr"</span><span class="token builtin class-name">:</span><span class="token string">"[::]:16685"</span><span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">{</span><span class="token string">"level"</span><span class="token builtin class-name">:</span><span class="token string">"info"</span>,<span class="token string">"ts"</span>:1661997111.1498919,<span class="token string">"caller"</span><span class="token builtin class-name">:</span><span class="token string">"healthcheck/handler.go:129"</span>,<span class="token string">"msg"</span><span class="token builtin class-name">:</span><span class="token string">"Health Check state change"</span>,<span class="token string">"status"</span><span class="token builtin class-name">:</span><span class="token string">"ready"</span><span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">{</span><span class="token string">"level"</span><span class="token builtin class-name">:</span><span class="token string">"info"</span>,<span class="token string">"ts"</span>:1661997111.149912,<span class="token string">"caller"</span><span class="token builtin class-name">:</span><span class="token string">"app/server.go:300"</span>,<span class="token string">"msg"</span><span class="token builtin class-name">:</span><span class="token string">"Starting GRPC server"</span>,<span class="token string">"port"</span>:16685,<span class="token string">"addr"</span><span class="token builtin class-name">:</span><span class="token string">":16685"</span><span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">{</span><span class="token string">"level"</span><span class="token builtin class-name">:</span><span class="token string">"info"</span>,<span class="token string">"ts"</span>:1661997111.1499252,<span class="token string">"caller"</span><span class="token builtin class-name">:</span><span class="token string">"channelz/funcs.go:340"</span>,<span class="token string">"msg"</span><span class="token builtin class-name">:</span><span class="token string">"[core][Server #9 ListenSocket #12] ListenSocket created"</span>,<span class="token string">"system"</span><span class="token builtin class-name">:</span><span class="token string">"grpc"</span>,<span class="token string">"grpc_log"</span>:true<span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">{</span><span class="token string">"level"</span><span class="token builtin class-name">:</span><span class="token string">"info"</span>,<span class="token string">"ts"</span>:1661997111.1499453,<span class="token string">"caller"</span><span class="token builtin class-name">:</span><span class="token string">"app/server.go:281"</span>,<span class="token string">"msg"</span><span class="token builtin class-name">:</span><span class="token string">"Starting HTTP server"</span>,<span class="token string">"port"</span>:16686,<span class="token string">"addr"</span><span class="token builtin class-name">:</span><span class="token string">":16686"</span><span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">{</span><span class="token string">"level"</span><span class="token builtin class-name">:</span><span class="token string">"info"</span>,<span class="token string">"ts"</span>:1661997112.150468,<span class="token string">"caller"</span><span class="token builtin class-name">:</span><span class="token string">"channelz/funcs.go:340"</span>,<span class="token string">"msg"</span><span class="token builtin class-name">:</span><span class="token string">"[core][Channel #10 SubChannel #11] Subchannel Connectivity change to IDLE"</span>,<span class="token string">"system"</span><span class="token builtin class-name">:</span><span class="token string">"grpc"</span>,<span class="token string">"grpc_log"</span>:true<span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">{</span><span class="token string">"level"</span><span class="token builtin class-name">:</span><span class="token string">"info"</span>,<span class="token string">"ts"</span>:1661997112.1505697,<span class="token string">"caller"</span><span class="token builtin class-name">:</span><span class="token string">"grpclog/component.go:71"</span>,<span class="token string">"msg"</span><span class="token builtin class-name">:</span><span class="token string">"[core]pickfirstBalancer: UpdateSubConnState: 0xc00082a700, {IDLE connection error: desc = <span class="token entity" title="\&quot;">\"</span>transport: Error while dialing dial tcp :16685: connect: connection refused<span class="token entity" title="\&quot;">\"</span>}"</span>,<span class="token string">"system"</span><span class="token builtin class-name">:</span><span class="token string">"grpc"</span>,<span class="token string">"grpc_log"</span>:true<span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">{</span><span class="token string">"level"</span><span class="token builtin class-name">:</span><span class="token string">"info"</span>,<span class="token string">"ts"</span>:1661997112.1505857,<span class="token string">"caller"</span><span class="token builtin class-name">:</span><span class="token string">"channelz/funcs.go:340"</span>,<span class="token string">"msg"</span><span class="token builtin class-name">:</span><span class="token string">"[core][Channel #10] Channel Connectivity change to IDLE"</span>,<span class="token string">"system"</span><span class="token builtin class-name">:</span><span class="token string">"grpc"</span>,<span class="token string">"grpc_log"</span>:true<span class="token punctuation">}</span></span>
<span class="line"></span></code></pre></div><h3>(4) (선택) Jaeger Sidecar 배포 방식</h3>
<p>Jaeger Auto Injection 및 Manaul Injection 활용방안을 가이드합니다. (3)에서 <code>Jaeger</code>리소스를 직접 배포했다면 생략하셔도 됩니다.</p>
<h4>방안1. CRD 배포</h4>
<p>해당 방안은 3)-(3)에서  작성한 방식으로, 관리되는 네임스페이스에 있는 애플리케이션의 tracing을 수행합니다.</p>
<h4>방안2. Auto Injection - annotation 활용</h4>
<p>해당 방안은 annotation 절에   <code>"sidecar.jaegertracing.io/inject": "true"</code> 를 기입하여 tracing 하고자 하는 애플리케이션에 sidecar auto-injection을 수행합니다.</p>
<ul>
<li>tracing 할 애플리케이션 deployment yaml의 annotation 위치</li>
</ul>
<div class="language-yaml" data-highlighter="prismjs" data-ext="yml" data-title="yml"><pre class="language-yaml"><code><span class="line"><span class="token key atrule">metadata</span><span class="token punctuation">:</span></span>
<span class="line">  <span class="token key atrule">name</span><span class="token punctuation">:</span> web<span class="token punctuation">-</span>deployment</span>
<span class="line">  <span class="token key atrule">labels</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token key atrule">app</span><span class="token punctuation">:</span> web</span>
<span class="line">  <span class="token key atrule">namespace</span><span class="token punctuation">:</span> observability</span>
<span class="line">  <span class="token key atrule">annotations</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token key atrule">"sidecar.jaegertracing.io/inject"</span><span class="token punctuation">:</span> <span class="token string">'true'</span></span>
<span class="line"></span></code></pre></div><h4>방안3. Manual Injectio</h4>
<p>tracing 하고자 하는 애플리케이션에 직접 sidecar를 붙혀 tracing 합니다.</p>
<div class="language-yaml" data-highlighter="prismjs" data-ext="yml" data-title="yml"><pre class="language-yaml"><code><span class="line">      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> jaeger<span class="token punctuation">-</span>agent</span>
<span class="line">        <span class="token key atrule">image</span><span class="token punctuation">:</span> jaegertracing/jaeger<span class="token punctuation">-</span>agent<span class="token punctuation">:</span>latest</span>
<span class="line">        <span class="token key atrule">imagePullPolicy</span><span class="token punctuation">:</span> IfNotPresent</span>
<span class="line">        <span class="token key atrule">ports</span><span class="token punctuation">:</span></span>
<span class="line">          <span class="token punctuation">-</span> <span class="token key atrule">containerPort</span><span class="token punctuation">:</span> <span class="token number">5775</span></span>
<span class="line">            <span class="token key atrule">name</span><span class="token punctuation">:</span> zk<span class="token punctuation">-</span>compact<span class="token punctuation">-</span>trft</span>
<span class="line">            <span class="token key atrule">protocol</span><span class="token punctuation">:</span> UDP</span>
<span class="line">          <span class="token punctuation">-</span> <span class="token key atrule">containerPort</span><span class="token punctuation">:</span> <span class="token number">5778</span></span>
<span class="line">            <span class="token key atrule">name</span><span class="token punctuation">:</span> config<span class="token punctuation">-</span>rest</span>
<span class="line">            <span class="token key atrule">protocol</span><span class="token punctuation">:</span> TCP</span>
<span class="line">          <span class="token punctuation">-</span> <span class="token key atrule">containerPort</span><span class="token punctuation">:</span> <span class="token number">6831</span></span>
<span class="line">            <span class="token key atrule">name</span><span class="token punctuation">:</span> jg<span class="token punctuation">-</span>compact<span class="token punctuation">-</span>trft</span>
<span class="line">            <span class="token key atrule">protocol</span><span class="token punctuation">:</span> UDP</span>
<span class="line">          <span class="token punctuation">-</span> <span class="token key atrule">containerPort</span><span class="token punctuation">:</span> <span class="token number">6832</span></span>
<span class="line">            <span class="token key atrule">name</span><span class="token punctuation">:</span> jg<span class="token punctuation">-</span>binary<span class="token punctuation">-</span>trft</span>
<span class="line">            <span class="token key atrule">protocol</span><span class="token punctuation">:</span> UDP</span>
<span class="line">          <span class="token punctuation">-</span> <span class="token key atrule">containerPort</span><span class="token punctuation">:</span> <span class="token number">14271</span></span>
<span class="line">            <span class="token key atrule">name</span><span class="token punctuation">:</span> admin<span class="token punctuation">-</span>http</span>
<span class="line">            <span class="token key atrule">protocol</span><span class="token punctuation">:</span> TCP</span>
<span class="line">        <span class="token key atrule">args</span><span class="token punctuation">:</span></span>
<span class="line">          <span class="token punctuation">-</span> <span class="token punctuation">-</span><span class="token punctuation">-</span>reporter.grpc.host<span class="token punctuation">-</span>port=dns<span class="token punctuation">:</span>///simplest<span class="token punctuation">-</span>collector<span class="token punctuation">-</span>headless.observability<span class="token punctuation">:</span><span class="token number">14250</span></span>
<span class="line">          <span class="token punctuation">-</span> <span class="token punctuation">-</span><span class="token punctuation">-</span>reporter.type=grpc</span>
<span class="line"></span></code></pre></div><h3>(5) Jaeger UI 접속</h3>
<p>기본적을 Jaeger UI는 <code>ClusterIP</code>로 배포됩니다. 외부에서 접속하기 위해 다음 몇 가지 방안을 제시합니다.</p>
<blockquote>
<p>참고 : 본 문서에서는 편의상 LoadBalancer 타입으로 변경하는 샘플을 제공합니다.</p>
</blockquote>
<ul>
<li>Ingress</li>
<li><strong>LoadBalancer</strong></li>
<li>Port-Forwarding</li>
</ul>
<p>기본적으로 Jaeager UI는 16686 Port를 사용합니다. 필자는 편읜상 <code>simplest-query</code> 서비스를 <code>LoadBalancer</code>타입으로 변경하여 조회합니다.</p>
<div class="language-yaml" data-highlighter="prismjs" data-ext="yml" data-title="yml"><pre class="language-yaml"><code><span class="line"><span class="token key atrule">spec</span><span class="token punctuation">:</span></span>
<span class="line">(중략)</span>
<span class="line">  <span class="token key atrule">ports</span><span class="token punctuation">:</span></span>
<span class="line">  <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> http<span class="token punctuation">-</span>query</span>
<span class="line">    <span class="token key atrule">nodePort</span><span class="token punctuation">:</span> <span class="token number">32731</span></span>
<span class="line">    <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">16686</span></span>
<span class="line">    <span class="token key atrule">protocol</span><span class="token punctuation">:</span> TCP</span>
<span class="line">    <span class="token key atrule">targetPort</span><span class="token punctuation">:</span> <span class="token number">16686</span></span>
<span class="line">  <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> grpc<span class="token punctuation">-</span>query</span>
<span class="line">    <span class="token key atrule">nodePort</span><span class="token punctuation">:</span> <span class="token number">31322</span></span>
<span class="line">    <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">16685</span></span>
<span class="line">    <span class="token key atrule">protocol</span><span class="token punctuation">:</span> TCP</span>
<span class="line">    <span class="token key atrule">targetPort</span><span class="token punctuation">:</span> <span class="token number">16685</span></span>
<span class="line">  <span class="token key atrule">selector</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token key atrule">app</span><span class="token punctuation">:</span> jaeger</span>
<span class="line">    <span class="token key atrule">app.kubernetes.io/component</span><span class="token punctuation">:</span> all<span class="token punctuation">-</span>in<span class="token punctuation">-</span>one</span>
<span class="line">    <span class="token key atrule">app.kubernetes.io/instance</span><span class="token punctuation">:</span> simplest</span>
<span class="line">    <span class="token key atrule">app.kubernetes.io/managed-by</span><span class="token punctuation">:</span> jaeger<span class="token punctuation">-</span>operator</span>
<span class="line">    <span class="token key atrule">app.kubernetes.io/name</span><span class="token punctuation">:</span> simplest</span>
<span class="line">    <span class="token key atrule">app.kubernetes.io/part-of</span><span class="token punctuation">:</span> jaeger</span>
<span class="line">  <span class="token key atrule">sessionAffinity</span><span class="token punctuation">:</span> None</span>
<span class="line">  <span class="token key atrule">type</span><span class="token punctuation">:</span> LoadBalancer</span>
<span class="line"></span></code></pre></div><ul>
<li>Jaeger UI 예제</li>
</ul>
<figure><figcaption>image-20221110190509279</figcaption></figure>
<h3>(참고) Jaeger와 다른 네임스페이스에 애플리케이션 사용할 경우</h3>
<h2><a class="header-anchor" href="#_3-consul-config-설정"><span></span></a><a href="https://developer.hashicorp.com/consul/docs/connect/distributed-tracing" target="_blank" rel="noopener noreferrer">3. Consul Config 설정</a></h2>
<h3>(1)  Ingress Gateway</h3>
<div class="language-yaml" data-highlighter="prismjs" data-ext="yml" data-title="yml"><pre class="language-yaml"><code><span class="line"><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> consul.hashicorp.com/v1alpha1</span>
<span class="line"><span class="token key atrule">kind</span><span class="token punctuation">:</span> IngressGateway</span>
<span class="line"><span class="token key atrule">metadata</span><span class="token punctuation">:</span></span>
<span class="line">  <span class="token key atrule">name</span><span class="token punctuation">:</span> ingress<span class="token punctuation">-</span>gateway</span>
<span class="line">  <span class="token key atrule">namespace</span><span class="token punctuation">:</span> consul</span>
<span class="line"><span class="token key atrule">spec</span><span class="token punctuation">:</span></span>
<span class="line">  <span class="token key atrule">listeners</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token punctuation">-</span> <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">5000</span></span>
<span class="line">      <span class="token key atrule">protocol</span><span class="token punctuation">:</span> http</span>
<span class="line">      <span class="token key atrule">services</span><span class="token punctuation">:</span></span>
<span class="line">        <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> web</span>
<span class="line">          <span class="token key atrule">hosts</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'*'</span><span class="token punctuation">]</span></span>
<span class="line"></span></code></pre></div><h3>(2) Service Defaults</h3>
<div class="language-yaml" data-highlighter="prismjs" data-ext="yml" data-title="yml"><pre class="language-yaml"><code><span class="line"><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> consul.hashicorp.com/v1alpha1</span>
<span class="line"><span class="token key atrule">kind</span><span class="token punctuation">:</span> ServiceDefaults</span>
<span class="line"><span class="token key atrule">metadata</span><span class="token punctuation">:</span></span>
<span class="line">  <span class="token key atrule">name</span><span class="token punctuation">:</span> web</span>
<span class="line"><span class="token key atrule">spec</span><span class="token punctuation">:</span></span>
<span class="line">  <span class="token key atrule">protocol</span><span class="token punctuation">:</span> <span class="token string">"http"</span></span>
<span class="line"></span></code></pre></div><h3>(3) Proxy Defaults</h3>
<p><code>ProxyDefaults</code> 설정을 통해 Collector 서버에 대한 주소 및 Clustesr Name에 대해 선언합니다.</p>
<div class="language-yaml" data-highlighter="prismjs" data-ext="yml" data-title="yml"><pre class="language-yaml"><code><span class="line"><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> consul.hashicorp.com/v1alpha1</span>
<span class="line"><span class="token key atrule">kind</span><span class="token punctuation">:</span> ProxyDefaults</span>
<span class="line"><span class="token key atrule">metadata</span><span class="token punctuation">:</span></span>
<span class="line">  <span class="token key atrule">name</span><span class="token punctuation">:</span> global</span>
<span class="line">  <span class="token key atrule">namespace</span><span class="token punctuation">:</span> consul</span>
<span class="line"><span class="token key atrule">spec</span><span class="token punctuation">:</span></span>
<span class="line">  <span class="token key atrule">config</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token key atrule">protocol</span><span class="token punctuation">:</span> http</span>
<span class="line">    <span class="token key atrule">envoy_tracing_json</span><span class="token punctuation">:</span> <span class="token punctuation">|</span><span class="token scalar string"></span>
<span class="line">      {</span>
<span class="line">        "http":{</span>
<span class="line">          "name":"envoy.tracers.zipkin",</span>
<span class="line">          "typedConfig":{</span>
<span class="line">            "@type":"type.googleapis.com/envoy.config.trace.v3.ZipkinConfig",</span>
<span class="line">            "collector_cluster":"simplest-collector",</span>
<span class="line">            "collector_endpoint_version":"HTTP_JSON",</span>
<span class="line">            "collector_endpoint":"/api/v2/spans",</span>
<span class="line">            "shared_span_context":false</span>
<span class="line">          }</span>
<span class="line">        }</span>
<span class="line">      }</span></span>
<span class="line">    <span class="token key atrule">envoy_extra_static_clusters_json</span><span class="token punctuation">:</span> <span class="token punctuation">|</span><span class="token scalar string"></span>
<span class="line">      {</span>
<span class="line">        "connect_timeout":"3.000s",</span>
<span class="line">        "dns_lookup_family":"V4_ONLY",</span>
<span class="line">        "lb_policy":"ROUND_ROBIN",</span>
<span class="line">        "load_assignment":{</span>
<span class="line">          "cluster_name":"simplest-collector",</span>
<span class="line">          "endpoints":[</span>
<span class="line">            {</span>
<span class="line">              "lb_endpoints":[</span>
<span class="line">                {</span>
<span class="line">                  "endpoint":{</span>
<span class="line">                    "address":{</span>
<span class="line">                      "socket_address":{</span>
<span class="line">                        "address":"simplest-collector",</span>
<span class="line">                        "port_value":9411,</span>
<span class="line">                        "protocol":"TCP"</span>
<span class="line">                      }</span>
<span class="line">                    }</span>
<span class="line">                  }</span>
<span class="line">                }</span>
<span class="line">              ]</span>
<span class="line">            }</span>
<span class="line">          ]</span>
<span class="line">        },</span>
<span class="line">        "name":"simplest-collector",</span>
<span class="line">        "type":"STRICT_DNS"</span>
<span class="line">      }</span></span>
<span class="line"></span></code></pre></div><h3>99) 참고문서</h3>
<ul>
<li>
<p>ingress gateway + tracing 고려사항 : <a href="https://developer.hashicorp.com/consul/docs/connect/distributed-tracing#considerations" target="_blank" rel="noopener noreferrer">https://developer.hashicorp.com/consul/docs/connect/distributed-tracing#considerations</a></p>
</li>
<li>
<p><a href="https://github.com/jaegertracing/jaeger-operator.git" target="_blank" rel="noopener noreferrer">https://github.com/jaegertracing/jaeger-operator.git</a></p>
</li>
<li>
<p>jaeger 배포 helm chart : <a href="https://git.app.uib.no/caleno/helm-charts/-/tree/597accc8e61dfb3a78f2e4f1b9622c8d3f32b4f2/stable/jaeger-operator/templates" target="_blank" rel="noopener noreferrer">https://git.app.uib.no/caleno/helm-charts/-/tree/597accc8e61dfb3a78f2e4f1b9622c8d3f32b4f2/stable/jaeger-operator/templates</a></p>
</li>
</ul>
]]></content:encoded>
    </item>
    <item>
      <title>Jenkins(Java Driver) on Nomad</title>
      <link>https://docmoa.github.io/04-HashiCorp/07-Nomad/05-SampleJob/jenkins_java_driver.html</link>
      <guid>https://docmoa.github.io/04-HashiCorp/07-Nomad/05-SampleJob/jenkins_java_driver.html</guid>
      <source url="https://docmoa.github.io/rss.xml">Jenkins(Java Driver) on Nomad</source>
      <description>Jenkins WAR 파일로 실행하기</description>
      <pubDate>Sun, 06 Nov 2022 11:50:40 GMT</pubDate>
      <content:encoded><![CDATA[
<blockquote>
<p>Nomad</p>
<ul>
<li>Java Driver : <a href="https://developer.hashicorp.com/nomad/docs/drivers/java" target="_blank" rel="noopener noreferrer">https://developer.hashicorp.com/nomad/docs/drivers/java</a></li>
<li>Schecuduler Config : <a href="https://developer.hashicorp.com/nomad/api-docs/operator/scheduler" target="_blank" rel="noopener noreferrer">https://developer.hashicorp.com/nomad/api-docs/operator/scheduler</a></li>
</ul>
</blockquote>
<h2>1. Jenkins의 기본 실행 방식</h2>
<p>Jenkins의 공식 설치 안내에서 처럼 Java를 실행시킬 수 있는 환경에서 <code>war</code> 형태의 자바 웹어플리케이션 압축 파일을 실행하는 형태, 컨테이너, OS별 지원되는 패키지 형태로 실행된다.</p>
<ul>
<li>공식 설치 안내 : <a href="https://www.jenkins.io/doc/book/installing/" target="_blank" rel="noopener noreferrer">https://www.jenkins.io/doc/book/installing/</a></li>
</ul>
<p>각 설치 형태의 특징은 다음과 같다.</p>
<table>
<thead>
<tr>
<th>형태</th>
<th>설명</th>
<th>특징</th>
</tr>
</thead>
<tbody>
<tr>
<td>war</td>
<td>JRE 또는 JDK가 설치되어있는 환경에서 실행가능</td>
<td>서버 재부팅, 장애 시 수동으로 실행 필요</td>
</tr>
<tr>
<td>Container</td>
<td>컨테이너 런타임(e.g. docker, containerd ... )에서 실행</td>
<td>컨테이너 관리 및 영구저장소 관리 필요</td>
</tr>
<tr>
<td>Package</td>
<td>각 OS 마다 제공되는 패키지 관리자에서 관리</td>
<td>필요한 패키지 자동설치 및 재부팅시 재시작 가능하나 장애시 수동 실행 필요</td>
</tr>
</tbody>
</table>
<h2>2. Nomad에서의 Java 애플리케이션 실행의 의미</h2>
<p>Nomad는 애플리케이션 실행을 오케스트레이션 해주는 역할로, Java 애플리케이션의 여러 실행 형태에 장점만을 취합하여 실행 환경을 제공할 수 있다.</p>
<ul>
<li>운영에 익숙한 Host OS에서 실행</li>
<li>chroot, cgroups 등의 컨테이너 특징으로 격리 기능 제공</li>
<li>프로세스 장애 시 재시작</li>
<li>영구저장소 마운트 (Host 디렉토리와 CSI 둘 모두 지원)</li>
<li>Java 실행을 선언적으로 구성</li>
<li>Java의 범위정의되는 Memory(Xms, Xmx)에 맞춰 리소스 격리</li>
</ul>
<h2>3. Nomad 구성 요구사항</h2>
<p>Nomoad 에서는 Jenkins 실행을 위해 다음 조건이 필요하다.</p>
<h3>3.1 Nomad Client</h3>
<ul>
<li>Host Volume을 위한 디렉토리 생성<div class="language-bash" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="line"><span class="token comment"># 예시</span></span>
<span class="line"><span class="token function">mkdir</span> <span class="token parameter variable">-p</span> /opt/nomad/volume/jenkins</span>
<span class="line"></span></code></pre></div></li>
<li>Linux/macOS의 경우 Java Driver 실행시 계정을 <code>nobody</code>로 부여하므로 <code>nobody</code>계정에 권한으로 실행 필요<div class="language-bash" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="line"><span class="token comment"># 예시</span></span>
<span class="line"><span class="token comment"># macOS인 경우</span></span>
<span class="line"><span class="token function">chown</span> <span class="token parameter variable">-R</span> nobody:nobody /opt/nomad/volume/jenkins</span>
<span class="line"><span class="token comment"># ubuntu인 경우</span></span>
<span class="line"><span class="token function">chown</span> <span class="token parameter variable">-R</span> nobody:nogroup /opt/nomad/volume/jenkins</span>
<span class="line"></span></code></pre></div></li>
<li>Client 구성 피알의 <code>client</code> 블록에 Host Volume을 지정<div class="language-hcl" data-highlighter="prismjs" data-ext="hcl" data-title="hcl"><pre class="language-hcl"><code><span class="line"><span class="token keyword">client</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token property">enabled</span> <span class="token punctuation">=</span> <span class="token boolean">true</span></span>
<span class="line">  <span class="token comment"># 생략</span></span>
<span class="line">  host_volume <span class="token string">"jenkins"</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token property">path</span>      <span class="token punctuation">=</span> <span class="token string">"/opt/nomad/volume/jenkins"</span></span>
<span class="line">    <span class="token property">read_only</span> <span class="token punctuation">=</span> <span class="token boolean">false</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre></div></li>
</ul>
<h3>3.2 Nomad Scheduler</h3>
<p><a href="https://www.hashicorp.com/blog/announcing-general-availability-of-hashicorp-nomad-1-1" target="_blank" rel="noopener noreferrer">Nomad 1.1</a>부터 리소스에 대한 유연한 설정 기능이 추가되었다. 그 중 메모리 할당 추가 기능인 <a href="https://www.hashicorp.com/blog/managing-resources-for-workloads-with-nomad-1-1" target="_blank" rel="noopener noreferrer">Memory Oversubscription</a>이 추가되었고, Java 애플리케이션이 갖는 특징인 JVM 메모리의 범위 할당과도 연계되는 설정 방식이다. JVM 64bit 부터는 기본적으로 소모하는 메모리가 크고, 한번 증가한 메모리는 장기간 유지되기 때문에 메모리에 대한 유연한 설정은 중요하다.<br>
<img src="https://www.datocms-assets.com/2885/1620146573-oversubscription.png?fit=max&amp;fm=webp&amp;q=80&amp;w=2500" alt="" loading="lazy"></p>
<p>특히, Nomad에서 리소스를 격리하여 Java 드라이버에 제공되므로 지정된 메모리보다 초과 사용하는 경우 격리된 리소스로 인해 <code>Error code 143 Signal 9</code> (Out Of Memory 로 인한 프로세스 강제종료)형상이 발생할 수 있다.</p>
<p><code>Oversubscription</code> 기능은 고급 기능으로 구성설정에서 지정할 수는 없고 CLI/API/Terraform을 사용하여 설정을 변경해야 한다. (<a href="https://developer.hashicorp.com/nomad/tutorials/advanced-scheduling/memory-oversubscription?in=nomad%2Fadvanced-scheduling" target="_blank" rel="noopener noreferrer">설명 링크</a>)</p>

<h2>4. Job Sample</h2>
<ul>
<li>resources
<ul>
<li>memory_max : 유동적 메모리 할당</li>
<li>network : Jenkins에서 사용할 포트 지정</li>
</ul>
</li>
<li>env : Jenkins Home 디렉토리 위한 환경 변수 <code>JENKINS_HOME</code> 선언</li>
<li>config
<ul>
<li>jar_path : <code>artifact</code>로 받은 war파일 경로</li>
<li>jvm_options : jvm 실행 옵션</li>
<li>args : war 실행 문서에서 지정하는 <code>--httpPort</code>는 args 항목이고 jvm 옵션이 아님에 주의</li>
</ul>
</li>
<li>volume_mount : Jenkins Home 디렉토리로 Host Volume으로 지정한 영구적 볼륨 할당</li>
<li>artifact : war 파일 다운로드 경로</li>
</ul>
<div class="language-hcl" data-highlighter="prismjs" data-ext="hcl" data-title="hcl"><pre class="language-hcl"><code><span class="line"><span class="token keyword">variable<span class="token type variable"> "namespace" </span></span><span class="token punctuation">{</span></span>
<span class="line">  <span class="token property">default</span> <span class="token punctuation">=</span> <span class="token string">"default"</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">variable<span class="token type variable"> "jenkins_version" </span></span><span class="token punctuation">{</span></span>
<span class="line">  <span class="token property">default</span> <span class="token punctuation">=</span> <span class="token string">"2.361.3"</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">job <span class="token string">"jenkins"</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token property">datacenters</span> <span class="token punctuation">=</span> <span class="token punctuation">[</span><span class="token string">"home"</span><span class="token punctuation">]</span></span>
<span class="line">  <span class="token property">namespace</span> <span class="token punctuation">=</span> var.namespace</span>
<span class="line"></span>
<span class="line">  <span class="token property">type</span> <span class="token punctuation">=</span> <span class="token string">"service"</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">constraint</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token property">attribute</span> <span class="token punctuation">=</span> <span class="token string">"<span class="token interpolation"><span class="token punctuation">$</span><span class="token punctuation">{</span>meta<span class="token punctuation">.</span>type<span class="token punctuation">}</span></span>"</span></span>
<span class="line">    <span class="token property">value</span>     <span class="token punctuation">=</span> <span class="token string">"vraptor"</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">update</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token property">healthy_deadline</span> <span class="token punctuation">=</span> <span class="token string">"10m"</span></span>
<span class="line">    <span class="token property">progress_deadline</span> <span class="token punctuation">=</span> <span class="token string">"20m"</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">  group <span class="token string">"jenkins"</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token property">count</span> <span class="token punctuation">=</span> <span class="token number">1</span></span>
<span class="line">    volume <span class="token string">"jenkins"</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token property">type</span>      <span class="token punctuation">=</span> <span class="token string">"host"</span></span>
<span class="line">      <span class="token property">source</span>    <span class="token punctuation">=</span> <span class="token string">"jenkins"</span></span>
<span class="line">      <span class="token property">read_only</span> <span class="token punctuation">=</span> <span class="token boolean">false</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">network</span> <span class="token punctuation">{</span></span>
<span class="line">      port <span class="token string">"jenkins_http"</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// to = 8080</span></span>
<span class="line">        <span class="token property">static</span> <span class="token punctuation">=</span> <span class="token number">8888</span></span>
<span class="line">      <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    task <span class="token string">"war"</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token property">driver</span> <span class="token punctuation">=</span> <span class="token string">"java"</span></span>
<span class="line">      <span class="token keyword">resources</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token property">cpu</span>    <span class="token punctuation">=</span> <span class="token number">1000</span></span>
<span class="line">        <span class="token property">memory</span> <span class="token punctuation">=</span> <span class="token number">1024</span></span>
<span class="line">        <span class="token property">memory_max</span> <span class="token punctuation">=</span> <span class="token number">2048</span></span>
<span class="line">      <span class="token punctuation">}</span></span>
<span class="line">      <span class="token keyword">env</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token property">JENKINS_HOME</span> <span class="token punctuation">=</span> <span class="token string">"/jenkins_home"</span></span>
<span class="line">      <span class="token punctuation">}</span></span>
<span class="line">      <span class="token keyword">config</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token property">jar_path</span>    <span class="token punctuation">=</span> <span class="token string">"local/jenkins.war"</span></span>
<span class="line">        <span class="token property">jvm_options</span> <span class="token punctuation">=</span> <span class="token punctuation">[</span><span class="token string">"-Xms1024m"</span>, <span class="token string">"-Xmx2048m"</span><span class="token punctuation">]</span></span>
<span class="line">        <span class="token property">args</span> <span class="token punctuation">=</span> <span class="token punctuation">[</span><span class="token string">"--httpPort=<span class="token interpolation"><span class="token punctuation">$</span><span class="token punctuation">{</span>NOMAD_PORT_jenkins_http<span class="token punctuation">}</span></span>"</span><span class="token punctuation">]</span></span>
<span class="line">      <span class="token punctuation">}</span></span>
<span class="line">      <span class="token keyword">volume_mount</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token property">volume</span>      <span class="token punctuation">=</span> <span class="token string">"jenkins"</span></span>
<span class="line">        <span class="token property">destination</span> <span class="token punctuation">=</span> <span class="token string">"/jenkins_home"</span></span>
<span class="line">        <span class="token property">read_only</span> <span class="token punctuation">=</span> <span class="token boolean">false</span></span>
<span class="line">      <span class="token punctuation">}</span></span>
<span class="line">      <span class="token keyword">service</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token property">name</span> <span class="token punctuation">=</span> <span class="token string">"jenkins"</span></span>
<span class="line">        <span class="token property">tags</span> <span class="token punctuation">=</span> <span class="token punctuation">[</span><span class="token string">"java"</span>, <span class="token string">"cicd"</span><span class="token punctuation">]</span></span>
<span class="line">        <span class="token property">provider</span> <span class="token punctuation">=</span> <span class="token string">"nomad"</span></span>
<span class="line"></span>
<span class="line">        <span class="token property">port</span> <span class="token punctuation">=</span> <span class="token string">"jenkins_http"</span></span>
<span class="line"></span>
<span class="line">        <span class="token keyword">check</span> <span class="token punctuation">{</span></span>
<span class="line">          <span class="token property">name</span> <span class="token punctuation">=</span> <span class="token string">"jenkins port"</span></span>
<span class="line">          <span class="token property">type</span>  <span class="token punctuation">=</span> <span class="token string">"tcp"</span></span>
<span class="line">          <span class="token property">interval</span> <span class="token punctuation">=</span> <span class="token string">"10s"</span></span>
<span class="line">          <span class="token property">timeout</span>  <span class="token punctuation">=</span> <span class="token string">"2s"</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">      <span class="token punctuation">}</span></span>
<span class="line">      <span class="token keyword">logs</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token property">max_files</span>     <span class="token punctuation">=</span> <span class="token number">10</span></span>
<span class="line">        <span class="token property">max_file_size</span> <span class="token punctuation">=</span> <span class="token number">10</span></span>
<span class="line">      <span class="token punctuation">}</span></span>
<span class="line">      <span class="token keyword">artifact</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token property">source</span> <span class="token punctuation">=</span> <span class="token string">"https://get.jenkins.io/war-stable/<span class="token interpolation"><span class="token punctuation">$</span><span class="token punctuation">{</span><span class="token keyword">var</span><span class="token punctuation">.</span><span class="token type variable">jenkins_version</span><span class="token punctuation">}</span></span>/jenkins.war"</span></span>
<span class="line">        <span class="token keyword">options</span> <span class="token punctuation">{</span></span>
<span class="line">          <span class="token property">checksum</span> <span class="token punctuation">=</span> <span class="token string">"sha256:f39cb8d09fd17c72dc096511ce50f245fc3004d1022aaaf60421a536f740c9b9"</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">        <span class="token comment">// destination = "local"</span></span>
<span class="line">      <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre></div><figure><figcaption></figcaption></figure>
<div class="hint-container tip">
<p class="hint-container-title">실행 후 Admin Token</p>
<p>Jenkins Home 디렉토리로 지정한 디렉토리에 관련 파일이 생성되며, 실제 호스트의 디렉토리에서 접근하는 것도 가능하나 Nomad의 <code>Exec</code>에서 접근하는 것도 가능하다<br>
</p>
</div>
]]></content:encoded>
      <enclosure url="https://www.datocms-assets.com/2885/1620146573-oversubscription.png?fit=max&amp;fm=webp&amp;q=80&amp;w=2500" type="image/"/>
    </item>
    <item>
      <title>node-sass와 sass로의 전환</title>
      <link>https://docmoa.github.io/06-etc/nodejs/node-sass.html</link>
      <guid>https://docmoa.github.io/06-etc/nodejs/node-sass.html</guid>
      <source url="https://docmoa.github.io/rss.xml">node-sass와 sass로의 전환</source>
      <description>node-sass 오류와 sass로의 전환</description>
      <pubDate>Sat, 05 Nov 2022 03:14:01 GMT</pubDate>
      <content:encoded><![CDATA[
<p>aarch64에서 vuepress 실행을 위해 테스트를 하던 도중 node-gyp와 node-sass에 대한 오류를 맞이하게 되었다.</p>
<p>node-sass의 경우 arm환경에 대한 빌드 릴리즈가 없는 관계로 <code>npm install</code>을 실행하면 다시 빌드를 하게되는데, 이때 node-sass를 빌드하는 과정에서 빌드 실패가 발생함</p>
<h2>node-sass란?</h2>
<p>node환경에서 sass는 css 코드로 변환해주는 스타일 전처리언어이다. c/c++로 되어있는 구성요소로 인해 빠른 빌드 속도를 제공한다.</p>
<h2>node-sass와 Nodejs 버전별 호환성</h2>
<p>관련 내용을 찾다보면 Node 버전에 맞는 node-sass를 사용해야 한다고 나오는데 그 이유는 <code>libsass</code> 때문이고 c/c++로 되어있는 해당 라이브러리 특성상 Node 버전과 실행 환경에 종속적이다.</p>
<blockquote>
<p>node-sass 지원 환경 (<a href="https://github.com/sass/node-sass/releases" target="_blank" rel="noopener noreferrer">https://github.com/sass/node-sass/releases</a>)</p>
<table>
<thead>
<tr>
<th>OS</th>
<th>Architecture</th>
<th>Node</th>
</tr>
</thead>
<tbody>
<tr>
<td>Windows</td>
<td>x86 &amp; x64</td>
<td>12, 14, 16, 17</td>
</tr>
<tr>
<td>OSX</td>
<td>x64</td>
<td>12, 14, 16, 17</td>
</tr>
<tr>
<td>Linux</td>
<td>64</td>
<td>12, 14, 16, 17</td>
</tr>
<tr>
<td>Alpine Linux</td>
<td>x64</td>
<td>12, 14, 16, 17</td>
</tr>
<tr>
<td>FreeBSD</td>
<td>i386 &amp; x64</td>
<td>12, 14</td>
</tr>
</tbody>
</table>
</blockquote>
<p>추가로 node-sass는 항후 Dart Sass로 옮겨진다로 안내되어있음</p>
<p><a href="https://github.com/sass/node-sass" target="_blank" rel="noopener noreferrer">https://github.com/sass/node-sass</a></p>
<h2>Dart Sass 로의 전환</h2>
<p>stackoverflow에서 기존 node-sass를 사용하고 있는 경우 해당 프로젝트를 Dart Sass로 전환하는 선언 방식을 알려줬다.</p>
<p><a href="https://stackoverflow.com/a/70171361" target="_blank" rel="noopener noreferrer">https://stackoverflow.com/a/70171361</a></p>
<div class="language-bash" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="line"><span class="token function">npm</span> remove node-sass</span>
<span class="line"><span class="token function">npm</span> i node-sass@npm:sass <span class="token parameter variable">-D</span></span>
<span class="line"></span></code></pre></div><p><code>package.json</code>에 다음과 같이 추가된다.</p>
<div class="language-json" data-highlighter="prismjs" data-ext="json" data-title="json"><pre class="language-json"><code><span class="line">  <span class="token property">"devDependencies"</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token property">"node-sass"</span><span class="token operator">:</span> <span class="token string">"npm:sass@^1.55.0"</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line"></span></code></pre></div>]]></content:encoded>
    </item>
    <item>
      <title>2022년 11월</title>
      <link>https://docmoa.github.io/04-HashiCorp/08-Updates/99-2022/2022-11.html</link>
      <guid>https://docmoa.github.io/04-HashiCorp/08-Updates/99-2022/2022-11.html</guid>
      <source url="https://docmoa.github.io/rss.xml">2022년 11월</source>
      <description>2022년 11월 Update</description>
      <pubDate>Tue, 01 Nov 2022 09:01:50 GMT</pubDate>
      <content:encoded><![CDATA[
<h2>Product 소개</h2>
<ul>
<li>
<p>Hashiconf Global</p>
<ul>
<li>
<p><a href="https://www.hashicorp.com/blog/hashiconf-global-2022-from-zero-trust-to-no-code" target="_blank" rel="noopener noreferrer">Hashicorp Blog</a></p>
</li>
<li>
<p>Day 1: ZTS (Zero Trust Security) 와 Cloud Service Networking 을 메인 주제로 새로운 기능과 HCP 서비스에 대한 소개</p>
<ul>
<li><a href="https://www.hashicorp.com/blog/hcp-boundary-now-ga-bolsters-hashicorp-s-zero-trust-security-solution" target="_blank" rel="noopener noreferrer">HCP Boundary GA</a>: Opensource 버전만 지원하던 Boundary 에 대해 HCP Version 공식 출시</li>
<li><a href="https://www.hashicorp.com/blog/hcp-vault-on-microsoft-azure-now-in-public-beta" target="_blank" rel="noopener noreferrer">HCP Vault on Microsoft Azure Public Beta</a>: AWS 뿐만 아니라 Azure 사용자들도 HCP Vault 사용 가능</li>
<li><a href="https://www.hashicorp.com/blog/consul-1-14-beta-announcing-simplified-service-mesh-deployments" target="_blank" rel="noopener noreferrer">Consul Breaking Changes</a>: K8S 에서의 Component 간소화 및 기능강화, Windows 에 대한 Service Mesh 지원</li>
<li><a href="https://www.hashicorp.com/blog/hashicorp-developer-your-new-experience-for-docs-and-tutorials" target="_blank" rel="noopener noreferrer">Hashicorp Developer Portal</a> 개편: 8가지 전 제품군에 대한 공식 문서 및 Tutorial 총망라</li>
</ul>
</li>
<li>
<p>Day 2: Infrastructure 및 Application 자동화 관련 제품군을 메인 주제로 새로운 기능 소개</p>
<ul>
<li><a href="https://www.hashicorp.com/blog/terraform-gains-visibility-self-service-and-compliance-upgrades" target="_blank" rel="noopener noreferrer">Terraform Cloud</a>: Self Service 및 Compliance 관련 기능 강화</li>
<li><a href="https://www.hashicorp.com/blog/nomad-1-4-adds-nomad-variables-and-updates-service-discovery" target="_blank" rel="noopener noreferrer">Nomad 1.4 GA</a>: 단독 제품으로서의 Service Discovery, Variable 등 기능 강화</li>
<li><a href="https://www.hashicorp.com/blog/announcing-hcp-waypoint-public-beta" target="_blank" rel="noopener noreferrer">HCP Waypoint Public Beta</a> 출시: Opensource 버전만 지원하던 Waypoint 의 HCP Version Public Beta 출시</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2>Product Update</h2>
<ul>
<li>Terraform
<ul>
<li>
<p>Terraform Cloud 신규 기능 (현재 모두 Beta, <a href="https://www.hashicorp.com/blog/terraform-gains-visibility-self-service-and-compliance-upgrades" target="_blank" rel="noopener noreferrer">Hashiconf Global 발표</a> 참고)</p>
<ul>
<li>
<p><a href="https://developer.hashicorp.com/terraform/cloud-docs/workspaces/health?_gl=1*cm2dqn*_ga*MjA4NTc1MTMyNy4xNjM4OTUwNzQ3*_ga_P7S46ZYEKW*MTY2NjYxMjg0NS4yMTkuMS4xNjY2NjEzMjM1LjAuMC4w#continuous-validation" target="_blank" rel="noopener noreferrer">Continous Validation</a>: Terraform 으로 Provisioning 한 (Day 0) Resource 에 대한 수동 변화를 감지하는 <a href="https://www.hashicorp.com/blog/drift-detection-for-terraform-cloud-is-now-generally-available" target="_blank" rel="noopener noreferrer">Drift Detection</a> 와 더불어 장기적 관리 및 유지보수 관점에서 필요한 사전 (Precondition) 및 사후 (Postcondition) 조건을 기반으로 Resource 의 상태를 점검하고 관리하는 기능</p>
</li>
<li>
<p><a href="https://developer.hashicorp.com/terraform/cloud-docs/no-code-provisioning/module-design?_gl=1*ilib11*_ga*MjA4NTc1MTMyNy4xNjM4OTUwNzQ3*_ga_P7S46ZYEKW*MTY2NjYxMjg0NS4yMTkuMS4xNjY2NjEzNDQwLjAuMC4w" target="_blank" rel="noopener noreferrer">No-Code Provisioning</a>: Terraform 에 대해 Code 작성과 같은 기본 지식 또는 Module 과 같은 고급 지식에 대한 이해 없이 최소한의 변수 정보 입력만으로 Terraform 기반의 Workspace 생성 부터 Resource Provisioning 까지 사용할 수 있게 지원하는 Self-Service 특화 기능</p>
</li>
<li>
<p><a href="https://developer.hashicorp.com/terraform/cloud-docs/policy-enforcement/opa" target="_blank" rel="noopener noreferrer">OPA (Open Policy Agent)</a> 기반 정책 관리: Rego 정책 언어 기반 OPA 릴 지원하여 기존에 OPA 기반 표준 정책 수립한 사용자도 손쉽게 Terraform Cloud 에 Import 하여 정책 기반 Resource Provisioning 을 지원하는 기능</p>
</li>
</ul>
</li>
<li>
<p>CLI</p>
<ul>
<li><a href="https://github.com/hashicorp/terraform/releases/tag/v1.3.3" target="_blank" rel="noopener noreferrer">1.33 Release</a>
<ul>
<li>이미 삭제됐으나, Code 상에 존재하는 Resource 삭제 시 발생하는 오류 개선</li>
</ul>
</li>
<li><a href="https://developer.hashicorp.com/terraform/enterprise/releases" target="_blank" rel="noopener noreferrer">Enterprise Release</a>
<ul>
<li>
<p><a href="https://www.terraform.io/enterprise/releases/2022/v202208-3" target="_blank" rel="noopener noreferrer">10월 Release</a> 출시 (v202210-1)</p>
</li>
<li>
<p>필수 Upgrade Version: Release Note 에서 * 표기된 Version 은 필수로 거쳐야 하는 Version (예: v202207-2, v202204-2)</p>
</li>
<li>
<p>PostgresSQL 버전 10 지원종료: TFE 에 대해 External PostgresSQL 사용하는 경우 최소 버전 12 이상으로 Upgrade 필요</p>
<ul>
<li>2023년 2월 release (v202302-1) 을 기점으로 PostgresSQL 버전 11 지원 종료 예정</li>
</ul>
</li>
<li>
<p>구버전 OS 지원종료: 2023년 2월 release (v202302-1) 을 기점으로 아래 OS 목록에 대해 지원 종료</p>
<ul>
<li>
<p>Debian 8, 9</p>
</li>
<li>
<p>Ubuntu 14.04, 16.04</p>
</li>
<li>
<p>Amazon Linux 2014.03, 2014.09, 2015.03, 2015.09, 2016.03, 2016.09, 2017.03, 2017.09, 2018.03</p>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li>
<p>Provider</p>
<ul>
<li><a href="https://github.com/hashicorp/terraform-provider-aws/releases/tag/v4.36.0" target="_blank" rel="noopener noreferrer">AWS v4.36.0 주요 수정사항</a>
<ul>
<li>aws_lightsail 관련 resource 추가</li>
<li>aws_route53_zone 에 대해 primary_name_server 설정 추가</li>
<li>aws_resourcegroups_group 에 대해 configuration 설정 추가</li>
<li>aws_sqs_queue 관련 오류 개선</li>
</ul>
</li>
<li><a href="https://github.com/hashicorp/terraform-provider-azurerm/releases/tag/v3.28.0" target="_blank" rel="noopener noreferrer">Azure v3.28.0 주요 수정사항</a>
<ul>
<li>azurerm_sentinel_data_connector 관련 resource 추가</li>
<li>azurerm_linux(windows)_web_app, azurerm_linux(windows)function_app 에 대해 certificate 관련 설정 추가</li>
<li>azurerm_storage_account 관련 account_tier 설정 추가</li>
<li>azurerm_linux(windows)_web_app, azurerm_linux(windows)function_app 에 대해 오류 개선</li>
</ul>
</li>
<li><a href="https://github.com/hashicorp/terraform-provider-google/releases/tag/v4.41.0" target="_blank" rel="noopener noreferrer">GCP v4.41.0 주요 수정사항</a>
<ul>
<li>google_sql_user.sql_server_user_details 에 대해 read-only 만 가능하도록 수정</li>
<li>google_bigquery_table 에 대해 avro_options 설정 추가</li>
<li>google_container_node_pool 에 대해 node_config.0.guest_accelerator.0.gpu_sharing_config 설정 추가</li>
<li>google_filestore_instance 이 여러개 연속 생성 되도록 강제하는 조건 삭제</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li>Vault
<ul>
<li><a href="https://www.hashicorp.com/blog/vault-1-12" target="_blank" rel="noopener noreferrer">1.12 주요 수정사항</a>
<ul>
<li>상세 내용: <a href="https://github.com/hashicorp/vault/releases/tag/v1.12.0" target="_blank" rel="noopener noreferrer">CHANGELOG</a> 참고</li>
<li>PKI Secret Engine 관련 개선: RSA-PSS signature, telemetry, Google Cloud Key Manager 지원 등</li>
<li>PKCS #11 Provider 지원: HSM 연동 관련 기능 및 Oracle TDE 지원</li>
<li>Transform 관련 개선: BYOK, MSSQL 지원, Key 자동 Rotation 등</li>
</ul>
</li>
<li><a href="https://www.hashicorp.com/blog/hcp-vault-on-microsoft-azure-now-in-public-beta" target="_blank" rel="noopener noreferrer">HCP Vault on Azure (Public Beta)</a>: Azure 유럽 Region 에서 사용 가능</li>
</ul>
</li>
<li>Consul
<ul>
<li><a href="https://github.com/hashicorp/consul/releases/tag/v1.13.3" target="_blank" rel="noopener noreferrer">1.13.3 주요 수정사항</a>
<ul>
<li>Ingress Gateway (Service Mesh) 에 대한 Upstream Max Connection 설정 개선</li>
<li>Terminating Gateway 및 Mesh Gateway (Service Mesh) 에 대한 TCP Keepalives 설정 추가</li>
<li>Agent Cache 관련 goroutine leak 발생 bug 수정</li>
<li>Snapshot Agent 관련 Session 조회 불가로 인한 Panic 발생 bug 수정</li>
</ul>
</li>
<li><a href="https://www.hashicorp.com/blog/consul-1-14-beta-announcing-simplified-service-mesh-deployments" target="_blank" rel="noopener noreferrer">1.14 Beta</a> (Hashiconf Global Announcement)
<ul>
<li>Consul Client on K8S 에 대한 구조변화: Daemonset 에서 Sidecar 방식으로 변경</li>
<li>Cluster Peering 기반 Service Failover 포함 Mesh Traffic Management 기능 개선</li>
<li>Windows 에 대한 Service Mesh 지원</li>
<li>AWS Lambda 에 대한 Service Mesh 지원</li>
</ul>
</li>
</ul>
</li>
<li>Nomad
<ul>
<li><a href="https://www.hashicorp.com/blog/nomad-1-4-adds-nomad-variables-and-updates-service-discovery" target="_blank" rel="noopener noreferrer">1.4 주요 수정사항</a>
<ul>
<li>상세 내용: <a href="https://github.com/hashicorp/nomad/releases/tag/v1.4.0" target="_blank" rel="noopener noreferrer">CHANGELOG</a> 참고</li>
<li>기밀 정보 활용 위한 자체 KV, Variable 기능 추가</li>
<li>Service Discovery 기능 추가</li>
<li>ACL Token 기반 Policy 기능 추가</li>
<li>Web UI 에서 Task 단위 정보 출력 개선</li>
<li>Raft Version 2 지원 종료 (Upgrade 시 참고)</li>
</ul>
</li>
</ul>
</li>
</ul>
]]></content:encoded>
    </item>
    <item>
      <title>2022년 10월</title>
      <link>https://docmoa.github.io/04-HashiCorp/08-Updates/99-2022/2022-10.html</link>
      <guid>https://docmoa.github.io/04-HashiCorp/08-Updates/99-2022/2022-10.html</guid>
      <source url="https://docmoa.github.io/rss.xml">2022년 10월</source>
      <description>2022년 10월 Update</description>
      <pubDate>Tue, 04 Oct 2022 06:27:14 GMT</pubDate>
      <content:encoded><![CDATA[
<h2>Product 소개</h2>
<ul>
<li>
<p>Nomad: Nomad Variables and Service Discovery</p>
<ul>
<li><a href="https://www.hashicorp.com/blog/nomad-1-4-adds-nomad-variables-and-updates-service-discovery" target="_blank" rel="noopener noreferrer">Hashicorp Blog</a></li>
<li>Hashicorp Nomad는 Container 뿐만 아니라 Container 화 하기 어려운 Legacy Application 에 대해 배포하고 관리하는 데 사용되는 간단하고 유연한 오케스트레이터입니다. Nomad는 On-prem 및 Cloud 환경을 가리지 않고 작동합니다. Cloudflare, Roblox, Q2 및 Pandora와 같은 조직의 프로덕션에서 널리 채택되고 사용됩니다. 새롭게 출시된 HashiCorp Nomad 1.4 Beta Release 에서는 상태 확인을 통해 Service Discovery 지원을 강화하고 사용자가 구성 값을 저장할 수 있도록 하는 Nomad Variable 기능이 도입 되었습니다.</li>
</ul>
</li>
</ul>
<h2>Product Update</h2>
<ul>
<li>Terraform
<ul>
<li>CLI
<ul>
<li><a href="https://github.com/hashicorp/terraform/releases/tag/v1.3.0" target="_blank" rel="noopener noreferrer">1.30 Release</a>
<ul>
<li>Optional attributes for object type constraints: 변수 사용 시 Type 지정에 대한 'Optional' 지원</li>
<li>'moved' block 기능개선: resource 에 대한 refactor 기능 개선 (예: aws_instance 를 instance module 로 refactoring)</li>
</ul>
</li>
<li><a href="https://www.terraform.io/enterprise/releases" target="_blank" rel="noopener noreferrer">Enterprise Release</a>
<ul>
<li>
<p><a href="https://www.terraform.io/enterprise/releases/2022/v202209-2" target="_blank" rel="noopener noreferrer">9월 Release</a> 출시 (v202209-2)</p>
</li>
<li>
<p>필수 Upgrade Version: Release Note 에서 * 표기된 Version 은 필수로 거쳐야 하는 Version (예: v202207-2, v202204-2)</p>
</li>
<li>
<p>TFE 엔진 내 Vault 에 대한 정책 수정하여 간헐적으로 TFE 구동 시 발생하는 403 오류 해결</p>
</li>
<li>
<p>TFE 엔진 내 Data Migration Logic 에 대해 Postgres 11 이상에서만 지원</p>
</li>
<li>
<p>TF Code 변경에 대한 Test 등을 지원하는 <a href="https://www.terraform.io/enterprise/run/remote-operations#speculative-plans" target="_blank" rel="noopener noreferrer">예측 계획 (Speculative Plans)</a> 기능 지원</p>
</li>
</ul>
</li>
</ul>
</li>
<li>Provider
<ul>
<li><a href="https://github.com/hashicorp/terraform-provider-aws/releases/tag/v4.32.0" target="_blank" rel="noopener noreferrer">AWS v4.32.0 주요 수정사항</a>
<ul>
<li>resource/aws_eks_cluster 에 대한 outpost_config 설정 추가 (Outpost 에서 EKS 사용 지원)</li>
<li>resource/aws_ec2_managed_prefix_list 에 대해 MaxEntries and Entry 반영 오류 개선</li>
</ul>
</li>
<li><a href="https://github.com/hashicorp/terraform-provider-azurerm/releases/tag/v3.24.0" target="_blank" rel="noopener noreferrer">Azure v3.24.0 주요 수정사항</a>
<ul>
<li>azurerm_linux(windows)_virtual_machine 에 대한 patch_assessment_mode 설정 추가</li>
<li>azurerm_managed_disk 에 대한 PremiumV2_LRS type 지원</li>
<li>azurerm_private_endpoint 에 대한 custom_network_interface_name 설정 추가</li>
<li>azurerm_storage_account 에 대한 azure_files_identity_based_auth 정보 export 지원</li>
</ul>
</li>
<li><a href="https://github.com/hashicorp/terraform-provider-google/releases/tag/v4.38.0" target="_blank" rel="noopener noreferrer">GCP v4.38.0 주요 수정사항</a>
<ul>
<li>appengine 에 대한 egress_setting 설정 추가</li>
<li>bigquery 에 대한 json_extension 설정 추가</li>
<li>compute 에 대한 json_custom_config 설정 추가</li>
<li>compute 에 대한 most_disruptive_allowed_action update 불가 오류 개선</li>
<li>storage 에 대한 lifecycle_rule.condition.age 설정 오류 개선</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li>Vault
<ul>
<li><a href="https://github.com/hashicorp/vault/blob/main/CHANGELOG.md#1113" target="_blank" rel="noopener noreferrer">1.11.3 주요 수정사항</a>
<ul>
<li>identity/oidc 관련 오류 개선</li>
<li>integrated storage (raft) 방식 사용 시 retry join 관련 오류 개선</li>
</ul>
</li>
</ul>
</li>
<li>Consul
<ul>
<li><a href="https://github.com/hashicorp/consul/releases/tag/v1.13.2" target="_blank" rel="noopener noreferrer">1.13.2 주요 수정사항</a>
<ul>
<li>신규 consul cli command: <a href="https://www.consul.io/commands/peering" target="_blank" rel="noopener noreferrer">peering</a></li>
<li>Metric 관련 Label 기능 추가</li>
<li>Envoy 관련 Outlier (이상감지) 에 대한 추가 Parameter 지원</li>
<li>Consul Connect 에 대해 ConnectCA CSR requests 의 URI Length Check 개선</li>
<li>auto-config JWT authorization 에 대한 input 값 검증 개선</li>
<li>Consul Connect (Service Mesh) 의 TLS 인증서 관련 오류 개선</li>
</ul>
</li>
</ul>
</li>
<li>Nomad
<ul>
<li><a href="https://github.com/hashicorp/nomad/releases/tag/v1.3.5" target="_blank" rel="noopener noreferrer">1.3.5 주요 수정사항</a>
<ul>
<li>Consul 연동 시 Namespace 정보 조회 관련 개선</li>
<li>template 사용시 change_mode = "script" 명시로 인한 오류 개선</li>
</ul>
</li>
</ul>
</li>
</ul>
]]></content:encoded>
    </item>
    <item>
      <title>Dynamic application sizing</title>
      <link>https://docmoa.github.io/04-HashiCorp/07-Nomad/05-SampleJob/DAS.html</link>
      <guid>https://docmoa.github.io/04-HashiCorp/07-Nomad/05-SampleJob/DAS.html</guid>
      <source url="https://docmoa.github.io/rss.xml">Dynamic application sizing</source>
      <description>Nomad Dynamic application sizing</description>
      <pubDate>Mon, 03 Oct 2022 02:12:59 GMT</pubDate>
      <content:encoded><![CDATA[
<ul>
<li>Nomad autoscaler 배포 후 사용할 수 있는 기능 중에 하나</li>
<li>Dynamic application sizing(DAS)의 기능이 설정되어 있는 job을 배포 한 이후 autoscaler job에서 resource의 권고를 받아올 수 있음</li>
<li>권고 받은 값을 사용자가 확인 후 허용할 경우 job의 resource의 변화가 정상적으로 적용됨</li>
</ul>
<h2>autoscaler job은 기존에 사용하던 job을 사용</h2>
<ul>
<li><a href="/04-HashiCorp/07-Nomad/05-SampleJob/DAS.html" target="_blank">AutoScaler job</a></li>
</ul>
<div class="hint-container tip">
<p class="hint-container-title">팁</p>
<p>테스트 및 사용전 확인해야 할 사항은 Nomad의 enterprise, 즉 라이선스가 필요하며, nomad-autosclaer의 경우에도 enterprise여야만 합니다.</p>
</div>
<h3>Demo job의 배포</h3>
<div class="language-ruby" data-highlighter="prismjs" data-ext="rb" data-title="rb"><pre class="language-ruby"><code><span class="line">job <span class="token string-literal"><span class="token string">"example"</span></span> <span class="token punctuation">{</span></span>
<span class="line">  datacenters <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string-literal"><span class="token string">"dc1"</span></span><span class="token punctuation">]</span></span>
<span class="line"></span>
<span class="line">  group <span class="token string-literal"><span class="token string">"cache-lb"</span></span> <span class="token punctuation">{</span></span>
<span class="line">    count <span class="token operator">=</span> <span class="token number">1</span></span>
<span class="line"></span>
<span class="line">    network <span class="token punctuation">{</span></span>
<span class="line">      port <span class="token string-literal"><span class="token string">"lb"</span></span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    task <span class="token string-literal"><span class="token string">"nginx"</span></span> <span class="token punctuation">{</span></span>
<span class="line">      driver <span class="token operator">=</span> <span class="token string-literal"><span class="token string">"docker"</span></span></span>
<span class="line"></span>
<span class="line">      config <span class="token punctuation">{</span></span>
<span class="line">        image <span class="token operator">=</span> <span class="token string-literal"><span class="token string">"nginx"</span></span></span>
<span class="line">        ports <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string-literal"><span class="token string">"lb"</span></span><span class="token punctuation">]</span></span>
<span class="line">        volumes <span class="token operator">=</span> <span class="token punctuation">[</span></span>
<span class="line">          <span class="token comment"># It's safe to mount this path as a file because it won't re-render.</span></span>
<span class="line">          <span class="token string-literal"><span class="token string">"local/nginx.conf:/etc/nginx/nginx.conf"</span></span><span class="token punctuation">,</span></span>
<span class="line">          <span class="token comment"># This path hosts files that will re-render with Consul Template.</span></span>
<span class="line">          <span class="token string-literal"><span class="token string">"local/nginx:/etc/nginx/conf.d"</span></span></span>
<span class="line">        <span class="token punctuation">]</span></span>
<span class="line">      <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">      <span class="token comment"># This template overwrites the embedded nginx.conf file so it loads</span></span>
<span class="line">      <span class="token comment"># conf.d/*.conf files outside of the `http` block.</span></span>
<span class="line">      template <span class="token punctuation">{</span></span>
<span class="line">        data        <span class="token operator">=</span> <span class="token string-literal heredoc-string"><span class="token delimiter"><span class="token punctuation">&lt;&lt;</span><span class="token symbol">EOF</span></span><span class="token string"></span>
<span class="line">user  nginx;</span>
<span class="line">worker_processes  1;</span>
<span class="line">error_log  /var/log/nginx/error.log warn;</span>
<span class="line">pid        /var/run/nginx.pid;</span>
<span class="line">events {</span>
<span class="line">    worker_connections  1024;</span>
<span class="line">}</span>
<span class="line">include /etc/nginx/conf.d/*.conf;</span>
<span class="line"></span><span class="token delimiter"><span class="token symbol">EOF</span></span></span></span>
<span class="line">        destination <span class="token operator">=</span> <span class="token string-literal"><span class="token string">"local/nginx.conf"</span></span></span>
<span class="line">      <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">      <span class="token comment"># This template creates a TCP proxy to Redis.</span></span>
<span class="line">      template <span class="token punctuation">{</span></span>
<span class="line">        data          <span class="token operator">=</span> <span class="token string-literal heredoc-string"><span class="token delimiter"><span class="token punctuation">&lt;&lt;</span><span class="token symbol">EOF</span></span><span class="token string"></span>
<span class="line">stream {</span>
<span class="line">  server {</span>
<span class="line">    listen {{ env "NOMAD_PORT_lb" }};</span>
<span class="line">    proxy_pass backend;</span>
<span class="line">  }</span>
<span class="line">  upstream backend {</span>
<span class="line">  {{ range nomadService "redis" }}</span>
<span class="line">    server {{ .Address }}:{{ .Port }};</span>
<span class="line">  {{ else }}server 127.0.0.1:65535; # force a 502</span>
<span class="line">  {{ end }}</span>
<span class="line">  }</span>
<span class="line">}</span>
<span class="line"></span><span class="token delimiter"><span class="token symbol">EOF</span></span></span></span>
<span class="line">        destination   <span class="token operator">=</span> <span class="token string-literal"><span class="token string">"local/nginx/nginx.conf"</span></span></span>
<span class="line">        change_mode   <span class="token operator">=</span> <span class="token string-literal"><span class="token string">"signal"</span></span></span>
<span class="line">        change_signal <span class="token operator">=</span> <span class="token string-literal"><span class="token string">"SIGHUP"</span></span></span>
<span class="line">      <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">      resources <span class="token punctuation">{</span></span>
<span class="line">        cpu    <span class="token operator">=</span> <span class="token number">50</span></span>
<span class="line">        memory <span class="token operator">=</span> <span class="token number">10</span></span>
<span class="line">      <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">      scaling <span class="token string-literal"><span class="token string">"cpu"</span></span> <span class="token punctuation">{</span></span>
<span class="line">        policy <span class="token punctuation">{</span></span>
<span class="line">          cooldown            <span class="token operator">=</span> <span class="token string-literal"><span class="token string">"1m"</span></span></span>
<span class="line">          evaluation_interval <span class="token operator">=</span> <span class="token string-literal"><span class="token string">"10s"</span></span></span>
<span class="line"></span>
<span class="line">          check <span class="token string-literal"><span class="token string">"95pct"</span></span> <span class="token punctuation">{</span></span>
<span class="line">            strategy <span class="token string-literal"><span class="token string">"app-sizing-percentile"</span></span> <span class="token punctuation">{</span></span>
<span class="line">              percentile <span class="token operator">=</span> <span class="token string-literal"><span class="token string">"95"</span></span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line">          <span class="token punctuation">}</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">      <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">      scaling <span class="token string-literal"><span class="token string">"mem"</span></span> <span class="token punctuation">{</span></span>
<span class="line">        policy <span class="token punctuation">{</span></span>
<span class="line">          cooldown            <span class="token operator">=</span> <span class="token string-literal"><span class="token string">"1m"</span></span></span>
<span class="line">          evaluation_interval <span class="token operator">=</span> <span class="token string-literal"><span class="token string">"10s"</span></span></span>
<span class="line"></span>
<span class="line">          check <span class="token string-literal"><span class="token string">"max"</span></span> <span class="token punctuation">{</span></span>
<span class="line">            strategy <span class="token string-literal"><span class="token string">"app-sizing-max"</span></span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span>
<span class="line">          <span class="token punctuation">}</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">      <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    service <span class="token punctuation">{</span></span>
<span class="line">      name         <span class="token operator">=</span> <span class="token string-literal"><span class="token string">"redis-lb"</span></span></span>
<span class="line">      port         <span class="token operator">=</span> <span class="token string-literal"><span class="token string">"lb"</span></span></span>
<span class="line">      address_mode <span class="token operator">=</span> <span class="token string-literal"><span class="token string">"host"</span></span></span>
<span class="line">      provider     <span class="token operator">=</span> <span class="token string-literal"><span class="token string">"nomad"</span></span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">  group <span class="token string-literal"><span class="token string">"cache"</span></span> <span class="token punctuation">{</span></span>
<span class="line">    count <span class="token operator">=</span> <span class="token number">3</span></span>
<span class="line"></span>
<span class="line">    network <span class="token punctuation">{</span></span>
<span class="line">      port <span class="token string-literal"><span class="token string">"db"</span></span> <span class="token punctuation">{</span></span>
<span class="line">        to <span class="token operator">=</span> <span class="token number">6379</span></span>
<span class="line">      <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    task <span class="token string-literal"><span class="token string">"redis"</span></span> <span class="token punctuation">{</span></span>
<span class="line">      driver <span class="token operator">=</span> <span class="token string-literal"><span class="token string">"docker"</span></span></span>
<span class="line"></span>
<span class="line">      config <span class="token punctuation">{</span></span>
<span class="line">        image <span class="token operator">=</span> <span class="token string-literal"><span class="token string">"redis:6.0"</span></span></span>
<span class="line">        ports <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string-literal"><span class="token string">"db"</span></span><span class="token punctuation">]</span></span>
<span class="line">      <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">      resources <span class="token punctuation">{</span></span>
<span class="line">        cpu    <span class="token operator">=</span> <span class="token number">500</span></span>
<span class="line">        memory <span class="token operator">=</span> <span class="token number">256</span></span>
<span class="line">      <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">      scaling <span class="token string-literal"><span class="token string">"cpu"</span></span> <span class="token punctuation">{</span></span>
<span class="line">        policy <span class="token punctuation">{</span></span>
<span class="line">          cooldown            <span class="token operator">=</span> <span class="token string-literal"><span class="token string">"1m"</span></span></span>
<span class="line">          evaluation_interval <span class="token operator">=</span> <span class="token string-literal"><span class="token string">"10s"</span></span></span>
<span class="line"></span>
<span class="line">          check <span class="token string-literal"><span class="token string">"95pct"</span></span> <span class="token punctuation">{</span></span>
<span class="line">            strategy <span class="token string-literal"><span class="token string">"app-sizing-percentile"</span></span> <span class="token punctuation">{</span></span>
<span class="line">              percentile <span class="token operator">=</span> <span class="token string-literal"><span class="token string">"95"</span></span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line">          <span class="token punctuation">}</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">      <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">      scaling <span class="token string-literal"><span class="token string">"mem"</span></span> <span class="token punctuation">{</span></span>
<span class="line">        policy <span class="token punctuation">{</span></span>
<span class="line">          cooldown            <span class="token operator">=</span> <span class="token string-literal"><span class="token string">"1m"</span></span></span>
<span class="line">          evaluation_interval <span class="token operator">=</span> <span class="token string-literal"><span class="token string">"10s"</span></span></span>
<span class="line"></span>
<span class="line">          check <span class="token string-literal"><span class="token string">"max"</span></span> <span class="token punctuation">{</span></span>
<span class="line">            strategy <span class="token string-literal"><span class="token string">"app-sizing-max"</span></span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span>
<span class="line">          <span class="token punctuation">}</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">      <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">      service <span class="token punctuation">{</span></span>
<span class="line">        name         <span class="token operator">=</span> <span class="token string-literal"><span class="token string">"redis"</span></span></span>
<span class="line">        port         <span class="token operator">=</span> <span class="token string-literal"><span class="token string">"db"</span></span></span>
<span class="line">        address_mode <span class="token operator">=</span> <span class="token string-literal"><span class="token string">"host"</span></span></span>
<span class="line">        provider     <span class="token operator">=</span> <span class="token string-literal"><span class="token string">"nomad"</span></span></span>
<span class="line">      <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre></div><h3>부하 테스트용 job 배포</h3>
<div class="language-ruby" data-highlighter="prismjs" data-ext="rb" data-title="rb"><pre class="language-ruby"><code><span class="line">job <span class="token string-literal"><span class="token string">"das-load-test"</span></span> <span class="token punctuation">{</span></span>
<span class="line">  datacenters <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string-literal"><span class="token string">"dc1"</span></span><span class="token punctuation">]</span></span>
<span class="line">  type        <span class="token operator">=</span> <span class="token string-literal"><span class="token string">"batch"</span></span></span>
<span class="line"></span>
<span class="line">  parameterized <span class="token punctuation">{</span></span>
<span class="line">    payload       <span class="token operator">=</span> <span class="token string-literal"><span class="token string">"optional"</span></span></span>
<span class="line">    meta_optional <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string-literal"><span class="token string">"requests"</span></span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">"clients"</span></span><span class="token punctuation">]</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">  group <span class="token string-literal"><span class="token string">"redis-benchmark"</span></span> <span class="token punctuation">{</span></span>
<span class="line">    task <span class="token string-literal"><span class="token string">"redis-benchmark"</span></span> <span class="token punctuation">{</span></span>
<span class="line">      driver <span class="token operator">=</span> <span class="token string-literal"><span class="token string">"docker"</span></span></span>
<span class="line"></span>
<span class="line">      config <span class="token punctuation">{</span></span>
<span class="line">        image   <span class="token operator">=</span> <span class="token string-literal"><span class="token string">"redis:6.0"</span></span></span>
<span class="line">        command <span class="token operator">=</span> <span class="token string-literal"><span class="token string">"redis-benchmark"</span></span></span>
<span class="line"></span>
<span class="line">        args <span class="token operator">=</span> <span class="token punctuation">[</span></span>
<span class="line">          <span class="token string-literal"><span class="token string">"-h"</span></span><span class="token punctuation">,</span></span>
<span class="line">          <span class="token string-literal"><span class="token string">"${HOST}"</span></span><span class="token punctuation">,</span></span>
<span class="line">          <span class="token string-literal"><span class="token string">"-p"</span></span><span class="token punctuation">,</span></span>
<span class="line">          <span class="token string-literal"><span class="token string">"${PORT}"</span></span><span class="token punctuation">,</span></span>
<span class="line">          <span class="token string-literal"><span class="token string">"-n"</span></span><span class="token punctuation">,</span></span>
<span class="line">          <span class="token string-literal"><span class="token string">"${REQUESTS}"</span></span><span class="token punctuation">,</span></span>
<span class="line">          <span class="token string-literal"><span class="token string">"-c"</span></span><span class="token punctuation">,</span></span>
<span class="line">          <span class="token string-literal"><span class="token string">"${CLIENTS}"</span></span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token punctuation">]</span></span>
<span class="line">      <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">      template <span class="token punctuation">{</span></span>
<span class="line">        destination <span class="token operator">=</span> <span class="token string-literal"><span class="token string">"secrets/env.txt"</span></span></span>
<span class="line">        env         <span class="token operator">=</span> <span class="token boolean">true</span></span>
<span class="line"></span>
<span class="line">        data <span class="token operator">=</span> <span class="token string-literal heredoc-string"><span class="token delimiter"><span class="token punctuation">&lt;&lt;</span><span class="token symbol">EOF</span></span><span class="token string"></span>
<span class="line">{{ with nomadService "redis-lb" }}{{ with index . 0 -}}</span>
<span class="line">HOST={{.Address}}</span>
<span class="line">PORT={{.Port}}</span>
<span class="line">{{- end }}{{ end }}</span>
<span class="line">REQUESTS={{ or (env "NOMAD_META_requests") "100000" }}</span>
<span class="line">CLIENTS={{  or (env "NOMAD_META_clients") "50" }}</span>
<span class="line"></span><span class="token delimiter"><span class="token symbol">EOF</span></span></span></span>
<span class="line">      <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">      resources <span class="token punctuation">{</span></span>
<span class="line">        cpu    <span class="token operator">=</span> <span class="token number">100</span></span>
<span class="line">        memory <span class="token operator">=</span> <span class="token number">128</span></span>
<span class="line">      <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre></div><h3>부하테스트를 진행하고 nomad ui에서 Optimize의 Recommended의 값이 변화하였고, Accept를 눌러 줄 경우 target job의 스펙이 변화합니다.</h3>
<figure><figcaption>nomad Optimize</figcaption></figure>
]]></content:encoded>
    </item>
    <item>
      <title>Nomad CSI Sample</title>
      <link>https://docmoa.github.io/04-HashiCorp/03-Terraform/03-Sample/nomad-csi-sample.html</link>
      <guid>https://docmoa.github.io/04-HashiCorp/03-Terraform/03-Sample/nomad-csi-sample.html</guid>
      <source url="https://docmoa.github.io/rss.xml">Nomad CSI Sample</source>
      <description>Nomad CSI Sample</description>
      <pubDate>Fri, 30 Sep 2022 14:39:30 GMT</pubDate>
      <content:encoded><![CDATA[
<ul>
<li>AWS에 EFS를 Nomad CSI로 활용</li>
<li>full code는 아래 github를 참고
<ul>
<li>참고 github: <a href="https://github.com/Great-Stone/nomad-demo-with-ecs" target="_blank" rel="noopener noreferrer">https://github.com/Great-Stone/nomad-demo-with-ecs</a>
<ul>
<li>branches: ung</li>
</ul>
</li>
</ul>
</li>
</ul>
<figure><figcaption>nomad Architecture with CSI</figcaption></figure>
<h2>ec2(nomad client node)에 efs의 volume관련 권한이 필요합니다.</h2>
<ul>
<li>ec2와 efs는 같은 subnet이여야 합니다.</li>
<li>vpc에는 dns관련 권한설정이 필요합니다.</li>
</ul>
<details>
<summary>ec2 iam policy</summary>
<div markdown="1">
<div class="language-ruby" data-highlighter="prismjs" data-ext="rb" data-title="rb"><pre class="language-ruby"><code><span class="line"></span>
<span class="line">resource <span class="token string-literal"><span class="token string">"aws_vpc"</span></span> <span class="token string-literal"><span class="token string">"nomad_demo"</span></span> <span class="token punctuation">{</span></span>
<span class="line">  cidr_block <span class="token operator">=</span> var<span class="token punctuation">.</span>vpc_cidr_block</span>
<span class="line">  <span class="token comment">#dns 권한설정이 필요함</span></span>
<span class="line">  enable_dns_support   <span class="token operator">=</span> <span class="token boolean">true</span></span>
<span class="line">  enable_dns_hostnames <span class="token operator">=</span> <span class="token boolean">true</span></span>
<span class="line">  tags <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">    env <span class="token operator">=</span> <span class="token string-literal"><span class="token string">"nomad"</span></span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">resource <span class="token string-literal"><span class="token string">"aws_subnet"</span></span> <span class="token string-literal"><span class="token string">"nomad_demo"</span></span> <span class="token punctuation">{</span></span>
<span class="line">  cidr_block <span class="token operator">=</span> var<span class="token punctuation">.</span>vpc_cidr_block</span>
<span class="line">  vpc_id     <span class="token operator">=</span> aws_vpc<span class="token punctuation">.</span>nomad_demo<span class="token punctuation">.</span>id</span>
<span class="line">  <span class="token comment">#efs와 az가 같아야함</span></span>
<span class="line">  availability_zone <span class="token operator">=</span> <span class="token string-literal"><span class="token string">"ap-northeast-2a"</span></span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">############</span></span>
<span class="line"><span class="token comment"># Policy</span></span>
<span class="line"></span>
<span class="line">data <span class="token string-literal"><span class="token string">"aws_iam_policy_document"</span></span> <span class="token string-literal"><span class="token string">"instance_role"</span></span> <span class="token punctuation">{</span></span>
<span class="line">  statement <span class="token punctuation">{</span></span>
<span class="line">    effect <span class="token operator">=</span> <span class="token string-literal"><span class="token string">"Allow"</span></span></span>
<span class="line">    actions <span class="token operator">=</span> <span class="token punctuation">[</span></span>
<span class="line">      <span class="token string-literal"><span class="token string">"sts:AssumeRole"</span></span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token punctuation">]</span></span>
<span class="line"></span>
<span class="line">    principals <span class="token punctuation">{</span></span>
<span class="line">      type        <span class="token operator">=</span> <span class="token string-literal"><span class="token string">"Service"</span></span></span>
<span class="line">      identifiers <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string-literal"><span class="token string">"ec2.amazonaws.com"</span></span><span class="token punctuation">]</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">resource <span class="token string-literal"><span class="token string">"aws_iam_role"</span></span> <span class="token string-literal"><span class="token string">"instance_role"</span></span> <span class="token punctuation">{</span></span>
<span class="line">  name_prefix        <span class="token operator">=</span> <span class="token string-literal"><span class="token string">"${var.prefix}-nomad"</span></span></span>
<span class="line">  assume_role_policy <span class="token operator">=</span> data<span class="token punctuation">.</span>aws_iam_policy_document<span class="token punctuation">.</span>instance_role<span class="token punctuation">.</span>json</span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">resource <span class="token string-literal"><span class="token string">"aws_iam_role"</span></span> <span class="token string-literal"><span class="token string">"instance_role"</span></span> <span class="token punctuation">{</span></span>
<span class="line">  name_prefix        <span class="token operator">=</span> <span class="token string-literal"><span class="token string">"${var.prefix}-nomad"</span></span></span>
<span class="line">  assume_role_policy <span class="token operator">=</span> data<span class="token punctuation">.</span>aws_iam_policy_document<span class="token punctuation">.</span>instance_role<span class="token punctuation">.</span>json</span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">resource <span class="token string-literal"><span class="token string">"aws_iam_instance_profile"</span></span> <span class="token string-literal"><span class="token string">"test_profile"</span></span> <span class="token punctuation">{</span></span>
<span class="line">  name <span class="token operator">=</span> <span class="token string-literal"><span class="token string">"test_profile"</span></span></span>
<span class="line">  role <span class="token operator">=</span> aws_iam_role<span class="token punctuation">.</span>instance_role<span class="token punctuation">.</span>name</span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">resource <span class="token string-literal"><span class="token string">"aws_iam_role_policy"</span></span> <span class="token string-literal"><span class="token string">"cluster_discovery"</span></span> <span class="token punctuation">{</span></span>
<span class="line">  name   <span class="token operator">=</span> <span class="token string-literal"><span class="token string">"${var.prefix}-nomad-cluster_discovery"</span></span></span>
<span class="line">  role   <span class="token operator">=</span> aws_iam_role<span class="token punctuation">.</span>instance_role<span class="token punctuation">.</span>id</span>
<span class="line">  policy <span class="token operator">=</span> data<span class="token punctuation">.</span>aws_iam_policy_document<span class="token punctuation">.</span>cluster_discovery<span class="token punctuation">.</span>json</span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">data <span class="token string-literal"><span class="token string">"aws_iam_policy_document"</span></span> <span class="token string-literal"><span class="token string">"cluster_discovery"</span></span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token comment"># allow role with this policy to do the following: list instances, list tags, autoscale</span></span>
<span class="line">  statement <span class="token punctuation">{</span></span>
<span class="line">    effect <span class="token operator">=</span> <span class="token string-literal"><span class="token string">"Allow"</span></span></span>
<span class="line">    actions <span class="token operator">=</span> <span class="token punctuation">[</span></span>
<span class="line">      <span class="token string-literal"><span class="token string">"ec2:DescribeInstances"</span></span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token string-literal"><span class="token string">"autoscaling:CompleteLifecycleAction"</span></span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token string-literal"><span class="token string">"ec2:DescribeTags"</span></span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token string-literal"><span class="token string">"ecs:ListClusters"</span></span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token string-literal"><span class="token string">"ecs:DescribeClusters"</span></span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token string-literal"><span class="token string">"ecs:DeregisterContainerInstance"</span></span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token string-literal"><span class="token string">"ecs:ListContainerInstances"</span></span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token string-literal"><span class="token string">"ecs:RegisterContainerInstance"</span></span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token string-literal"><span class="token string">"ecs:SubmitContainerStateChange"</span></span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token string-literal"><span class="token string">"ecs:SubmitTaskStateChange"</span></span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token string-literal"><span class="token string">"ecs:DescribeContainerInstances"</span></span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token string-literal"><span class="token string">"ecs:DescribeTasks"</span></span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token string-literal"><span class="token string">"ecs:ListTasks"</span></span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token string-literal"><span class="token string">"ecs:UpdateContainerAgent"</span></span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token string-literal"><span class="token string">"ecs:StartTask"</span></span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token string-literal"><span class="token string">"ecs:StopTask"</span></span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token string-literal"><span class="token string">"ecs:RunTask"</span></span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token string-literal"><span class="token string">"elasticfilesystem:ClientMount"</span></span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token string-literal"><span class="token string">"elasticfilesystem:ClientWrite"</span></span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token string-literal"><span class="token string">"elasticfilesystem:ClientRootAccess"</span></span></span>
<span class="line">    <span class="token punctuation">]</span></span>
<span class="line">    resources <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string-literal"><span class="token string">"*"</span></span><span class="token punctuation">]</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre></div></div>
</details>
<details>
<summary>efs volume and iam policy</summary>
<div markdown="1">
<div class="language-ruby" data-highlighter="prismjs" data-ext="rb" data-title="rb"><pre class="language-ruby"><code><span class="line"></span>
<span class="line"><span class="token comment">############</span></span>
<span class="line"><span class="token comment">#EFS</span></span>
<span class="line"></span>
<span class="line">resource <span class="token string-literal"><span class="token string">"aws_iam_role_policy"</span></span> <span class="token string-literal"><span class="token string">"mount_efs_volumes"</span></span> <span class="token punctuation">{</span></span>
<span class="line">  name   <span class="token operator">=</span> <span class="token string-literal"><span class="token string">"mount-efs-volumes"</span></span></span>
<span class="line">  role   <span class="token operator">=</span> aws_iam_role<span class="token punctuation">.</span>instance_role<span class="token punctuation">.</span>id</span>
<span class="line">  policy <span class="token operator">=</span> data<span class="token punctuation">.</span>aws_iam_policy_document<span class="token punctuation">.</span>mount_efs_volumes<span class="token punctuation">.</span>json</span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">data <span class="token string-literal"><span class="token string">"aws_iam_policy_document"</span></span> <span class="token string-literal"><span class="token string">"mount_efs_volumes"</span></span> <span class="token punctuation">{</span></span>
<span class="line">  statement <span class="token punctuation">{</span></span>
<span class="line">    effect <span class="token operator">=</span> <span class="token string-literal"><span class="token string">"Allow"</span></span></span>
<span class="line"></span>
<span class="line">    actions <span class="token operator">=</span> <span class="token punctuation">[</span></span>
<span class="line">      <span class="token string-literal"><span class="token string">"ec2:DescribeInstances"</span></span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token string-literal"><span class="token string">"ec2:DescribeTags"</span></span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token string-literal"><span class="token string">"ec2:DescribeVolumes"</span></span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token string-literal"><span class="token string">"ec2:AttachVolume"</span></span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token string-literal"><span class="token string">"ec2:DetachVolume"</span></span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token punctuation">]</span></span>
<span class="line">    resources <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string-literal"><span class="token string">"*"</span></span><span class="token punctuation">]</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># csi efs volume</span></span>
<span class="line">resource <span class="token string-literal"><span class="token string">"aws_efs_file_system"</span></span> <span class="token string-literal"><span class="token string">"nomad_csi"</span></span> <span class="token punctuation">{</span></span>
<span class="line">  creation_token <span class="token operator">=</span> <span class="token string-literal"><span class="token string">"nomad-csi"</span></span></span>
<span class="line">  performance_mode <span class="token operator">=</span> <span class="token string-literal"><span class="token string">"generalPurpose"</span></span></span>
<span class="line">  throughput_mode  <span class="token operator">=</span> <span class="token string-literal"><span class="token string">"bursting"</span></span></span>
<span class="line"></span>
<span class="line">  tags <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">    Name <span class="token operator">=</span> <span class="token string-literal"><span class="token string">"nomad-csi"</span></span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line">  <span class="token comment">#az가 ec2와 동일해야함</span></span>
<span class="line">  availability_zone_name <span class="token operator">=</span> <span class="token string-literal"><span class="token string">"ap-northeast-2a"</span></span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">#ec2와 subnet이 같아야함</span></span>
<span class="line">resource <span class="token string-literal"><span class="token string">"aws_efs_mount_target"</span></span> <span class="token string-literal"><span class="token string">"nomad_efs"</span></span> <span class="token punctuation">{</span></span>
<span class="line">  file_system_id <span class="token operator">=</span> aws_efs_file_system<span class="token punctuation">.</span>nomad_csi<span class="token punctuation">.</span>id</span>
<span class="line">  subnet_id      <span class="token operator">=</span> aws_subnet<span class="token punctuation">.</span>nomad_demo<span class="token punctuation">.</span>id</span>
<span class="line">  security_groups <span class="token operator">=</span> <span class="token punctuation">[</span> aws_security_group<span class="token punctuation">.</span>efs<span class="token punctuation">.</span>id <span class="token punctuation">]</span> </span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">resource <span class="token string-literal"><span class="token string">"aws_security_group"</span></span> <span class="token string-literal"><span class="token string">"efs"</span></span> <span class="token punctuation">{</span></span>
<span class="line">  name        <span class="token operator">=</span> <span class="token string-literal"><span class="token string">"allow_efs"</span></span></span>
<span class="line">  description <span class="token operator">=</span> <span class="token string-literal"><span class="token string">"Allow EFS inbound traffic"</span></span></span>
<span class="line">  vpc_id      <span class="token operator">=</span> aws_vpc<span class="token punctuation">.</span>nomad_demo<span class="token punctuation">.</span>id</span>
<span class="line"></span>
<span class="line">  ingress <span class="token punctuation">{</span></span>
<span class="line">    description <span class="token operator">=</span> <span class="token string-literal"><span class="token string">"TLS from VPC"</span></span></span>
<span class="line">    from_port   <span class="token operator">=</span> <span class="token number">443</span></span>
<span class="line">    to_port     <span class="token operator">=</span> <span class="token number">443</span></span>
<span class="line">    protocol    <span class="token operator">=</span> <span class="token string-literal"><span class="token string">"tcp"</span></span></span>
<span class="line">    cidr_blocks <span class="token operator">=</span> <span class="token punctuation">[</span> <span class="token string-literal"><span class="token string">"0.0.0.0/0"</span></span> <span class="token punctuation">]</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">  egress <span class="token punctuation">{</span></span>
<span class="line">    from_port   <span class="token operator">=</span> <span class="token number">0</span></span>
<span class="line">    to_port     <span class="token operator">=</span> <span class="token number">0</span></span>
<span class="line">    protocol    <span class="token operator">=</span> <span class="token string-literal"><span class="token string">"-1"</span></span></span>
<span class="line">    cidr_blocks <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string-literal"><span class="token string">"0.0.0.0/0"</span></span><span class="token punctuation">]</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">  tags <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">    Name <span class="token operator">=</span> <span class="token string-literal"><span class="token string">"allow_tls"</span></span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre></div></div>
</details>
<h2>nomad csi create</h2>
<ul>
<li>nomad csi job을 배포합니다.</li>
<li>plugins을 생성합니다.</li>
</ul>
<details>
<summary>nomad csi create</summary>
<div markdown="1">
<div class="language-ruby" data-highlighter="prismjs" data-ext="rb" data-title="rb"><pre class="language-ruby"><code><span class="line"><span class="token comment">#efs csi job을 생성</span></span>
<span class="line">resource <span class="token string-literal"><span class="token string">"nomad_job"</span></span> <span class="token string-literal"><span class="token string">"nomad_csi_node_job"</span></span> <span class="token punctuation">{</span></span>
<span class="line">  jobspec <span class="token operator">=</span> file<span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"./job_file/csi-node.tpl"</span></span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">resource <span class="token string-literal"><span class="token string">"time_sleep"</span></span> <span class="token string-literal"><span class="token string">"wait_30_seconds"</span></span> <span class="token punctuation">{</span></span>
<span class="line">  depends_on <span class="token operator">=</span> <span class="token punctuation">[</span>nomad_job<span class="token punctuation">.</span>nomad_csi_node_job<span class="token punctuation">]</span></span>
<span class="line">  create_duration <span class="token operator">=</span> <span class="token string-literal"><span class="token string">"30s"</span></span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">#생성된 plugin을 기다림</span></span>
<span class="line">data <span class="token string-literal"><span class="token string">"nomad_plugin"</span></span> <span class="token string-literal"><span class="token string">"efs"</span></span> <span class="token punctuation">{</span></span>
<span class="line">  depends_on <span class="token operator">=</span> <span class="token punctuation">[</span>time_sleep<span class="token punctuation">.</span>wait_30_seconds<span class="token punctuation">]</span></span>
<span class="line">  plugin_id        <span class="token operator">=</span> <span class="token string-literal"><span class="token string">"aws-efs0"</span></span></span>
<span class="line">  wait_for_registration <span class="token operator">=</span> <span class="token boolean">true</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">#efs volume을 nomad에서 사용할 수 있게 plugins을 생성</span></span>
<span class="line">resource <span class="token string-literal"><span class="token string">"nomad_volume"</span></span> <span class="token string-literal"><span class="token string">"efs_csi_volume"</span></span> <span class="token punctuation">{</span></span>
<span class="line">  depends_on  <span class="token operator">=</span> <span class="token punctuation">[</span>data<span class="token punctuation">.</span>nomad_plugin<span class="token punctuation">.</span>efs<span class="token punctuation">]</span></span>
<span class="line">  type        <span class="token operator">=</span> <span class="token string-literal"><span class="token string">"csi"</span></span></span>
<span class="line">  plugin_id   <span class="token operator">=</span> <span class="token string-literal"><span class="token string">"aws-efs0"</span></span></span>
<span class="line">  volume_id   <span class="token operator">=</span> <span class="token string-literal"><span class="token string">"efs_csi_volume"</span></span></span>
<span class="line">  name        <span class="token operator">=</span> <span class="token string-literal"><span class="token string">"efs_csi_volume"</span></span></span>
<span class="line">  external_id <span class="token operator">=</span> data<span class="token punctuation">.</span>terraform_remote_state<span class="token punctuation">.</span>net<span class="token punctuation">.</span>outputs<span class="token punctuation">.</span>nomad_efs_name<span class="token punctuation">.</span>id</span>
<span class="line"></span>
<span class="line">  capability <span class="token punctuation">{</span></span>
<span class="line">    access_mode     <span class="token operator">=</span> <span class="token string-literal"><span class="token string">"single-node-writer"</span></span></span>
<span class="line">    attachment_mode <span class="token operator">=</span> <span class="token string-literal"><span class="token string">"file-system"</span></span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">  mount_options <span class="token punctuation">{</span></span>
<span class="line">    fs_type <span class="token operator">=</span> <span class="token string-literal"><span class="token string">"ext4"</span></span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre></div></div>
</details>
<h2>efs test job 배포</h2>
<div class="language-ruby" data-highlighter="prismjs" data-ext="rb" data-title="rb"><pre class="language-ruby"><code><span class="line">job <span class="token string-literal"><span class="token string">"efs_csi_job"</span></span> <span class="token punctuation">{</span></span>
<span class="line">  datacenters <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string-literal"><span class="token string">"dc1"</span></span><span class="token punctuation">]</span></span>
<span class="line"></span>
<span class="line">  type        <span class="token operator">=</span> <span class="token string-literal"><span class="token string">"system"</span></span></span>
<span class="line"></span>
<span class="line">  group <span class="token string-literal"><span class="token string">"cache"</span></span> <span class="token punctuation">{</span></span>
<span class="line">    count <span class="token operator">=</span> <span class="token number">1</span></span>
<span class="line"></span>
<span class="line">    network <span class="token punctuation">{</span></span>
<span class="line">      port <span class="token string-literal"><span class="token string">"db"</span></span> <span class="token punctuation">{</span></span>
<span class="line">        to <span class="token operator">=</span> <span class="token number">6379</span></span>
<span class="line">      <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token comment"># 생성한 volume id 값을 명시한 volume을 선언</span></span>
<span class="line">    volume <span class="token string-literal"><span class="token string">"cache"</span></span> <span class="token punctuation">{</span></span>
<span class="line">      type            <span class="token operator">=</span> <span class="token string-literal"><span class="token string">"csi"</span></span></span>
<span class="line">      source          <span class="token operator">=</span> <span class="token string-literal"><span class="token string">"efs_csi_volume"</span></span></span>
<span class="line">      attachment_mode <span class="token operator">=</span> <span class="token string-literal"><span class="token string">"file-system"</span></span></span>
<span class="line">      access_mode     <span class="token operator">=</span> <span class="token string-literal"><span class="token string">"single-node-writer"</span></span></span>
<span class="line">      read_only    <span class="token operator">=</span> <span class="token boolean">false</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    task <span class="token string-literal"><span class="token string">"redis"</span></span> <span class="token punctuation">{</span></span>
<span class="line">      driver <span class="token operator">=</span> <span class="token string-literal"><span class="token string">"docker"</span></span></span>
<span class="line"></span>
<span class="line">      config <span class="token punctuation">{</span></span>
<span class="line">        image <span class="token operator">=</span> <span class="token string-literal"><span class="token string">"redis:6.2.6-alpine3.15"</span></span></span>
<span class="line">        ports <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string-literal"><span class="token string">"db"</span></span><span class="token punctuation">]</span></span>
<span class="line">      <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">      resources <span class="token punctuation">{</span></span>
<span class="line">        cpu    <span class="token operator">=</span> <span class="token number">500</span></span>
<span class="line">        memory <span class="token operator">=</span> <span class="token number">511</span></span>
<span class="line">      <span class="token punctuation">}</span></span>
<span class="line">      <span class="token comment">#선언한 volume을 사용할 위치에 mount</span></span>
<span class="line">      volume_mount <span class="token punctuation">{</span></span>
<span class="line">        volume      <span class="token operator">=</span> <span class="token string-literal"><span class="token string">"cache"</span></span></span>
<span class="line">        destination <span class="token operator">=</span> <span class="token string-literal"><span class="token string">"/data"</span></span></span>
<span class="line">        read_only    <span class="token operator">=</span> <span class="token boolean">false</span></span>
<span class="line">      <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre></div>]]></content:encoded>
    </item>
    <item>
      <title>Chart</title>
      <link>https://docmoa.github.io/00-Howto/03-Tips/Chart.html</link>
      <guid>https://docmoa.github.io/00-Howto/03-Tips/Chart.html</guid>
      <source url="https://docmoa.github.io/rss.xml">Chart</source>
      <description>Chart 문서 작성시 차트를 추가하는 방법을 안내합니다. 공식 문서 차트 구성 방식은 ChartJS를 따릅니다. ::: chart 와 :::로 처리합니다. 기본 사용법 - Bar CODE 기본 사용법 - Bubble CODE</description>
      <pubDate>Sat, 24 Sep 2022 02:39:44 GMT</pubDate>
      <content:encoded><![CDATA[
<p>문서 작성시 차트를 추가하는 방법을 안내합니다.</p>
<ul>
<li><a href="https://theme-hope.vuejs.press/guide/markdown/chart.html" target="_blank" rel="noopener noreferrer">공식 문서</a></li>
</ul>
<p>차트 구성 방식은 <a href="https://www.chartjs.org/docs/latest/" target="_blank" rel="noopener noreferrer">ChartJS</a>를 따릅니다.</p>
<p><code>::: chart</code> 와 <code>:::</code>로 처리합니다.</p>
<h2>기본 사용법 - Bar</h2>
<details class="hint-container details"><summary>CODE</summary>
<div class="language-markdown" data-highlighter="prismjs" data-ext="md" data-title="md"><pre class="language-markdown"><code><span class="line">::: chart A bar chart</span>
<span class="line"></span>
<span class="line"><span class="token code"><span class="token punctuation">```</span><span class="token code-language">json</span></span>
<span class="line"><span class="token code-block language-json"><span class="token punctuation">{</span></span>
<span class="line">  <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"bar"</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token property">"data"</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token property">"labels"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"Red"</span><span class="token punctuation">,</span> <span class="token string">"Orange"</span><span class="token punctuation">,</span> <span class="token string">"Yellow"</span><span class="token punctuation">,</span> <span class="token string">"Green"</span><span class="token punctuation">,</span> <span class="token string">"Blue"</span><span class="token punctuation">,</span> <span class="token string">"Purple"</span><span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token property">"datasets"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span></span>
<span class="line">      <span class="token property">"label"</span><span class="token operator">:</span> <span class="token string">"My First Dataset"</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token property">"data"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">19</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token property">"backgroundColor"</span><span class="token operator">:</span> <span class="token punctuation">[</span></span>
<span class="line">        <span class="token string">"rgba(255, 99, 132, 0.2)"</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token string">"rgba(255, 159, 64, 0.2)"</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token string">"rgba(255, 205, 86, 0.2)"</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token string">"rgba(75, 192, 192, 0.2)"</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token string">"rgba(54, 162, 235, 0.2)"</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token string">"rgba(153, 102, 255, 0.2)"</span></span>
<span class="line">      <span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token property">"borderColor"</span><span class="token operator">:</span> <span class="token punctuation">[</span></span>
<span class="line">        <span class="token string">"rgb(255, 99, 132)"</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token string">"rgb(255, 159, 64)"</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token string">"rgb(255, 205, 86)"</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token string">"rgb(75, 192, 192)"</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token string">"rgb(54, 162, 235)"</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token string">"rgb(153, 102, 255)"</span></span>
<span class="line">      <span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token property">"borderWidth"</span><span class="token operator">:</span> <span class="token number">1</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">]</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token property">"options"</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token property">"scales"</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token property">"y"</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token property">"ticks"</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">          <span class="token property">"beginAtZero"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span></span>
<span class="line">          <span class="token property">"callback"</span><span class="token operator">:</span> <span class="token string">"function(value){ return '$' + value + 'k'; }"</span></span>
<span class="line">        <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token property">"beginAtZero"</span><span class="token operator">:</span> <span class="token boolean">true</span></span>
<span class="line">      <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span></span>
<span class="line"><span class="token punctuation">```</span></span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"></span></code></pre></div></details>
<h2>기본 사용법 - Bubble</h2>
<details class="hint-container details"><summary>CODE</summary>
<div class="language-markdown" data-highlighter="prismjs" data-ext="md" data-title="md"><pre class="language-markdown"><code><span class="line">::: chart A Bubble Chart</span>
<span class="line"></span>
<span class="line"><span class="token code"><span class="token punctuation">```</span><span class="token code-language">json</span></span>
<span class="line"><span class="token code-block language-json"><span class="token punctuation">{</span></span>
<span class="line">  <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"bubble"</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token property">"data"</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token property">"datasets"</span><span class="token operator">:</span> <span class="token punctuation">[</span></span>
<span class="line">      <span class="token punctuation">{</span></span>
<span class="line">        <span class="token property">"label"</span><span class="token operator">:</span> <span class="token string">"First Dataset"</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token property">"data"</span><span class="token operator">:</span> <span class="token punctuation">[</span></span>
<span class="line">          <span class="token punctuation">{</span> <span class="token property">"x"</span><span class="token operator">:</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token property">"y"</span><span class="token operator">:</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token property">"r"</span><span class="token operator">:</span> <span class="token number">15</span> <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">          <span class="token punctuation">{</span> <span class="token property">"x"</span><span class="token operator">:</span> <span class="token number">40</span><span class="token punctuation">,</span> <span class="token property">"y"</span><span class="token operator">:</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token property">"r"</span><span class="token operator">:</span> <span class="token number">10</span> <span class="token punctuation">}</span></span>
<span class="line">        <span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token property">"backgroundColor"</span><span class="token operator">:</span> <span class="token string">"rgb(255, 99, 132)"</span></span>
<span class="line">      <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">]</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span></span>
<span class="line"><span class="token punctuation">```</span></span></span>
<span class="line"></span>
<span class="line"></span></code></pre></div></details>
]]></content:encoded>
    </item>
    <item>
      <title>Consul vs Istio - Performance Test</title>
      <link>https://docmoa.github.io/04-HashiCorp/04-Consul/06-on_Kubernetes/performance/consul-istio.html</link>
      <guid>https://docmoa.github.io/04-HashiCorp/04-Consul/06-on_Kubernetes/performance/consul-istio.html</guid>
      <source url="https://docmoa.github.io/rss.xml">Consul vs Istio - Performance Test</source>
      <description>K8S 환경에서 Consul / Istio Performance 비교</description>
      <pubDate>Thu, 22 Sep 2022 12:33:40 GMT</pubDate>
      <content:encoded><![CDATA[
<h2>1. 성능 테스트 수행 결과 요약</h2>
<h3>Case 2-1</h3>
<ul>
<li>Consul Ingress Gateway의 resources.limits 와 resources.requests 의 cpu, memory 를 각각 250m / 500Mi 로 수정</li>
<li>Istio Default 1527 Requests/sec 대비 1860 Requests/sec 로 약 22% 빠름 (Case 2-1)</li>
</ul>
<h3>Case 2-2</h3>
<ul>
<li>Consul Ingress Gateway resource allocation을 Istio와 동률 구성 시,</li>
<li>Istio Default 1527 Requests/sec 대비 3002 Requests/sec로 약 196% 빠름 (Case 2-2)</li>
</ul>
<h3>Response Time Chart</h3>
<ul>
<li>concurrent user: 100</li>
<li>total request: 15000</li>
</ul>
<ul>
<li>상세 내용 확인 - "4.성능 테스트 수행"</li>
</ul>
<p>| Case                 | Resources: CPU | Resources: Memory | Limits: CPU | Limits: Memory | Performance     |<br>
| :</p>
]]></content:encoded>
    </item>
    <item>
      <title>2022년 9월</title>
      <link>https://docmoa.github.io/04-HashiCorp/08-Updates/99-2022/2022-09.html</link>
      <guid>https://docmoa.github.io/04-HashiCorp/08-Updates/99-2022/2022-09.html</guid>
      <source url="https://docmoa.github.io/rss.xml">2022년 9월</source>
      <description>2022년 9월 Update</description>
      <pubDate>Sat, 03 Sep 2022 11:06:04 GMT</pubDate>
      <content:encoded><![CDATA[
<h2>Product 소개</h2>
<ul>
<li>
<p>CDKTF (Cloud Development Kit for Terraform) General Available</p>
<ul>
<li><a href="https://www.hashicorp.com/blog/cdk-for-terraform-now-generally-available" target="_blank" rel="noopener noreferrer">Hashicorp Blog</a></li>
<li>Python, Go 등 프로그래밍 언어 기반으로 Terraform 을 활용하실 수 있도록 지원하는 CDKTF 가 정식 출시 되었습니다. CDKTF를 사용하면 개발자는 익숙한 프로그래밍 언어에서 컨텍스트 전환 없이 코드로 인프라를 설정할 수 있으며, 애플리케이션 비즈니스 로직을 정의하는 데 사용하는 인프라 리소스를 프로비저닝하기 위해 동일한 도구와 구문을 사용할 수 있습니다. 팀은 익숙한 구문으로 협업하면서 Terraform 에코시스템의 기능을 계속 활용하고 확립된 Terraform 배포 파이프라인을 통해 인프라 구성을 배포할 수 있습니다.</li>
<li>참고문서 1: <a href="https://github.com/hashicorp/terraform-cdk/blob/main/CHANGELOG.md#0120" target="_blank" rel="noopener noreferrer">CDK for Terraform v0.12: CHANGELOG</a></li>
<li>참고문서 2: <a href="https://www.terraform.io/cdktf?_gl=1*1sc3uq2*_ga*MjA4NTc1MTMyNy4xNjM4OTUwNzQ3*_ga_P7S46ZYEKW*MTY2MTMxOTcxNS4xMzQuMS4xNjYxMzIxMjUxLjAuMC4w" target="_blank" rel="noopener noreferrer">CDKTF Overview</a></li>
<li>참고문서 3: <a href="https://learn.hashicorp.com/collections/terraform/cdktf?_gl=1*1wv13qn*_ga*MjA4NTc1MTMyNy4xNjM4OTUwNzQ3*_ga_P7S46ZYEKW*MTY2MTMxOTcxNS4xMzQuMS4xNjYxMzIxMTcxLjAuMC4w" target="_blank" rel="noopener noreferrer">CDKTF Tutorials</a></li>
</ul>
</li>
</ul>
<h2>Product Update</h2>
<ul>
<li>
<p>Terraform</p>
<ul>
<li>
<p>CLI</p>
<ul>
<li>
<p><a href="https://github.com/hashicorp/terraform/releases/tag/v1.2.8" target="_blank" rel="noopener noreferrer">1.28 Release</a></p>
<ul>
<li>tolist, tomap, toset 등 type 변환 작업 시 변환 대상 type 유추로 인한 panic 이 발생하는 오류 개선</li>
</ul>
</li>
<li>
<p><a href="https://www.terraform.io/enterprise/releases" target="_blank" rel="noopener noreferrer">Enterprise Release</a></p>
<ul>
<li>
<p><a href="https://www.terraform.io/enterprise/releases/2022/v202208-3" target="_blank" rel="noopener noreferrer">8월 Release</a> 출시 (v202208-3)</p>
</li>
<li>
<p>필수 Upgrade Version: Release Note 에서 * 표기된 Version 은 필수로 거쳐야 하는 Version (예: v202207-2, v202204-2)</p>
</li>
<li>
<p>VCS 기반 Workspace 생성 시 정의된 variable 에 대한 type 검증 및 오류 안내 기능 추가</p>
</li>
<li>
<p>Known Issue: TFE 내부 모듈 중 하나인 Postgres - ver 10 또는 11 에 대한 Migration 실패 오류 개선 (v202208-2)</p>
</li>
<li>
<p>Run Pipeline 에 대한 Metric 정보가 Prometheus 에 표시 되지 않는 이슈 개선</p>
</li>
<li>
<p>Module Registry Protocol endpoint 인 '/v1/modules/{namespace}/{name}/{provider}/versions' 에서 version 갯수가 많은 Module 처리시 발생하는 오류 개선</p>
</li>
</ul>
</li>
</ul>
</li>
<li>
<p>Provider</p>
<ul>
<li><a href="https://github.com/hashicorp/terraform-provider-aws/releases/tag/v4.27.0" target="_blank" rel="noopener noreferrer">AWS v4.27.0 주요 수정사항</a>
<ul>
<li>networkmanager 관련 resource 추가</li>
<li>firewall data source에 대한 capacity_usage_summary, firewall_status 등 argument 추가</li>
<li>lb_target_group resource 에 대한 ip_address_type argument 추가</li>
<li>aws_db_instance resource 에 대한 특정 argument 수정 시 발생하는 'InvalidParameterCombination: No modifications were requested' 오류 개선</li>
<li>aws_opsworks resource 에 대한 region 정보 및 tag 적용 관련 오류 개선</li>
</ul>
</li>
<li><a href="https://github.com/hashicorp/terraform-provider-azurerm/releases/tag/v3.19.1" target="_blank" rel="noopener noreferrer">Azure v3.19.1 주요 수정사항</a>
<ul>
<li>azurerm_dns resource 에 대해 resource ID parsing 시 발생하는 대소문자 관련 오류 개선</li>
</ul>
</li>
<li><a href="https://github.com/hashicorp/terraform-provider-google/releases/tag/v4.33.0" target="_blank" rel="noopener noreferrer">GCP v4.33.0 주요 수정사항</a>
<ul>
<li>google_cloudfunctions2_function resource 추가</li>
<li>google_container_cluster 에 대해 authenticator_groups_config 지원</li>
<li>google_cloud_sql resource 에 대해 password_validation_policy argument 추가</li>
<li>google_dns_managed_zone data source 에 대해 managed_zone_id argument 추가</li>
<li>google_bigquery_data_transfer_config 에 대해 display_name 강제 변경 오류 개선</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li>
<p>Vault</p>
<ul>
<li><a href="https://github.com/hashicorp/vault/blob/main/CHANGELOG.md#1112" target="_blank" rel="noopener noreferrer">1.11.2 주요 수정사항</a>
<ul>
<li>Vaunt Agent 사용 시 keep_alives 비활성화 설정 지원</li>
<li>잘못된 Server Side Consistent Token 에 대해 500 이 아닌 403 에러 출력</li>
<li>UI 에서 제공 되는 JWT auth method 관련 log 정보 개선</li>
</ul>
</li>
</ul>
</li>
<li>
<p>Consul</p>
<ul>
<li><a href="https://github.com/hashicorp/consul/releases/tag/v1.13.1" target="_blank" rel="noopener noreferrer">1.13.1 주요 수정사항</a>
<ul>
<li>snapshot 관련 호환성 이슈 개선</li>
<li>grpc peering 관련 오류 개선</li>
</ul>
</li>
</ul>
</li>
<li>
<p>Nomad</p>
<ul>
<li><a href="https://github.com/hashicorp/nomad/releases/tag/v1.3.3" target="_blank" rel="noopener noreferrer">1.3.3 주요 수정사항</a>
<ul>
<li>CSI Plugin 에 대한 stage_publish_base_dir 통해 특정 stage / publishing directory mount 지원</li>
<li>qemu 에 대한 socket file 명 축약 기능 지원</li>
<li>만료된 일회성 token 의 timestamp 관련 오류 개선</li>
<li>UI 의 Evaluation tab 에서 일부 누락된 정보 출력 개선</li>
<li>task 가 사용하는 메모리가 0 으로 출력되는 오류 개선</li>
</ul>
</li>
</ul>
</li>
</ul>
]]></content:encoded>
    </item>
    <item>
      <title>Nomad UI에 Consul과 Vault 링크 추가</title>
      <link>https://docmoa.github.io/04-HashiCorp/07-Nomad/02-Config/custom-ui-link.html</link>
      <guid>https://docmoa.github.io/04-HashiCorp/07-Nomad/02-Config/custom-ui-link.html</guid>
      <source url="https://docmoa.github.io/rss.xml">Nomad UI에 Consul과 Vault 링크 추가</source>
      <description>Consul and Vault link add to Nomad UI</description>
      <pubDate>Wed, 31 Aug 2022 11:44:01 GMT</pubDate>
      <content:encoded><![CDATA[
<blockquote>
<p><a href="https://www.nomadproject.io/docs/configuration/ui" target="_blank" rel="noopener noreferrer">https://www.nomadproject.io/docs/configuration/ui</a></p>
</blockquote>
<p>Nomad ui 설정에 다음과 같이 Consul과 Vault의 링크를 추가할 수 있습니다.</p>
<div class="language-hcl" data-highlighter="prismjs" data-ext="hcl" data-title="hcl"><pre class="language-hcl"><code><span class="line"><span class="token keyword">ui</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token property">enabled</span> <span class="token punctuation">=</span>  <span class="token boolean">true</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">consul</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token property">ui_url</span> <span class="token punctuation">=</span> <span class="token string">"https://consul.example.com:8500/ui"</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">vault</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token property">ui_url</span> <span class="token punctuation">=</span> <span class="token string">"https://vault.example.com:8200/ui"</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre></div><figure><figcaption></figcaption></figure>
]]></content:encoded>
    </item>
    <item>
      <title>2022년 8월</title>
      <link>https://docmoa.github.io/04-HashiCorp/08-Updates/99-2022/2022-08.html</link>
      <guid>https://docmoa.github.io/04-HashiCorp/08-Updates/99-2022/2022-08.html</guid>
      <source url="https://docmoa.github.io/rss.xml">2022년 8월</source>
      <description>2022년 8월 Update</description>
      <pubDate>Wed, 03 Aug 2022 07:06:15 GMT</pubDate>
      <content:encoded><![CDATA[
<h2>Product 소개</h2>
<ul>
<li>
<p>Consul Service Mesh 에 대한 AWS Lambda 지원 (Public Beta)</p>
<ul>
<li><a href="https://www.hashicorp.com/blog/consul-service-mesh-support-for-aws-lambda-now-in-public-beta" target="_blank" rel="noopener noreferrer">Hashicorp Blog</a></li>
<li>Service Mesh 내 구성된 Service 가 AWS Lambda 를 호출 할 수 있도록 지원함으로써, 기존의 K8S, VM, Nomad 혹은 Amazon ECS 등의 다양한 환경과 더불어 Serverless 환경까지 통합 지원하여 Service Mesh 구성의 범위를 확장하고 Workflow 일원화가 가능합니다.</li>
<li>참고문서 1: <a href="https://www.consul.io/docs/lambda/registration" target="_blank" rel="noopener noreferrer">Register Lambda Functions</a></li>
<li>참고문서 2: <a href="https://www.consul.io/docs/lambda/invocation" target="_blank" rel="noopener noreferrer">Invoke Lambda Fuctions</a></li>
<li>참고문서 3: <a href="https://registry.terraform.io/modules/hashicorp/consul-lambda-registrator/aws/0.1.0-alpha2" target="_blank" rel="noopener noreferrer">Terraform Registry: consul-lambda-registrator</a></li>
</ul>
</li>
</ul>
<h2>Product Update</h2>
<ul>
<li>Terraform
<ul>
<li>CLI
<ul>
<li><a href="https://github.com/hashicorp/terraform/releases/tag/v1.2.5" target="_blank" rel="noopener noreferrer">1.25 Release</a>
<ul>
<li>Minor Bug Fix</li>
</ul>
</li>
<li><a href="https://www.terraform.io/enterprise/releases" target="_blank" rel="noopener noreferrer">Enterprise Release</a>
<ul>
<li><a href="https://www.terraform.io/enterprise/releases/2022/v202207-2" target="_blank" rel="noopener noreferrer">7월 Release</a> 출시 (v202206-1)</li>
<li>필수 Upgrade Version: Release Note 에서 * 표기된 Version 은 필수로 거쳐야 하는 Version (예: v202204-2)</li>
<li>Default 값 없는 변수 표시: VCS 연동 시 Default 값 없는 변수 표시 및 Default 값 설정 지</li>
<li>Workspace 최대개수 제한: ORG 당 생성 가능한 최대 Workspace 수 설정</li>
<li>exclude-tags 추가: Workspace 조회 시 특정 tag 가 붙은 Workspace 제외</li>
<li>API Rate Limit Logic 변경: 기존 IP 주소 기반 -&gt; Token 유형 기반</li>
</ul>
</li>
</ul>
</li>
<li>Provider
<ul>
<li><a href="https://github.com/hashicorp/terraform-provider-aws/releases/tag/v4.23.0" target="_blank" rel="noopener noreferrer">AWS v4.23.0 주요 수정사항</a>
<ul>
<li>신규 Datasource 추가: Firewall, S3 Public Access</li>
<li>aws_connect_ 관련 오류 수정</li>
<li>aws_iam_role 관련 오류 수정</li>
<li>aws_rds_cluster 관련 오류 수정</li>
</ul>
</li>
<li><a href="https://github.com/hashicorp/terraform-provider-azurerm/releases/tag/v3.15.0" target="_blank" rel="noopener noreferrer">Azure v3.15.0 주요 수정사항</a>
<ul>
<li>azure_cdn resource 및 datasource 추가</li>
<li>azure_route_server 및 bgp_connection resource 추가</li>
</ul>
</li>
<li><a href="https://github.com/hashicorp/terraform-provider-google/releases/tag/v4.29.0" target="_blank" rel="noopener noreferrer">GCP v4.29.0 주요 수정사항</a>
<ul>
<li>google_compute_snapshot 에 대한 iam 권한 설정 resource 추가</li>
<li>google_artifact_registry_repository 관련 resource 추가</li>
<li>google_sql_database_instance 에 대한 encryption_key_name 설정 추가</li>
<li>BigQuery 에 대한 user_by_email 및 group_by_email 에 대한 대소문자 구분 오류 수정</li>
<li>Compute 에 대한 ipv6 output 생성 오류 수정</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li>Vault
<ul>
<li><a href="https://github.com/hashicorp/vault/blob/main/CHANGELOG.md#1111" target="_blank" rel="noopener noreferrer">1.11.1 주요 수정사항</a>
<ul>
<li>Log Verbosity API 추가: Log 출력 level 변경 지원하는 API</li>
</ul>
</li>
</ul>
</li>
<li>Consul
<ul>
<li><a href="https://github.com/hashicorp/consul/releases/tag/v1.12.3" target="_blank" rel="noopener noreferrer">1.12.3 주요 수정사항</a>
<ul>
<li>Envoy Proxy 의 최신 보안 Patch 에 대한 지원</li>
<li>HTTP Handler의 URL Decoding 오류 개선</li>
<li>GRPC 통신 관련 Memory Leak 오류 개선</li>
<li>GRPC 혹은 HTTP2 에 대한 Ingress Gateway 구성 시 발생하는 오류 개선</li>
</ul>
</li>
</ul>
</li>
<li>Nomad
<ul>
<li><a href="https://github.com/hashicorp/nomad/releases/tag/v1.3.2" target="_blank" rel="noopener noreferrer">1.3.2 주요 수정사항</a>
<ul>
<li>API 호출 시 Authorization Bearer Header 지원</li>
<li>Template Configuration 에 대한 Fault Tolerance 강화</li>
<li>예기치 못한 ACL Permission 거부 오류에 대한 수정</li>
</ul>
</li>
</ul>
</li>
</ul>
]]></content:encoded>
    </item>
    <item>
      <title>Nomad on Windows</title>
      <link>https://docmoa.github.io/04-HashiCorp/07-Nomad/02-Config/nomad-on-windows.html</link>
      <guid>https://docmoa.github.io/04-HashiCorp/07-Nomad/02-Config/nomad-on-windows.html</guid>
      <source url="https://docmoa.github.io/rss.xml">Nomad on Windows</source>
      <description>Windows에서의 Nomad 구성 예제</description>
      <pubDate>Wed, 27 Jul 2022 14:38:38 GMT</pubDate>
      <content:encoded><![CDATA[
<p>Nomad를 Windows환경에 구성하고 실행을위해 서비스로 등록하는 방법을 알아봅니다. 솔루션 실행 환경 또는 운영/개발자의 익숙함 정도에 따라 다양한 OS를 선택하여 애플리케이션을 배포하게 됩니다. Nomad를 통해 배포를 위한 오케스트레이터를 Windows 환경에 적용하고 서비스에 등록하여 상시적으로 실행될 수 있도록하는 구성을 안내합니다.</p>
<h2>Port 구성</h2>
<blockquote>
<p>참고 url : <a href="https://www.nomadproject.io/docs/install/production/requirements#ports-used" target="_blank" rel="noopener noreferrer">Port used</a></p>
</blockquote>
<p>Nomad는 서버와 클라이언트 모드로 나뉩니다. 서버를 위해서는 3 개의 포트가 필요하고 클라이언트에서는 2 개의 포트가 필요합니다. 클라이언트에 배포되는 애플리케이션에서 사용하는 포트를 동적으로 할당하는 영역을 구성합니다.</p>
<p>| 종류     | 기본값     | 프로토콜 | 설명                                                         |<br>
|</p>
]]></content:encoded>
      <enclosure url="https://raw.githubusercontent.com/Great-Stone/images/master/uPic/image-20210418110743732.png" type="image/png"/>
    </item>
  </channel>
</rss>